/* AUTO-GENERATED FILE. DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found. It
 * should not be modified by hand.
 */


package android;


/** @apiSince 1 */

@SuppressWarnings({"unchecked", "deprecation", "all"})
public final class R {

public R() { throw new RuntimeException("Stub!"); }
/** @apiSince 1 */

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class anim {

public anim() { throw new RuntimeException("Stub!"); }

/** @apiSince 1 */

public static final int accelerate_decelerate_interpolator = 17432580; // 0x10a0004

/**
 * Acceleration curve matching Flash's quadratic ease out function.
 * @apiSince 1
 */

public static final int accelerate_interpolator = 17432581; // 0x10a0005

/** @apiSince 4 */

public static final int anticipate_interpolator = 17432583; // 0x10a0007

/** @apiSince 4 */

public static final int anticipate_overshoot_interpolator = 17432585; // 0x10a0009

/** @apiSince 4 */

public static final int bounce_interpolator = 17432586; // 0x10a000a

/** @apiSince 8 */

public static final int cycle_interpolator = 17432588; // 0x10a000c

/**
 * Acceleration curve matching Flash's quadratic ease in function.
 * @apiSince 1
 */

public static final int decelerate_interpolator = 17432582; // 0x10a0006

/** @apiSince 1 */

public static final int fade_in = 17432576; // 0x10a0000

/** @apiSince 1 */

public static final int fade_out = 17432577; // 0x10a0001

/** @apiSince 4 */

public static final int linear_interpolator = 17432587; // 0x10a000b

/** @apiSince 4 */

public static final int overshoot_interpolator = 17432584; // 0x10a0008

/** @apiSince 1 */

public static final int slide_in_left = 17432578; // 0x10a0002

/** @apiSince 1 */

public static final int slide_out_right = 17432579; // 0x10a0003
}

/** @apiSince 11 */

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class animator {

public animator() { throw new RuntimeException("Stub!"); }

/**
 * A simple fade-in animation.
 * @apiSince 11
 */

public static final int fade_in = 17498112; // 0x10b0000

/**
 * A simple fade-out animation.
 * @apiSince 11
 */

public static final int fade_out = 17498113; // 0x10b0001
}

/** @apiSince 1 */

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class array {

public array() { throw new RuntimeException("Stub!"); }

/**
 * Email address types from android.provider.Contacts. This could be used when adding a new e-mail address for a contact, for example.
 * @apiSince 1
 */

public static final int emailAddressTypes = 17235968; // 0x1070000

/**
 * Instant Message protocols/providers from android.provider.Contacts
 * @apiSince 1
 */

public static final int imProtocols = 17235969; // 0x1070001

/**
 * Organization types from android.provider.Contacts. This could be used when adding a new organization for a contact, for example.
 * @apiSince 1
 */

public static final int organizationTypes = 17235970; // 0x1070002

/**
 * Phone number types from android.provider.Contacts. This could be used when adding a new phone number for a contact, for example.
 * @apiSince 1
 */

public static final int phoneTypes = 17235971; // 0x1070003

/**
 * Postal address types from android.provider.Contacts. This could be used when adding a new address for a contact, for example.
 * @apiSince 1
 */

public static final int postalAddressTypes = 17235972; // 0x1070004
}

/** @apiSince 1 */

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class attr {

public attr() { throw new RuntimeException("Stub!"); }

/**
 * Default AbsListView style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int absListViewStyle = 16842858; // 0x101006a

/**
 * The event types this service would like to receive as specified in
 * {@link android.view.accessibility.AccessibilityEvent}. This setting
 * can be changed at runtime by calling
 * {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
 * android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>typeAllMask</td><td>ffffffff</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPES_ALL_MASK} i.e. all events.</td></tr>
 * <tr><td>typeAnnouncement</td><td>4000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_ANNOUNCEMENT} events.</td></tr>
 * <tr><td>typeAssistReadingContext</td><td>1000000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_ASSIST_READING_CONTEXT} events.</td></tr>
 * <tr><td>typeContextClicked</td><td>800000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_CONTEXT_CLICKED} events.</td></tr>
 * <tr><td>typeGestureDetectionEnd</td><td>80000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_GESTURE_DETECTION_END} events.</td></tr>
 * <tr><td>typeGestureDetectionStart</td><td>40000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_GESTURE_DETECTION_START} events.</td></tr>
 * <tr><td>typeNotificationStateChanged</td><td>40</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_NOTIFICATION_STATE_CHANGED} events.</td></tr>
 * <tr><td>typeTouchExplorationGestureEnd</td><td>400</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_TOUCH_EXPLORATION_GESTURE_END} events.</td></tr>
 * <tr><td>typeTouchExplorationGestureStart</td><td>200</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_TOUCH_EXPLORATION_GESTURE_START} events.</td></tr>
 * <tr><td>typeTouchInteractionEnd</td><td>200000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_TOUCH_INTERACTION_END} events.</td></tr>
 * <tr><td>typeTouchInteractionStart</td><td>100000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_TOUCH_INTERACTION_START} events.</td></tr>
 * <tr><td>typeViewAccessibilityFocusCleared</td><td>10000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED} events.</td></tr>
 * <tr><td>typeViewAccessibilityFocused</td><td>8000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_ACCESSIBILITY_FOCUSED} events.</td></tr>
 * <tr><td>typeViewClicked</td><td>1</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_CLICKED} events.</td></tr>
 * <tr><td>typeViewFocused</td><td>8</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_FOCUSED} events.</td></tr>
 * <tr><td>typeViewHoverEnter</td><td>80</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_HOVER_ENTER} events.</td></tr>
 * <tr><td>typeViewHoverExit</td><td>100</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_HOVER_EXIT} events.</td></tr>
 * <tr><td>typeViewLongClicked</td><td>2</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_LONG_CLICKED} events.</td></tr>
 * <tr><td>typeViewScrolled</td><td>1000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_SCROLLED} events.</td></tr>
 * <tr><td>typeViewSelected</td><td>4</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_SELECTED} events.</td></tr>
 * <tr><td>typeViewTextChanged</td><td>10</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_TEXT_CHANGED} events.</td></tr>
 * <tr><td>typeViewTextSelectionChanged</td><td>2000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_TEXT_SELECTION_CHANGED} events.</td></tr>
 * <tr><td>typeViewTextTraversedAtMovementGranularity</td><td>20000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY} events.</td></tr>
 * <tr><td>typeWindowContentChanged</td><td>800</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_WINDOW_CONTENT_CHANGED} events.</td></tr>
 * <tr><td>typeWindowStateChanged</td><td>20</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_WINDOW_STATE_CHANGED} events.</td></tr>
 * <tr><td>typeWindowsChanged</td><td>400000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_WINDOWS_CHANGED} events.</td></tr>
 * </table>
 * @apiSince 14
 */

public static final int accessibilityEventTypes = 16843648; // 0x1010380

/**
 * The feedback types this service provides as specified in
 * {@link android.accessibilityservice.AccessibilityServiceInfo}. This setting
 * can be changed at runtime by calling
 * {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
 * android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>feedbackAllMask</td><td>ffffffff</td><td>Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_ALL_MASK} feedback.</td></tr>
 * <tr><td>feedbackAudible</td><td>4</td><td>Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_AUDIBLE} feedback.</td></tr>
 * <tr><td>feedbackGeneric</td><td>10</td><td>Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_GENERIC} feedback.</td></tr>
 * <tr><td>feedbackHaptic</td><td>2</td><td>Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_HAPTIC} feedback.</td></tr>
 * <tr><td>feedbackSpoken</td><td>1</td><td>Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_SPOKEN} feedback.</td></tr>
 * <tr><td>feedbackVisual</td><td>8</td><td>Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_VISUAL} feedback.</td></tr>
 * </table>
 * @apiSince 14
 */

public static final int accessibilityFeedbackType = 16843650; // 0x1010382

/**
 * Additional flags as specified in
 * {@link android.accessibilityservice.AccessibilityServiceInfo}.
 * This setting can be changed at runtime by calling
 * {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
 * android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>flagDefault</td><td>1</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#DEFAULT}.</td></tr>
 * <tr><td>flagEnableAccessibilityVolume</td><td>80</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_ENABLE_ACCESSIBILITY_VOLUME}.</td></tr>
 * <tr><td>flagIncludeNotImportantViews</td><td>2</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_INCLUDE_NOT_IMPORTANT_VIEWS}.</td></tr>
 * <tr><td>flagReportViewIds</td><td>10</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REPORT_VIEW_IDS}.</td></tr>
 * <tr><td>flagRequestAccessibilityButton</td><td>100</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_ACCESSIBILITY_BUTTON}.</td></tr>
 * <tr><td>flagRequestEnhancedWebAccessibility</td><td>8</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_ENHANCED_WEB_ACCESSIBILITY}.
 * Not used by the framework.</td></tr>
 * <tr><td>flagRequestFilterKeyEvents</td><td>20</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_FILTER_KEY_EVENTS}.</td></tr>
 * <tr><td>flagRequestFingerprintGestures</td><td>200</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_FINGERPRINT_GESTURES}.</td></tr>
 * <tr><td>flagRequestShortcutWarningDialogSpokenFeedback</td><td>400</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_SHORTCUT_WARNING_DIALOG_SPOKEN_FEEDBACK}.</td></tr>
 * <tr><td>flagRequestTouchExplorationMode</td><td>4</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE}.</td></tr>
 * <tr><td>flagRetrieveInteractiveWindows</td><td>40</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_RETRIEVE_INTERACTIVE_WINDOWS}.</td></tr>
 * </table>
 * @apiSince 14
 */

public static final int accessibilityFlags = 16843652; // 0x1010384

/**
 * Whether or not this view is a heading for accessibility purposes.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 28
 */

public static final int accessibilityHeading = 16844160; // 0x1010580

/**
 * Indicates to accessibility services whether the user should be notified when
 * this view changes.
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>assertive</td><td>2</td><td>Accessibility services should interrupt ongoing speech to immediately
 * announce changes to this view.</td></tr>
 * <tr><td>none</td><td>0</td><td>Accessibility services should not announce changes to this view.</td></tr>
 * <tr><td>polite</td><td>1</td><td>Accessibility services should announce changes to this view.</td></tr>
 * </table>
 * @apiSince 19
 */

public static final int accessibilityLiveRegion = 16843758; // 0x10103ee

/**
 * The title this view should present to accessibility as a pane title.
 * See {@link android.view.View#setAccessibilityPaneTitle(CharSequence)}
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 28
 */

public static final int accessibilityPaneTitle = 16844156; // 0x101057c

/**
 * Sets the id of a view after which this one is visited in accessibility traversal.
 * A screen-reader must visit the content of the other view before the content of
 * this one.
 * {@see android.view.View#setAccessibilityTraversalAfter(int)}
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 22
 */

public static final int accessibilityTraversalAfter = 16843986; // 0x10104d2

/**
 * Sets the id of a view before which this one is visited in accessibility traversal.
 * A screen-reader must visit the content of this view before the content of the one
 * it precedes.
 * {@see android.view.View#setAccessibilityTraversalBefore(int)}
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 22
 */

public static final int accessibilityTraversalBefore = 16843985; // 0x10104d1

/**
 * A preferences.xml file for authenticator-specific settings.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 5
 */

public static final int accountPreferences = 16843423; // 0x101029f

/**
 * The account type this authenticator handles.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 5
 */

public static final int accountType = 16843407; // 0x101028f

/**
 * The action name to assign to the Intent, as per
 * {@link android.content.Intent#setAction Intent.setAction()}.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int action = 16842797; // 0x101002d

/**
 * Custom divider drawable to use for elements in the action bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 14
 */

public static final int actionBarDivider = 16843675; // 0x101039b

/**
 * Custom item state list drawable background for action bar items.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 14
 */

public static final int actionBarItemBackground = 16843676; // 0x101039c

/**
 * Reference to a theme that should be used to inflate popups
 * shown by widgets in the action bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int actionBarPopupTheme = 16843917; // 0x101048d

/**
 * Size of the Action Bar, including the contextual
 * bar used to present Action Modes.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>wrap_content</td><td>0</td><td></td></tr>
 * </table>
 * @apiSince 11
 */

public static final int actionBarSize = 16843499; // 0x10102eb

/**
 * Reference to a style for the split Action Bar. This style
 * controls the split component that holds the menu/action
 * buttons. actionBarStyle is still used for the primary
 * bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 14
 */

public static final int actionBarSplitStyle = 16843656; // 0x1010388

/**
 * Reference to a style for the Action Bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int actionBarStyle = 16843470; // 0x10102ce

/**
 * Reference to a style for the Action Bar Tab Bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int actionBarTabBarStyle = 16843508; // 0x10102f4

/**
 * Default style for tabs within an action bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int actionBarTabStyle = 16843507; // 0x10102f3

/**
 * Reference to a style for the Action Bar Tab text.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int actionBarTabTextStyle = 16843509; // 0x10102f5

/**
 * Reference to a theme that should be used to inflate the
 * action bar. This will be inherited by any widget inflated
 * into the action bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int actionBarTheme = 16843825; // 0x1010431

/**
 * Reference to a theme that should be used to inflate widgets
 * and layouts destined for the action bar. Most of the time
 * this will be a reference to the current theme, but when
 * the action bar has a significantly different contrast
 * profile than the rest of the activity the difference
 * can become important. If this is set to @null the current
 * theme will be used.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 14
 */

public static final int actionBarWidgetTheme = 16843671; // 0x1010397

/**
 * Default action button style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int actionButtonStyle = 16843480; // 0x10102d8

/**
 * Default ActionBar dropdown style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int actionDropDownStyle = 16843479; // 0x10102d7

/**
 * An optional layout to be used as an action view.
 * See {@link android.view.MenuItem#setActionView(android.view.View)}
 * for more info.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int actionLayout = 16843515; // 0x10102fb

/**
 * TextAppearance style that will be applied to text that
 * appears within action menu items.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int actionMenuTextAppearance = 16843616; // 0x1010360

/**
 * Color for text that appears within action menu items.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 11
 */

public static final int actionMenuTextColor = 16843617; // 0x1010361

/**
 * Background drawable to use for action mode UI.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int actionModeBackground = 16843483; // 0x10102db

/**
 * Reference to a style for the Action Mode close button.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int actionModeCloseButtonStyle = 16843511; // 0x10102f7

/**
 * Drawable to use for the close action mode button.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int actionModeCloseDrawable = 16843484; // 0x10102dc

/**
 * Drawable to use for the Copy action button in Contextual Action Bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int actionModeCopyDrawable = 16843538; // 0x1010312

/**
 * Drawable to use for the Cut action button in Contextual Action Bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int actionModeCutDrawable = 16843537; // 0x1010311

/**
 * Drawable to use for the Find action button in WebView selection action modes.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int actionModeFindDrawable = 16843898; // 0x101047a

/**
 * Drawable to use for the Paste action button in Contextual Action Bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int actionModePasteDrawable = 16843539; // 0x1010313

/**
 * Drawable to use for the Select all action button in Contextual Action Bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 14
 */

public static final int actionModeSelectAllDrawable = 16843646; // 0x101037e

/**
 * Drawable to use for the Share action button in WebView selection action modes.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int actionModeShareDrawable = 16843897; // 0x1010479

/**
 * Background drawable to use for action mode UI in the lower split bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 14
 */

public static final int actionModeSplitBackground = 16843677; // 0x101039d

/**
 * Reference to a style for the Action Mode.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 14
 */

public static final int actionModeStyle = 16843668; // 0x1010394

/**
 * Drawable to use for the Web Search action button in WebView selection action modes.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int actionModeWebSearchDrawable = 16843899; // 0x101047b

/**
 * Reference to a style for Action Bar overflow buttons.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int actionOverflowButtonStyle = 16843510; // 0x10102f6

/**
 * Reference to a style for the Action Bar menu.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int actionOverflowMenuStyle = 16843844; // 0x1010444

/**
 * The name of an optional ActionProvider class to instantiate an action view
 * and perform operations such as default action for that menu item.
 * See {@link android.view.MenuItem#setActionProvider(android.view.ActionProvider)}
 * for more info.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 14
 */

public static final int actionProviderClass = 16843657; // 0x1010389

/**
 * The name of an optional View class to instantiate and use as an
 * action view. See {@link android.view.MenuItem#setActionView(android.view.View)}
 * for more info.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 11
 */

public static final int actionViewClass = 16843516; // 0x10102fc

/**
 * Drawable used as a background for activated items.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int activatedBackgroundIndicator = 16843517; // 0x10102fd

/**
 * When closing the current activity, this is the animation that is
 * run on the next activity (which is entering the screen).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int activityCloseEnterAnimation = 16842938; // 0x10100ba

/**
 * When closing the current activity, this is the animation that is
 * run on the current activity (which is exiting the screen).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int activityCloseExitAnimation = 16842939; // 0x10100bb

/**
 * When opening a new activity, this is the animation that is
 * run on the next activity (which is entering the screen).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int activityOpenEnterAnimation = 16842936; // 0x10100b8

/**
 * When opening a new activity, this is the animation that is
 * run on the previous activity (which is exiting the screen).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int activityOpenExitAnimation = 16842937; // 0x10100b9

/**
 * Fully qualified class name of an activity that allows the user to manually
 * add printers to this print service.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 19
 */

public static final int addPrintersActivity = 16843750; // 0x10103e6

/**
 * Sets whether this ViewGroup's drawable states also include
 * its children's drawable states.  This is used, for example, to
 * make a group appear to be focused when its child EditText or button
 * is focused.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int addStatesFromChildren = 16842992; // 0x10100f0

/**
 * Set this to true if you want the ImageView to adjust its bounds
 * to preserve the aspect ratio of its drawable.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int adjustViewBounds = 16843038; // 0x101011e

/**
 * Fully qualified class name of an activity with advanced print options
 * specific to this print service.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 19
 */

public static final int advancedPrintOptionsActivity = 16843761; // 0x10103f1

/**
 * Icon drawable to use for alerts.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int alertDialogIcon = 16843605; // 0x1010355

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int alertDialogStyle = 16842845; // 0x101005d

/**
 * Theme to use for alert dialogs spawned from this theme.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int alertDialogTheme = 16843529; // 0x1010309

/**
 * Alignment constants.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>alignBounds</td><td>0</td><td>Align the bounds of the children.
 * See {@link android.widget.GridLayout#ALIGN_BOUNDS}.</td></tr>
 * <tr><td>alignMargins</td><td>1</td><td>Align the margins of the children.
 * See {@link android.widget.GridLayout#ALIGN_MARGINS}.</td></tr>
 * </table>
 * @apiSince 14
 */

public static final int alignmentMode = 16843642; // 0x101037a

/**
 * Resource representing the term "All Contacts" (for example, "All Friends" or
 * "All connections"). Optional (Default is "All Contacts").
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 11
 */

public static final int allContactsName = 16843468; // 0x10102cc

/**
 * If {@code true} the app's non sensitive audio can be captured by other apps with
 * {@link android.media.AudioPlaybackCaptureConfiguration} and a
 * {@link android.media.projection.MediaProjection}.
 * If {@code false} the audio played by the application will never be captured by non
 * system apps. It is equivalent to limiting
 * {@link android.media.AudioManager#setAllowedCapturePolicy(int)} to
 * {@link android.media.AudioAttributes#ALLOW_CAPTURE_BY_SYSTEM}.
 * <p>
 * Non sensitive audio is defined as audio whose {@code AttributeUsage} is
 * {@code USAGE_UNKNOWN}), {@code USAGE_MEDIA}) or {@code USAGE_GAME}).
 * All other usages like {@code USAGE_VOICE_COMMUNICATION} will not be captured.
 * <p>
 * The default value is:
 * - {@code true} for apps with targetSdkVersion >= 29 (Q).
 * - {@code false} for apps with targetSdkVersion < 29.
 * <p>
 * See {@link android.media.AudioPlaybackCaptureConfiguration} for more detail.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 29
 */

public static final int allowAudioPlaybackCapture = 16844289; // 0x1010601

/**
 * Whether to allow the application to participate in the backup
 * and restore infrastructure.  If this attribute is set to <code>false</code>,
 * no backup or restore of the application will ever be performed, even by a
 * full-system backup that would otherwise cause all application data to be saved
 * via adb.  The default value of this attribute is <code>true</code>.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 4
 */

public static final int allowBackup = 16843392; // 0x1010280

/**
 * Option to let applications specify that user data can/cannot be
 * cleared. This flag is turned on by default.
 * <p>Starting from API level 29 this flag only controls if the user can
 * clear app data from Settings. To control clearing the data after a
 * failed restore use allowClearUserDataOnFailedRestore flag.
 * <p><em>This attribute is usable only by applications
 * included in the system image. Third-party apps cannot use it.</em>
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int allowClearUserData = 16842757; // 0x1010005

/**
 * Indicate that the activity can be launched as the embedded child of another
 * activity. Particularly in the case where the child lives in a container
 * such as a Display owned by another activity.
 * <p>The default value of this attribute is <code>false</code>.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 20
 */

public static final int allowEmbedded = 16843765; // 0x10103f5

/**
 * Set to true to tell the SyncManager that this SyncAdapter supports
 * multiple simultaneous syncs for the same account type and authority.
 * Otherwise the SyncManager will be sure not to issue a start sync request
 * to this SyncAdapter if the SyncAdapter is already syncing another account.
 * Defaults to false.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 11
 */

public static final int allowParallelSyncs = 16843570; // 0x1010332

/**
 * Indicates whether the drawer can be opened/closed by a single tap
 * on the handle.  (If false, the user must drag or fling, or click
 * using the trackball, to open/close the drawer.)  Default is true.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 3
 */

public static final int allowSingleTap = 16843353; // 0x1010259

/**
 * Specify that an activity can be moved out of a task it is in to
 * the task it has an affinity for when appropriate.  Use with the
 * application tag (to supply a default for all activities in the
 * application), or with an activity tag (to supply a specific
 * setting for that component).
 * <p>Normally when an application is started, it is associated with
 * the task of the activity that started it and stays there for its
 * entire lifetime.  You can use the allowTaskReparenting feature to force an
 * activity to be re-parented to a different task when the task it is
 * in goes to the background.  Typically this is used to cause the
 * activities of an application to move back to the main task associated
 * with that application.  The activity is re-parented to the task
 * with the same {@link android.R.attr#taskAffinity} as it has.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int allowTaskReparenting = 16843268; // 0x1010204

/**
 * Whether undo should be allowed for editable text. Defaults to true.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 23
 */

public static final int allowUndo = 16843999; // 0x10104df

/**
 * alpha property of the view, as a value between 0 (completely transparent) and 1
 * (completely opaque).
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 11
 */

public static final int alpha = 16843551; // 0x101031f

/**
 * The alphabetic modifier key. This is the modifier when using a keyboard
 * with alphabetic keys. The values should be kept in sync with KeyEvent
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>ALT</td><td>2</td><td></td></tr>
 * <tr><td>CTRL</td><td>1000</td><td></td></tr>
 * <tr><td>FUNCTION</td><td>8</td><td></td></tr>
 * <tr><td>META</td><td>10000</td><td></td></tr>
 * <tr><td>SHIFT</td><td>1</td><td></td></tr>
 * <tr><td>SYM</td><td>4</td><td></td></tr>
 * </table>
 * @apiSince 26
 */

public static final int alphabeticModifiers = 16844110; // 0x101054e

/**
 * The alphabetic shortcut key.  This is the shortcut when using a keyboard
 * with alphabetic keys.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int alphabeticShortcut = 16843235; // 0x10101e3

/**
 * Defines whether the ViewGroup should always draw its children using their
 * drawing cache or not. The default value is true.
 * Deprecated: The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int alwaysDrawnWithCache = 16842991; // 0x10100ef

/**
 * Specify whether an acitivty's task state should always be maintained
 * by the system, or if it is allowed to reset the task to its initial
 * state in certain situations.
 * <p>Normally the system will reset a task (remove all activities from
 * the stack and reset the root activity) in certain situations when
 * the user re-selects that task from the home screen.  Typically this
 * will be done if the user hasn't visited that task for a certain
 * amount of time, such as 30 minutes.
 * <p>By setting this attribute, the user will always return to your
 * task in its last state, regardless of how they get there.  This is
 * useful, for example, in an application like the web browser where there
 * is a lot of state (such as multiple open tabs) that the application
 * would not like to lose.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int alwaysRetainTaskState = 16843267; // 0x1010203

/**
 * The background color state list for the AM/PM selectors.
 * {@deprecated Use headerBackground instead.}
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 21
 * @deprecatedSince 23
 */

@Deprecated public static final int amPmBackgroundColor = 16843941; // 0x10104a5

/**
 * The color for the AM/PM selectors.
 * {@deprecated Use headerTextColor instead.}
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 21
 * @deprecatedSince 23
 */

@Deprecated public static final int amPmTextColor = 16843940; // 0x10104a4

/**
 * Alpha value of the ambient shadow projected by elevated views, between 0 and 1.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 21
 */

public static final int ambientShadowAlpha = 16843966; // 0x10104be

/**
 * Angle of the gradient, used only with linear gradient. Must be a multiple of 45 in the
 * range [0, 315].
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 1
 */

public static final int angle = 16843168; // 0x10101a0

/**
 * Defines whether to animate the current View when the ViewAnimation
 * is first displayed.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 11
 */

public static final int animateFirstView = 16843477; // 0x10102d5

/**
 * Defines whether changes in layout (caused by adding and removing items) should
 * cause a LayoutTransition to run. When this flag is set to true, a default
 * LayoutTransition object will be set on the ViewGroup container and default
 * animations will run when these layout changes occur.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 11
 */

public static final int animateLayoutChanges = 16843506; // 0x10102f2

/**
 * Indicates whether the drawer should be opened/closed with an animation
 * when the user clicks the handle. Default is true.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 3
 */

public static final int animateOnClick = 16843356; // 0x101025c

/**
 * Animation to use on each child.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int animation = 16843213; // 0x10101cd

/**
 * Defines whether layout animations should create a drawing cache for their
 * children. Enabling the animation cache consumes more memory and requires
 * a longer initialization but provides better performance. The animation
 * cache is enabled by default.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int animationCache = 16842989; // 0x10100ed

/**
 * Sets how long a transition animation should run (in milliseconds)
 * when layout has changed.  Only relevant if animation is turned on.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 1
 */

public static final int animationDuration = 16843026; // 0x1010112

/**
 * The order in which the animations will be started.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>normal</td><td>0</td><td>Animations are started in the natural order.</td></tr>
 * <tr><td>random</td><td>2</td><td>Animations are started randomly.</td></tr>
 * <tr><td>reverse</td><td>1</td><td>Animations are started in the reverse order.</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int animationOrder = 16843214; // 0x10101ce

/**
 * @deprecated Not used by the framework.
 * Timeout between frames of animation in milliseconds.
 * {@deprecated Not used by the framework}.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 11
 * @deprecatedSince 16
 */

@Deprecated public static final int animationResolution = 16843546; // 0x101031a

/**
 * Enables or disables antialiasing. Antialiasing can be used to smooth the
 * edges of a bitmap when rotated. Default value is false.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int antialias = 16843034; // 0x101011a

/**
 * Indicates whether the application can accommodate any screen
 * density.  Older applications are assumed to not be able to,
 * new ones able to.  You can explicitly supply your abilities
 * here.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 4
 */

public static final int anyDensity = 16843372; // 0x101026c

/**
 * A drawable that can be rendered in Android's system UI for representing
 * the service.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 19
 */

public static final int apduServiceBanner = 16843757; // 0x10103ed

/**
 * Value is a string that specifies the Maps API Key to use.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int apiKey = 16843281; // 0x1010211

/**
 * Declare the category of this app. Categories are used to cluster multiple apps
 * together into meaningful groups, such as when summarizing battery, network, or
 * disk usage. Apps should only define this value when they fit well into one of
 * the specific categories.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>audio</td><td>1</td><td>Apps which primarily work with audio or music, such as music players.</td></tr>
 * <tr><td>game</td><td>0</td><td>Apps which are primarily games.</td></tr>
 * <tr><td>image</td><td>3</td><td>Apps which primarily work with images or photos, such as camera or gallery apps.</td></tr>
 * <tr><td>maps</td><td>6</td><td>Apps which are primarily maps apps, such as navigation apps.</td></tr>
 * <tr><td>news</td><td>5</td><td>Apps which are primarily news apps, such as newspapers, magazines, or sports apps.</td></tr>
 * <tr><td>productivity</td><td>7</td><td>Apps which are primarily productivity apps, such as cloud storage or workplace apps.</td></tr>
 * <tr><td>social</td><td>4</td><td>Apps which are primarily social apps, such as messaging, communication, email, or social network apps.</td></tr>
 * <tr><td>video</td><td>2</td><td>Apps which primarily work with video or movies, such as streaming video apps.</td></tr>
 * </table>
 * @apiSince 26
 */

public static final int appCategory = 16844101; // 0x1010545

/**
 * The (optional) fully-qualified name for a subclass of
 * {@link android.app.AppComponentFactory} that the system uses to instantiate
 * every other manifest defined class. Most applications
 * don't need this attribute. If it's not specified, the system
 * instantiates items without it.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 28
 */

public static final int appComponentFactory = 16844154; // 0x101057a

/**
 * Name of the author and/or source/collection of this component, for example,
 * Art Collection, Picasso.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 7
 */

public static final int author = 16843444; // 0x10102b4

/**
 * Specify the authorities under which this content provider can be
 * found.  Multiple authorities may be supplied by separating them
 * with a semicolon.  Authority names should use a Java-style naming
 * convention (such as <code>com.google.provider.MyProvider</code>)
 * in order to avoid conflicts.  Typically this name is the same
 * as the class implementation describing the provider's data structure.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int authorities = 16842776; // 0x1010018

/**
 * The view id of the AppWidget subview which should be auto-advanced.
 * by the widget's host.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int autoAdvanceViewId = 16843535; // 0x101030f

/**
 * Default AutoCompleteTextView style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int autoCompleteTextViewStyle = 16842859; // 0x101006b

/**
 * Controls whether links such as urls and email addresses are
 * automatically found and converted to clickable links.  The default
 * value is "none", disabling this feature.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>all</td><td>f</td><td>Match all patterns (equivalent to web|email|phone|map).</td></tr>
 * <tr><td>email</td><td>2</td><td>Match email addresses.</td></tr>
 * <tr><td>map</td><td>8</td><td>Match map addresses.
 * Deprecated: see {@link android.text.util.Linkify#MAP_ADDRESSES}.</td></tr>
 * <tr><td>none</td><td>0</td><td>Match no patterns (default).</td></tr>
 * <tr><td>phone</td><td>4</td><td>Match phone numbers.</td></tr>
 * <tr><td>web</td><td>1</td><td>Match Web URLs.</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int autoLink = 16842928; // 0x10100b0

/**
 * Indicates if the drawable needs to be mirrored when its layout direction is
 * RTL (right-to-left).  See
 * {@link android.graphics.drawable.Drawable#setAutoMirrored}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 19
 */

public static final int autoMirrored = 16843754; // 0x10103ea

/**
 * Tasks launched by activities with this attribute will remain in the recent tasks
 * list until the last activity in the task is completed.  When that happens the task
 * will be automatically removed from the recent tasks list.  This overrides the caller's
 * use of {@link android.content.Intent#FLAG_ACTIVITY_RETAIN_IN_RECENTS
 * Intent.FLAG_ACTIVITY_RETAIN_IN_RECENTS}
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 21
 */

public static final int autoRemoveFromRecents = 16843847; // 0x1010447

/**
 * The maximum text size constraint to be used when auto-sizing text.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 26
 */

public static final int autoSizeMaxTextSize = 16844102; // 0x1010546

/**
 * The minimum text size constraint to be used when auto-sizing text.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 26
 */

public static final int autoSizeMinTextSize = 16844088; // 0x1010538

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 * @apiSince 26
 */

public static final int autoSizePresetSizes = 16844087; // 0x1010537

/**
 * Specify the auto-size step size if <code>autoSizeTextType</code> is set to
 * <code>uniform</code>. The default is 1px. Overwrites
 * <code>autoSizePresetSizes</code> if set.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 26
 */

public static final int autoSizeStepGranularity = 16844086; // 0x1010536

/**
 * Specify the type of auto-size. Note that this feature is not supported by EditText,
 * works only for TextView.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>none</td><td>0</td><td>No auto-sizing (default).</td></tr>
 * <tr><td>uniform</td><td>1</td><td>Uniform horizontal and vertical text size scaling to fit within the
 * container.</td></tr>
 * </table>
 * @apiSince 26
 */

public static final int autoSizeTextType = 16844085; // 0x1010535

/**
 * When true, automatically start animating.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 7
 */

public static final int autoStart = 16843445; // 0x10102b5

/**
 * If set, specifies that this TextView has a textual input method
 * and automatically corrects some common spelling errors.
 * The default is "false".
 * {@deprecated Use inputType instead.}
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 * @deprecatedSince 15
 */

@Deprecated public static final int autoText = 16843114; // 0x101016a

/**
 * If provided and <code>true</code>, URLs entered in the search dialog while searching
 * within this activity would be detected and treated as URLs (show a 'go' button in the
 * keyboard and invoke the browser directly when user launches the URL instead of passing
 * the URL to the activity). If set to <code>false</code> any URLs entered are treated as
 * normal query text.
 * The default value is <code>false</code>. <i>Optional attribute.</i>.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 4
 */

public static final int autoUrlDetect = 16843404; // 0x101028c

/**
 * Specify whether an activity intent filter will need to be verified thru its set
 * of data URIs. This will only be used when the Intent's action is set to
 * {@link android.content.Intent#ACTION_VIEW Intent.ACTION_VIEW} and the Intent's category is
 * set to {@link android.content.Intent#CATEGORY_BROWSABLE Intent.CATEGORY_BROWSABLE} and the
 * intern filter data scheme is set to "http" or "https". When set to true, the intent filter
 * will need to use its data tag for getting the URIs to verify with.
 * For each URI, an HTTPS network request will be done to <code>/.well-known/statements.json</code>
 * host to verify that the web site is okay with the app intercepting the URI.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 23
 */

public static final int autoVerify = 16844014; // 0x10104ee

/**
 * Describes the content of a view so that a autofill service can fill in the appropriate
 * data. Multiple hints can be combined in a comma separated list or an array of strings
 * to mean e.g. emailAddress or postalAddress.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 26
 */

public static final int autofillHints = 16844118; // 0x1010556

/**
 * Drawable to be drawn over the view to mark it as autofilled
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 26
 */

public static final int autofilledHighlight = 16844136; // 0x1010568

/**
 * A drawable to use as the background.  This can be either a reference
 * to a full drawable resource (such as a PNG image, 9-patch,
 * XML state list description, etc), or a solid color such as "#ff000000"
 * (black).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int background = 16842964; // 0x10100d4

/**
 * Default background dim amount when a menu, dialog, or something similar pops up.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 1
 */

public static final int backgroundDimAmount = 16842802; // 0x1010032

/**
 * Control whether dimming behind the window is enabled.  The default
 * theme does not set this value, meaning it is based on whether the
 * window is floating.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 3
 */

public static final int backgroundDimEnabled = 16843295; // 0x101021f

/**
 * Specifies a background drawable for the bottom component of a split action bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 14
 */

public static final int backgroundSplit = 16843659; // 0x101038b

/**
 * Specifies a background drawable for a second stacked row of the action bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 14
 */

public static final int backgroundStacked = 16843658; // 0x101038a

/**
 * Tint to apply to the background.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 21
 */

public static final int backgroundTint = 16843883; // 0x101046b

/**
 * Blending mode used to apply the background tint.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 * @apiSince 21
 */

public static final int backgroundTintMode = 16843884; // 0x101046c

/**
 * The name of the class subclassing <code>BackupAgent</code> to manage
 * backup and restore of the application's data on external storage.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 4
 */

public static final int backupAgent = 16843391; // 0x101027f

/**
 * Indicates that full-data backup operations for this application may
 * be performed even if the application is in a foreground-equivalent
 * state.  <em>Use with caution!</em>  Setting this flag to <code>true</code>
 * can impact app behavior while the user is interacting with the device.
 * <p>If unspecified, the default value of this attribute is <code>false</code>,
 * which means that the OS will avoid backing up the application while it is
 * running in the foreground (such as a music app that is actively playing
 * music via a service in the startForeground() state).
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 24
 */

public static final int backupInForeground = 16844058; // 0x101051a

/**
 * A Drawable resource providing an extended graphical banner for its
 * associated item. Use with the application tag (to supply a default
 * banner for all application activities), or with the activity, tag to
 * supply a banner for a specific activity.
 * <p>The given banner will be used to display to the user a graphical
 * representation of an activity in the Leanback application launcher.
 * Since banners are displayed only in the Leanback launcher, they should
 * only be used with activities (and applications) that support Leanback
 * mode. These are activities that handle Intents of category
 * {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
 * Intent.CATEGORY_LEANBACK_LAUNCHER}.
 * <p>This must be a reference to a Drawable resource containing the image definition.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int banner = 16843762; // 0x10103f2

/**
 * The offset of the baseline within this view. See {see android.view.View#getBaseline}
 * for details
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 11
 */

public static final int baseline = 16843548; // 0x101031c

/**
 * If true, the image view will be baseline aligned with based on its
 * bottom edge.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int baselineAlignBottom = 16843042; // 0x1010122

/**
 * When set to false, prevents the layout from aligning its children's
 * baselines. This attribute is particularly useful when the children
 * use different values for gravity. The default value is true.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int baselineAligned = 16843046; // 0x1010126

/**
 * When a linear layout is part of another layout that is baseline
 * aligned, it can specify which of its children to baseline align to
 * (that is, which child TextView).
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 1
 */

public static final int baselineAlignedChildIndex = 16843047; // 0x1010127

/**
 * Drawable to use as the icon bitmap.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 24
 */

public static final int bitmap = 16844054; // 0x1010516

/**
 * Style for buttons without an explicit border, often used in groups.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int borderlessButtonStyle = 16843563; // 0x101032b

/**
 * Amount of bottom padding inside the gradient shape.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int bottom = 16843184; // 0x10101b0

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int bottomBright = 16842957; // 0x10100cd

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int bottomDark = 16842953; // 0x10100c9

/**
 * Radius of the bottom left corner.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int bottomLeftRadius = 16843179; // 0x10101ab

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int bottomMedium = 16842958; // 0x10100ce

/**
 * Extra offset for the handle at the bottom of the SlidingDrawer.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 3
 */

public static final int bottomOffset = 16843351; // 0x1010257

/**
 * Radius of the bottom right corner.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int bottomRightRadius = 16843180; // 0x10101ac

/**
 * The short title for the bread crumb of this item.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 11
 */

public static final int breadCrumbShortTitle = 16843524; // 0x1010304

/**
 * The title for the bread crumb of this item.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 11
 */

public static final int breadCrumbTitle = 16843523; // 0x1010303

/**
 * Break strategy (control over paragraph layout).
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>balanced</td><td>2</td><td>Line breaking strategy balances line lengths.</td></tr>
 * <tr><td>high_quality</td><td>1</td><td>Line breaking uses high-quality strategy, including hyphenation.</td></tr>
 * <tr><td>simple</td><td>0</td><td>Line breaking uses simple strategy.</td></tr>
 * </table>
 * @apiSince 23
 */

public static final int breakStrategy = 16843997; // 0x10104dd

/**
 * Determines the minimum type that getText() will return.
 * The default is "normal".
 * Note that EditText and LogTextBox always return Editable,
 * even if you specify something less powerful here.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>editable</td><td>2</td><td>Can only return Spannable and Editable.</td></tr>
 * <tr><td>normal</td><td>0</td><td>Can return any CharSequence, possibly a
 * Spanned one if the source text was Spanned.</td></tr>
 * <tr><td>spannable</td><td>1</td><td>Can only return Spannable.</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int bufferType = 16843086; // 0x101014e

/**
 * Drawable used for the button graphic (for example, checkbox and radio button).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int button = 16843015; // 0x1010107

/**
 * Style for buttons within button bars.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int buttonBarButtonStyle = 16843567; // 0x101032f

/**
 * Style for the "negative" buttons within button bars.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int buttonBarNegativeButtonStyle = 16843915; // 0x101048b

/**
 * Style for the "neutral" buttons within button bars.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int buttonBarNeutralButtonStyle = 16843914; // 0x101048a

/**
 * Style for the "positive" buttons within button bars.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int buttonBarPositiveButtonStyle = 16843913; // 0x1010489

/**
 * Style for button bars.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int buttonBarStyle = 16843566; // 0x101032e

/**
 * Corner radius of buttons.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 28
 */

public static final int buttonCornerRadius = 16844149; // 0x1010575

/**
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
 * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
 * </table>
 * @apiSince 24
 */

public static final int buttonGravity = 16844030; // 0x10104fe

/**
 * Normal Button style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int buttonStyle = 16842824; // 0x1010048

/**
 * Button style to inset into an EditText.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int buttonStyleInset = 16842826; // 0x101004a

/**
 * Small Button style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int buttonStyleSmall = 16842825; // 0x1010049

/**
 * ToggleButton style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int buttonStyleToggle = 16842827; // 0x101004b

/**
 * Tint to apply to the button graphic.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 21
 */

public static final int buttonTint = 16843887; // 0x101046f

/**
 * Blending mode used to apply the button graphic tint.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 * @apiSince 21
 */

public static final int buttonTintMode = 16843888; // 0x1010470

/**
 * Indicates that this list will always be drawn on top of solid, single-color
 * opaque background. This allows the list to optimize drawing.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int cacheColorHint = 16843009; // 0x1010101

/**
 * The text color list of the calendar.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 21
 */

public static final int calendarTextColor = 16843931; // 0x101049b

/**
 * Whether the calendar view is shown. Only valid for "spinner" mode.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 11
 */

public static final int calendarViewShown = 16843596; // 0x101034c

/**
 * The CalendarView style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int calendarViewStyle = 16843613; // 0x101035d

/**
 * Attribute whether the accessibility service wants to be able to control
 * display magnification.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 24
 */

public static final int canControlMagnification = 16844039; // 0x1010507

/**
 * Attribute whether the accessibility service wants to be able to perform gestures.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 24
 */

public static final int canPerformGestures = 16844045; // 0x101050d

/**
 * Attribute whether the TV input service can record programs. This value can be changed
 * at runtime by calling
 * {@link android.media.tv.TvInputManager#updateTvInputInfo(android.media.tv.TvInputInfo)}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 24
 */

public static final int canRecord = 16844060; // 0x101051c

/**
 * Attribute whether the accessibility service wants to be able to request enhanced
 * web accessibility enhancements.
 * {@deprecated Not used by the framework}
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 18
 * @deprecatedSince 26
 */

@Deprecated public static final int canRequestEnhancedWebAccessibility = 16843736; // 0x10103d8

/**
 * Attribute whether the accessibility service wants to be able to request to
 * filter key events.
 * <p>
 * Required to allow setting the {@link android.accessibilityservice
 * #AccessibilityServiceInfo#FLAG_REQUEST_FILTER_KEY_EVENTS} flag.
 * </p>
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 18
 */

public static final int canRequestFilterKeyEvents = 16843737; // 0x10103d9

/**
 * Attribute whether the accessibility service wants to be able to capture gestures from
 * the fingerprint sensor.
 * <p>
 * Required to allow setting the {@link android.accessibilityservice
 * #AccessibilityServiceInfo#FLAG_REQUEST_FINGERPRINT_GESTURES} flag to have any effect.
 * </p>
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 26
 */

public static final int canRequestFingerprintGestures = 16844109; // 0x101054d

/**
 * Attribute whether the accessibility service wants to be able to request touch
 * exploration mode in which touched items are spoken aloud and the UI can be
 * explored via gestures.
 * <p>
 * Required to allow setting the {@link android.accessibilityservice
 * #AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE} flag.
 * </p>
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 18
 */

public static final int canRequestTouchExplorationMode = 16843735; // 0x10103d7

/**
 * Attribute whether the accessibility service wants to be able to retrieve the
 * active window content. This setting cannot be changed at runtime.
 * <p>
 * Required to allow setting the {@link android.accessibilityservice
 * #AccessibilityServiceInfo#FLAG_RETRIEVE_INTERACTIVE_WINDOWS} flag.
 * </p>
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 14
 */

public static final int canRetrieveWindowContent = 16843653; // 0x1010385

/**
 * A styled string, specifying the style to be used for showing
 * inline candidate text when composing with an input method.  The
 * text itself will be ignored, but the style spans will be applied
 * to the candidate text as it is edited.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 3
 */

public static final int candidatesTextStyleSpans = 16843312; // 0x1010230

/**
 * Declare that this application can't participate in the normal
 * state save/restore mechanism.  Since it is not able to save and
 * restore its state on demand,
 * it can not participate in the normal activity lifecycle.  It will
 * not be killed while in the background; the user must explicitly
 * quit it.  Only one such app can be running at a time; if the user
 * tries to launch a second such app, they will be prompted
 * to quit the first before doing so.  While the
 * application is running, the user will be informed of this.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 28
 */

public static final int cantSaveState = 16844142; // 0x101056e

/**
 * If set, specifies that this TextView has a textual input method
 * and should automatically capitalize what the user types.
 * The default is "none".
 * {@deprecated Use inputType instead.}
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>characters</td><td>3</td><td>Capitalize every character.</td></tr>
 * <tr><td>none</td><td>0</td><td>Don't automatically capitalize anything.</td></tr>
 * <tr><td>sentences</td><td>1</td><td>Capitalize the first word of each sentence.</td></tr>
 * <tr><td>words</td><td>2</td><td>Capitalize the first letter of every word.</td></tr>
 * </table>
 * @apiSince 1
 * @deprecatedSince 15
 */

@Deprecated public static final int capitalize = 16843113; // 0x1010169

/**
 * Category of the resource overlay.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 19
 */

public static final int category = 16843752; // 0x10103e8

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int centerBright = 16842956; // 0x10100cc

/**
 * Optional center color. For linear gradients, use centerX or centerY to place the center
 * color.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int centerColor = 16843275; // 0x101020b

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int centerDark = 16842952; // 0x10100c8

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int centerMedium = 16842959; // 0x10100cf

/**
 * X-position of the center point of the gradient within the shape as a fraction of the
 * width. The default value is 0.5.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 * @apiSince 1
 */

public static final int centerX = 16843170; // 0x10101a2

/**
 * Y-position of the center point of the gradient within the shape as a fraction of the
 * height. The default value is 0.5.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 * @apiSince 1
 */

public static final int centerY = 16843171; // 0x10101a3

/**
 * Optional SHA-256 digest of the package signing certificate.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 26
 */

public static final int certDigest = 16844104; // 0x1010548

/**
 * Default style for CheckBoxPreference.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int checkBoxPreferenceStyle = 16842895; // 0x101008f

/**
 * Drawable used for the check mark graphic.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int checkMark = 16843016; // 0x1010108

/**
 * Tint to apply to the check mark.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 21
 */

public static final int checkMarkTint = 16843943; // 0x10104a7

/**
 * Blending mode used to apply the check mark tint.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 * @apiSince 21
 */

public static final int checkMarkTintMode = 16843944; // 0x10104a8

/**
 * Whether the item is capable of displaying a check mark.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int checkable = 16843237; // 0x10101e5

/**
 * Whether the items are capable of displaying a check mark.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>all</td><td>1</td><td>The items are all checkable.</td></tr>
 * <tr><td>none</td><td>0</td><td>The items are not checkable.</td></tr>
 * <tr><td>single</td><td>2</td><td>The items are checkable and there will only be a single checked item in
 * this group.</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int checkableBehavior = 16843232; // 0x10101e0

/**
 * Default Checkbox style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int checkboxStyle = 16842860; // 0x101006c

/**
 * Indicates the initial checked state of this button.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int checked = 16843014; // 0x1010106

/**
 * The id of the child radio button that should be checked by default
 * within this radio group.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 1
 */

public static final int checkedButton = 16843080; // 0x1010148

/**
 * Default CheckedTextView style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 17
 */

public static final int checkedTextViewStyle = 16843720; // 0x10103c8

/**
 * Drawable or color that is used as a divider for children. (It will drawn
 * below and above child items.) The height of this will be the same as
 * the height of the normal list item divider.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int childDivider = 16843025; // 0x1010111

/**
 * Indicator shown beside the child View. This can be a stateful Drawable.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int childIndicator = 16843020; // 0x101010c

/**
 * The end bound for a child's indicator.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 18
 */

public static final int childIndicatorEnd = 16843732; // 0x10103d4

/**
 * The left bound for a child's indicator.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int childIndicatorLeft = 16843023; // 0x101010f

/**
 * The right bound for a child's indicator.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int childIndicatorRight = 16843024; // 0x1010110

/**
 * The start bound for a child's indicator.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 18
 */

public static final int childIndicatorStart = 16843731; // 0x10103d3

/**
 * Defines the choice behavior for the view. By default, lists do not have
 * any choice behavior. By setting the choiceMode to singleChoice, the list
 * allows up to one item to be in a chosen state. By setting the choiceMode to
 * multipleChoice, the list allows any number of items to be chosen.
 * Finally, by setting the choiceMode to multipleChoiceModal the list allows
 * any number of items to be chosen in a special selection mode.
 * The application will supply a
 * {@link android.widget.AbsListView.MultiChoiceModeListener} using
 * {@link android.widget.AbsListView#setMultiChoiceModeListener} to control the
 * selection mode. This uses the {@link android.view.ActionMode} API.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>multipleChoice</td><td>2</td><td>The list allows multiple choices.</td></tr>
 * <tr><td>multipleChoiceModal</td><td>3</td><td>The list allows multiple choices in a custom selection mode.</td></tr>
 * <tr><td>none</td><td>0</td><td>Normal list that does not indicate choices.</td></tr>
 * <tr><td>singleChoice</td><td>1</td><td>The list allows up to one choice.</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int choiceMode = 16843051; // 0x101012b

/**
 * The classname of the classloader used to load the application's classes
 * from its APK. The APK in question can either be the 'base' APK or any
 * of the application's 'split' APKs if it's using a feature split.
 * <p>
 * The supported values for this attribute are
 * <code>dalvik.system.PathClassLoader</code> and
 * <code>dalvik.system.DelegateLastClassLoader</code>. If unspecified,
 * the default value of this attribute is <code>dalvik.system.PathClassLoader</code>.
 * If an unknown classloader is provided, a PackageParserException with cause
 * <code>PackageManager.INSTALL_PARSE_FAILED_MANIFEST_MALFORMED</code> will be
 * thrown and the app will not be installed.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 27
 */

public static final int classLoader = 16844139; // 0x101056b

/**
 * Specify whether an activity's task should be cleared when it
 * is re-launched from the home screen.  As a result, every time the
 * user starts the task, they will be brought to its root activity,
 * regardless of whether they used BACK or HOME to last leave it.
 * This flag only applies to activities that
 * are used to start the root of a new task.
 * <p>An example of the use of this flag would be for the case where
 * a user launches activity A from home, and from there goes to
 * activity B.  They now press home, and then return to activity A.
 * Normally they would see activity B, since that is what they were
 * last doing in A's task.  However, if A has set this flag to true,
 * then upon going to the background all of the tasks on top of it (B
 * in this case) are removed, so when the user next returns to A they
 * will restart at its original activity.
 * <p>When this option is used in conjunction with
 * {@link android.R.attr#allowTaskReparenting}, the allowTaskReparenting trumps the
 * clear.  That is, all activities above the root activity of the
 * task will be removed: those that have an affinity will be moved
 * to the task they are associated with, otherwise they will simply
 * be dropped as described here.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int clearTaskOnLaunch = 16842773; // 0x1010015

/**
 * Defines whether this view reacts to click events.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int clickable = 16842981; // 0x10100e5

/**
 * Defines whether a child is limited to draw inside of its bounds or not.
 * This is useful with animations that scale the size of the children to more
 * than 100% for instance. In such a case, this property should be set to false
 * to allow the children to draw outside of their bounds. The default value of
 * this property is true.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int clipChildren = 16842986; // 0x10100ea

/**
 * The orientation for the clip.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>horizontal</td><td>1</td><td>Clip the drawable horizontally.</td></tr>
 * <tr><td>vertical</td><td>2</td><td>Clip the drawable vertically.</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int clipOrientation = 16843274; // 0x101020a

/**
 * Defines whether the ViewGroup will clip its children and resize (but not clip) any
 * EdgeEffect to its padding, if padding is not zero. This property is set to true by
 * default.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int clipToPadding = 16842987; // 0x10100eb

/**
 * Close button icon.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int closeIcon = 16843905; // 0x1010481

/**
 * The unicode value or comma-separated values that this key outputs.
 * {@deprecated Copy this definition into your own application project.}
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 3
 * @deprecatedSince 29
 */

@Deprecated public static final int codes = 16843330; // 0x1010242

/**
 * The zero-based index of the columns to collapse. The column indices
 * must be separated by a comma: 1, 2, 5. Illegal and duplicate
 * indices are ignored.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int collapseColumns = 16843083; // 0x101014b

/**
 * Text to set as the content description for the collapse button.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 22
 */

public static final int collapseContentDescription = 16843984; // 0x10104d0

/**
 * Icon drawable to use for the collapse button.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 24
 */

public static final int collapseIcon = 16844031; // 0x10104ff

/**
 * Solid color for the gradient shape.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int color = 16843173; // 0x10101a5

/**
 * Bright complement to the primary branding color. By default, this is the color applied
 * to framework controls (via colorControlActivated).
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 21
 */

public static final int colorAccent = 16843829; // 0x1010435

/**
 * Default highlight color for items that are
 * activated. (Activated meaning persistent selection.)
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 14
 */

public static final int colorActivatedHighlight = 16843664; // 0x1010390

/**
 * Default color of background imagery, ex. full-screen windows.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int colorBackground = 16842801; // 0x1010031

/**
 * This is a hint for a solid color that can be used for caching
 * rendered views.  This should be the color of the background when
 * there is a solid background color; it should be null when the
 * background is a texture or translucent.  When a device is able
 * to use accelerated drawing (thus setting state_accelerated), the
 * cache hint is ignored and always assumed to be transparent.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 5
 */

public static final int colorBackgroundCacheHint = 16843435; // 0x10102ab

/**
 * Default color of background imagery for floating components, ex. dialogs, popups, and cards.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 23
 */

public static final int colorBackgroundFloating = 16844002; // 0x10104e2

/**
 * The color applied to framework buttons in their normal state.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 21
 */

public static final int colorButtonNormal = 16843819; // 0x101042b

/**
 * The color applied to framework controls in their activated (ex. checked) state.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 21
 */

public static final int colorControlActivated = 16843818; // 0x101042a

/**
 * The color applied to framework control highlights (ex. ripples, list selectors).
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 21
 */

public static final int colorControlHighlight = 16843820; // 0x101042c

/**
 * The color applied to framework controls in their normal state.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 21
 */

public static final int colorControlNormal = 16843817; // 0x1010429

/**
 * The color applied to the edge effect on scrolling containers.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 21
 */

public static final int colorEdgeEffect = 16843982; // 0x10104ce

/**
 * Color used for error states and things that need to be drawn to
 * the users attention..
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 26
 */

public static final int colorError = 16844099; // 0x1010543

/**
 * Default highlight color for items that are
 * focused. (Focused meaning cursor-based selection.)
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 14
 */

public static final int colorFocusedHighlight = 16843663; // 0x101038f

/**
 * Default color of foreground imagery.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int colorForeground = 16842800; // 0x1010030

/**
 * Default color of foreground imagery on an inverted background.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int colorForegroundInverse = 16843270; // 0x1010206

/**
 * Default highlight color for items that are long-pressed.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 14
 */

public static final int colorLongPressedHighlight = 16843662; // 0x101038e

/**
 * Specify the color mode the activity desires. The requested color mode may be ignored
 * depending on the capabilities of the display the activity is displayed on.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>default</td><td>0</td><td>The default color mode (typically sRGB, low-dynamic range).</td></tr>
 * <tr><td>hdr</td><td>2</td><td>High dynamic range color mode.</td></tr>
 * <tr><td>wideColorGamut</td><td>1</td><td>Wide color gamut color mode.</td></tr>
 * </table>
 * @apiSince 26
 */

public static final int colorMode = 16844106; // 0x101054a

/**
 * Default highlight color for items in multiple selection
 * mode.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 14
 */

public static final int colorMultiSelectHighlight = 16843665; // 0x1010391

/**
 * Default highlight color for items that are pressed.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 14
 */

public static final int colorPressedHighlight = 16843661; // 0x101038d

/**
 * The primary branding color for the app. By default, this is the color applied to the
 * action bar background.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 21
 */

public static final int colorPrimary = 16843827; // 0x1010433

/**
 * Dark variant of the primary branding color. By default, this is the color applied to
 * the status bar (via statusBarColor) and navigation bar (via navigationBarColor).
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 21
 */

public static final int colorPrimaryDark = 16843828; // 0x1010434

/**
 * The secondary branding color for the app.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 25
 */

public static final int colorSecondary = 16844080; // 0x1010530

/**
 * The maximum number of columns to create when automatically positioning children.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 14
 */

public static final int columnCount = 16843639; // 0x1010377

/**
 * Fraction of the animation duration used to delay the beginning of
 * the animation of each column.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 * @apiSince 1
 */

public static final int columnDelay = 16843215; // 0x10101cf

/**
 * When set to true, forces column boundaries to appear in the same order
 * as column indices.
 * The default is true.
 * See {@link android.widget.GridLayout#setColumnOrderPreserved(boolean)}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 14
 */

public static final int columnOrderPreserved = 16843640; // 0x1010378

/**
 * Specifies the fixed width for each column.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int columnWidth = 16843031; // 0x1010117

/**
 * Commit icon shown in the query suggestion row.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int commitIcon = 16843909; // 0x1010485

/**
 * Starting with {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2},
 * this is the new way to specify the largest screens an application is
 * compatible with.  This attribute provides the maximum
 * "smallest screen width" (as per the -swNNNdp resource configuration)
 * that the application is designed for.  If this value is smaller than
 * the "smallest screen width" of the device it is running on, the user
 * is offered to run it in a compatibility mode that emulates a
 * smaller screen and zooms it to fit the screen. Currently the compatibility mode only
 * emulates phone screens with a 320dp width, so compatibility mode is not applied if the
 * value for compatibleWidthLimitDp is larger than 320.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 13
 */

public static final int compatibleWidthLimitDp = 16843621; // 0x1010365

/**
 * Defines the hint displayed in the drop down menu.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int completionHint = 16843122; // 0x1010172

/**
 * Defines the hint view displayed in the drop down menu.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int completionHintView = 16843123; // 0x1010173

/**
 * Defines the number of characters that the user must type before
 * completion suggestions are displayed in a drop down menu.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 1
 */

public static final int completionThreshold = 16843124; // 0x1010174

/**
 * Specify one or more configuration changes that the activity will
 * handle itself.  If not specified, the activity will be restarted
 * if any of these configuration changes happen in the system.  Otherwise,
 * the activity will remain running and its
 * {@link android.app.Activity#onConfigurationChanged Activity.onConfigurationChanged}
 * method called with the new configuration.
 * <p>Note that all of these configuration changes can impact the
 * resource values seen by the application, so you will generally need
 * to re-retrieve all resources (including view layouts, drawables, etc)
 * to correctly handle any configuration change.
 * <p>These values must be kept in sync with those in
 * {@link android.content.pm.ActivityInfo} and
 * include/utils/ResourceTypes.h.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>colorMode</td><td>4000</td><td>The color mode of the screen has changed (color gamut or dynamic range).</td></tr>
 * <tr><td>density</td><td>1000</td><td>The display density has changed. This might be caused by the user
 * specifying a different display scale, or it might be caused by a
 * different display being activated.</td></tr>
 * <tr><td>fontScale</td><td>40000000</td><td>The font scaling factor has changed, that is the user has
 * selected a new global font size.</td></tr>
 * <tr><td>keyboard</td><td>10</td><td>The keyboard type has changed, for example the user has plugged
 * in an external keyboard.</td></tr>
 * <tr><td>keyboardHidden</td><td>20</td><td>The keyboard or navigation accessibility has changed, for example
 * the user has slid the keyboard out to expose it.  Note that
 * despite its name, this applied to any accessibility: keyboard
 * or navigation.</td></tr>
 * <tr><td>layoutDirection</td><td>2000</td><td>The layout direction has changed. For example going from LTR to RTL.</td></tr>
 * <tr><td>locale</td><td>4</td><td>The locale has changed, that is the user has selected a new
 * language that text should be displayed in.</td></tr>
 * <tr><td>mcc</td><td>1</td><td>The IMSI MCC has changed, that is a SIM has been detected and
 * updated the Mobile Country Code. By default from Android O, we
 * don't recreate the activity even the app doesn't specify mcc in
 * configChanges. If the app wants to recreate the activity, specify
 * mcc in recreateOnConfigChanges.</td></tr>
 * <tr><td>mnc</td><td>2</td><td>The IMSI MNC has changed, that is a SIM has been detected and
 * updated the Mobile Network Code. By default from Android O, we
 * don't recreate the activity even the app doesn't specify mnc in
 * configChanges. If the app wants to recreate the acvitity, specify
 * mnc in recreateOnConfigChanges.</td></tr>
 * <tr><td>navigation</td><td>40</td><td>The navigation type has changed.  Should never normally happen.</td></tr>
 * <tr><td>orientation</td><td>80</td><td>The screen orientation has changed, that is the user has
 * rotated the device.</td></tr>
 * <tr><td>screenLayout</td><td>100</td><td>The screen layout has changed.  This might be caused by a
 * different display being activated.</td></tr>
 * <tr><td>screenSize</td><td>400</td><td>The current available screen size has changed.  If applications don't
 * target at least {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2}
 * then the activity will always handle this itself (the change
 * will not result in a restart).  This represents a change in the
 * currently available size, so will change when the user switches
 * between landscape and portrait.</td></tr>
 * <tr><td>smallestScreenSize</td><td>800</td><td>The physical screen size has changed.  If applications don't
 * target at least {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2}
 * then the activity will always handle this itself (the change
 * will not result in a restart).  This represents a change in size
 * regardless of orientation, so will only change when the actual
 * physical screen size has changed such as switching to an external
 * display.</td></tr>
 * <tr><td>touchscreen</td><td>8</td><td>The touchscreen has changed.  Should never normally happen.</td></tr>
 * <tr><td>uiMode</td><td>200</td><td>The global user interface mode has changed.  For example,
 * going in or out of car mode, night mode changing, etc.</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int configChanges = 16842783; // 0x101001f

/**
 * A class name in the AppWidget's package to be launched to configure.
 * If not supplied, then no activity will be launched.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 3
 */

public static final int configure = 16843357; // 0x101025d

/**
 * If true, the drawable's reported internal size will remain
 * constant as the state changes; the size is the maximum of all
 * of the states.  If false, the size will vary based on the
 * current state.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int constantSize = 16843158; // 0x1010196

/**
 * Identifier for the child that represents the drawer's content.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 3
 */

public static final int content = 16843355; // 0x101025b

/**
 * The age associated with the content rating. The content of this rating is suitable for
 * people of this age or above.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 21
 */

public static final int contentAgeHint = 16843961; // 0x10104b9

/**
 * the authority of a content provider.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 5
 */

public static final int contentAuthority = 16843408; // 0x1010290

/**
 * The content description associated with the item.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 4
 */

public static final int contentDescription = 16843379; // 0x1010273

/**
 * Minimum inset for content views within a bar. Navigation buttons and
 * menu views are excepted. Only valid for some themes and configurations.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 21
 */

public static final int contentInsetEnd = 16843860; // 0x1010454

/**
 * Minimum inset for content views within a bar when actions from a menu
 * are present. Only valid for some themes and configurations.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 24
 */

public static final int contentInsetEndWithActions = 16844067; // 0x1010523

/**
 * Minimum inset for content views within a bar. Navigation buttons and
 * menu views are excepted. Only valid for some themes and configurations.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 21
 */

public static final int contentInsetLeft = 16843861; // 0x1010455

/**
 * Minimum inset for content views within a bar. Navigation buttons and
 * menu views are excepted. Only valid for some themes and configurations.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 21
 */

public static final int contentInsetRight = 16843862; // 0x1010456

/**
 * Minimum inset for content views within a bar. Navigation buttons and
 * menu views are excepted. Only valid for some themes and configurations.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 21
 */

public static final int contentInsetStart = 16843859; // 0x1010453

/**
 * Minimum inset for content views within a bar when a navigation button
 * is present, such as the Up button. Only valid for some themes and configurations.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 24
 */

public static final int contentInsetStartWithNavigation = 16844066; // 0x1010522

/**
 * Defines whether this view reacts to context click events.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 23
 */

public static final int contextClickable = 16844007; // 0x10104e7

/**
 * Title of the uri that specifies a link for further context of this wallpaper,
 * for example, Explore collection.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 25
 */

public static final int contextDescription = 16844078; // 0x101052e

/**
 * Default context menu PopupMenu style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 24
 */

public static final int contextPopupMenuStyle = 16844033; // 0x1010501

/**
 * Uri that specifies a link for further context of this wallpaper, for example,
 * http://www.picasso.org.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 25
 */

public static final int contextUri = 16844077; // 0x101052d

/**
 * The x coordinate of the first control point of the cubic Bezier.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 21
 */

public static final int controlX1 = 16843772; // 0x10103fc

/**
 * The x coordinate of the second control point of the cubic Bezier.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 21
 */

public static final int controlX2 = 16843774; // 0x10103fe

/**
 * The y coordinate of the first control point of the cubic Bezier.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 21
 */

public static final int controlY1 = 16843773; // 0x10103fd

/**
 * The y coordinate of the second control point of the cubic Bezier.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 21
 */

public static final int controlY2 = 16843775; // 0x10103ff

/**
 * Specifies whether this Chronometer counts down or counts up from the base.
 * If not specified this is false and the Chronometer counts up.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 24
 */

public static final int countDown = 16844059; // 0x101051b

/**
 * The country code associated with the content rating system, which consists of two
 * uppercase letters that conform to the ISO 3166 standard.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 21
 */

public static final int country = 16843962; // 0x10104ba

/**
 * If true, the image will be cropped to fit within its padding.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int cropToPadding = 16843043; // 0x1010123

/**
 * Makes the cursor visible (the default) or invisible.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int cursorVisible = 16843090; // 0x1010152

/**
 * Specifies a layout for custom navigation. Overrides navigationMode.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int customNavigationLayout = 16843474; // 0x10102d2

/**
 * Account handles its own token storage and permissions.
 * Default to false
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 11
 */

public static final int customTokens = 16843579; // 0x101033b

/**
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 1
 */

public static final int cycles = 16843220; // 0x10101d4

/**
 * Gap between dashes in the stroke.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int dashGap = 16843175; // 0x10101a7

/**
 * Length of a dash in the stroke.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int dashWidth = 16843174; // 0x10101a6

/**
 * The data URI to assign to the Intent, as per
 * {@link android.content.Intent#setData Intent.setData()}.
 * <p><em>Note: scheme and host name matching in the Android framework is
 * case-sensitive, unlike the formal RFC.  As a result,
 * URIs here should always be normalized to use lower case letters
 * for these elements (as well as other proper Uri normalization).</em></p>
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int data = 16842798; // 0x101002e

/**
 * The DatePicker dialog theme.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int datePickerDialogTheme = 16843948; // 0x10104ac

/**
 * Defines the look of the widget. Prior to the L release, the only choice was
 * spinner. As of L, with the Material theme selected, the default layout is calendar,
 * but this attribute can be used to force spinner to be used instead.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>calendar</td><td>2</td><td>Date picker with calendar to select the date.</td></tr>
 * <tr><td>spinner</td><td>1</td><td>Date picker with spinner controls to select the date.</td></tr>
 * </table>
 * @apiSince 21
 */

public static final int datePickerMode = 16843955; // 0x10104b3

/**
 * The DatePicker style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int datePickerStyle = 16843612; // 0x101035c

/**
 * The text appearance for the day numbers in the calendar grid.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int dateTextAppearance = 16843593; // 0x1010349

/**
 * The background color for the header's day of week.
 * {@deprecated No longer displayed.}
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 21
 * @deprecatedSince 23
 */

@Deprecated public static final int dayOfWeekBackground = 16843924; // 0x1010494

/**
 * The text color for the header's day of week.
 * {@deprecated No longer displayed.}
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 * @deprecatedSince 23
 */

@Deprecated public static final int dayOfWeekTextAppearance = 16843925; // 0x1010495

/**
 * Flag indicating whether the application can be debugged, even when
 * running on a device that is running in user mode.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int debuggable = 16842767; // 0x101000f

/**
 * Whether this View should use a default focus highlight when it gets focused but
 * doesn't have {@link android.R.attr#state_focused} defined in its background.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 26
 */

public static final int defaultFocusHighlightEnabled = 16844130; // 0x1010562

/**
 * Default height of the activity. Can be either a fixed value or fraction, in which case
 * the height will be constructed as a fraction of the total available height.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 * @apiSince 24
 */

public static final int defaultHeight = 16844021; // 0x10104f5

/**
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 24
 */

public static final int defaultToDeviceProtectedStorage = 16844036; // 0x1010504

/**
 * The default value for the preference, which will be set either if persistence
 * is off or persistence is on and the preference is not found in the persistent
 * storage.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 1
 */

public static final int defaultValue = 16843245; // 0x10101ed

/**
 * Default width of the activity. Can be either a fixed value or fraction, in which case
 * the width will be constructed as a fraction of the total available width.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 * @apiSince 24
 */

public static final int defaultWidth = 16844020; // 0x10104f4

/**
 * Fraction of the animation duration used to delay the beginning of
 * the animation of each child.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 * @apiSince 1
 */

public static final int delay = 16843212; // 0x10101cc

/**
 * The key of another Preference that this Preference will depend on.  If the other
 * Preference is not set or is off, this Preference will be disabled.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int dependency = 16843244; // 0x10101ec

/**
 * Defines the relationship between the ViewGroup and its descendants
 * when looking for a View to take focus.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>afterDescendants</td><td>1</td><td>The ViewGroup will get focus only if none of its descendants want it.</td></tr>
 * <tr><td>beforeDescendants</td><td>0</td><td>The ViewGroup will get focus before any of its descendants.</td></tr>
 * <tr><td>blocksDescendants</td><td>2</td><td>The ViewGroup will block its descendants from receiving focus.</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int descendantFocusability = 16842993; // 0x10100f1

/**
 * Descriptive text for the associated data.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int description = 16842784; // 0x1010020

/**
 * Special option for window animations: if this window is on top
 * of a wallpaper, don't animate the wallpaper with it.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 5
 */

public static final int detachWallpaper = 16843430; // 0x10102a6

/**
 * Column in data table that contains details for this data.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 5
 */

public static final int detailColumn = 16843427; // 0x10102a3

/**
 * Flag indicating that detail should be built from SocialProvider.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 5
 */

public static final int detailSocialSummary = 16843428; // 0x10102a4

/**
 * Background that can be used behind parts of a UI that provide
 * details on data the user is selecting.  For example, this is
 * the background element of PreferenceActivity's embedded
 * preference fragment.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int detailsElementBackground = 16843598; // 0x101034e

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int dial = 16843010; // 0x1010102

/**
 * Corner radius of dialogs.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 28
 */

public static final int dialogCornerRadius = 16844145; // 0x1010571

/**
 * The icon for the dialog.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int dialogIcon = 16843252; // 0x10101f4

/**
 * A layout to be used as the content View for the dialog. By default, this shouldn't
 * be needed. If a custom DialogPreference is required, this should be set. For example,
 * the EditTextPreference uses a layout with an EditText as this attribute.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int dialogLayout = 16843255; // 0x10101f7

/**
 * The message in the dialog. If a dialogLayout is provided and contains
 * a TextView with ID android:id/message, this message will be placed in there.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int dialogMessage = 16843251; // 0x10101f3

/**
 * Default style for DialogPreference.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int dialogPreferenceStyle = 16842897; // 0x1010091

/**
 * Preferred padding for dialog content.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 22
 */

public static final int dialogPreferredPadding = 16843987; // 0x10104d3

/**
 * Theme to use for dialogs spawned from this theme.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int dialogTheme = 16843528; // 0x1010308

/**
 * The title in the dialog.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int dialogTitle = 16843250; // 0x10101f2

/**
 * If set, specifies that this TextView has a numeric input method
 * and that these specific characters are the ones that it will
 * accept.
 * If this is set, numeric is implied to be true.
 * The default is false.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int digits = 16843110; // 0x1010166

/**
 * Indicate if this component is aware of direct boot lifecycle, and can be
 * safely run before the user has entered their credentials (such as a lock
 * pattern or PIN).
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 24
 */

public static final int directBootAware = 16844037; // 0x1010505

/**
 * Direction of the animation in the grid.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom_to_top</td><td>2</td><td>Animates rows from bottom to top.</td></tr>
 * <tr><td>left_to_right</td><td>0</td><td>Animates columns from left to right.</td></tr>
 * <tr><td>right_to_left</td><td>1</td><td>Animates columns from right to left.</td></tr>
 * <tr><td>top_to_bottom</td><td>0</td><td>Animates rows from top to bottom.</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int direction = 16843217; // 0x10101d1

/**
 * @deprecated Removed.
 * Reference to an array resource that be used to announce the directions with targets around the circle.
 * {@deprecated Removed.}
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 14
 * @deprecatedSince 23
 */

@Deprecated public static final int directionDescriptions = 16843681; // 0x10103a1

/**
 * Priority of the rows and columns. When the priority is none,
 * both rows and columns have the same priority. When the priority is
 * column, the animations will be applied on the columns first. The same
 * goes for rows.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>column</td><td>1</td><td>Columns are animated first.</td></tr>
 * <tr><td>none</td><td>0</td><td>Rows and columns are animated at the same time.</td></tr>
 * <tr><td>row</td><td>2</td><td>Rows are animated first.</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int directionPriority = 16843218; // 0x10101d2

/**
 * The state (true for on, or false for off) that causes dependents to be disabled. By default,
 * dependents will be disabled when this is unchecked, so the value of this preference is false.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int disableDependentsState = 16843249; // 0x10101f1

/**
 * Default disabled alpha for widgets that set enabled/disabled alpha programmatically.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 1
 */

public static final int disabledAlpha = 16842803; // 0x1010033

/**
 * Options affecting how the action bar is displayed.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>disableHome</td><td>20</td><td></td></tr>
 * <tr><td>homeAsUp</td><td>4</td><td></td></tr>
 * <tr><td>none</td><td>0</td><td></td></tr>
 * <tr><td>showCustom</td><td>10</td><td></td></tr>
 * <tr><td>showHome</td><td>2</td><td></td></tr>
 * <tr><td>showTitle</td><td>8</td><td></td></tr>
 * <tr><td>useLogo</td><td>1</td><td></td></tr>
 * </table>
 * @apiSince 11
 */

public static final int displayOptions = 16843472; // 0x10102d0

/**
 * Enables or disables dithering of the bitmap if the bitmap does not have the
 * same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
 * an RGB 565 screen).
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int dither = 16843036; // 0x101011c

/**
 * Drawable or color to draw between list items.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int divider = 16843049; // 0x1010129

/**
 * Height of the divider. Will use the intrinsic height of the divider if this
 * is not specified.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int dividerHeight = 16843050; // 0x101012a

/**
 * Drawable to use for generic horizontal dividers.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int dividerHorizontal = 16843564; // 0x101032c

/**
 * Size of padding on either end of a divider.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 11
 */

public static final int dividerPadding = 16843562; // 0x101032a

/**
 * Drawable to use for generic vertical dividers.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int dividerVertical = 16843530; // 0x101030a

/**
 * This attribute specifies that an activity shall become the root activity of a
 * new task each time it is launched. Using this attribute permits the user to
 * have multiple documents from the same applications appear in the recent tasks list.
 * <p>Such a document is any kind of item for which an application may want to
 * maintain multiple simultaneous instances. Examples might be text files, web
 * pages, spreadsheets, or emails. Each such document will be in a separate
 * task in the recent taskss list.
 * <p>This attribute is equivalent to adding the flag {@link
 * android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT} to every Intent used to launch
 * the activity.
 * <p>The documentLaunchMode attribute may be assigned one of four values, "none",
 * "intoExisting", "always" and "never", described in detail below. For values other than
 * <code>none</code> and <code>never</code> the activity must be defined with
 * {@link android.R.attr#launchMode} <code>standard</code>.
 * If this attribute is not specified, <code>none</code> will be used.
 * Note that <code>none</code> can be overridden at run time if the Intent used
 * to launch it contains the flag {@link android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT
 * Intent.FLAG_ACTIVITY_NEW_DOCUMENT}.
 * Similarly <code>intoExisting</code> will be overridden by the flag
 * {@link android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT
 * Intent.FLAG_ACTIVITY_NEW_DOCUMENT} combined with
 * {@link android.content.Intent#FLAG_ACTIVITY_MULTIPLE_TASK
 * Intent.FLAG_ACTIVITY_MULTIPLE_TASK}. If the value of
 * documentLaunchModes is <code>never</code> then any use of
 * {@link android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT
 * Intent.FLAG_ACTIVITY_NEW_DOCUMENT} to launch this activity will be ignored.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>always</td><td>2</td><td>A new task rooted at this activity will be created. This will happen whether or
 * not there is an existing task whose ComponentName and data URI match
 * that of the launcing intent This is the equivalent of launching an activity
 * with {@link
 * android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT Intent.FLAG_ACTIVITY_NEW_DOCUMENT}
 * and {@link android.content.Intent#FLAG_ACTIVITY_MULTIPLE_TASK
 * Intent.FLAG_ACTIVITY_MULTIPLE_TASK} both set.</td></tr>
 * <tr><td>intoExisting</td><td>1</td><td>All tasks will be searched for one whose base Intent's ComponentName and
 * data URI match those of the launching Intent. If such a task is found
 * that task will be cleared and restarted with the root activity receiving a call
 * to {@link android.app.Activity#onNewIntent Activity.onNewIntent}. If no
 * such task is found a new task will be created.
 * <p>This is the equivalent of launching an activity with {@link
 * android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT Intent.FLAG_ACTIVITY_NEW_DOCUMENT}
 * set and without {@link android.content.Intent#FLAG_ACTIVITY_MULTIPLE_TASK
 * Intent.FLAG_ACTIVITY_MULTIPLE_TASK} set.</td></tr>
 * <tr><td>never</td><td>3</td><td>This activity will not be launched into a new document even if the Intent contains
 * {@link android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT
 * Intent.FLAG_ACTIVITY_NEW_DOCUMENT}. This gives the activity writer ultimate
 * control over how their activity is used. Note that applications prior to api
 * 21 will default to documentLaunchMode="none" so only activities that explicitly
 * opt out with <code>"never"</code> may do so.</td></tr>
 * <tr><td>none</td><td>0</td><td>The default mode, which will create a new task only when
 * {@link android.content.Intent#FLAG_ACTIVITY_NEW_TASK
 * Intent.FLAG_ACTIVITY_NEW_TASK} is set.</td></tr>
 * </table>
 * @apiSince 21
 */

public static final int documentLaunchMode = 16843845; // 0x1010445

/**
 * When set to true, the selector will be drawn over the selected item.
 * Otherwise the selector is drawn behind the selected item. The default
 * value is false.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int drawSelectorOnTop = 16843004; // 0x10100fc

/**
 * Reference to a drawable resource to use for the frame.  If not
 * given, the drawable must be defined by the first child tag.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int drawable = 16843161; // 0x1010199

/**
 * The drawable to be drawn below the text.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int drawableBottom = 16843118; // 0x101016e

/**
 * The drawable to be drawn to the end of the text.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 14
 */

public static final int drawableEnd = 16843667; // 0x1010393

/**
 * The drawable to be drawn to the left of the text.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int drawableLeft = 16843119; // 0x101016f

/**
 * The padding between the drawables and the text.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int drawablePadding = 16843121; // 0x1010171

/**
 * The drawable to be drawn to the right of the text.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int drawableRight = 16843120; // 0x1010170

/**
 * The drawable to be drawn to the start of the text.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 14
 */

public static final int drawableStart = 16843666; // 0x1010392

/**
 * Tint to apply to the compound (left, top, etc.) drawables.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 23
 */

public static final int drawableTint = 16843990; // 0x10104d6

/**
 * Blending mode used to apply the compound (left, top, etc.) drawables tint.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 * @apiSince 23
 */

public static final int drawableTintMode = 16843991; // 0x10104d7

/**
 * The drawable to be drawn above the text.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int drawableTop = 16843117; // 0x101016d

/**
 * Defines the quality of translucent drawing caches. This property is used
 * only when the drawing cache is enabled and translucent. The default value is auto.
 * Deprecated: The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>auto</td><td>0</td><td>Lets the framework decide what quality level should be used
 * for the drawing cache.
 * Deprecated: The view drawing cache was largely made obsolete with the introduction
 * of hardware-accelerated rendering in API 11.</td></tr>
 * <tr><td>high</td><td>2</td><td>High quality. When set to high quality, the drawing cache uses a higher
 * color depth but uses more memory.
 * Deprecated: The view drawing cache was largely made obsolete with the introduction
 * of hardware-accelerated rendering in API 11.</td></tr>
 * <tr><td>low</td><td>1</td><td>Low quality. When set to low quality, the drawing cache uses a lower color
 * depth, thus losing precision in rendering gradients, but uses less memory.
 * Deprecated: The view drawing cache was largely made obsolete with the introduction
 * of hardware-accelerated rendering in API 11.</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int drawingCacheQuality = 16842984; // 0x10100e8

/**
 * View to anchor the auto-complete dropdown to. If not specified, the text view itself
 * is used.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 3
 */

public static final int dropDownAnchor = 16843363; // 0x1010263

/**
 * Specifies the basic height of the dropdown. Its value may
 * be a dimension (such as "12dip") for a constant height,
 * fill_parent or match_parent to fill the height of the
 * screen, or wrap_content to match the height of
 * the content of the drop down.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>fill_parent</td><td>ffffffff</td><td>The dropdown should fit the height of the screen.
 * This constant is deprecated starting from API Level 8 and
 * is replaced by {@code match_parent}.</td></tr>
 * <tr><td>match_parent</td><td>ffffffff</td><td>The dropdown should fit the height of the screen.
 * Introduced in API Level 8.</td></tr>
 * <tr><td>wrap_content</td><td>fffffffe</td><td>The dropdown should fit the height of the content.</td></tr>
 * </table>
 * @apiSince 4
 */

public static final int dropDownHeight = 16843395; // 0x1010283

/**
 * Default style for drop down hints.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int dropDownHintAppearance = 16842888; // 0x1010088

/**
 * Amount of pixels by which the drop down should be offset horizontally.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 5
 */

public static final int dropDownHorizontalOffset = 16843436; // 0x10102ac

/**
 * Default style for drop down items.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int dropDownItemStyle = 16842886; // 0x1010086

/**
 * Default ListView style for drop downs.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int dropDownListViewStyle = 16842861; // 0x101006d

/**
 * Selector in a drop down list.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int dropDownSelector = 16843125; // 0x1010175

/**
 * Default dropdown Spinner style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int dropDownSpinnerStyle = 16843478; // 0x10102d6

/**
 * Amount of pixels by which the drop down should be offset vertically.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 5
 */

public static final int dropDownVerticalOffset = 16843437; // 0x10102ad

/**
 * Specifies the basic width of the dropdown. Its value may
 * be a dimension (such as "12dip") for a constant width,
 * fill_parent or match_parent to match the width of the
 * screen, or wrap_content to match the width of
 * the anchored view.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>fill_parent</td><td>ffffffff</td><td>The dropdown should fill the width of the screen.
 * This constant is deprecated starting from API Level 8 and
 * is replaced by {@code match_parent}.</td></tr>
 * <tr><td>match_parent</td><td>ffffffff</td><td>The dropdown should fit the width of the screen.
 * Introduced in API Level 8.</td></tr>
 * <tr><td>wrap_content</td><td>fffffffe</td><td>The dropdown should fit the width of its anchor.</td></tr>
 * </table>
 * @apiSince 3
 */

public static final int dropDownWidth = 16843362; // 0x1010262

/**
 * When this attribute is set to true, the view gets its drawable state
 * (focused, pressed, etc.) from its direct parent rather than from itself.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int duplicateParentState = 16842985; // 0x10100e9

/**
 * Amount of time (in milliseconds) to display this frame.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 1
 */

public static final int duration = 16843160; // 0x1010198

/**
 * EditText background drawable.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int editTextBackground = 16843602; // 0x1010352

/**
 * EditText text foreground color.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 11
 */

public static final int editTextColor = 16843601; // 0x1010351

/**
 * Default style for EditTextPreference.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int editTextPreferenceStyle = 16842898; // 0x1010092

/**
 * Default EditText style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int editTextStyle = 16842862; // 0x101006e

/**
 * If set, specifies that this TextView has an input method.
 * It will be a textual one unless it has otherwise been specified.
 * For TextView, this is false by default.  For EditText, it is
 * true by default.
 * {@deprecated Use inputType instead.}
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 * @deprecatedSince 15
 */

@Deprecated public static final int editable = 16843115; // 0x101016b

/**
 * Reference to an
 * {@link android.R.styleable#InputExtras &lt;input-extras&gt;}
 * XML resource containing additional data to
 * supply to an input method, which is private to the implementation
 * of the input method.  This simply fills in
 * the {@link android.view.inputmethod.EditorInfo#extras
 * EditorInfo.extras} field when the input
 * method is connected.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 3
 */

public static final int editorExtras = 16843300; // 0x1010224

/**
 * Elegant text height, especially for less compacted complex script text.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 21
 */

public static final int elegantTextHeight = 16843869; // 0x101045d

/**
 * base z depth of the view.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 21
 */

public static final int elevation = 16843840; // 0x1010440

/**
 * Where to ellipsize text.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>end</td><td>3</td><td></td></tr>
 * <tr><td>marquee</td><td>4</td><td></td></tr>
 * <tr><td>middle</td><td>2</td><td></td></tr>
 * <tr><td>none</td><td>0</td><td></td></tr>
 * <tr><td>start</td><td>1</td><td></td></tr>
 * </table>
 * @apiSince 1
 */

public static final int ellipsize = 16842923; // 0x10100ab

/**
 * Makes the TextView be exactly this many ems wide.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 1
 */

public static final int ems = 16843096; // 0x1010158

/**
 * Flag declaring that this activity will be run in VR mode, and specifying
 * the component of the {@link android.service.vr.VrListenerService} that should be
 * bound while this Activity is visible if it is installed and enabled on this device.
 * This is equivalent to calling {@link android.app.Activity#setVrModeEnabled} with the
 * the given component name within the Activity that this attribute is set for.
 * Declaring this will prevent the system from leaving VR mode during an Activity
 * transtion from one VR activity to another.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 24
 */

public static final int enableVrMode = 16844069; // 0x1010525

/**
 * Specifies whether the widget is enabled. The interpretation of the enabled state varies by subclass.
 * For example, a non-enabled EditText prevents the user from editing the contained text, and
 * a non-enabled Button prevents the user from tapping the button.
 * The appearance of enabled and non-enabled widgets may differ, if the drawables referenced
 * from evaluating state_enabled differ.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 * @deprecatedSince 15
 */

public static final int enabled = 16842766; // 0x101000e

/**
 * End inset to apply to the layer. Overrides {@code left} or
 * {@code right} depending on layout direction.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 23
 */

public static final int end = 16843996; // 0x10104dc

/**
 * End color of the gradient.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int endColor = 16843166; // 0x101019e

/**
 * X coordinate of the end point origin of the gradient.
 * Defined in same coordinates as the path itself
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 24
 */

public static final int endX = 16844050; // 0x1010512

/**
 * Y coordinate of the end point of the gradient within the shape.
 * Defined in same coordinates as the path itself
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 24
 */

public static final int endY = 16844051; // 0x1010513

/**
 * {@deprecated Use maxDate instead.}
 * The last year (inclusive), for example "2010".
 * {@deprecated Use maxDate instead.}
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 1
 * @deprecatedSince 16
 */

@Deprecated public static final int endYear = 16843133; // 0x101017d

/**
 * Sets whether the system should ensure that the navigation bar has enough
 * contrast when a fully transparent background is requested.
 * <p>If set to this value, the system will determine whether a scrim is necessary
 * to ensure that the navigation bar has enough contrast with the contents of
 * this app, and set an appropriate effective bar background color accordingly.
 * <p>When the navigation bar color has a non-zero alpha value, the value of this
 * attribute has no effect.
 * <p>If the app does not target at least {@link android.os.Build.VERSION_CODES#Q Q},
 * this attribute is ignored.
 * @see android.view.Window#setNavigationBarContrastEnforced
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 29
 */

public static final int enforceNavigationBarContrast = 16844293; // 0x1010605

/**
 * Sets whether the system should ensure that the status bar has enough
 * contrast when a fully transparent background is requested.
 * <p>If set to this value, the system will determine whether a scrim is necessary
 * to ensure that the status bar has enough contrast with the contents of
 * this app, and set an appropriate effective bar background color accordingly.
 * <p>When the status bar color has a non-zero alpha value, the value of this
 * attribute has no effect.
 * <p>If the app does not target at least {@link android.os.Build.VERSION_CODES#Q Q},
 * this attribute is ignored.
 * @see android.view.Window#setStatusBarContrastEnforced
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 29
 */

public static final int enforceStatusBarContrast = 16844292; // 0x1010604

/**
 * Amount of time (in milliseconds) to fade in a new state drawable.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 11
 */

public static final int enterFadeDuration = 16843532; // 0x101030c

/**
 * Reference to an array resource that will populate a list/adapter.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int entries = 16842930; // 0x10100b2

/**
 * The array to find the value to save for a preference when an entry from
 * entries is selected. If a user clicks on the second item in entries, the
 * second item in this array will be saved to the preference.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int entryValues = 16843256; // 0x10101f8

/**
 * Defines whether the overlay should intercept the motion events when a gesture
 * is recognized.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 4
 */

public static final int eventsInterceptionEnabled = 16843389; // 0x101027d

/**
 * The fully-qualified name of the Class to exclude from this transition.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 21
 */

public static final int excludeClass = 16843842; // 0x1010442

/**
 * Indicates that an Activity should be excluded from the list of
 * recently launched activities.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int excludeFromRecents = 16842775; // 0x1010017

/**
 * The id of a target to exclude from this transition.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int excludeId = 16843841; // 0x1010441

/**
 * The transitionName of the target to exclude from this transition.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 21
 */

public static final int excludeName = 16843854; // 0x101044e

/**
 * Amount of time (in milliseconds) to fade out an old state drawable.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 11
 */

public static final int exitFadeDuration = 16843533; // 0x101030d

/**
 * The preferred left bound for an expandable list child's indicator.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int expandableListPreferredChildIndicatorLeft = 16842834; // 0x1010052

/**
 * The preferred right bound for an expandable list child's indicator.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int expandableListPreferredChildIndicatorRight = 16842835; // 0x1010053

/**
 * The preferred left padding for an expandable list item that is a child.
 * If this is not provided, it defaults to the expandableListPreferredItemPaddingLeft.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int expandableListPreferredChildPaddingLeft = 16842831; // 0x101004f

/**
 * The preferred left bound for an expandable list item's indicator. For a child-specific
 * indicator, use expandableListPreferredChildIndicatorLeft.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int expandableListPreferredItemIndicatorLeft = 16842832; // 0x1010050

/**
 * The preferred right bound for an expandable list item's indicator. For a child-specific
 * indicator, use expandableListPreferredChildIndicatorRight.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int expandableListPreferredItemIndicatorRight = 16842833; // 0x1010051

/**
 * The preferred left padding for an expandable list item (for child-specific layouts,
 * use expandableListPreferredChildPaddingLeft). This takes into account
 * the indicator that will be shown to next to the item.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int expandableListPreferredItemPaddingLeft = 16842830; // 0x101004e

/**
 * Default ExpandableListView style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int expandableListViewStyle = 16842863; // 0x101006f

/**
 * ExpandableListView with white background.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 8
 */

public static final int expandableListViewWhiteStyle = 16843446; // 0x10102b6

/**
 * Flag indicating whether the given application component is available
 * to other applications.  If false, it can only be accessed by
 * applications with its same user id (which usually means only by
 * code in its own package).  If true, it can be invoked by external
 * entities, though which ones can do so may be controlled through
 * permissions.  The default value is false for activity, receiver,
 * and service components that do not specify any intent filters; it
 * is true for activity, receiver, and service components that do
 * have intent filters (implying they expect to be invoked by others
 * who do not know their particular component name) and for all
 * content providers.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int exported = 16842768; // 0x1010010

/**
 * If the service is an {@link android.R.attr#isolatedProcess} service, this permits a
 * client to bind to the service as if it were running it its own package.  The service
 * must also be {@link android.R.attr#exported} if this flag is set.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 24
 */

public static final int externalService = 16844046; // 0x101050e

/**
 * This is the amount by which to multiply the tension.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 4
 */

public static final int extraTension = 16843371; // 0x101026b

/**
 * When set installer will extract native libraries. If set to false
 * libraries in the apk must be stored and page-aligned.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 23
 */

public static final int extractNativeLibs = 16844010; // 0x10104ea

/**
 * This is the amount of deceleration to add when easing in.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 1
 */

public static final int factor = 16843219; // 0x10101d3

/**
 * Duration, in milliseconds, of the fade out effect after the user is done
 * drawing a gesture.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 4
 */

public static final int fadeDuration = 16843384; // 0x1010278

/**
 * Defines whether the gesture will automatically fade out after being recognized.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 4
 */

public static final int fadeEnabled = 16843390; // 0x101027e

/**
 * Time, in milliseconds, to wait before the gesture fades out after the user
 * is done drawing it.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 4
 */

public static final int fadeOffset = 16843383; // 0x1010277

/**
 * Defines whether to fade out scrollbars when they are not in use.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 5
 */

public static final int fadeScrollbars = 16843434; // 0x10102aa

/**
 * This attribute is ignored in API level 14
 * ({@link android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH}) and higher.
 * Using fading edges may introduce noticeable performance
 * degradations and should be used only when required by the application's
 * visual design. To request fading edges with API level 14 and above,
 * use the <code>android:requiresFadingEdge</code> attribute instead.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>horizontal</td><td>1000</td><td>Fades horizontal edges only.</td></tr>
 * <tr><td>none</td><td>0</td><td>No edge is faded.</td></tr>
 * <tr><td>vertical</td><td>2000</td><td>Fades vertical edges only.</td></tr>
 * </table>
 * @apiSince 1
 * @deprecatedSince 15
 */

public static final int fadingEdge = 16842975; // 0x10100df

/**
 * Defines the length of the fading edges.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int fadingEdgeLength = 16842976; // 0x10100e0

/**
 * Equivalent to <code>transitionVisibilityMode</code>, fadingMode works only
 * with the Fade transition.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>fade_in</td><td>1</td><td>Fade will only fade appearing items in.</td></tr>
 * <tr><td>fade_in_out</td><td>3</td><td>Fade will fade appearing items in and disappearing items out.</td></tr>
 * <tr><td>fade_out</td><td>2</td><td>Fade will only fade disappearing items out.</td></tr>
 * </table>
 * @apiSince 19
 */

public static final int fadingMode = 16843745; // 0x10103e1

/**
 * Whether to respect the ascent and descent of the fallback fonts that are used in
 * displaying the text. When true, fallback fonts that end up getting used can increase
 * the ascent and descent of the lines that they are used on.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 28
 */

public static final int fallbackLineSpacing = 16844155; // 0x101057b

/**
 * When set to true, the list will always show the fast scroll interface.
 * This setting implies fastScrollEnabled.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 11
 */

public static final int fastScrollAlwaysVisible = 16843573; // 0x1010335

/**
 * Enables the fast scroll thumb that can be dragged to quickly scroll through
 * the list.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 3
 */

public static final int fastScrollEnabled = 16843302; // 0x1010226

/**
 * Position of the fast scroll index overlay window.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>aboveThumb</td><td>2</td><td></td></tr>
 * <tr><td>atThumb</td><td>1</td><td></td></tr>
 * <tr><td>floating</td><td>0</td><td></td></tr>
 * </table>
 * @apiSince 11
 */

public static final int fastScrollOverlayPosition = 16843578; // 0x101033a

/**
 * Drawable to use as the fast scroll index preview window background
 * when shown on the left.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int fastScrollPreviewBackgroundLeft = 16843575; // 0x1010337

/**
 * Drawable to use as the fast scroll index preview window background
 * when shown on the right.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int fastScrollPreviewBackgroundRight = 16843576; // 0x1010338

/**
 * Specifies the style of the fast scroll decorations.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int fastScrollStyle = 16843767; // 0x10103f7

/**
 * Text color for the fast scroll index overlay. Make sure it
 * plays nicely with fastScrollPreviewBackground[Left|Right].
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 11
 */

public static final int fastScrollTextColor = 16843609; // 0x1010359

/**
 * Drawable to use as the fast scroll thumb.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int fastScrollThumbDrawable = 16843574; // 0x1010336

/**
 * Drawable to use as the track for the fast scroll thumb.
 * This may be null.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int fastScrollTrackDrawable = 16843577; // 0x1010339

/**
 * When set to true, the animation transformation is applied after the animation is
 * over. The default value is false. If fillEnabled is not set to true and the
 * animation is not set on a View, fillAfter is assumed to be true.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int fillAfter = 16843197; // 0x10101bd

/**
 * The alpha of the path fill, as a value between 0 (completely transparent)
 * and 1 (completely opaque).
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 21
 */

public static final int fillAlpha = 16843980; // 0x10104cc

/**
 * When set to true or when fillEnabled is not set to true, the animation transformation
 * is applied before the animation has started. The default value is true.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int fillBefore = 16843196; // 0x10101bc

/**
 * The color to fill the path if not defined implies no fill.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 21
 */

public static final int fillColor = 16843780; // 0x1010404

/**
 * When set to true, the value of fillBefore is taken into account.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 3
 */

public static final int fillEnabled = 16843343; // 0x101024f

/**
 * sets the fillType for a path. It is the same as SVG's "fill-rule" properties.
 * For more details, see https://www.w3.org/TR/SVG/painting.html#FillRuleProperty.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>evenOdd</td><td>1</td><td></td></tr>
 * <tr><td>nonZero</td><td>0</td><td></td></tr>
 * </table>
 * @apiSince 24
 */

public static final int fillType = 16844062; // 0x101051e

/**
 * Defines whether the scrollview should stretch its content to fill the viewport.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int fillViewport = 16843130; // 0x101017a

/**
 * Enables or disables bitmap filtering. Filtering is used when the bitmap is
 * shrunk or stretched to smooth its apperance. Default value is true.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int filter = 16843035; // 0x101011b

/**
 * Specifies whether to filter touches when the view's window is obscured by
 * another visible window.  When set to true, the view will not receive touches
 * whenever a toast, dialog or other window appears above the view's window.
 * Refer to the {@link android.view.View} security documentation for more details.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 9
 */

public static final int filterTouchesWhenObscured = 16843460; // 0x10102c4

/**
 * Icon that should be used to indicate that an app is waiting for a fingerprint scan.
 * This should be used whenever an app is requesting the user to place a finger on the
 * fingerprint sensor. It can be combined with other drawables such as colored circles, so
 * the appearance matches the branding of the app requesting the fingerprint scan.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 23
 */

public static final int fingerprintAuthDrawable = 16844008; // 0x10104e8

/**
 * Specify whether an activity should be finished when a "close system
 * windows" request has been made.  This happens, for example, when
 * the home key is pressed, when the device is locked, when a system
 * dialog showing recent applications is displayed, etc.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 5
 */

public static final int finishOnCloseSystemDialogs = 16843431; // 0x10102a7

/**
 * Specify whether an activity should be finished when its task is
 * brought to the foreground by relaunching from the home screen.
 * <p>If both this option and {@link android.R.attr#allowTaskReparenting} are
 * specified, the finish trumps the affinity: the affinity will be
 * ignored and the activity simply finished.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int finishOnTaskLaunch = 16842772; // 0x1010014

/**
 * Distance from the top of the TextView to the first text baseline. If set, this
 * overrides the value set for paddingTop.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 28
 */

public static final int firstBaselineToTopHeight = 16844157; // 0x101057d

/**
 * The first day of week according to {@link java.util.Calendar}.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 11
 */

public static final int firstDayOfWeek = 16843581; // 0x101033d

/**
 * Boolean internal attribute to adjust view layout based on
 * system windows such as the status bar.
 * If true, adjusts the padding of this view to leave space for the system windows.
 * Will only take effect if this view is in a non-embedded activity.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int fitsSystemWindows = 16842973; // 0x10100dd

/**
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 1
 */

public static final int flipInterval = 16843129; // 0x1010179

/**
 * Controls whether a view can take focus.  By default, this is "auto" which lets the
 * framework determine whether a user can move focus to a view.  By setting this attribute
 * to true the view is allowed to take focus. By setting it to "false" the view will not
 * take focus. This value does not impact the behavior of
 * directly calling {@link android.view.View#requestFocus}, which will
 * always request focus regardless of this view.  It only impacts where
 * focus navigation will try to move focus.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>auto</td><td>10</td><td></td></tr>
 * </table>
 * @apiSince 1
 */

public static final int focusable = 16842970; // 0x10100da

/**
 * Boolean that controls whether a view can take focus while in touch mode.
 * If this is true for a view, that view can gain focus when clicked on, and can keep
 * focus if another view is clicked on that doesn't have this attribute set to true.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int focusableInTouchMode = 16842971; // 0x10100db

/**
 * Whether this view is a default-focus view.
 * Only one view per keyboard navigation cluster can have this attribute set to true.
 * See {@link android.view.View#setFocusedByDefault(boolean)}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 26
 */

public static final int focusedByDefault = 16844100; // 0x1010544

/**
 * @deprecated The color for the dates of the focused month.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 11
 * @deprecatedSince 23
 */

@Deprecated public static final int focusedMonthDateColor = 16843587; // 0x1010343

/**
 * The reference to the font file to be used. This should be a file in the res/font folder
 * and should therefore have an R reference value. E.g. @font/myfont
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 26
 */

public static final int font = 16844082; // 0x1010532

/**
 * Default font family.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 16
 */

public static final int fontFamily = 16843692; // 0x10103ac

/**
 * Font feature settings.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 21
 */

public static final int fontFeatureSettings = 16843959; // 0x10104b7

/**
 * The authority of the Font Provider to be used for the request.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 26
 */

public static final int fontProviderAuthority = 16844112; // 0x1010550

/**
 * The sets of hashes for the certificates the provider should be signed with. This is
 * used to verify the identity of the provider, and is only required if the provider is not
 * part of the system image. This value may point to one list or a list of lists, where each
 * individual list represents one collection of signature hashes. Refer to your font provider's
 * documentation for these values.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 26
 */

public static final int fontProviderCerts = 16844125; // 0x101055d

/**
 * The package for the Font Provider to be used for the request. This is used to verify
 * the identity of the provider.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 26
 */

public static final int fontProviderPackage = 16844119; // 0x1010557

/**
 * The query to be sent over to the provider. Refer to your font provider's documentation
 * on the format of this string.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 26
 */

public static final int fontProviderQuery = 16844113; // 0x1010551

/**
 * The style of the given font file. This will be used when the font is being loaded into
 * the font stack and will override any style information in the font's header tables. If
 * unspecified, the value in the font's header tables will be used.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>italic</td><td>1</td><td></td></tr>
 * <tr><td>normal</td><td>0</td><td></td></tr>
 * </table>
 * @apiSince 26
 */

public static final int fontStyle = 16844095; // 0x101053f

/**
 * The variation settings to be applied to the font. The string should be in the following
 * format: "'tag1' value1, 'tag2' value2, ...". If the default variation settings should be
 * used, or the font used does not support variation settings, this attribute needs not be
 * specified.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 28
 */

public static final int fontVariationSettings = 16844144; // 0x1010570

/**
 * The weight of the given font file. This will be used when the font is being loaded into
 * the font stack and will override any weight information in the font's header tables. Must
 * be a positive number, a multiple of 100, and between 100 and 900, inclusive. The most
 * common values are 400 for regular weight and 700 for bold weight. If unspecified, the value
 * in the font's header tables will be used.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 26
 */

public static final int fontWeight = 16844083; // 0x1010533

/**
 * When set to false, the ListView will not draw the divider before each footer view.
 * The default value is true.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 3
 */

public static final int footerDividersEnabled = 16843311; // 0x101022f

/**
 * <p>Whether or not the force dark feature is allowed to be applied to this View.
 * <p>Setting this to false will disable the auto-dark feature on this View draws
 * including any descendants.
 * <p>Setting this to true will allow this view to be automatically made dark, however
 * a value of 'true' will not override any 'false' value in its parent chain nor will
 * it prevent any 'false' in any of its children.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 29
 */

public static final int forceDarkAllowed = 16844172; // 0x101058c

/**
 * Whether this view has elements that may overlap when drawn. See
 * {@link android.view.View#forceHasOverlappingRendering(boolean)}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 24
 */

public static final int forceHasOverlappingRendering = 16844065; // 0x1010521

/**
 * If true, the system will always create URI permission grants
 * in the cases where {@link android.content.Intent#FLAG_GRANT_READ_URI_PERMISSION}
 * or {@link android.content.Intent#FLAG_GRANT_WRITE_URI_PERMISSION} would apply.
 * This is useful for a content provider that dynamically enforces permissions
 * on calls in to the provider, instead of through the manifest: the system
 * needs to know that it should always apply permission grants, even if it
 * looks like the target of the grant would already have access to the URI.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 29
 */

public static final int forceUriPermissions = 16844191; // 0x101059f

/**
 * Defines the drawable to draw over the content. This can be used as an overlay.
 * The foreground drawable participates in the padding of the content if the gravity
 * is set to fill.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int foreground = 16843017; // 0x1010109

/**
 * Defines the gravity to apply to the foreground drawable. The gravity defaults
 * to fill.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
 * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
 * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
 * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
 * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the horizontal gravity: a left gravity will clip the right
 * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
 * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the vertical gravity: a top gravity will clip the bottom
 * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
 * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
 * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
 * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int foregroundGravity = 16843264; // 0x1010200

/**
 * Specify the type of foreground service. Multiple types can be specified by ORing the flags
 * together.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>connectedDevice</td><td>10</td><td>Auto, bluetooth, TV or other devices connection, monitoring and interaction.</td></tr>
 * <tr><td>dataSync</td><td>1</td><td>Data (photo, file, account) upload/download, backup/restore, import/export, fetch,
 * transfer over network between device and cloud.</td></tr>
 * <tr><td>location</td><td>8</td><td>GPS, map, navigation location update.</td></tr>
 * <tr><td>mediaPlayback</td><td>2</td><td>Music, video, news or other media play.</td></tr>
 * <tr><td>mediaProjection</td><td>20</td><td>Managing a media projection session, e.g, for screen recording or taking
 * screenshots.</td></tr>
 * <tr><td>phoneCall</td><td>4</td><td>Ongoing phone call or video conference.</td></tr>
 * </table>
 * @apiSince 29
 */

public static final int foregroundServiceType = 16844185; // 0x1010599

/**
 * Tint to apply to the foreground.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 21
 */

public static final int foregroundTint = 16843885; // 0x101046d

/**
 * Blending mode used to apply the foreground tint.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 * @apiSince 21
 */

public static final int foregroundTintMode = 16843886; // 0x101046e

/**
 * Format string: if specified, the Chronometer will display this
 * string, with the first "%s" replaced by the current timer value
 * in "MM:SS" or "H:MM:SS" form.
 * If no format string is specified, the Chronometer will simply display
 * "MM:SS" or "H:MM:SS".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int format = 16843013; // 0x1010105

/**
 * Specifies the formatting pattern used to show the time and/or date
 * in 12-hour mode. Please refer to {@link android.text.format.DateFormat}
 * for a complete description of accepted formatting patterns.
 * The default pattern is a locale-appropriate equivalent of "h:mm a".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 17
 */

public static final int format12Hour = 16843722; // 0x10103ca

/**
 * Specifies the formatting pattern used to show the time and/or date
 * in 24-hour mode. Please refer to {@link android.text.format.DateFormat}
 * for a complete description of accepted formatting patterns.
 * The default pattern is a locale-appropriate equivalent of "H:mm".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 17
 */

public static final int format24Hour = 16843723; // 0x10103cb

/**
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 23
 */

public static final int fraction = 16843992; // 0x10104d8

/**
 * The fragment that is displayed when the user selects this item.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 11
 */

public static final int fragment = 16843491; // 0x10102e3

/**
 * Sets whether the enter and exit transitions should overlap when transitioning
 * forward.
 * Corresponds to {@link android.app.Fragment#setAllowEnterTransitionOverlap(
 * boolean)}
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int fragmentAllowEnterTransitionOverlap = 16843976; // 0x10104c8

/**
 * Sets whether the enter and exit transitions should overlap when transitioning
 * because of popping the back stack.
 * Corresponds to {@link android.app.Fragment#setAllowReturnTransitionOverlap(
 * boolean)}
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int fragmentAllowReturnTransitionOverlap = 16843977; // 0x10104c9

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int fragmentCloseEnterAnimation = 16843495; // 0x10102e7

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int fragmentCloseExitAnimation = 16843496; // 0x10102e8

/**
 * The Transition that will be used to move Views into the initial scene.
 * Corresponds to {@link android.app.Fragment#setEnterTransition(
 * android.transition.Transition)}
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int fragmentEnterTransition = 16843971; // 0x10104c3

/**
 * The Transition that will be used to move Views out of the scene when the
 * fragment is removed, hidden, or detached when not popping the back stack.
 * Corresponds to {@link android.app.Fragment#setExitTransition(
 * android.transition.Transition)}
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int fragmentExitTransition = 16843970; // 0x10104c2

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int fragmentFadeEnterAnimation = 16843497; // 0x10102e9

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int fragmentFadeExitAnimation = 16843498; // 0x10102ea

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int fragmentOpenEnterAnimation = 16843493; // 0x10102e5

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int fragmentOpenExitAnimation = 16843494; // 0x10102e6

/**
 * The Transition that will be used to move Views in to the scene when returning due
 * to popping a back stack.
 * Corresponds to {@link android.app.Fragment#setReenterTransition(
 * android.transition.Transition)}
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int fragmentReenterTransition = 16843975; // 0x10104c7

/**
 * The Transition that will be used to move Views out of the scene when the Fragment is
 * preparing to be removed, hidden, or detached because of popping the back stack.
 * Corresponds to {@link android.app.Fragment#setReturnTransition(
 * android.transition.Transition)}
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int fragmentReturnTransition = 16843973; // 0x10104c5

/**
 * The Transition that will be used for shared elements transferred into the content
 * Scene.
 * Corresponds to {@link android.app.Fragment#setSharedElementEnterTransition(
 * android.transition.Transition)}
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int fragmentSharedElementEnterTransition = 16843972; // 0x10104c4

/**
 * The Transition that will be used for shared elements transferred back during a
 * pop of the back stack. This Transition acts in the leaving Fragment.
 * Corresponds to {@link android.app.Fragment#setSharedElementReturnTransition(
 * android.transition.Transition)}
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int fragmentSharedElementReturnTransition = 16843974; // 0x10104c6

/**
 * If set, the text view will include its current complete text
 * inside of its frozen icicle in addition to meta-data such as
 * the current cursor position.  By default this is disabled;
 * it can be useful when the contents of a text view is not stored
 * in a persistent place such as a content provider. For
 * {@link android.widget.EditText} it is always enabled, regardless
 * of the value of the attribute.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int freezesText = 16843116; // 0x101016c

/**
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 1
 */

public static final int fromAlpha = 16843210; // 0x10101ca

/**
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 1
 */

public static final int fromDegrees = 16843187; // 0x10101b3

/**
 * Keyframe identifier for the starting state.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int fromId = 16843850; // 0x101044a

/**
 * The originating scene in this scene change.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 19
 */

public static final int fromScene = 16843741; // 0x10103dd

/**
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 * @apiSince 1
 */

public static final int fromXDelta = 16843206; // 0x10101c6

/**
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 * @apiSince 1
 */

public static final int fromXScale = 16843202; // 0x10101c2

/**
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 * @apiSince 1
 */

public static final int fromYDelta = 16843208; // 0x10101c8

/**
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 * @apiSince 1
 */

public static final int fromYScale = 16843204; // 0x10101c4

/**
 * Applications will set this in their manifest to opt-in to or out of full app data back-up
 * and restore. Alternatively they can set it to an xml resource within their app that will
 * be parsed by the BackupAgent to selectively backup files indicated within that xml.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 23
 */

public static final int fullBackupContent = 16844011; // 0x10104eb

/**
 * Indicates that even though the application provides a <code>BackupAgent</code>,
 * only full-data streaming backup operations are to be performed to save the app's
 * data.  This lets the app rely on full-data backups while still participating in
 * the backup and restore process via the BackupAgent's full-data backup APIs.
 * When this attribute is <code>true</code> the app's BackupAgent overrides of
 * the onBackup() and onRestore() callbacks can be empty stubs.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 21
 */

public static final int fullBackupOnly = 16843891; // 0x1010473

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int fullBright = 16842954; // 0x10100ca

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int fullDark = 16842950; // 0x10100c6

/**
 * Flag indicating that an Instrumentation class should be run as a
 * functional test.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int functionalTest = 16842787; // 0x1010023

/**
 * The preferred background for gallery items. This should be set
 * as the background of any Views you provide from the Adapter.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int galleryItemBackground = 16842828; // 0x101004c

/**
 * Default Gallery style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int galleryStyle = 16842864; // 0x1010070

/**
 * Color used to draw a gesture.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 4
 */

public static final int gestureColor = 16843381; // 0x1010275

/**
 * Minimum curve angle a stroke must contain before it is recognized as a gesture.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 4
 */

public static final int gestureStrokeAngleThreshold = 16843388; // 0x101027c

/**
 * Minimum length of a stroke before it is recognized as a gesture.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 4
 */

public static final int gestureStrokeLengthThreshold = 16843386; // 0x101027a

/**
 * Squareness threshold of a stroke before it is recognized as a gesture.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 4
 */

public static final int gestureStrokeSquarenessThreshold = 16843387; // 0x101027b

/**
 * Defines the type of strokes that define a gesture.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>multiple</td><td>1</td><td>A gesture is made of multiple strokes.</td></tr>
 * <tr><td>single</td><td>0</td><td>A gesture is made of only one stroke.</td></tr>
 * </table>
 * @apiSince 4
 */

public static final int gestureStrokeType = 16843385; // 0x1010279

/**
 * Width of the stroke used to draw the gesture.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 4
 */

public static final int gestureStrokeWidth = 16843380; // 0x1010274

/**
 * The GLES driver version number needed by an application.
 * The higher 16 bits represent the major number and the lower 16 bits
 * represent the minor number. For example for GL 1.2 referring to
 * 0x00000102, the actual value should be set as 0x00010002.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 4
 */

public static final int glEsVersion = 16843393; // 0x1010281

/**
 * Go button icon.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int goIcon = 16843906; // 0x1010482

/**
 * Radius of the gradient, used only with radial gradient. May be an explicit dimension
 * or a fractional value relative to the shape's minimum dimension.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 * @apiSince 1
 */

public static final int gradientRadius = 16843172; // 0x10101a4

/**
 * If true, the {@link android.content.Context#grantUriPermission
 * Context.grantUriPermission} or corresponding Intent flags can
 * be used to allow others to access specific URIs in the content
 * provider, even if they do not have an explicit read or write
 * permission.  If you are supporting this feature, you must be
 * sure to call {@link android.content.Context#revokeUriPermission
 * Context.revokeUriPermission} when URIs are deleted from your
 * provider.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int grantUriPermissions = 16842779; // 0x101001b

/**
 * Specifies how an object should position its content, on both the X and Y axes,
 * within its own bounds.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
 * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
 * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
 * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
 * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the horizontal gravity: a left gravity will clip the right
 * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
 * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the vertical gravity: a top gravity will clip the bottom
 * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
 * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
 * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
 * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
 * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
 * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int gravity = 16842927; // 0x10100af

/**
 * Default GridView style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int gridViewStyle = 16842865; // 0x1010071

/**
 * Indicator shown beside the group View. This can be a stateful Drawable.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int groupIndicator = 16843019; // 0x101010b

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int hand_hour = 16843011; // 0x1010103

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int hand_minute = 16843012; // 0x1010104

/**
 * Identifier for the child that represents the drawer's handle.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 3
 */

public static final int handle = 16843354; // 0x101025a

/**
 * Flag indicating that an Instrumentation class wants to take care
 * of starting/stopping profiling itself, rather than relying on
 * the default behavior of profiling the complete time it is running.
 * This allows it to target profiling data at a specific set of
 * operations.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int handleProfiling = 16842786; // 0x1010022

/**
 * Boolean that controls whether a view should have haptic feedback
 * enabled for events such as long presses.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 3
 */

public static final int hapticFeedbackEnabled = 16843358; // 0x101025e

/**
 * <p>Flag indicating whether the application's rendering should be hardware
 * accelerated if possible. This flag is turned on by default for applications
 * that are targeting {@link android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH}
 * or later.</p>
 * <p>This flag can be set on the application and any activity declared
 * in the manifest. When enabled for the application, each activity is
 * automatically assumed to be hardware accelerated. This flag can be
 * overridden in the activity tags, either turning it off (if on for the
 * application) or on (if off for the application.)</p>
 * <p>When this flag is turned on for an activity (either directly or via
 * the application tag), every window created from the activity, including
 * the activity's own window, will be hardware accelerated, if possible.</p>
 * <p>Please refer to the documentation of
 * {@link android.view.WindowManager.LayoutParams#FLAG_HARDWARE_ACCELERATED}
 * for more information on how to control this flag programmatically.</p>
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 11
 */

public static final int hardwareAccelerated = 16843475; // 0x10102d3

/**
 * Indicate whether this application contains code.  If set to false,
 * there is no code associated with it and thus the system will not
 * try to load its code when launching components.  The default is true
 * for normal behavior.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int hasCode = 16842764; // 0x101000c

/**
 * If {@code true} the user is prompted to keep the app's data on uninstall
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 29
 */

public static final int hasFragileUserData = 16844186; // 0x101059a

/**
 * The text appearance for the AM/PM header.
 * @deprecated Use headerTextColor instead.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 * @deprecatedSince 23
 */

@Deprecated public static final int headerAmPmTextAppearance = 16843936; // 0x10104a0

/**
 * Default background for the menu header.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int headerBackground = 16843055; // 0x101012f

/**
 * The text appearance for the day of month (ex. 28) in the selected date header.
 * {@deprecated Use headerTextColor instead.}
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 * @deprecatedSince 23
 */

@Deprecated public static final int headerDayOfMonthTextAppearance = 16843927; // 0x1010497

/**
 * When set to false, the ListView will not draw the divider after each header view.
 * The default value is true.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 3
 */

public static final int headerDividersEnabled = 16843310; // 0x101022e

/**
 * The text appearance for the month (ex. May) in the selected date header.
 * {@deprecated Use headerTextColor instead.}
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 * @deprecatedSince 23
 */

@Deprecated public static final int headerMonthTextAppearance = 16843926; // 0x1010496

/**
 * The text appearance for the time header.
 * @deprecated Use headerTextColor instead.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 * @deprecatedSince 23
 */

@Deprecated public static final int headerTimeTextAppearance = 16843935; // 0x101049f

/**
 * The text appearance for the year (ex. 2014) in the selected date header.
 * {@deprecated Use headerTextColor instead.}
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 * @deprecatedSince 23
 */

@Deprecated public static final int headerYearTextAppearance = 16843928; // 0x1010498

/**
 * Makes the TextView be exactly this tall.
 * You could get the same effect by specifying this number in the
 * layout parameters.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int height = 16843093; // 0x1010155

/**
 * Set true to hide the action bar on a vertical nested scroll of content.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 21
 */

public static final int hideOnContentScroll = 16843843; // 0x1010443

/**
 * Hint text to display when the text is empty.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int hint = 16843088; // 0x1010150

/**
 * Specifies a drawable to use for the 'home as up' indicator.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int homeAsUpIndicator = 16843531; // 0x101030b

/**
 * Specifies a layout to use for the "home" section of the action bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int homeLayout = 16843549; // 0x101031d

/**
 * Default horizontal divider between rows of menu items.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int horizontalDivider = 16843053; // 0x101012d

/**
 * Default horizontal gap between keys.
 * {@deprecated Copy this definition into your own application project.}
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 * @apiSince 3
 * @deprecatedSince 29
 */

@Deprecated public static final int horizontalGap = 16843327; // 0x101023f

/**
 * Default HorizontalScrollView style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int horizontalScrollViewStyle = 16843603; // 0x1010353

/**
 * Defines the default horizontal spacing between columns.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int horizontalSpacing = 16843028; // 0x1010114

/**
 * Specify a URI authority host that is handled, as per
 * {@link android.content.IntentFilter#addDataAuthority
 * IntentFilter.addDataAuthority()}.
 * <p><em>Note: host name matching in the Android framework is
 * case-sensitive, unlike the formal RFC.  As a result,
 * host names here should always use lower case letters.</em></p>
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int host = 16842792; // 0x1010028

/**
 * X coordinate of the icon hot spot.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 24
 */

public static final int hotSpotX = 16844055; // 0x1010517

/**
 * Y coordinate of the icon hot spot.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 24
 */

public static final int hotSpotY = 16844056; // 0x1010518

/**
 * Frequency of automatic hyphenation.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>full</td><td>2</td><td>Standard amount of hyphenation, useful for running text and for
 * screens with limited space for text.</td></tr>
 * <tr><td>none</td><td>0</td><td>No hyphenation.</td></tr>
 * <tr><td>normal</td><td>1</td><td>Less frequent hyphenation, useful for informal use cases, such
 * as chat messages.</td></tr>
 * </table>
 * @apiSince 23
 */

public static final int hyphenationFrequency = 16843998; // 0x10104de

/**
 * A Drawable resource providing a graphical representation of its
 * associated item.  Use with the
 * application tag (to supply a default icon for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific icon for that component).  It may also be
 * used with the intent-filter tag to supply an icon to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given icon will be used to display to the user a graphical
 * representation of its associated component; for example, as the icon
 * for main activity that is displayed in the launcher.  This must be
 * a reference to a Drawable resource containing the image definition.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int icon = 16842754; // 0x1010002

/**
 * The icon to show in the popup preview.
 * {@deprecated Copy this definition into your own application project.}
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 3
 * @deprecatedSince 29
 */

@Deprecated public static final int iconPreview = 16843337; // 0x1010249

/**
 * Whether the space for the preference icon view will be reserved. By default, preference
 * icon view visibility will be set to GONE when there is no icon provided, so the default
 * value of this attribute is false.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 26
 */

public static final int iconSpaceReserved = 16844129; // 0x1010561

/**
 * Tint to apply to the icon.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 26
 */

public static final int iconTint = 16844126; // 0x101055e

/**
 * Blending mode used to apply the icon tint.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and icon color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the icon with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the icon, but with the icon’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the icon. The icon’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the icon.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 * @apiSince 26
 */

public static final int iconTintMode = 16844127; // 0x101055f

/**
 * The default state of the SearchView. If true, it will be iconified when not in
 * use and expanded when clicked.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 11
 */

public static final int iconifiedByDefault = 16843514; // 0x10102fa

/**
 * Supply an identifier name for this view, to later retrieve it
 * with {@link android.view.View#findViewById View.findViewById()} or
 * {@link android.app.Activity#findViewById Activity.findViewById()}.
 * This must be a
 * resource reference; typically you set this using the
 * <code>@+</code> syntax to create a new ID resources.
 * For example: <code>android:id="@+id/my_id"</code> which
 * allows you to later retrieve the view
 * with <code>findViewById(R.id.my_id)</code>.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int id = 16842960; // 0x10100d0

/**
 * The identifier to assign to the intent, as per
 * {@link android.content.Intent#setIdentifier Intent.setIdentifier()}.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 29
 */

public static final int identifier = 16844294; // 0x1010606

/**
 * Indicates what view should not be affected by gravity.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int ignoreGravity = 16843263; // 0x10101ff

/**
 * The style resource to use for an ImageButton.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int imageButtonStyle = 16842866; // 0x1010072

/**
 * The style resource to use for an ImageButton that is an image well.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int imageWellStyle = 16842867; // 0x1010073

/**
 * Supply a value for
 * {@link android.view.inputmethod.EditorInfo#actionId EditorInfo.actionId}
 * used when an input method is connected to the text view.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 3
 */

public static final int imeActionId = 16843366; // 0x1010266

/**
 * Supply a value for
 * {@link android.view.inputmethod.EditorInfo#actionLabel EditorInfo.actionLabel}
 * used when an input method is connected to the text view.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 3
 */

public static final int imeActionLabel = 16843365; // 0x1010265

/**
 * Animation to use when showing the fullscreen extract UI after
 * it had previously been hidden.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 3
 */

public static final int imeExtractEnterAnimation = 16843368; // 0x1010268

/**
 * Animation to use when hiding the fullscreen extract UI after
 * it had previously been shown.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 3
 */

public static final int imeExtractExitAnimation = 16843369; // 0x1010269

/**
 * Background to use for entire input method when it is being
 * shown in fullscreen mode with the extract view, to ensure
 * that it completely covers the application.  This allows,
 * for example, the candidate view to be hidden
 * while in fullscreen mode without having the application show through
 * behind it.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 3
 */

public static final int imeFullscreenBackground = 16843308; // 0x101022c

/**
 * Additional features you can enable in an IME associated with an editor
 * to improve the integration with your application.  The constants
 * here correspond to those defined by
 * {@link android.view.inputmethod.EditorInfo#imeOptions}.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>actionDone</td><td>6</td><td>The action key performs a "done"
 * operation, closing the soft input method.
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_ACTION_DONE}.</td></tr>
 * <tr><td>actionGo</td><td>2</td><td>The action key performs a "go"
 * operation to take the user to the target of the text they typed.
 * Typically used, for example, when entering a URL.
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_ACTION_GO}.</td></tr>
 * <tr><td>actionNext</td><td>5</td><td>The action key performs a "next"
 * operation, taking the user to the next field that will accept text.
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_ACTION_NEXT}.</td></tr>
 * <tr><td>actionNone</td><td>1</td><td>This editor has no action associated with it.
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_ACTION_NONE}.</td></tr>
 * <tr><td>actionPrevious</td><td>7</td><td>The action key performs a "previous"
 * operation, taking the user to the previous field that will accept text.
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_ACTION_PREVIOUS}.</td></tr>
 * <tr><td>actionSearch</td><td>3</td><td>The action key performs a "search"
 * operation, taking the user to the results of searching for the text
 * the have typed (in whatever context is appropriate).
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_ACTION_SEARCH}.</td></tr>
 * <tr><td>actionSend</td><td>4</td><td>The action key performs a "send"
 * operation, delivering the text to its target.  This is typically used
 * when composing a message.
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_ACTION_SEND}.</td></tr>
 * <tr><td>actionUnspecified</td><td>0</td><td>There is no specific action associated with this editor, let the
 * editor come up with its own if it can.
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_NULL}.</td></tr>
 * <tr><td>flagForceAscii</td><td>80000000</td><td>Used to request that the IME should be capable of inputting ASCII
 * characters.  The intention of this flag is to ensure that the user
 * can type Roman alphabet characters in a {@link android.widget.TextView}
 * used for, typically, account ID or password input.  It is expected that IMEs
 * normally are able to input ASCII even without being told so (such IMEs
 * already respect this flag in a sense), but there could be some cases they
 * aren't when, for instance, only non-ASCII input languages like Arabic,
 * Greek, Hebrew, Russian are enabled in the IME.  Applications need to be
 * aware that the flag is not a guarantee, and not all IMEs will respect it.
 * However, it is strongly recommended for IME authors to respect this flag
 * especially when their IME could end up with a state that has only non-ASCII
 * input languages enabled.
 * <p>Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_FLAG_FORCE_ASCII}.</td></tr>
 * <tr><td>flagNavigateNext</td><td>8000000</td><td>Used to specify that there is something
 * interesting that a forward navigation can focus on. This is like using
 * actionNext, except allows the IME to be multiline (with
 * an enter key) as well as provide forward navigation.  Note that some
 * IMEs may not be able to do this, especially when running on a small
 * screen where there is little space.  In that case it does not need to
 * present a UI for this option.  Like actionNext, if the
 * user selects the IME's facility to forward navigate, this will show up
 * in the application at
 * {@link android.view.inputmethod.InputConnection#performEditorAction(int)
 * InputConnection.performEditorAction(int)}.
 * <p>Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NAVIGATE_NEXT}.</td></tr>
 * <tr><td>flagNavigatePrevious</td><td>4000000</td><td>Like flagNavigateNext, but
 * specifies there is something interesting that a backward navigation
 * can focus on.  If the user selects the IME's facility to backward
 * navigate, this will show up in the application as an actionPrevious
 * at {@link android.view.inputmethod.InputConnection#performEditorAction(int)
 * InputConnection.performEditorAction(int)}.
 * <p>Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NAVIGATE_PREVIOUS}.</td></tr>
 * <tr><td>flagNoAccessoryAction</td><td>20000000</td><td>Used in conjunction with a custom action, this indicates that the
 * action should not be available as an accessory button when the
 * input method is full-screen.
 * Note that by setting this flag, there can be cases where the action
 * is simply never available to the user.  Setting this generally means
 * that you think showing text being edited is more important than the
 * action you have supplied.
 * <p>Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_ACCESSORY_ACTION}.</td></tr>
 * <tr><td>flagNoEnterAction</td><td>40000000</td><td>Used in conjunction with a custom action,
 * this indicates that the action should not be available in-line as
 * a replacement for the "enter" key.  Typically this is
 * because the action has such a significant impact or is not recoverable
 * enough that accidentally hitting it should be avoided, such as sending
 * a message.    Note that {@link android.widget.TextView} will
 * automatically set this flag for you on multi-line text views.
 * <p>Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_ENTER_ACTION}.</td></tr>
 * <tr><td>flagNoExtractUi</td><td>10000000</td><td>Used to specify that the IME does not need
 * to show its extracted text UI.  For input methods that may be fullscreen,
 * often when in landscape mode, this allows them to be smaller and let part
 * of the application be shown behind.  Though there will likely be limited
 * access to the application available from the user, it can make the
 * experience of a (mostly) fullscreen IME less jarring.  Note that when
 * this flag is specified the IME may <em>not</em> be set up to be able
 * to display text, so it should only be used in situations where this is
 * not needed.
 * <p>Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_EXTRACT_UI}.</td></tr>
 * <tr><td>flagNoFullscreen</td><td>2000000</td><td>Used to request that the IME never go
 * into fullscreen mode.  Applications need to be aware that the flag is not
 * a guarantee, and not all IMEs will respect it.
 * <p>Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_FULLSCREEN}.</td></tr>
 * <tr><td>flagNoPersonalizedLearning</td><td>1000000</td><td>Used to request that the IME should not update any personalized data such as typing
 * history and personalized language model based on what the user typed on this text
 * editing object. Typical use cases are:
 * <ul>
 * <li>When the application is in a special mode, where user's activities are expected
 * to be not recorded in the application's history. Some web browsers and chat
 * applications may have this kind of modes.</li>
 * <li>When storing typing history does not make much sense.  Specifying this flag in
 * typing games may help to avoid typing history from being filled up with words that
 * the user is less likely to type in their daily life.  Another example is that when
 * the application already knows that the expected input is not a valid word (e.g. a
 * promotion code that is not a valid word in any natural language).</li>
 * </ul>
 * <p>Applications need to be aware that the flag is not a guarantee, and some IMEs may
 * not respect it.</p></td></tr>
 * <tr><td>normal</td><td>0</td><td>There are no special semantics associated with this editor.</td></tr>
 * </table>
 * @apiSince 3
 */

public static final int imeOptions = 16843364; // 0x1010264

/**
 * The extra value of the subtype. This string can be any string and will be passed to
 * the IME when the framework calls the IME with the subtype.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 11
 */

public static final int imeSubtypeExtraValue = 16843502; // 0x10102ee

/**
 * The locale of the subtype. This string should be a locale (for example en_US and fr_FR)
 * and will be passed to the IME when the framework calls the IME
 * with the subtype. This is also used by the framework to know the supported locales
 * of the IME.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 11
 */

public static final int imeSubtypeLocale = 16843500; // 0x10102ec

/**
 * The mode of the subtype. This string can be a mode (for example, voice and keyboard)
 * and this string will be passed to the IME when the framework calls the IME with the
 * subtype.  {@link android.view.inputmethod.InputMethodSubtype#getLocale()} returns the
 * value specified in this attribute.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 11
 */

public static final int imeSubtypeMode = 16843501; // 0x10102ed

/**
 * Flag declaring this activity to be 'immersive'; immersive activities
 * should not be interrupted with other activities or notifications.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 11
 */

public static final int immersive = 16843456; // 0x10102c0

/**
 * Describes whether or not this view is important for accessibility.
 * If it is important, the view fires accessibility events and is
 * reported to accessibility services that query the screen. Note:
 * While not recommended, an accessibility service may decide to
 * ignore this attribute and operate on all views in the view tree.
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>auto</td><td>0</td><td>The system determines whether the view is important for accessibility - default
 * (recommended).</td></tr>
 * <tr><td>no</td><td>2</td><td>The view is not important for accessibility.</td></tr>
 * <tr><td>noHideDescendants</td><td>4</td><td>The view is not important for accessibility, nor are any of its descendant
 * views.</td></tr>
 * <tr><td>yes</td><td>1</td><td>The view is important for accessibility.</td></tr>
 * </table>
 * @apiSince 16
 */

public static final int importantForAccessibility = 16843690; // 0x10103aa

/**
 * Hints the Android System whether the view node associated with this View should be
 * included in a view structure used for autofill purposes.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>auto</td><td>0</td><td>Let the Android System use its heuristics to determine if the view is important for autofill.</td></tr>
 * <tr><td>no</td><td>2</td><td>Hint the Android System that this view is *not* important for autofill,
 * but its children (if any) will be traversed..</td></tr>
 * <tr><td>noExcludeDescendants</td><td>8</td><td>Hint the Android System that this view is *not* important for autofill,
 * and its children (if any) will not be traversed.</td></tr>
 * <tr><td>yes</td><td>1</td><td>Hint the Android System that this view is important for autofill,
 * and its children (if any) will be traversed..</td></tr>
 * <tr><td>yesExcludeDescendants</td><td>4</td><td>Hint the Android System that this view is important for autofill,
 * but its children (if any) will not be traversed.</td></tr>
 * </table>
 * @apiSince 26
 */

public static final int importantForAutofill = 16844120; // 0x1010558

/**
 * Identifier for the animation to use when a view is shown.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int inAnimation = 16843127; // 0x1010177

/**
 * Leave enough room for ascenders and descenders instead of
 * using the font ascent and descent strictly.  (Normally true).
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int includeFontPadding = 16843103; // 0x101015f

/**
 * If provided and <code>true</code>, this searchable activity will be
 * included in any global lists of search targets.
 * The default value is <code>false</code>. <i>Optional attribute.</i>.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 4
 */

public static final int includeInGlobalSearch = 16843374; // 0x101026e

/**
 * Allows to enable the indeterminate mode. In this mode the progress
 * bar plays an infinite looping animation.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int indeterminate = 16843065; // 0x1010139

/**
 * Defines how the indeterminate mode should behave when the progress reaches max. Only
 * affects the indeterminate animation if the indeterminate Drawable does not implement
 * android.graphics.drawable.Animatable.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>cycle</td><td>2</td><td>Progress keeps the current value and goes back to 0.</td></tr>
 * <tr><td>repeat</td><td>1</td><td>Progress starts over from 0.</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int indeterminateBehavior = 16843070; // 0x101013e

/**
 * Drawable used for the indeterminate mode. One that implements Animatable offers more
 * control over the animation.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int indeterminateDrawable = 16843067; // 0x101013b

/**
 * Duration of the indeterminate animation. Only affects the indeterminate animation
 * if the indeterminate Drawable does not implement
 * android.graphics.drawable.Animatable.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 1
 */

public static final int indeterminateDuration = 16843069; // 0x101013d

/**
 * Restricts to ONLY indeterminate mode (state-keeping progress mode will not work).
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int indeterminateOnly = 16843066; // 0x101013a

/**
 * Specifies a style resource to use for an indeterminate progress spinner.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int indeterminateProgressStyle = 16843544; // 0x1010318

/**
 * Tint to apply to the indeterminate progress indicator.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 21
 */

public static final int indeterminateTint = 16843881; // 0x1010469

/**
 * Blending mode used to apply the indeterminate progress indicator tint.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 * @apiSince 21
 */

public static final int indeterminateTintMode = 16843882; // 0x101046a

/**
 * The end bound for an item's indicator. To specify a right bound specific to children,
 * use childIndicatorEnd.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 18
 */

public static final int indicatorEnd = 16843730; // 0x10103d2

/**
 * The left bound for an item's indicator. To specify a left bound specific to children,
 * use childIndicatorLeft.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int indicatorLeft = 16843021; // 0x101010d

/**
 * The right bound for an item's indicator. To specify a right bound specific to children,
 * use childIndicatorRight.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int indicatorRight = 16843022; // 0x101010e

/**
 * The start bound for an item's indicator. To specify a start bound specific to children,
 * use childIndicatorStart.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 18
 */

public static final int indicatorStart = 16843729; // 0x10103d1

/**
 * Overrides the id of the inflated View with this value.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int inflatedId = 16842995; // 0x10100f3

/**
 * Specifies whether this {@link android.app.Activity} should be shown on
 * top of the lock screen whenever the lockscreen is up and this activity has another
 * activity behind it with the {@link android.R.attr#showWhenLocked} attribute set. That
 * is, this activity is only visible on the lock screen if there is another activity with
 * the {@link android.R.attr#showWhenLocked} attribute visible at the same time on the
 * lock screen. A use case for this is permission dialogs, that should only be visible on
 * the lock screen if their requesting activity is also visible.
 * <p>The default value of this attribute is <code>false</code>.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 29
 */

public static final int inheritShowWhenLocked = 16844188; // 0x101059c

/**
 * Specify the order in which content providers hosted by a process
 * are instantiated when that process is created.  Not needed unless
 * you have providers with dependencies between each other, to make
 * sure that they are created in the order needed by those dependencies.
 * The value is a simple integer, with higher numbers being
 * initialized first.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 1
 */

public static final int initOrder = 16842778; // 0x101001a

/**
 * A resource id of a layout.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 17
 */

public static final int initialKeyguardLayout = 16843714; // 0x10103c2

/**
 * A resource id of a layout.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 3
 */

public static final int initialLayout = 16843345; // 0x1010251

/**
 * Inner radius of the ring. When defined, innerRadiusRatio is ignored.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 3
 */

public static final int innerRadius = 16843359; // 0x101025f

/**
 * Inner radius of the ring expressed as a ratio of the ring's width. For instance,
 * if innerRadiusRatio=9, then the inner radius equals the ring's width divided by 9.
 * This value is ignored if innerRadius is defined. Default value is 9.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 1
 */

public static final int innerRadiusRatio = 16843163; // 0x101019b

/**
 * If set, specifies that this TextView should use the specified
 * input method (specified by fully-qualified class name).
 * {@deprecated Use inputType instead.}
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 * @deprecatedSince 15
 */

@Deprecated public static final int inputMethod = 16843112; // 0x1010168

/**
 * The type of data being placed in a text field, used to help an
 * input method decide how to let the user enter text.  The constants
 * here correspond to those defined by
 * {@link android.text.InputType}.  Generally you can select
 * a single value, though some can be combined together as
 * indicated.  Setting this attribute to anything besides
 * <var>none</var> also implies that the text is editable.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>date</td><td>14</td><td>For entering a date.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_DATETIME} |
 * {@link android.text.InputType#TYPE_DATETIME_VARIATION_DATE}.</td></tr>
 * <tr><td>datetime</td><td>4</td><td>For entering a date and time.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_DATETIME} |
 * {@link android.text.InputType#TYPE_DATETIME_VARIATION_NORMAL}.</td></tr>
 * <tr><td>none</td><td>0</td><td>There is no content type.  The text is not editable.</td></tr>
 * <tr><td>number</td><td>2</td><td>A numeric only field.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
 * {@link android.text.InputType#TYPE_NUMBER_VARIATION_NORMAL}.</td></tr>
 * <tr><td>numberDecimal</td><td>2002</td><td>Can be combined with <var>number</var> and its other options to
 * allow a decimal (fractional) number.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
 * {@link android.text.InputType#TYPE_NUMBER_FLAG_DECIMAL}.</td></tr>
 * <tr><td>numberPassword</td><td>12</td><td>A numeric password field.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
 * {@link android.text.InputType#TYPE_NUMBER_VARIATION_PASSWORD}.</td></tr>
 * <tr><td>numberSigned</td><td>1002</td><td>Can be combined with <var>number</var> and its other options to
 * allow a signed number.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
 * {@link android.text.InputType#TYPE_NUMBER_FLAG_SIGNED}.</td></tr>
 * <tr><td>phone</td><td>3</td><td>For entering a phone number.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_PHONE}.</td></tr>
 * <tr><td>text</td><td>1</td><td>Just plain old text.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_NORMAL}.</td></tr>
 * <tr><td>textAutoComplete</td><td>10001</td><td>Can be combined with <var>text</var> and its variations to
 * specify that this field will be doing its own auto-completion and
 * talking with the input method appropriately.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_AUTO_COMPLETE}.</td></tr>
 * <tr><td>textAutoCorrect</td><td>8001</td><td>Can be combined with <var>text</var> and its variations to
 * request auto-correction of text being input.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_AUTO_CORRECT}.</td></tr>
 * <tr><td>textCapCharacters</td><td>1001</td><td>Can be combined with <var>text</var> and its variations to
 * request capitalization of all characters.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_CHARACTERS}.</td></tr>
 * <tr><td>textCapSentences</td><td>4001</td><td>Can be combined with <var>text</var> and its variations to
 * request capitalization of the first character of every sentence.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_SENTENCES}.</td></tr>
 * <tr><td>textCapWords</td><td>2001</td><td>Can be combined with <var>text</var> and its variations to
 * request capitalization of the first character of every word.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_WORDS}.</td></tr>
 * <tr><td>textEmailAddress</td><td>21</td><td>Text that will be used as an e-mail address.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_EMAIL_ADDRESS}.</td></tr>
 * <tr><td>textEmailSubject</td><td>31</td><td>Text that is being supplied as the subject of an e-mail.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_EMAIL_SUBJECT}.</td></tr>
 * <tr><td>textFilter</td><td>b1</td><td>Text that is filtering some other data.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_FILTER}.</td></tr>
 * <tr><td>textImeMultiLine</td><td>40001</td><td>Can be combined with <var>text</var> and its variations to
 * indicate that though the regular text view should not be multiple
 * lines, the IME should provide multiple lines if it can.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_IME_MULTI_LINE}.</td></tr>
 * <tr><td>textLongMessage</td><td>51</td><td>Text that is the content of a long message.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_LONG_MESSAGE}.</td></tr>
 * <tr><td>textMultiLine</td><td>20001</td><td>Can be combined with <var>text</var> and its variations to
 * allow multiple lines of text in the field.  If this flag is not set,
 * the text field will be constrained to a single line.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_MULTI_LINE}.</td></tr>
 * <tr><td>textNoSuggestions</td><td>80001</td><td>Can be combined with <var>text</var> and its variations to
 * indicate that the IME should not show any
 * dictionary-based word suggestions.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_NO_SUGGESTIONS}.</td></tr>
 * <tr><td>textPassword</td><td>81</td><td>Text that is a password.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_PASSWORD}.</td></tr>
 * <tr><td>textPersonName</td><td>61</td><td>Text that is the name of a person.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_PERSON_NAME}.</td></tr>
 * <tr><td>textPhonetic</td><td>c1</td><td>Text that is for phonetic pronunciation, such as a phonetic name
 * field in a contact entry.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_PHONETIC}.</td></tr>
 * <tr><td>textPostalAddress</td><td>71</td><td>Text that is being supplied as a postal mailing address.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_POSTAL_ADDRESS}.</td></tr>
 * <tr><td>textShortMessage</td><td>41</td><td>Text that is the content of a short message.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_SHORT_MESSAGE}.</td></tr>
 * <tr><td>textUri</td><td>11</td><td>Text that will be used as a URI.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_URI}.</td></tr>
 * <tr><td>textVisiblePassword</td><td>91</td><td>Text that is a password that should be visible.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_VISIBLE_PASSWORD}.</td></tr>
 * <tr><td>textWebEditText</td><td>a1</td><td>Text that is being supplied as text in a web form.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_EDIT_TEXT}.</td></tr>
 * <tr><td>textWebEmailAddress</td><td>d1</td><td>Text that will be used as an e-mail address on a web form.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS}.</td></tr>
 * <tr><td>textWebPassword</td><td>e1</td><td>Text that will be used as a password on a web form.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_PASSWORD}.</td></tr>
 * <tr><td>time</td><td>24</td><td>For entering a time.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_DATETIME} |
 * {@link android.text.InputType#TYPE_DATETIME_VARIATION_TIME}.</td></tr>
 * </table>
 * @apiSince 3
 */

public static final int inputType = 16843296; // 0x1010220

/**
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 * @apiSince 21
 */

public static final int inset = 16843957; // 0x10104b5

/**
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 * @apiSince 1
 */

public static final int insetBottom = 16843194; // 0x10101ba

/**
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 * @apiSince 1
 */

public static final int insetLeft = 16843191; // 0x10101b7

/**
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 * @apiSince 1
 */

public static final int insetRight = 16843192; // 0x10101b8

/**
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 * @apiSince 1
 */

public static final int insetTop = 16843193; // 0x10101b9

/**
 * The default install location defined by an application.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>auto</td><td>0</td><td>Let the system decide ideal install location</td></tr>
 * <tr><td>internalOnly</td><td>1</td><td>Explicitly request to be installed on internal phone storage
 * only.</td></tr>
 * <tr><td>preferExternal</td><td>2</td><td>Prefer to be installed on SD card. There is no guarantee that
 * the system will honor this request. The application might end
 * up being installed on internal storage if external media
 * is unavailable or too full.</td></tr>
 * </table>
 * @apiSince 8
 */

public static final int installLocation = 16843447; // 0x10102b7

/**
 * A recommended timeout in milliseconds used in
 * {@link android.view.accessibility.AccessibilityManager#getRecommendedTimeoutMillis(int, int)
 * android.view.accessibility.AccessibilityManager.getRecommendedTimeoutMillis(int, int)}
 * to return a suitable value for interactive controls.
 * This setting can be changed at runtime by calling
 * {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
 * android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 29
 */

public static final int interactiveUiTimeout = 16844181; // 0x1010595

/**
 * Sets the acceleration curve for the indeterminate animation. Defaults to a linear
 * interpolation. Only affects the indeterminate animation if the indeterminate Drawable
 * does not implement android.graphics.drawable.Animatable.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int interpolator = 16843073; // 0x1010141

/**
 * Set to true to tell the SyncManager to automatically call setIsSyncable(..., ..., 1)
 * for the SyncAdapter instead of issuaing an initialization sync to the SyncAdapter.
 * Defaults to false.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 11
 */

public static final int isAlwaysSyncable = 16843571; // 0x1010333

/**
 * Set to {@code true} if this subtype is ASCII capable. If the subtype is ASCII
 * capable, it should guarantee that the user can input ASCII characters with
 * this subtype. This is important because many password fields only allow
 * ASCII-characters.
 * <p>Note: In order to avoid some known system issues on
 * {@link android.os.Build.VERSION_CODES#P} and prior OSes, you may want to include
 * {@code "AsciiCapable"} in
 * {@link android.R.styleable#InputMethod_Subtype_imeSubtypeExtraValue} when you specify
 * {@code true} to this attribute.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 19
 */

public static final int isAsciiCapable = 16843753; // 0x10103e9

/**
 * Set true if the subtype is auxiliary.  An auxiliary subtype won't be shown in the
 * input method selection list in the settings app.
 * InputMethodManager#switchToLastInputMethod will ignore auxiliary subtypes when it
 * chooses a target subtype.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 14
 */

public static final int isAuxiliary = 16843647; // 0x101037f

/**
 * Set to true in all of the configurations for which this input
 * method should be considered an option as the default.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 3
 */

public static final int isDefault = 16843297; // 0x1010221

/**
 * If set to <code>true</code>, indicates to the platform that this APK is
 * a 'feature' split and that it implicitly depends on the base APK. This distinguishes
 * this split APK from a 'configuration' split, which provides resource overrides
 * for a particular 'feature' split. Only useful when the base APK specifies
 * <code>android:isolatedSplits="true"</code>.
 * <p>The default value of this attribute is <code>false</code>.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 26
 */

public static final int isFeatureSplit = 16844123; // 0x101055b

/**
 * A boolean flag used to indicate if an application is a Game or not.
 * <p>This information can be used by the system to group together
 * applications that are classified as games, and display them separately
 * from the other applications.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 21
 */

public static final int isGame = 16843764; // 0x10103f4

/**
 * Whether this rating bar is an indicator (and non-changeable by the user).
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int isIndicator = 16843079; // 0x1010147

/**
 * Specifies that a theme has a light background with dark text on top.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 29
 */

public static final int isLightTheme = 16844176; // 0x1010590

/**
 * Whether this is a modifier key such as Alt or Shift.
 * {@deprecated Copy this definition into your own application project.}
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 3
 * @deprecatedSince 29
 */

@Deprecated public static final int isModifier = 16843334; // 0x1010246

/**
 * Whether long-pressing on this key will make it repeat.
 * {@deprecated Copy this definition into your own application project.}
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 3
 * @deprecatedSince 29
 */

@Deprecated public static final int isRepeatable = 16843336; // 0x1010248

/**
 * Set this if the view will serve as a scrolling container, meaning
 * that it can be resized to shrink its overall window so that there
 * will be space for an input method.  If not set, the default
 * value will be true if "scrollbars" has the vertical scrollbar
 * set, else it will be false.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 3
 */

public static final int isScrollContainer = 16843342; // 0x101024e

/**
 * Flag to specify if this APK requires at least one split [either feature or
 * resource] to be present in order to function. Default value is false.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 29
 */

public static final int isSplitRequired = 16844177; // 0x1010591

/**
 * Whether the given RRO is static or not.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 26
 */

public static final int isStatic = 16844122; // 0x101055a

/**
 * Whether this is a toggle key.
 * {@deprecated Copy this definition into your own application project.}
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 3
 * @deprecatedSince 29
 */

@Deprecated public static final int isSticky = 16843335; // 0x1010247

/**
 * If set to true, this service will run under a special process
 * that is isolated from the rest of the system.  The only communication
 * with it is through the Service API (binding and starting).
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 16
 */

public static final int isolatedProcess = 16843689; // 0x10103a9

/**
 * If set to <code>true</code>, indicates to the platform that any split APKs
 * installed for this application should be loaded into their own Context
 * objects and not appear in the base application's Context.
 * <p>The default value of this attribute is <code>false</code>.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 26
 */

public static final int isolatedSplits = 16844107; // 0x101054b

/**
 * Default background for each menu item.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int itemBackground = 16843056; // 0x1010130

/**
 * Default disabled icon alpha for each menu item that shows an icon.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 1
 */

public static final int itemIconDisabledAlpha = 16843057; // 0x1010131

/**
 * Specifies padding that should be applied to the left and right sides of
 * system-provided items in the bar.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 11
 */

public static final int itemPadding = 16843565; // 0x101032d

/**
 * Default appearance of menu item text.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int itemTextAppearance = 16843052; // 0x101012c

/**
 * Mode for justification.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>inter_word</td><td>1</td><td>Justification by stretching word spacing.</td></tr>
 * <tr><td>none</td><td>0</td><td>No justification.</td></tr>
 * </table>
 * @apiSince 26
 */

public static final int justificationMode = 16844135; // 0x1010567

/**
 * Controls whether the view's window should keep the screen on
 * while visible.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int keepScreenOn = 16843286; // 0x1010216

/**
 * The key to store the Preference value.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int key = 16843240; // 0x10101e8

/**
 * Image for the key. This image needs to be a StateListDrawable, with the following
 * possible states: normal, pressed, checkable, checkable+pressed, checkable+checked,
 * checkable+checked+pressed.
 * {@deprecated Copy this definition into your own application project.}
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 3
 * @deprecatedSince 29
 */

@Deprecated public static final int keyBackground = 16843315; // 0x1010233

/**
 * Key edge flags.
 * {@deprecated Copy this definition into your own application project.}
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>left</td><td>1</td><td>Key is anchored to the left of the keyboard.
 * {@deprecated Copy this definition into your own application project.}</td></tr>
 * <tr><td>right</td><td>2</td><td>Key is anchored to the right of the keyboard.
 * {@deprecated Copy this definition into your own application project.}</td></tr>
 * </table>
 * @apiSince 3
 * @deprecatedSince 29
 */

@Deprecated public static final int keyEdgeFlags = 16843333; // 0x1010245

/**
 * Default height of a key, in pixels or percentage of display width.
 * {@deprecated Copy this definition into your own application project.}
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 * @apiSince 3
 * @deprecatedSince 29
 */

@Deprecated public static final int keyHeight = 16843326; // 0x101023e

/**
 * The icon to display on the key instead of the label.
 * {@deprecated Copy this definition into your own application project.}
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 3
 * @deprecatedSince 29
 */

@Deprecated public static final int keyIcon = 16843340; // 0x101024c

/**
 * The label to display on the key.
 * {@deprecated Copy this definition into your own application project.}
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 3
 * @deprecatedSince 29
 */

@Deprecated public static final int keyLabel = 16843339; // 0x101024b

/**
 * The string of characters to output when this key is pressed.
 * {@deprecated Copy this definition into your own application project.}
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 3
 * @deprecatedSince 29
 */

@Deprecated public static final int keyOutputText = 16843338; // 0x101024a

/**
 * Height of the key press feedback popup.
 * {@deprecated Copy this definition into your own application project.}
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 3
 * @deprecatedSince 29
 */

@Deprecated public static final int keyPreviewHeight = 16843321; // 0x1010239

/**
 * Layout resource for key press feedback.
 * {@deprecated Copy this definition into your own application project.}
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 3
 * @deprecatedSince 29
 */

@Deprecated public static final int keyPreviewLayout = 16843319; // 0x1010237

/**
 * Vertical offset of the key press feedback from the key.
 * {@deprecated Copy this definition into your own application project.}
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 3
 * @deprecatedSince 29
 */

@Deprecated public static final int keyPreviewOffset = 16843320; // 0x1010238

/**
 * Groups signing keys into a {@code KeySet} for easier reference in
 * other APIs. However, currently no APIs use this.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 * @apiSince 19
 */

public static final int keySet = 16843739; // 0x10103db

/**
 * Color to use for the label in a key.
 * {@deprecated Copy this definition into your own application project.}
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 3
 * @deprecatedSince 29
 */

@Deprecated public static final int keyTextColor = 16843318; // 0x1010236

/**
 * Size of the text for character keys.
 * {@deprecated Copy this definition into your own application project.}
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 3
 * @deprecatedSince 29
 */

@Deprecated public static final int keyTextSize = 16843316; // 0x1010234

/**
 * Default width of a key, in pixels or percentage of display width.
 * {@deprecated Copy this definition into your own application project.}
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 * @apiSince 3
 * @deprecatedSince 29
 */

@Deprecated public static final int keyWidth = 16843325; // 0x101023d

/**
 * The key character map file resource.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 16
 */

public static final int keyboardLayout = 16843691; // 0x10103ab

/**
 * Mode of the keyboard. If the mode doesn't match the
 * requested keyboard mode, the row will be skipped.
 * {@deprecated Copy this definition into your own application project.}
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 3
 * @deprecatedSince 29
 */

@Deprecated public static final int keyboardMode = 16843341; // 0x101024d

/**
 * Whether this view is a root of a keyboard navigation cluster.
 * See {@link android.view.View#setKeyboardNavigationCluster(boolean)}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 26
 */

public static final int keyboardNavigationCluster = 16844096; // 0x1010540

/**
 * This enum provides the same keycode values as can be found in
 * {@link android.view.KeyEvent}.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>KEYCODE_0</td><td>7</td><td></td></tr>
 * <tr><td>KEYCODE_1</td><td>8</td><td></td></tr>
 * <tr><td>KEYCODE_11</td><td>e3</td><td></td></tr>
 * <tr><td>KEYCODE_12</td><td>e4</td><td></td></tr>
 * <tr><td>KEYCODE_2</td><td>9</td><td></td></tr>
 * <tr><td>KEYCODE_3</td><td>a</td><td></td></tr>
 * <tr><td>KEYCODE_3D_MODE</td><td>ce</td><td></td></tr>
 * <tr><td>KEYCODE_4</td><td>b</td><td></td></tr>
 * <tr><td>KEYCODE_5</td><td>c</td><td></td></tr>
 * <tr><td>KEYCODE_6</td><td>d</td><td></td></tr>
 * <tr><td>KEYCODE_7</td><td>e</td><td></td></tr>
 * <tr><td>KEYCODE_8</td><td>f</td><td></td></tr>
 * <tr><td>KEYCODE_9</td><td>10</td><td></td></tr>
 * <tr><td>KEYCODE_A</td><td>1d</td><td></td></tr>
 * <tr><td>KEYCODE_ALL_APPS</td><td>11c</td><td></td></tr>
 * <tr><td>KEYCODE_ALT_LEFT</td><td>39</td><td></td></tr>
 * <tr><td>KEYCODE_ALT_RIGHT</td><td>3a</td><td></td></tr>
 * <tr><td>KEYCODE_APOSTROPHE</td><td>4b</td><td></td></tr>
 * <tr><td>KEYCODE_APP_SWITCH</td><td>bb</td><td></td></tr>
 * <tr><td>KEYCODE_ASSIST</td><td>db</td><td></td></tr>
 * <tr><td>KEYCODE_AT</td><td>4d</td><td></td></tr>
 * <tr><td>KEYCODE_AVR_INPUT</td><td>b6</td><td></td></tr>
 * <tr><td>KEYCODE_AVR_POWER</td><td>b5</td><td></td></tr>
 * <tr><td>KEYCODE_B</td><td>1e</td><td></td></tr>
 * <tr><td>KEYCODE_BACK</td><td>4</td><td></td></tr>
 * <tr><td>KEYCODE_BACKSLASH</td><td>49</td><td></td></tr>
 * <tr><td>KEYCODE_BOOKMARK</td><td>ae</td><td></td></tr>
 * <tr><td>KEYCODE_BREAK</td><td>79</td><td></td></tr>
 * <tr><td>KEYCODE_BRIGHTNESS_DOWN</td><td>dc</td><td></td></tr>
 * <tr><td>KEYCODE_BRIGHTNESS_UP</td><td>dd</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_1</td><td>bc</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_10</td><td>c5</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_11</td><td>c6</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_12</td><td>c7</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_13</td><td>c8</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_14</td><td>c9</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_15</td><td>ca</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_16</td><td>cb</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_2</td><td>bd</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_3</td><td>be</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_4</td><td>bf</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_5</td><td>c0</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_6</td><td>c1</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_7</td><td>c2</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_8</td><td>c3</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_9</td><td>c4</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_A</td><td>60</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_B</td><td>61</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_C</td><td>62</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_L1</td><td>66</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_L2</td><td>68</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_MODE</td><td>6e</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_R1</td><td>67</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_R2</td><td>69</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_SELECT</td><td>6d</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_START</td><td>6c</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_THUMBL</td><td>6a</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_THUMBR</td><td>6b</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_X</td><td>63</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_Y</td><td>64</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_Z</td><td>65</td><td></td></tr>
 * <tr><td>KEYCODE_C</td><td>1f</td><td></td></tr>
 * <tr><td>KEYCODE_CALCULATOR</td><td>d2</td><td></td></tr>
 * <tr><td>KEYCODE_CALENDAR</td><td>d0</td><td></td></tr>
 * <tr><td>KEYCODE_CALL</td><td>5</td><td></td></tr>
 * <tr><td>KEYCODE_CAMERA</td><td>1b</td><td></td></tr>
 * <tr><td>KEYCODE_CAPS_LOCK</td><td>73</td><td></td></tr>
 * <tr><td>KEYCODE_CAPTIONS</td><td>af</td><td></td></tr>
 * <tr><td>KEYCODE_CHANNEL_DOWN</td><td>a7</td><td></td></tr>
 * <tr><td>KEYCODE_CHANNEL_UP</td><td>a6</td><td></td></tr>
 * <tr><td>KEYCODE_CLEAR</td><td>1c</td><td></td></tr>
 * <tr><td>KEYCODE_COMMA</td><td>37</td><td></td></tr>
 * <tr><td>KEYCODE_CONTACTS</td><td>cf</td><td></td></tr>
 * <tr><td>KEYCODE_COPY</td><td>116</td><td></td></tr>
 * <tr><td>KEYCODE_CTRL_LEFT</td><td>71</td><td></td></tr>
 * <tr><td>KEYCODE_CTRL_RIGHT</td><td>72</td><td></td></tr>
 * <tr><td>KEYCODE_CUT</td><td>115</td><td></td></tr>
 * <tr><td>KEYCODE_D</td><td>20</td><td></td></tr>
 * <tr><td>KEYCODE_DEL</td><td>43</td><td></td></tr>
 * <tr><td>KEYCODE_DPAD_CENTER</td><td>17</td><td></td></tr>
 * <tr><td>KEYCODE_DPAD_DOWN</td><td>14</td><td></td></tr>
 * <tr><td>KEYCODE_DPAD_DOWN_LEFT</td><td>10d</td><td></td></tr>
 * <tr><td>KEYCODE_DPAD_DOWN_RIGHT</td><td>10f</td><td></td></tr>
 * <tr><td>KEYCODE_DPAD_LEFT</td><td>15</td><td></td></tr>
 * <tr><td>KEYCODE_DPAD_RIGHT</td><td>16</td><td></td></tr>
 * <tr><td>KEYCODE_DPAD_UP</td><td>13</td><td></td></tr>
 * <tr><td>KEYCODE_DPAD_UP_LEFT</td><td>10c</td><td></td></tr>
 * <tr><td>KEYCODE_DPAD_UP_RIGHT</td><td>10e</td><td></td></tr>
 * <tr><td>KEYCODE_DVR</td><td>ad</td><td></td></tr>
 * <tr><td>KEYCODE_E</td><td>21</td><td></td></tr>
 * <tr><td>KEYCODE_EISU</td><td>d4</td><td></td></tr>
 * <tr><td>KEYCODE_ENDCALL</td><td>6</td><td></td></tr>
 * <tr><td>KEYCODE_ENTER</td><td>42</td><td></td></tr>
 * <tr><td>KEYCODE_ENVELOPE</td><td>41</td><td></td></tr>
 * <tr><td>KEYCODE_EQUALS</td><td>46</td><td></td></tr>
 * <tr><td>KEYCODE_ESCAPE</td><td>6f</td><td></td></tr>
 * <tr><td>KEYCODE_EXPLORER</td><td>40</td><td></td></tr>
 * <tr><td>KEYCODE_F</td><td>22</td><td></td></tr>
 * <tr><td>KEYCODE_F1</td><td>83</td><td></td></tr>
 * <tr><td>KEYCODE_F10</td><td>8c</td><td></td></tr>
 * <tr><td>KEYCODE_F11</td><td>8d</td><td></td></tr>
 * <tr><td>KEYCODE_F12</td><td>8e</td><td></td></tr>
 * <tr><td>KEYCODE_F2</td><td>84</td><td></td></tr>
 * <tr><td>KEYCODE_F3</td><td>85</td><td></td></tr>
 * <tr><td>KEYCODE_F4</td><td>86</td><td></td></tr>
 * <tr><td>KEYCODE_F5</td><td>87</td><td></td></tr>
 * <tr><td>KEYCODE_F6</td><td>88</td><td></td></tr>
 * <tr><td>KEYCODE_F7</td><td>89</td><td></td></tr>
 * <tr><td>KEYCODE_F8</td><td>8a</td><td></td></tr>
 * <tr><td>KEYCODE_F9</td><td>8b</td><td></td></tr>
 * <tr><td>KEYCODE_FOCUS</td><td>50</td><td></td></tr>
 * <tr><td>KEYCODE_FORWARD</td><td>7d</td><td></td></tr>
 * <tr><td>KEYCODE_FORWARD_DEL</td><td>70</td><td></td></tr>
 * <tr><td>KEYCODE_FUNCTION</td><td>77</td><td></td></tr>
 * <tr><td>KEYCODE_G</td><td>23</td><td></td></tr>
 * <tr><td>KEYCODE_GRAVE</td><td>44</td><td></td></tr>
 * <tr><td>KEYCODE_GUIDE</td><td>ac</td><td></td></tr>
 * <tr><td>KEYCODE_H</td><td>24</td><td></td></tr>
 * <tr><td>KEYCODE_HEADSETHOOK</td><td>4f</td><td></td></tr>
 * <tr><td>KEYCODE_HELP</td><td>103</td><td></td></tr>
 * <tr><td>KEYCODE_HENKAN</td><td>d6</td><td></td></tr>
 * <tr><td>KEYCODE_HOME</td><td>3</td><td></td></tr>
 * <tr><td>KEYCODE_I</td><td>25</td><td></td></tr>
 * <tr><td>KEYCODE_INFO</td><td>a5</td><td></td></tr>
 * <tr><td>KEYCODE_INSERT</td><td>7c</td><td></td></tr>
 * <tr><td>KEYCODE_J</td><td>26</td><td></td></tr>
 * <tr><td>KEYCODE_K</td><td>27</td><td></td></tr>
 * <tr><td>KEYCODE_KANA</td><td>da</td><td></td></tr>
 * <tr><td>KEYCODE_KATAKANA_HIRAGANA</td><td>d7</td><td></td></tr>
 * <tr><td>KEYCODE_L</td><td>28</td><td></td></tr>
 * <tr><td>KEYCODE_LANGUAGE_SWITCH</td><td>cc</td><td></td></tr>
 * <tr><td>KEYCODE_LAST_CHANNEL</td><td>e5</td><td></td></tr>
 * <tr><td>KEYCODE_LEFT_BRACKET</td><td>47</td><td></td></tr>
 * <tr><td>KEYCODE_M</td><td>29</td><td></td></tr>
 * <tr><td>KEYCODE_MANNER_MODE</td><td>cd</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_AUDIO_TRACK</td><td>de</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_CLOSE</td><td>80</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_EJECT</td><td>81</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_FAST_FORWARD</td><td>5a</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_NEXT</td><td>57</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_PAUSE</td><td>7f</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_PLAY</td><td>7e</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_PLAY_PAUSE</td><td>55</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_PREVIOUS</td><td>58</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_RECORD</td><td>82</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_REWIND</td><td>59</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_SKIP_BACKWARD</td><td>111</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_SKIP_FORWARD</td><td>110</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_SLEEP</td><td>df</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_STEP_BACKWARD</td><td>113</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_STEP_FORWARD</td><td>112</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_STOP</td><td>56</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_TOP_MENU</td><td>e2</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_WAKEUP</td><td>e0</td><td></td></tr>
 * <tr><td>KEYCODE_MENU</td><td>52</td><td></td></tr>
 * <tr><td>KEYCODE_META_LEFT</td><td>75</td><td></td></tr>
 * <tr><td>KEYCODE_META_RIGHT</td><td>76</td><td></td></tr>
 * <tr><td>KEYCODE_MINUS</td><td>45</td><td></td></tr>
 * <tr><td>KEYCODE_MOVE_END</td><td>7b</td><td></td></tr>
 * <tr><td>KEYCODE_MOVE_HOME</td><td>7a</td><td></td></tr>
 * <tr><td>KEYCODE_MUHENKAN</td><td>d5</td><td></td></tr>
 * <tr><td>KEYCODE_MUSIC</td><td>d1</td><td></td></tr>
 * <tr><td>KEYCODE_MUTE</td><td>5b</td><td></td></tr>
 * <tr><td>KEYCODE_N</td><td>2a</td><td></td></tr>
 * <tr><td>KEYCODE_NAVIGATE_IN</td><td>106</td><td></td></tr>
 * <tr><td>KEYCODE_NAVIGATE_NEXT</td><td>105</td><td></td></tr>
 * <tr><td>KEYCODE_NAVIGATE_OUT</td><td>107</td><td></td></tr>
 * <tr><td>KEYCODE_NAVIGATE_PREVIOUS</td><td>104</td><td></td></tr>
 * <tr><td>KEYCODE_NOTIFICATION</td><td>53</td><td></td></tr>
 * <tr><td>KEYCODE_NUM</td><td>4e</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_0</td><td>90</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_1</td><td>91</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_2</td><td>92</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_3</td><td>93</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_4</td><td>94</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_5</td><td>95</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_6</td><td>96</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_7</td><td>97</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_8</td><td>98</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_9</td><td>99</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_ADD</td><td>9d</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_COMMA</td><td>9f</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_DIVIDE</td><td>9a</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_DOT</td><td>9e</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_ENTER</td><td>a0</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_EQUALS</td><td>a1</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_LEFT_PAREN</td><td>a2</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_MULTIPLY</td><td>9b</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_RIGHT_PAREN</td><td>a3</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_SUBTRACT</td><td>9c</td><td></td></tr>
 * <tr><td>KEYCODE_NUM_LOCK</td><td>8f</td><td></td></tr>
 * <tr><td>KEYCODE_O</td><td>2b</td><td></td></tr>
 * <tr><td>KEYCODE_P</td><td>2c</td><td></td></tr>
 * <tr><td>KEYCODE_PAGE_DOWN</td><td>5d</td><td></td></tr>
 * <tr><td>KEYCODE_PAGE_UP</td><td>5c</td><td></td></tr>
 * <tr><td>KEYCODE_PAIRING</td><td>e1</td><td></td></tr>
 * <tr><td>KEYCODE_PASTE</td><td>117</td><td></td></tr>
 * <tr><td>KEYCODE_PERIOD</td><td>38</td><td></td></tr>
 * <tr><td>KEYCODE_PICTSYMBOLS</td><td>5e</td><td></td></tr>
 * <tr><td>KEYCODE_PLUS</td><td>51</td><td></td></tr>
 * <tr><td>KEYCODE_POUND</td><td>12</td><td></td></tr>
 * <tr><td>KEYCODE_POWER</td><td>1a</td><td></td></tr>
 * <tr><td>KEYCODE_PROFILE_SWITCH</td><td>120</td><td></td></tr>
 * <tr><td>KEYCODE_PROG_BLUE</td><td>ba</td><td></td></tr>
 * <tr><td>KEYCODE_PROG_GRED</td><td>b7</td><td></td></tr>
 * <tr><td>KEYCODE_PROG_GREEN</td><td>b8</td><td></td></tr>
 * <tr><td>KEYCODE_PROG_YELLOW</td><td>b9</td><td></td></tr>
 * <tr><td>KEYCODE_Q</td><td>2d</td><td></td></tr>
 * <tr><td>KEYCODE_R</td><td>2e</td><td></td></tr>
 * <tr><td>KEYCODE_REFRESH</td><td>11d</td><td></td></tr>
 * <tr><td>KEYCODE_RIGHT_BRACKET</td><td>48</td><td></td></tr>
 * <tr><td>KEYCODE_RO</td><td>d9</td><td></td></tr>
 * <tr><td>KEYCODE_S</td><td>2f</td><td></td></tr>
 * <tr><td>KEYCODE_SCROLL_LOCK</td><td>74</td><td></td></tr>
 * <tr><td>KEYCODE_SEARCH</td><td>54</td><td></td></tr>
 * <tr><td>KEYCODE_SEMICOLON</td><td>4a</td><td></td></tr>
 * <tr><td>KEYCODE_SETTINGS</td><td>b0</td><td></td></tr>
 * <tr><td>KEYCODE_SHIFT_LEFT</td><td>3b</td><td></td></tr>
 * <tr><td>KEYCODE_SHIFT_RIGHT</td><td>3c</td><td></td></tr>
 * <tr><td>KEYCODE_SLASH</td><td>4c</td><td></td></tr>
 * <tr><td>KEYCODE_SOFT_LEFT</td><td>1</td><td></td></tr>
 * <tr><td>KEYCODE_SOFT_RIGHT</td><td>2</td><td></td></tr>
 * <tr><td>KEYCODE_SOFT_SLEEP</td><td>114</td><td></td></tr>
 * <tr><td>KEYCODE_SPACE</td><td>3e</td><td></td></tr>
 * <tr><td>KEYCODE_STAR</td><td>11</td><td></td></tr>
 * <tr><td>KEYCODE_STB_INPUT</td><td>b4</td><td></td></tr>
 * <tr><td>KEYCODE_STB_POWER</td><td>b3</td><td></td></tr>
 * <tr><td>KEYCODE_STEM_1</td><td>109</td><td></td></tr>
 * <tr><td>KEYCODE_STEM_2</td><td>10a</td><td></td></tr>
 * <tr><td>KEYCODE_STEM_3</td><td>10b</td><td></td></tr>
 * <tr><td>KEYCODE_STEM_PRIMARY</td><td>108</td><td></td></tr>
 * <tr><td>KEYCODE_SWITCH_CHARSET</td><td>5f</td><td></td></tr>
 * <tr><td>KEYCODE_SYM</td><td>3f</td><td></td></tr>
 * <tr><td>KEYCODE_SYSRQ</td><td>78</td><td></td></tr>
 * <tr><td>KEYCODE_SYSTEM_NAVIGATION_DOWN</td><td>119</td><td></td></tr>
 * <tr><td>KEYCODE_SYSTEM_NAVIGATION_LEFT</td><td>11a</td><td></td></tr>
 * <tr><td>KEYCODE_SYSTEM_NAVIGATION_RIGHT</td><td>11b</td><td></td></tr>
 * <tr><td>KEYCODE_SYSTEM_NAVIGATION_UP</td><td>118</td><td></td></tr>
 * <tr><td>KEYCODE_T</td><td>30</td><td></td></tr>
 * <tr><td>KEYCODE_TAB</td><td>3d</td><td></td></tr>
 * <tr><td>KEYCODE_THUMBS_DOWN</td><td>11f</td><td></td></tr>
 * <tr><td>KEYCODE_THUMBS_UP</td><td>11e</td><td></td></tr>
 * <tr><td>KEYCODE_TV</td><td>aa</td><td></td></tr>
 * <tr><td>KEYCODE_TV_ANTENNA_CABLE</td><td>f2</td><td></td></tr>
 * <tr><td>KEYCODE_TV_AUDIO_DESCRIPTION</td><td>fc</td><td></td></tr>
 * <tr><td>KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN</td><td>fe</td><td></td></tr>
 * <tr><td>KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP</td><td>fd</td><td></td></tr>
 * <tr><td>KEYCODE_TV_CONTENTS_MENU</td><td>100</td><td></td></tr>
 * <tr><td>KEYCODE_TV_DATA_SERVICE</td><td>e6</td><td></td></tr>
 * <tr><td>KEYCODE_TV_INPUT</td><td>b2</td><td></td></tr>
 * <tr><td>KEYCODE_TV_INPUT_COMPONENT_1</td><td>f9</td><td></td></tr>
 * <tr><td>KEYCODE_TV_INPUT_COMPONENT_2</td><td>fa</td><td></td></tr>
 * <tr><td>KEYCODE_TV_INPUT_COMPOSITE_1</td><td>f7</td><td></td></tr>
 * <tr><td>KEYCODE_TV_INPUT_COMPOSITE_2</td><td>f8</td><td></td></tr>
 * <tr><td>KEYCODE_TV_INPUT_HDMI_1</td><td>f3</td><td></td></tr>
 * <tr><td>KEYCODE_TV_INPUT_HDMI_2</td><td>f4</td><td></td></tr>
 * <tr><td>KEYCODE_TV_INPUT_HDMI_3</td><td>f5</td><td></td></tr>
 * <tr><td>KEYCODE_TV_INPUT_HDMI_4</td><td>f6</td><td></td></tr>
 * <tr><td>KEYCODE_TV_INPUT_VGA_1</td><td>fb</td><td></td></tr>
 * <tr><td>KEYCODE_TV_MEDIA_CONTEXT_MENU</td><td>101</td><td></td></tr>
 * <tr><td>KEYCODE_TV_NETWORK</td><td>f1</td><td></td></tr>
 * <tr><td>KEYCODE_TV_NUMBER_ENTRY</td><td>ea</td><td></td></tr>
 * <tr><td>KEYCODE_TV_POWER</td><td>b1</td><td></td></tr>
 * <tr><td>KEYCODE_TV_RADIO_SERVICE</td><td>e8</td><td></td></tr>
 * <tr><td>KEYCODE_TV_SATELLITE</td><td>ed</td><td></td></tr>
 * <tr><td>KEYCODE_TV_SATELLITE_BS</td><td>ee</td><td></td></tr>
 * <tr><td>KEYCODE_TV_SATELLITE_CS</td><td>ef</td><td></td></tr>
 * <tr><td>KEYCODE_TV_SATELLITE_SERVICE</td><td>f0</td><td></td></tr>
 * <tr><td>KEYCODE_TV_TELETEXT</td><td>e9</td><td></td></tr>
 * <tr><td>KEYCODE_TV_TERRESTRIAL_ANALOG</td><td>eb</td><td></td></tr>
 * <tr><td>KEYCODE_TV_TERRESTRIAL_DIGITAL</td><td>ec</td><td></td></tr>
 * <tr><td>KEYCODE_TV_TIMER_PROGRAMMING</td><td>102</td><td></td></tr>
 * <tr><td>KEYCODE_TV_ZOOM_MODE</td><td>ff</td><td></td></tr>
 * <tr><td>KEYCODE_U</td><td>31</td><td></td></tr>
 * <tr><td>KEYCODE_UNKNOWN</td><td>0</td><td></td></tr>
 * <tr><td>KEYCODE_V</td><td>32</td><td></td></tr>
 * <tr><td>KEYCODE_VOICE_ASSIST</td><td>e7</td><td></td></tr>
 * <tr><td>KEYCODE_VOLUME_DOWN</td><td>19</td><td></td></tr>
 * <tr><td>KEYCODE_VOLUME_MUTE</td><td>a4</td><td></td></tr>
 * <tr><td>KEYCODE_VOLUME_UP</td><td>18</td><td></td></tr>
 * <tr><td>KEYCODE_W</td><td>33</td><td></td></tr>
 * <tr><td>KEYCODE_WINDOW</td><td>ab</td><td></td></tr>
 * <tr><td>KEYCODE_X</td><td>34</td><td></td></tr>
 * <tr><td>KEYCODE_Y</td><td>35</td><td></td></tr>
 * <tr><td>KEYCODE_YEN</td><td>d8</td><td></td></tr>
 * <tr><td>KEYCODE_Z</td><td>36</td><td></td></tr>
 * <tr><td>KEYCODE_ZENKAKU_HANKAKU</td><td>d3</td><td></td></tr>
 * <tr><td>KEYCODE_ZOOM_IN</td><td>a8</td><td></td></tr>
 * <tr><td>KEYCODE_ZOOM_OUT</td><td>a9</td><td></td></tr>
 * </table>
 * @apiSince 1
 */

public static final int keycode = 16842949; // 0x10100c5

/**
 * Whether the application in question should be terminated after its
 * settings have been restored during a full-system restore operation.
 * Single-package restore operations will never cause the application to
 * be shut down.  Full-system restore operations typically only occur once,
 * when the phone is first set up.  Third-party applications will not usually
 * need to use this attribute.
 * <p>The default is <code>true</code>, which means that after the application
 * has finished processing its data during a full-system restore, it will be
 * terminated.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 5
 */

public static final int killAfterRestore = 16843420; // 0x101029c

/**
 * A user-legible name for the given item.  Use with the
 * application tag (to supply a default label for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific label for that component).  It may also be
 * used with the intent-filter tag to supply a label to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given label will be used wherever the user sees information
 * about its associated component; for example, as the name of a
 * main activity that is displayed in the launcher.  You should
 * generally set this to a reference to a string resource, so that
 * it can be localized, however it is also allowed to supply a plain
 * string for quick and dirty programming.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int label = 16842753; // 0x1010001

/**
 * Specifies the id of a view for which this view serves as a label for
 * accessibility purposes. For example, a TextView before an EditText in
 * the UI usually specifies what infomation is contained in the EditText.
 * Hence, the TextView is a label for the EditText.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 17
 */

public static final int labelFor = 16843718; // 0x10103c6

/**
 * Size of the text for custom keys with some text and no icon.
 * {@deprecated Copy this definition into your own application project.}
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 3
 * @deprecatedSince 29
 */

@Deprecated public static final int labelTextSize = 16843317; // 0x1010235

/**
 * The BCP-47 Language Tag of the subtype.  This replaces
 * {@link android.R.styleable#InputMethod_Subtype_imeSubtypeLocale}.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 24
 */

public static final int languageTag = 16844040; // 0x1010508

/**
 * Request that your application's processes be created with
 * a large Dalvik heap.  This applies to <em>all</em> processes
 * created for the application.  It only applies to the first
 * application loaded into a process; if using a sharedUserId
 * to allow multiple applications to use a process, they all must
 * use this option consistently or will get unpredictable results.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 11
 */

public static final int largeHeap = 16843610; // 0x101035a

/**
 * Indicates whether the application supports larger screen form-factors.
 * A large screen is defined as a screen that is significantly larger
 * than a normal phone screen, and thus may require some special care
 * on the application's part to make good use of it.  An example would
 * be a VGA <em>normal density</em> screen, though even larger screens
 * are certainly possible.  An application that does not support
 * large screens will be placed as a postage stamp on such a
 * screen, so that it retains the dimensions it was originally
 * designed for.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 4
 */

public static final int largeScreens = 16843398; // 0x1010286

/**
 * Starting with {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2},
 * this is the new way to specify the screens an application is
 * compatible with.  This attribute provides the maximum
 * "smallest screen width" (as per the -swNNNdp resource configuration)
 * that the application can work well on.  If this value is smaller than
 * the "smallest screen width" of the device it is running on, the
 * application will be forced in to screen compatibility mode with
 * no way for the user to turn it off. Currently the compatibility mode only
 * emulates phone screens with a 320dp width, so compatibility mode is not applied if the
 * value for largestWidthLimitDp is larger than 320.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 13
 */

public static final int largestWidthLimitDp = 16843622; // 0x1010366

/**
 * Distance from the bottom of the TextView to the last text baseline. If set, this
 * overrides the value set for paddingBottom.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 28
 */

public static final int lastBaselineToBottomHeight = 16844158; // 0x101057e

/**
 * Specify how an activity should be launched.  See the
 * <a href="{@docRoot}guide/topics/fundamentals/tasks-and-back-stack.html">Tasks and Back
 * Stack</a> document for important information on how these options impact
 * the behavior of your application.
 * <p>If this attribute is not specified, <code>standard</code> launch
 * mode will be used.  Note that the particular launch behavior can
 * be changed in some ways at runtime through the
 * {@link android.content.Intent} flags
 * {@link android.content.Intent#FLAG_ACTIVITY_SINGLE_TOP},
 * {@link android.content.Intent#FLAG_ACTIVITY_NEW_TASK}, and
 * {@link android.content.Intent#FLAG_ACTIVITY_MULTIPLE_TASK}.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>singleInstance</td><td>3</td><td>Only allow one instance of this activity to ever be
 * running.  This activity gets a unique task with only itself running
 * in it; if it is ever launched again with the same Intent, then that
 * task will be brought forward and its
 * {@link android.app.Activity#onNewIntent Activity.onNewIntent()}
 * method called.  If this
 * activity tries to start a new activity, that new activity will be
 * launched in a separate task.  See the
 * <a href="{@docRoot}guide/topics/fundamentals/tasks-and-back-stack.html">Tasks and Back
 * Stack</a> document for more details about tasks.</td></tr>
 * <tr><td>singleTask</td><td>2</td><td>If, when starting the activity, there is already a task running
 * that starts with this activity, then instead of starting a new
 * instance the current task is brought to the front.  The existing
 * instance will receive a call to {@link android.app.Activity#onNewIntent
 * Activity.onNewIntent()}
 * with the new Intent that is being started, and with the
 * {@link android.content.Intent#FLAG_ACTIVITY_BROUGHT_TO_FRONT
 * Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT} flag set.  This is a superset
 * of the singleTop mode, where if there is already an instance
 * of the activity being started at the top of the stack, it will
 * receive the Intent as described there (without the
 * FLAG_ACTIVITY_BROUGHT_TO_FRONT flag set).  See the
 * <a href="{@docRoot}guide/topics/fundamentals/tasks-and-back-stack.html">Tasks and Back
 * Stack</a> document for more details about tasks.</td></tr>
 * <tr><td>singleTop</td><td>1</td><td>If, when starting the activity, there is already an
 * instance of the same activity class in the foreground that is
 * interacting with the user, then
 * re-use that instance.  This existing instance will receive a call to
 * {@link android.app.Activity#onNewIntent Activity.onNewIntent()} with
 * the new Intent that is being started.</td></tr>
 * <tr><td>standard</td><td>0</td><td>The default mode, which will usually create a new instance of
 * the activity when it is started, though this behavior may change
 * with the introduction of other options such as
 * {@link android.content.Intent#FLAG_ACTIVITY_NEW_TASK
 * Intent.FLAG_ACTIVITY_NEW_TASK}.</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int launchMode = 16842781; // 0x101001d

/**
 * When opening an activity in a new task using Intent.FLAG_ACTIVITY_LAUNCH_BEHIND,
 * this is the animation that is run on the activity of the old task (which is
 * already on the screen and then stays on).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int launchTaskBehindSourceAnimation = 16843922; // 0x1010492

/**
 * When opening an activity in a new task using Intent/FLAG_ACTIVITY_LAUNCH_BEHIND,
 * this is the animation that is run on the activity of the new task (which is
 * entering the screen and then leaving).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int launchTaskBehindTargetAnimation = 16843921; // 0x1010491

/**
 * Specifies the type of layer backing this view. The default value is none.
 * Refer to {@link android.view.View#setLayerType(int, android.graphics.Paint)}
 * for more information.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>hardware</td><td>2</td><td>Use a hardware layer. Refer to
 * {@link android.view.View#setLayerType(int, android.graphics.Paint)} for
 * more information.</td></tr>
 * <tr><td>none</td><td>0</td><td>Don't use a layer.</td></tr>
 * <tr><td>software</td><td>1</td><td>Use a software layer. Refer to
 * {@link android.view.View#setLayerType(int, android.graphics.Paint)} for
 * more information.</td></tr>
 * </table>
 * @apiSince 11
 */

public static final int layerType = 16843604; // 0x1010354

/**
 * Supply an identifier for the layout resource to inflate when the ViewStub
 * becomes visible or when forced to do so. The layout resource must be a
 * valid reference to a layout.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int layout = 16842994; // 0x10100f2

/**
 * Defines the layout animation to use the first time the ViewGroup is laid out.
 * Layout animations can also be started manually after the first layout.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int layoutAnimation = 16842988; // 0x10100ec

/**
 * Defines the direction of layout drawing. This typically is associated with writing
 * direction of the language script used. The possible values are "ltr" for Left-to-Right,
 * "rtl" for Right-to-Left, "locale", and "inherit" from parent view. If there is nothing
 * to inherit, "locale" is used. "locale" falls back to "en-US". "ltr" is the direction
 * used in "en-US". The default for this attribute is "inherit".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>inherit</td><td>2</td><td>Inherit from parent.</td></tr>
 * <tr><td>locale</td><td>3</td><td>Locale.</td></tr>
 * <tr><td>ltr</td><td>0</td><td>Left-to-Right.</td></tr>
 * <tr><td>rtl</td><td>1</td><td>Right-to-Left.</td></tr>
 * </table>
 * @apiSince 17
 */

public static final int layoutDirection = 16843698; // 0x10103b2

/**
 * Defines the layout mode of this ViewGroup.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>clipBounds</td><td>0</td><td>Use the children's clip bounds when laying out this container.</td></tr>
 * <tr><td>opticalBounds</td><td>1</td><td>Use the children's optical bounds when laying out this container.</td></tr>
 * </table>
 * @apiSince 18
 */

public static final int layoutMode = 16843738; // 0x10103da

/**
 * Positions the bottom edge of this view above the given anchor view ID.
 * Accommodates bottom margin of this view and top margin of anchor view.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int layout_above = 16843140; // 0x1010184

/**
 * Positions the baseline of this view on the baseline of the given anchor view ID.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int layout_alignBaseline = 16843142; // 0x1010186

/**
 * Makes the bottom edge of this view match the bottom edge of the given anchor view ID.
 * Accommodates bottom margin.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int layout_alignBottom = 16843146; // 0x101018a

/**
 * Makes the end edge of this view match the end edge of the given anchor view ID.
 * Accommodates end margin.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 17
 */

public static final int layout_alignEnd = 16843706; // 0x10103ba

/**
 * Makes the left edge of this view match the left edge of the given anchor view ID.
 * Accommodates left margin.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int layout_alignLeft = 16843143; // 0x1010187

/**
 * If true, makes the bottom edge of this view match the bottom edge of the parent.
 * Accommodates bottom margin.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int layout_alignParentBottom = 16843150; // 0x101018e

/**
 * If true, makes the end edge of this view match the end edge of the parent.
 * Accommodates end margin.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 17
 */

public static final int layout_alignParentEnd = 16843708; // 0x10103bc

/**
 * If true, makes the left edge of this view match the left edge of the parent.
 * Accommodates left margin.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int layout_alignParentLeft = 16843147; // 0x101018b

/**
 * If true, makes the right edge of this view match the right edge of the parent.
 * Accommodates right margin.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int layout_alignParentRight = 16843149; // 0x101018d

/**
 * If true, makes the start edge of this view match the start edge of the parent.
 * Accommodates start margin.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 17
 */

public static final int layout_alignParentStart = 16843707; // 0x10103bb

/**
 * If true, makes the top edge of this view match the top edge of the parent.
 * Accommodates top margin.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int layout_alignParentTop = 16843148; // 0x101018c

/**
 * Makes the right edge of this view match the right edge of the given anchor view ID.
 * Accommodates right margin.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int layout_alignRight = 16843145; // 0x1010189

/**
 * Makes the start edge of this view match the start edge of the given anchor view ID.
 * Accommodates start margin.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 17
 */

public static final int layout_alignStart = 16843705; // 0x10103b9

/**
 * Makes the top edge of this view match the top edge of the given anchor view ID.
 * Accommodates top margin.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int layout_alignTop = 16843144; // 0x1010188

/**
 * If set to true, the parent will be used as the anchor when the anchor cannot be
 * be found for layout_toLeftOf, layout_toRightOf, etc.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int layout_alignWithParentIfMissing = 16843154; // 0x1010192

/**
 * Positions the top edge of this view below the given anchor view ID.
 * Accommodates top margin of this view and bottom margin of anchor view.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int layout_below = 16843141; // 0x1010185

/**
 * If true, centers this child horizontally within its parent.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int layout_centerHorizontal = 16843152; // 0x1010190

/**
 * If true, centers this child horizontally and vertically within its parent.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int layout_centerInParent = 16843151; // 0x101018f

/**
 * If true, centers this child vertically within its parent.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int layout_centerVertical = 16843153; // 0x1010191

/**
 * The index of the column in which this child should be.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 1
 */

public static final int layout_column = 16843084; // 0x101014c

/**
 * The column span: the difference between the right and left
 * boundaries delimiting the group of cells occupied by this view.
 * The default is one.
 * See {@link android.widget.GridLayout.Spec}.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 14
 */

public static final int layout_columnSpan = 16843645; // 0x101037d

/**
 * The relative proportion of horizontal space that should be allocated to this view
 * during excess space distribution.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 21
 */

public static final int layout_columnWeight = 16843865; // 0x1010459

/**
 * Standard gravity constant that a child supplies to its parent.
 * Defines how the child view should be positioned, on both the X and Y axes, within its enclosing layout.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
 * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
 * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
 * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
 * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the horizontal gravity: a left gravity will clip the right
 * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
 * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the vertical gravity: a top gravity will clip the bottom
 * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
 * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
 * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
 * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
 * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
 * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int layout_gravity = 16842931; // 0x10100b3

/**
 * Specifies the basic height of the view.  This is a required attribute
 * for any view inside of a containing layout manager.  Its value may
 * be a dimension (such as "12dip") for a constant height or one of
 * the special constants.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>fill_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
 * This constant is deprecated starting from API Level 8 and
 * is replaced by {@code match_parent}.</td></tr>
 * <tr><td>match_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
 * Introduced in API Level 8.</td></tr>
 * <tr><td>wrap_content</td><td>fffffffe</td><td>The view should be only big enough to enclose its content (plus padding).</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int layout_height = 16842997; // 0x10100f5

/**
 * Specifies extra space on the left, top, right and bottom
 * sides of this view.  If both layout_margin and any of layout_marginLeft,
 * layout_marginRight, layout_marginStart, layout_marginEnd,
 * layout_marginTop, and layout_marginBottom are
 * also specified, the layout_margin value will take precedence over the
 * edge-specific values. This space is outside this view's bounds.
 * Margin values should be positive.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int layout_margin = 16842998; // 0x10100f6

/**
 * Specifies extra space on the bottom side of this view.
 * This space is outside this view's bounds.
 * Margin values should be positive.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int layout_marginBottom = 16843002; // 0x10100fa

/**
 * Specifies extra space on the end side of this view.
 * This space is outside this view's bounds.
 * Margin values should be positive.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 17
 */

public static final int layout_marginEnd = 16843702; // 0x10103b6

/**
 * Specifies extra space on the left and right sides of this view.
 * Specifying layout_marginHorizontal is equivalent to specifying
 * layout_marginLeft and layout_marginRight.
 * If both layout_marginHorizontal and either/both of layout_marginLeft
 * and layout_marginRight are also specified, the layout_marginHorizontal
 * value will take precedence over the
 * edge-specific values. Also, layout_margin will always take precedence over
 * any of these values, including layout_marginHorizontal.
 * This space is outside this view's bounds.
 * Margin values should be positive.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 26
 */

public static final int layout_marginHorizontal = 16844091; // 0x101053b

/**
 * Specifies extra space on the left side of this view.
 * This space is outside this view's bounds.
 * Margin values should be positive.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int layout_marginLeft = 16842999; // 0x10100f7

/**
 * Specifies extra space on the right side of this view.
 * This space is outside this view's bounds.
 * Margin values should be positive.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int layout_marginRight = 16843001; // 0x10100f9

/**
 * Specifies extra space on the start side of this view.
 * This space is outside this view's bounds.
 * Margin values should be positive.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 17
 */

public static final int layout_marginStart = 16843701; // 0x10103b5

/**
 * Specifies extra space on the top side of this view.
 * This space is outside this view's bounds.
 * Margin values should be positive.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int layout_marginTop = 16843000; // 0x10100f8

/**
 * Specifies extra space on the top and bottom sides of this view.
 * Specifying layout_marginVertical is equivalent to specifying
 * layout_marginTop and layout_marginBottom with that same value.
 * If both layout_marginVertical and either/both of layout_marginTop and
 * layout_marginBottom are also specified, the layout_marginVertical value
 * will take precedence over the edge-specific values.
 * Also, layout_margin will always take precedence over
 * any of these values, including layout_marginVertical.
 * This space is outside this view's bounds.
 * Margin values should be positive.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 26
 */

public static final int layout_marginVertical = 16844092; // 0x101053c

/**
 * The row boundary delimiting the top of the group of cells
 * occupied by this view.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 14
 */

public static final int layout_row = 16843643; // 0x101037b

/**
 * The row span: the difference between the top and bottom
 * boundaries delimiting the group of cells occupied by this view.
 * The default is one.
 * See {@link android.widget.GridLayout.Spec}.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 14
 */

public static final int layout_rowSpan = 16843644; // 0x101037c

/**
 * The relative proportion of vertical space that should be allocated to this view
 * during excess space distribution.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 21
 */

public static final int layout_rowWeight = 16843864; // 0x1010458

/**
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 1
 */

public static final int layout_scale = 16843155; // 0x1010193

/**
 * Defines how many columns this child should span.  Must be >= 1.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 1
 */

public static final int layout_span = 16843085; // 0x101014d

/**
 * Positions the start edge of this view to the end of the given anchor view ID.
 * Accommodates start margin of this view and end margin of anchor view.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 17
 */

public static final int layout_toEndOf = 16843704; // 0x10103b8

/**
 * Positions the right edge of this view to the left of the given anchor view ID.
 * Accommodates right margin of this view and left margin of anchor view.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int layout_toLeftOf = 16843138; // 0x1010182

/**
 * Positions the left edge of this view to the right of the given anchor view ID.
 * Accommodates left margin of this view and right margin of anchor view.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int layout_toRightOf = 16843139; // 0x1010183

/**
 * Positions the end edge of this view to the start of the given anchor view ID.
 * Accommodates end margin of this view and start margin of anchor view.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 17
 */

public static final int layout_toStartOf = 16843703; // 0x10103b7

/**
 * Indicates how much of the extra space in the LinearLayout is
 * allocated to the view associated with these LayoutParams. Specify
 * 0 if the view should not be stretched. Otherwise the extra pixels
 * will be pro-rated among all views whose weight is greater than 0.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 1
 */

public static final int layout_weight = 16843137; // 0x1010181

/**
 * Specifies the basic width of the view.  This is a required attribute
 * for any view inside of a containing layout manager.  Its value may
 * be a dimension (such as "12dip") for a constant width or one of
 * the special constants.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>fill_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
 * This constant is deprecated starting from API Level 8 and
 * is replaced by {@code match_parent}.</td></tr>
 * <tr><td>match_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
 * Introduced in API Level 8.</td></tr>
 * <tr><td>wrap_content</td><td>fffffffe</td><td>The view should be only big enough to enclose its content (plus padding).</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int layout_width = 16842996; // 0x10100f4

/**
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int layout_x = 16843135; // 0x101017f

/**
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int layout_y = 16843136; // 0x1010180

/**
 * Amount of left padding inside the gradient shape.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int left = 16843181; // 0x10101ad

/**
 * Text letter-spacing.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 21
 */

public static final int letterSpacing = 16843958; // 0x10104b6

/**
 * Specifies the initial drawable level in the range 0 to 10000.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 24
 */

public static final int level = 16844032; // 0x1010500

/**
 * Explicit height between lines of text. If set, this will override the values set
 * for lineSpacingExtra and lineSpacingMultiplier.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 28
 */

public static final int lineHeight = 16844159; // 0x101057f

/**
 * Extra spacing between lines of text. The value will not be applied for the last
 * line of text.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int lineSpacingExtra = 16843287; // 0x1010217

/**
 * Extra spacing between lines of text, as a multiplier. The value will not be applied
 * for the last line of text.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 1
 */

public static final int lineSpacingMultiplier = 16843288; // 0x1010218

/**
 * Makes the TextView be exactly this many lines tall.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 1
 */

public static final int lines = 16843092; // 0x1010154

/**
 * If set to false, keeps the movement method from being set
 * to the link movement method even if autoLink causes links
 * to be found.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int linksClickable = 16842929; // 0x10100b1

/**
 * Drawable used as a background for selected list items.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int listChoiceBackgroundIndicator = 16843504; // 0x10102f0

/**
 * Drawable to use for multiple choice indicators.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int listChoiceIndicatorMultiple = 16843290; // 0x101021a

/**
 * Drawable to use for single choice indicators.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int listChoiceIndicatorSingle = 16843289; // 0x1010219

/**
 * The drawable for the list divider.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int listDivider = 16843284; // 0x1010214

/**
 * The list divider used in alert dialogs.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int listDividerAlertDialog = 16843525; // 0x1010305

/**
 * Default menu-style ListView style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 24
 */

public static final int listMenuViewStyle = 16844018; // 0x10104f2

/**
 * Default ListPopupWindow style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int listPopupWindowStyle = 16843519; // 0x10102ff

/**
 * The preferred list item height.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int listPreferredItemHeight = 16842829; // 0x101004d

/**
 * A larger, more robust list item height.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 14
 */

public static final int listPreferredItemHeightLarge = 16843654; // 0x1010386

/**
 * A smaller, sleeker list item height.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 14
 */

public static final int listPreferredItemHeightSmall = 16843655; // 0x1010387

/**
 * The preferred padding along the end edge of list items.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 17
 */

public static final int listPreferredItemPaddingEnd = 16843710; // 0x10103be

/**
 * The preferred padding along the left edge of list items.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 14
 */

public static final int listPreferredItemPaddingLeft = 16843683; // 0x10103a3

/**
 * The preferred padding along the right edge of list items.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 14
 */

public static final int listPreferredItemPaddingRight = 16843684; // 0x10103a4

/**
 * The preferred padding along the start edge of list items.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 17
 */

public static final int listPreferredItemPaddingStart = 16843709; // 0x10103bd

/**
 * Drawable used to indicate the currently selected item in the list.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int listSelector = 16843003; // 0x10100fb

/**
 * TextView style for list separators.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int listSeparatorTextViewStyle = 16843272; // 0x1010208

/**
 * Default ListView style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int listViewStyle = 16842868; // 0x1010074

/**
 * ListView with white background.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int listViewWhiteStyle = 16842869; // 0x1010075

/**
 * This value indicates how tasks rooted at this activity will behave in lockTask mode.
 * While in lockTask mode the system will not launch non-permitted tasks until
 * lockTask mode is disabled.
 * <p>While in lockTask mode with multiple permitted tasks running, each launched task is
 * permitted to finish, transitioning to the previous locked task, until there is only one
 * task remaining. At that point the last task running is not permitted to finish, unless it
 * uses the value always.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>always</td><td>2</td><td>Tasks rooted at this activity will always launch into lockTask mode. If the system is
 * already in lockTask mode when this task is launched then the new task will be launched
 * on top of the current task. Tasks launched in this mode are capable of exiting
 * lockTask mode using {@link android.app.Activity#finish()}.
 * <p>Note: This mode is only available to system and privileged applications.
 * Non-privileged apps with this value will be treated as normal.</td></tr>
 * <tr><td>if_whitelisted</td><td>3</td><td>If the DevicePolicyManager (DPM) authorizes this package ({@link
 * android.app.admin.DevicePolicyManager#setLockTaskPackages}) then this mode is
 * identical to always, except that the activity needs to call
 * {@link android.app.Activity#stopLockTask} before being able to finish if it is the last
 * locked task.
 * If the DPM does not authorize this package then this mode is identical to normal.</td></tr>
 * <tr><td>never</td><td>1</td><td>Tasks will not launch into lockTask mode and cannot be placed there using
 * {@link android.app.Activity#startLockTask} or be pinned from the Overview screen.
 * If the system is already in lockTask mode when a new task rooted at this activity is
 * launched that task will not be started.
 * <p>Note: This mode is only available to system and privileged applications.
 * Non-privileged apps with this value will be treated as normal.</td></tr>
 * <tr><td>normal</td><td>0</td><td>This is the default value. Tasks will not launch into lockTask mode but can be
 * placed there by calling {@link android.app.Activity#startLockTask}. If a task with
 * this mode has been whitelisted using {@link
 * android.app.admin.DevicePolicyManager#setLockTaskPackages} then calling
 * {@link android.app.Activity#startLockTask} will enter lockTask mode immediately,
 * otherwise the user will be presented with a dialog to approve entering pinned mode.
 * <p>If the system is already in lockTask mode when a new task rooted at this activity
 * is launched that task will or will not start depending on whether the package of this
 * activity has been whitelisted.
 * <p>Tasks rooted at this activity can only exit lockTask mode using
 * {@link android.app.Activity#stopLockTask}.</td></tr>
 * </table>
 * @apiSince 23
 */

public static final int lockTaskMode = 16844013; // 0x10104ed

/**
 * A Drawable resource providing an extended graphical logo for its
 * associated item. Use with the application tag (to supply a default
 * logo for all application components), or with the activity, receiver,
 * service, or instrumentation tag (to supply a specific logo for that
 * component). It may also be used with the intent-filter tag to supply
 * a logo to show to the user when an activity is being selected based
 * on a particular Intent.
 * <p>The given logo will be used to display to the user a graphical
 * representation of its associated component; for example as the
 * header in the Action Bar. The primary differences between an icon
 * and a logo are that logos are often wider and more detailed, and are
 * used without an accompanying text caption. This must be a reference
 * to a Drawable resource containing the image definition.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int logo = 16843454; // 0x10102be

/**
 * A content description string to describe the appearance of the
 * associated logo image.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 23
 */

public static final int logoDescription = 16844009; // 0x10104e9

/**
 * Defines whether this view reacts to long click events.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int longClickable = 16842982; // 0x10100e6

/**
 * Defines whether the animator loops to the first view once it
 * has reached the end of the list.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 11
 */

public static final int loopViews = 16843527; // 0x1010307

/**
 * Name of the activity to be launched to manage application's space on
 * device. The specified activity gets automatically launched when the
 * application's space needs to be managed and is usually invoked
 * through user actions. Applications can thus provide their own custom
 * behavior for managing space for various scenarios like out of memory
 * conditions. This is an optional attribute and
 * applications can choose not to specify a default activity to
 * manage space.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int manageSpaceActivity = 16842756; // 0x1010004

/**
 * Default MapView style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int mapViewStyle = 16842890; // 0x101008a

/**
 * The number of times to repeat the marquee animation. Only applied if the
 * TextView has marquee enabled.
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>marquee_forever</td><td>ffffffff</td><td>Indicates that marquee should repeat indefinitely.</td></tr>
 * </table>
 * @apiSince 2
 */

public static final int marqueeRepeatLimit = 16843293; // 0x101021d

/**
 * The match order to use for the transition. This is a comma-separated
 * list of values, containing one or more of the following:
 * id, itemId, name, instance. These correspond to
 * {@link android.transition.Transition#MATCH_ID},
 * {@link android.transition.Transition#MATCH_ITEM_ID},
 * {@link android.transition.Transition#MATCH_NAME}, and
 * {@link android.transition.Transition#MATCH_INSTANCE}, respectively.
 * This corresponds to {@link android.transition.Transition#setMatchOrder(int...)}.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 21
 */

public static final int matchOrder = 16843855; // 0x101044f

/**
 * Defines the maximum value.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 1
 */

public static final int max = 16843062; // 0x1010136

/**
 * This value indicates the maximum aspect ratio the activity supports. If the app runs on a
 * device with a wider aspect ratio, the system automatically letterboxes the app, leaving
 * portions of the screen unused so the app can run at its specified maximum aspect ratio.
 * <p>
 * Maximum aspect ratio, expressed as (longer dimension / shorter dimension) in decimal
 * form. For example, if the maximum aspect ratio is 7:3, set value to 2.33.
 * <p>
 * Value needs to be greater or equal to 1.0, otherwise it is ignored.
 * <p>
 * NOTE: This attribute is ignored if the activity has
 * {@link android.R.attr#resizeableActivity} set to true.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 26
 */

public static final int maxAspectRatio = 16844128; // 0x1010560

/**
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 24
 */

public static final int maxButtonHeight = 16844029; // 0x10104fd

/**
 * The maximal date shown by this calendar view in mm/dd/yyyy format.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 11
 */

public static final int maxDate = 16843584; // 0x1010340

/**
 * Makes the TextView be at most this many ems wide.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 1
 */

public static final int maxEms = 16843095; // 0x1010157

/**
 * An optional argument to supply a maximum height for this view.
 * See {see android.widget.ImageView#setMaxHeight} for details.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int maxHeight = 16843040; // 0x1010120

/**
 * Defines the maximum number of items per row.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 1
 */

public static final int maxItemsPerRow = 16843060; // 0x1010134

/**
 * Set an input filter to constrain the text length to the
 * specified number.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 1
 */

public static final int maxLength = 16843104; // 0x1010160

/**
 * The maximum level allowed for this item.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 1
 */

public static final int maxLevel = 16843186; // 0x10101b2

/**
 * Makes the TextView be at most this many lines tall.
 * When used on an editable text, the <code>inputType</code> attribute's value must be
 * combined with the <code>textMultiLine</code> flag for the maxLines attribute to apply.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 1
 */

public static final int maxLines = 16843091; // 0x1010153

/**
 * The max version code of the package for which compatibility mode is
 * requested. This corresponds to the long value returned by {@link
 * android.content.pm.PackageInfo#getLongVersionCode()} for the target package.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 28
 */

public static final int maxLongVersionCode = 16844163; // 0x1010583

/**
 * The maximum number of entries of tasks rooted at this activity in the recent task list.
 * When this number of entries is reached the least recently used instance of this activity
 * will be removed from recents. The value will be clamped between 1 and 100 inclusive.
 * The default value for this if it is not specified is 15.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 21
 */

public static final int maxRecents = 16843846; // 0x1010446

/**
 * Defines the maximum number of rows displayed.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 1
 */

public static final int maxRows = 16843059; // 0x1010133

/**
 * Optional: specify the maximum version of the Android OS for which the
 * application wishes to request the permission.  When running on a version
 * of Android higher than the number given here, the permission will not
 * be requested.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 4
 */

public static final int maxSdkVersion = 16843377; // 0x1010271

/**
 * An optional argument to supply a maximum width for this view.
 * See {see android.widget.ImageView#setMaxWidth} for details.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int maxWidth = 16843039; // 0x101011f

/**
 * The maximum arc angle in degrees between the start and end points.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 21
 */

public static final int maximumAngle = 16843903; // 0x101047f

/**
 * Determines whether to measure all children or just those in
 * the VISIBLE or INVISIBLE state when measuring. Defaults to false.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int measureAllChildren = 16843018; // 0x101010a

/**
 * When set to true, all children with a weight will be considered having
 * the minimum size of the largest child. If false, all children are
 * measured normally.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 11
 */

public static final int measureWithLargestChild = 16843476; // 0x10102d4

/**
 * Default style for the MediaRouteButton widget.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 16
 */

public static final int mediaRouteButtonStyle = 16843693; // 0x10103ad

/**
 * The types of media routes the button and its resulting
 * chooser will filter by.
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>liveAudio</td><td>1</td><td>Allow selection of live audio routes.</td></tr>
 * <tr><td>user</td><td>800000</td><td>Allow selection of user (app-specified) routes.</td></tr>
 * </table>
 * @apiSince 16
 */

public static final int mediaRouteTypes = 16843694; // 0x10103ae

/**
 * The category applied to all items within this group.
 * (This will be or'ed with the orderInCategory attribute.)
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>alternative</td><td>40000</td><td>Items are alternative actions.</td></tr>
 * <tr><td>container</td><td>10000</td><td>Items are part of a container.</td></tr>
 * <tr><td>secondary</td><td>30000</td><td>Items are user-supplied secondary (infrequently used).</td></tr>
 * <tr><td>system</td><td>20000</td><td>Items are provided by the system.</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int menuCategory = 16843230; // 0x10101de

/**
 * Specify a MIME type that is handled, as per
 * {@link android.content.IntentFilter#addDataType
 * IntentFilter.addDataType()}.
 * <p><em>Note: MIME type matching in the Android framework is
 * case-sensitive, unlike formal RFC MIME types.  As a result,
 * MIME types here should always use lower case letters.</em></p>
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int mimeType = 16842790; // 0x1010026

/**
 * Defines the minimum value.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 26
 */

public static final int min = 16844089; // 0x1010539

/**
 * This value indicates the minimum aspect ratio the activity supports. If the app runs on a
 * device with a narrower aspect ratio, the system automatically letterboxes the app, leaving
 * portions of the screen unused so the app can run at its specified minimum aspect ratio.
 * <p>
 * Minimum aspect ratio, expressed as (longer dimension / shorter dimension) in decimal
 * form. For example, if the minimum aspect ratio is 4:3, set value to 1.33.
 * <p>
 * Value needs to be greater or equal to 1.0, otherwise it is ignored.
 * <p>
 * NOTE: This attribute is ignored if the activity has
 * {@link android.R.attr#resizeableActivity} set to true.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 29
 */

public static final int minAspectRatio = 16844187; // 0x101059b

/**
 * The minimal date shown by this calendar view in mm/dd/yyyy format.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 11
 */

public static final int minDate = 16843583; // 0x101033f

/**
 * Makes the TextView be at least this many ems wide.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 1
 */

public static final int minEms = 16843098; // 0x101015a

/**
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int minHeight = 16843072; // 0x1010140

/**
 * The minimum level allowed for this item.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 1
 */

public static final int minLevel = 16843185; // 0x10101b1

/**
 * Makes the TextView be at least this many lines tall.
 * When used on an editable text, the <code>inputType</code> attribute's value must be
 * combined with the <code>textMultiLine</code> flag for the minLines attribute to apply.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 1
 */

public static final int minLines = 16843094; // 0x1010156

/**
 * Minimum height that the AppWidget can be resized to.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 14
 */

public static final int minResizeHeight = 16843670; // 0x1010396

/**
 * Minimum width that the AppWidget can be resized to.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 14
 */

public static final int minResizeWidth = 16843669; // 0x1010395

/**
 * This is the minimum SDK version number that the application
 * requires.  This number is an abstract integer, from the list
 * in {@link android.os.Build.VERSION_CODES}  If
 * not supplied, the application will work on any SDK.  This
 * may also be string (such as "Donut") if the application was built
 * against a development branch, in which case it will only work against
 * the development builds.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 1
 */

public static final int minSdkVersion = 16843276; // 0x101020c

/**
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int minWidth = 16843071; // 0x101013f

/**
 * The minimum arc angle in degrees between the start and end points when
 * they are close to horizontal.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 21
 */

public static final int minimumHorizontalAngle = 16843901; // 0x101047d

/**
 * The minimum arc angle in degrees between the start and end points when
 * they are close to vertical.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 21
 */

public static final int minimumVerticalAngle = 16843902; // 0x101047e

/**
 * Enables or disables the mipmap hint. See
 * {@link android.graphics.Bitmap#setHasMipMap(boolean)} for more information.
 * Default value is false.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 18
 */

public static final int mipMap = 16843725; // 0x10103cd

/**
 * Defines if the associated drawables need to be mirrored when in RTL mode.
 * Default is false.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 18
 */

public static final int mirrorForRtl = 16843726; // 0x10103ce

/**
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>collapsing</td><td>2</td><td>When selected show both lines, otherwise show only the first line.
 * This is the default mode.</td></tr>
 * <tr><td>oneLine</td><td>1</td><td>Always show only the first line.</td></tr>
 * <tr><td>twoLine</td><td>3</td><td>Always show both lines.</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int mode = 16843134; // 0x101017e

/**
 * 'More' icon.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int moreIcon = 16843061; // 0x1010135

/**
 * Declare that code from this application will need to be loaded into other
 * applications' processes. On devices that support multiple instruction sets,
 * this implies the code might be loaded into a process that's using any of the devices
 * supported instruction sets.
 * <p> The system might treat such applications specially, for eg., by
 * extracting the application's native libraries for all supported instruction
 * sets or by compiling the application's dex code for all supported instruction
 * sets.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 21
 */

public static final int multiArch = 16843918; // 0x101048e

/**
 * Specify whether a component is allowed to have multiple instances
 * of itself running in different processes.  Use with the activity
 * and provider tags.
 * <p>Normally the system will ensure that all instances of a particular
 * component are only running in a single process.  You can use this
 * attribute to disable that behavior, allowing the system to create
 * instances wherever they are used (provided permissions allow it).
 * This is most often used with content providers, so that instances
 * of a provider can be created in each client process, allowing them
 * to be used without performing IPC.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int multiprocess = 16842771; // 0x1010013

/**
 * A unique name for the given item.  This must use a Java-style naming
 * convention to ensure the name is unique, for example
 * "com.mycompany.MyName".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int name = 16842755; // 0x1010003

/**
 * The color for the navigation bar. If the color is not opaque, consider setting
 * {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_STABLE} and
 * {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION}.
 * For this to take effect, the window must be drawing the system bar backgrounds with
 * {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the navigation bar must not
 * have been requested to be translucent with
 * {@link android.R.attr#windowTranslucentNavigation}.
 * Corresponds to {@link android.view.Window#setNavigationBarColor(int)}.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 21
 */

public static final int navigationBarColor = 16843858; // 0x1010452

/**
 * Shows a thin line of the specified color between the navigation bar and the app
 * content.
 * <p>For this to take effect, the window must be drawing the system bar backgrounds with
 * {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the navigation bar must not
 * have been requested to be translucent with
 * {@link android.R.attr#windowTranslucentNavigation}.
 * Corresponds to {@link android.view.Window#setNavigationBarDividerColor(int)}.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 27
 */

public static final int navigationBarDividerColor = 16844141; // 0x101056d

/**
 * Text to set as the content description for the navigation button
 * located at the start of the toolbar.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 21
 */

public static final int navigationContentDescription = 16843969; // 0x10104c1

/**
 * Icon drawable to use for the navigation button located at
 * the start of the toolbar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int navigationIcon = 16843968; // 0x10104c0

/**
 * The type of navigation to use.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>listMode</td><td>1</td><td>The action bar will use a selection list for navigation.</td></tr>
 * <tr><td>normal</td><td>0</td><td>Normal static title text.</td></tr>
 * <tr><td>tabMode</td><td>2</td><td>The action bar will use a series of horizontal tabs for navigation.</td></tr>
 * </table>
 * @apiSince 11
 */

public static final int navigationMode = 16843471; // 0x10102cf

/**
 * The negative button text for the dialog. Set to @null to hide the negative button.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int negativeButtonText = 16843254; // 0x10101f6

/**
 * Specifies that this view should permit nested scrolling within a compatible
 * ancestor view.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 21
 */

public static final int nestedScrollingEnabled = 16843830; // 0x1010436

/**
 * An XML resource with the application's Network Security Config.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 24
 */

public static final int networkSecurityConfig = 16844071; // 0x1010527

/**
 * Defines the next keyboard navigation cluster.
 * If the reference refers to a view that does not exist or is part
 * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
 * will result when the reference is accessed.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 26
 */

public static final int nextClusterForward = 16844098; // 0x1010542

/**
 * Defines the next view to give focus to when the next focus is
 * {@link android.view.View#FOCUS_DOWN}
 * If the reference refers to a view that does not exist or is part
 * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
 * will result when the reference is accessed.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int nextFocusDown = 16842980; // 0x10100e4

/**
 * Defines the next view to give focus to when the next focus is
 * {@link android.view.View#FOCUS_FORWARD}
 * If the reference refers to a view that does not exist or is part
 * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
 * will result when the reference is accessed.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int nextFocusForward = 16843580; // 0x101033c

/**
 * Defines the next view to give focus to when the next focus is
 * {@link android.view.View#FOCUS_LEFT}.
 * If the reference refers to a view that does not exist or is part
 * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
 * will result when the reference is accessed.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int nextFocusLeft = 16842977; // 0x10100e1

/**
 * Defines the next view to give focus to when the next focus is
 * {@link android.view.View#FOCUS_RIGHT}
 * If the reference refers to a view that does not exist or is part
 * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
 * will result when the reference is accessed.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int nextFocusRight = 16842978; // 0x10100e2

/**
 * Defines the next view to give focus to when the next focus is
 * {@link android.view.View#FOCUS_UP}
 * If the reference refers to a view that does not exist or is part
 * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
 * will result when the reference is accessed.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int nextFocusUp = 16842979; // 0x10100e3

/**
 * Specify whether an activity should be kept in its history stack.
 * If this attribute is set, then as soon as the user navigates away
 * from the activity it will be finished and they will no longer be
 * able to return to it.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 3
 */

public static final int noHistory = 16843309; // 0x101022d

/**
 * A recommended timeout in milliseconds used in
 * {@link android.view.accessibility.AccessibilityManager#getRecommendedTimeoutMillis(int, int)
 * android.view.accessibility.AccessibilityManager.getRecommendedTimeoutMillis(int, int)}
 * to return a suitable value for UIs that do not include interactive controls.
 * This setting can be changed at runtime by calling
 * {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
 * android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 29
 */

public static final int nonInteractiveUiTimeout = 16844175; // 0x101058f

/**
 * Indicates whether an application supports the normal screen
 * form-factors.  Traditionally this is an HVGA normal density
 * screen, but WQVGA low density and WVGA high density are also
 * considered to be normal.  This attribute is true by default,
 * and applications currently should leave it that way.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 4
 */

public static final int normalScreens = 16843397; // 0x1010285

/**
 * The minimal period in milliseconds between two accessibility events of the same type
 * are sent to this service. This setting can be changed at runtime by calling
 * {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
 * android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 14
 */

public static final int notificationTimeout = 16843651; // 0x1010383

/**
 * Defines how many columns to show.
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>auto_fit</td><td>ffffffff</td><td>Display as many columns as possible to fill the available space.</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int numColumns = 16843032; // 0x1010118

/**
 * The number of stars (or rating items) to show.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 1
 */

public static final int numStars = 16843076; // 0x1010144

/**
 * NumberPicker style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 24
 */

public static final int numberPickerStyle = 16844068; // 0x1010524

/**
 * The background color for the hours/minutes numbers.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 21
 */

public static final int numbersBackgroundColor = 16843938; // 0x10104a2

/**
 * The color for the inner hours numbers used in 24-hour mode. This
 * should be a color state list where the activated state will be
 * used when the number is active.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 23
 */

public static final int numbersInnerTextColor = 16844001; // 0x10104e1

/**
 * The color for the hours/minutes selector.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 21
 */

public static final int numbersSelectorColor = 16843939; // 0x10104a3

/**
 * The color for the hours/minutes numbers. This should be a color
 * state list where the activated state will be used when the number
 * is active.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 21
 */

public static final int numbersTextColor = 16843937; // 0x10104a1

/**
 * If set, specifies that this TextView has a numeric input method.
 * The default is false.
 * {@deprecated Use inputType instead.}
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>decimal</td><td>5</td><td>Input is numeric, with decimals allowed.</td></tr>
 * <tr><td>integer</td><td>1</td><td>Input is numeric.</td></tr>
 * <tr><td>signed</td><td>3</td><td>Input is numeric, with sign allowed.</td></tr>
 * </table>
 * @apiSince 1
 * @deprecatedSince 15
 */

@Deprecated public static final int numeric = 16843109; // 0x1010165

/**
 * The numeric modifier key. This is the modifier when using a numeric (for example,
 * 12-key) keyboard. The values should be kept in sync with KeyEvent
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>ALT</td><td>2</td><td></td></tr>
 * <tr><td>CTRL</td><td>1000</td><td></td></tr>
 * <tr><td>FUNCTION</td><td>8</td><td></td></tr>
 * <tr><td>META</td><td>10000</td><td></td></tr>
 * <tr><td>SHIFT</td><td>1</td><td></td></tr>
 * <tr><td>SYM</td><td>4</td><td></td></tr>
 * </table>
 * @apiSince 26
 */

public static final int numericModifiers = 16844111; // 0x101054f

/**
 * The numeric shortcut key.  This is the shortcut when using a numeric (for example,
 * 12-key) keyboard.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int numericShortcut = 16843236; // 0x10101e4

/**
 * The offset (or ratio) of this current color item inside the gradient.
 * The value is only meaningful when it is between 0 and 1.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 24
 */

public static final int offset = 16844052; // 0x1010514

/**
 * Name of the method in this View's context to invoke when the view is
 * clicked. This name must correspond to a public method that takes
 * exactly one parameter of type View. For instance, if you specify
 * <code>android:onClick="sayHello"</code>, you must declare a
 * <code>public void sayHello(View v)</code> method of your context
 * (typically, your Activity).
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 4
 */

public static final int onClick = 16843375; // 0x101026f

/**
 * If true, the animation will only run a single time and then
 * stop.  If false (the default), it will continually run,
 * restarting at the first frame after the last has finished.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int oneshot = 16843159; // 0x1010197

/**
 * Indicates the opacity of the layer. This can be useful to allow the
 * system to enable drawing optimizations. The default value is
 * translucent.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>opaque</td><td>ffffffff</td><td>Indicates that the layer is opaque and contains no transparent
 * nor translucent pixels.</td></tr>
 * <tr><td>translucent</td><td>fffffffd</td><td>The layer has translucent pixels.</td></tr>
 * <tr><td>transparent</td><td>fffffffe</td><td>The layer is completely transparent (no pixel will be drawn).</td></tr>
 * </table>
 * @apiSince 11
 */

public static final int opacity = 16843550; // 0x101031e

/**
 * Bottom optical inset.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 29
 */

public static final int opticalInsetBottom = 16844171; // 0x101058b

/**
 * Left optical inset.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 29
 */

public static final int opticalInsetLeft = 16844168; // 0x1010588

/**
 * Right optical inset.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 29
 */

public static final int opticalInsetRight = 16844170; // 0x101058a

/**
 * Top optical inset.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 29
 */

public static final int opticalInsetTop = 16844169; // 0x1010589

/**
 * The order for the Preference (lower values are to be ordered first). If this is not
 * specified, the default ordering will be alphabetic.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 1
 */

public static final int order = 16843242; // 0x10101ea

/**
 * The order within the category applied to all items within this group.
 * (This will be or'ed with the category attribute.)
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 1
 */

public static final int orderInCategory = 16843231; // 0x10101df

/**
 * Name of the property being animated.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>sequentially</td><td>1</td><td>child animations should be played sequentially, in the same order as the xml.</td></tr>
 * <tr><td>together</td><td>0</td><td>child animations should be played together.</td></tr>
 * </table>
 * @apiSince 11
 */

public static final int ordering = 16843490; // 0x10102e2

/**
 * Whether to order the Preference under this group as they appear in the XML file.
 * If this is false, the ordering will follow the Preference order attribute and
 * default to alphabetic for those without the order attribute.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int orderingFromXml = 16843239; // 0x10101e7

/**
 * Standard orientation constant.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>horizontal</td><td>0</td><td>Defines an horizontal widget.</td></tr>
 * <tr><td>vertical</td><td>1</td><td>Defines a vertical widget.</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int orientation = 16842948; // 0x10100c4

/**
 * Identifier for the animation to use when a view is hidden.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int outAnimation = 16843128; // 0x1010178

/**
 * Sets the color of the ambient shadow that is drawn when the view has a positive Z
 * or elevation value.
 * <p>
 * By default the shadow color is black. Generally, this color will be opaque so the
 * intensity of the shadow is consistent between different views with different colors.
 * <p>
 * The opacity of the final ambient shadow is a function of the shadow caster height,
 * the alpha channel of the outlineAmbientShadowColor (typically opaque), and the
 * {@link android.R.attr#ambientShadowAlpha} theme attribute.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 28
 */

public static final int outlineAmbientShadowColor = 16844162; // 0x1010582

/**
 * ViewOutlineProvider used to determine the View's Outline.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>background</td><td>0</td><td>Default, background drawable-driven outline.</td></tr>
 * <tr><td>bounds</td><td>2</td><td>Generates an opaque outline for the bounds of the view.</td></tr>
 * <tr><td>none</td><td>1</td><td>No outline provider.</td></tr>
 * <tr><td>paddedBounds</td><td>3</td><td>Generates an opaque outline for the padded bounds of the view.</td></tr>
 * </table>
 * @apiSince 21
 */

public static final int outlineProvider = 16843960; // 0x10104b8

/**
 * Sets the color of the spot shadow that is drawn when the view has a positive Z or
 * elevation value.
 * <p>
 * By default the shadow color is black. Generally, this color will be opaque so the
 * intensity of the shadow is consistent between different views with different colors.
 * <p>
 * The opacity of the final spot shadow is a function of the shadow caster height, the
 * alpha channel of the outlineSpotShadowColor (typically opaque), and the
 * {@link android.R.attr#spotShadowAlpha} theme attribute.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 28
 */

public static final int outlineSpotShadowColor = 16844161; // 0x1010581

/**
 * Drawable to draw below list content.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 9
 */

public static final int overScrollFooter = 16843459; // 0x10102c3

/**
 * Drawable to draw above list content.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 9
 */

public static final int overScrollHeader = 16843458; // 0x10102c2

/**
 * Defines over-scrolling behavior. This property is used only if the
 * View is scrollable. Over-scrolling is the ability for the user to
 * receive feedback when attempting to scroll beyond meaningful content.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>always</td><td>0</td><td>Always show over-scroll effects, even if the content fits entirely
 * within the available space.</td></tr>
 * <tr><td>ifContentScrolls</td><td>1</td><td>Only show over-scroll effects if the content is large
 * enough to meaningfully scroll.</td></tr>
 * <tr><td>never</td><td>2</td><td>Never show over-scroll effects.</td></tr>
 * </table>
 * @apiSince 9
 */

public static final int overScrollMode = 16843457; // 0x10102c1

/**
 * Whether the popup window should overlap its anchor view.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 21
 */

public static final int overlapAnchor = 16843874; // 0x1010462

/**
 * Set true when this subtype should be selected by default if no other subtypes are
 * selected explicitly. Note that a subtype with this parameter being true will
 * not be shown in the subtypes list.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 14
 */

public static final int overridesImplicitlyEnabledSubtype = 16843682; // 0x10103a2

/**
 * Comma separated package names from which this service would like to receive events (leave out for all packages).
 * {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
 * android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 14
 */

public static final int packageNames = 16843649; // 0x1010381

/**
 * Required type of association with the package, for example "android.package.ad_service"
 * if it provides an advertising service.  This should use the standard scoped naming
 * convention as used for other things such as package names, based on the Java naming
 * convention.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 29
 */

public static final int packageType = 16844167; // 0x1010587

/**
 * Sets the padding, in pixels, of all four edges. Padding is defined as
 * space between the edges of the view and the view's content. This value will take
 * precedence over any of the edge-specific values (paddingLeft, paddingTop,
 * paddingRight, paddingBottom, paddingHorizontal and paddingVertical), but will
 * not override paddingStart or paddingEnd, if set. A view's size
 * will include its padding. If a {@link android.R.attr#background}
 * is provided, the padding will initially be set to that (0 if the
 * drawable does not have padding). Explicitly setting a padding value
 * will override the corresponding padding found in the background.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int padding = 16842965; // 0x10100d5

/**
 * Sets the padding, in pixels, of the bottom edge; see {@link android.R.attr#padding}.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int paddingBottom = 16842969; // 0x10100d9

/**
 * Sets the padding, in pixels, of the end edge; see {@link android.R.attr#padding}.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 17
 */

public static final int paddingEnd = 16843700; // 0x10103b4

/**
 * Sets the padding, in pixels, of the left and right edges; see
 * {@link android.R.attr#padding}. This value will take precedence over
 * paddingLeft and paddingRight, but not paddingStart or paddingEnd (if set).
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 26
 */

public static final int paddingHorizontal = 16844093; // 0x101053d

/**
 * Sets the padding, in pixels, of the left edge; see {@link android.R.attr#padding}.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int paddingLeft = 16842966; // 0x10100d6

/**
 * Indicates how layer padding should affect the bounds of subsequent layers.
 * The default padding mode value is nest.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>nest</td><td>0</td><td>Nest each layer inside the padding of the previous layer.</td></tr>
 * <tr><td>stack</td><td>1</td><td>Stack each layer directly atop the previous layer.</td></tr>
 * </table>
 * @apiSince 21
 */

public static final int paddingMode = 16843863; // 0x1010457

/**
 * Sets the padding, in pixels, of the right edge; see {@link android.R.attr#padding}.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int paddingRight = 16842968; // 0x10100d8

/**
 * Sets the padding, in pixels, of the start edge; see {@link android.R.attr#padding}.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 17
 */

public static final int paddingStart = 16843699; // 0x10103b3

/**
 * Sets the padding, in pixels, of the top edge; see {@link android.R.attr#padding}.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int paddingTop = 16842967; // 0x10100d7

/**
 * Sets the padding, in pixels, of the top and bottom edges; see
 * {@link android.R.attr#padding}. This value will take precedence over
 * paddingTop and paddingBottom, if set.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 26
 */

public static final int paddingVertical = 16844094; // 0x101053e

/**
 * The background of a panel when it is inset from the left and right edges of the screen.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int panelBackground = 16842846; // 0x101005e

/**
 * Color that matches (as closely as possible) the panel background.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int panelColorBackground = 16842849; // 0x1010061

/**
 * Default color of foreground panel imagery.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int panelColorForeground = 16842848; // 0x1010060

/**
 * The background of a panel when it extends to the left and right edges of the screen.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int panelFullBackground = 16842847; // 0x101005f

/**
 * Default appearance of panel text.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int panelTextAppearance = 16842850; // 0x1010062

/**
 * The name of the logical parent of the activity as it appears in the manifest.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 16
 */

public static final int parentActivityName = 16843687; // 0x10103a7

/**
 * Whether the characters of the field are displayed as
 * password dots instead of themselves.
 * {@deprecated Use inputType instead.}
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 * @deprecatedSince 15
 */

@Deprecated public static final int password = 16843100; // 0x101015c

/**
 * Specify a URI path that must exactly match, as per
 * {@link android.os.PatternMatcher} with
 * {@link android.os.PatternMatcher#PATTERN_LITERAL}.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int path = 16842794; // 0x101002a

/**
 * The specification of the operations that define the path.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 21
 */

public static final int pathData = 16843781; // 0x1010405

/**
 * Specify a URI path that matches a simple pattern, as per
 * {@link android.os.PatternMatcher} with
 * {@link android.os.PatternMatcher#PATTERN_SIMPLE_GLOB}.
 * Note that because '\' is used as an escape character when
 * reading the string from XML (before it is parsed as a pattern),
 * you will need to double-escape: for example a literal "*" would
 * be written as "\\*" and a literal "\" would be written as
 * "\\\\".  This is basically the same as what you would need to
 * write if constructing the string in Java code.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int pathPattern = 16842796; // 0x101002c

/**
 * Specify a URI path that must be a prefix to match, as per
 * {@link android.os.PatternMatcher} with
 * {@link android.os.PatternMatcher#PATTERN_PREFIX}.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int pathPrefix = 16842795; // 0x101002b

/**
 * The path string describing the pattern to use for the PathPathMotion.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 21
 */

public static final int patternPathData = 16843978; // 0x10104ca

/**
 * Specify a permission that a client is required to have in order to
 * use the associated object.  If the client does not hold the named
 * permission, its request will fail.  See the
 * <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
 * document for more information on permissions.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int permission = 16842758; // 0x1010006

/**
 * Flags indicating more context for a permission.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>costsMoney</td><td>1</td><td>Set to indicate that this permission allows an operation that
 * may cost the user money.  Such permissions may be highlighted
 * when shown to the user with this additional information.</td></tr>
 * <tr><td>hardRestricted</td><td>4</td><td>This permission is restricted by the platform and it would be
 * grantable only to apps that meet special criteria per platform
 * policy.</td></tr>
 * <tr><td>immutablyRestricted</td><td>10</td><td>This permission is restricted immutably which means that its
 * restriction state may be specified only on the first install of
 * the app and will stay in this initial whitelist state until
 * the app is uninstalled.</td></tr>
 * <tr><td>removed</td><td>2</td><td>Additional flag from base permission type: this permission has been
 * removed and it is no longer enforced. It shouldn't be shown in the
 * UI. Removed permissions are kept as normal permissions for backwards
 * compatibility as apps may be checking them before calling an API.</td></tr>
 * <tr><td>softRestricted</td><td>8</td><td>This permission is restricted by the platform and it would be
 * grantable in its full form to apps that meet special criteria
 * per platform policy. Otherwise, a weaker form of the permission
 * would be granted. The weak grant depends on the permission.
 * <p>What weak grant means is described in the documentation of
 * the permissions.</td></tr>
 * </table>
 * @apiSince 17
 */

public static final int permissionFlags = 16843719; // 0x10103c7

/**
 * Specified the name of a group that this permission is associated
 * with.  The group must have been defined with the
 * {@link android.R.styleable#AndroidManifestPermissionGroup permission-group} tag.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int permissionGroup = 16842762; // 0x101000a

/**
 * Flags indicating more context for a permission group.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>personalInfo</td><td>1</td><td>Set to indicate that this permission group contains permissions
 * protecting access to some information that is considered
 * personal to the user (such as contacts, e-mails, etc).</td></tr>
 * </table>
 * @apiSince 17
 */

public static final int permissionGroupFlags = 16843717; // 0x10103c5

/**
 * Define how an activity persist across reboots. Activities defined as "never" will not
 * be persisted. Those defined as "always" will be persisted. Those defined as "taskOnly"
 * will persist the root activity of the task only. See below for more detail as to
 * what gets persisted.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>persistAcrossReboots</td><td>2</td><td>If this activity forms the root of a task then the task and this activity will
 * be persisted across reboots. If the activity above this activity is also
 * tagged with the attribute <code>"persist"</code> then it will be persisted as well.
 * And so on up the task stack until either an activity without the
 * <code>persistableMode="persistAcrossReboots"</code> attribute or one that was launched
 * with the flag Intent.FLAG_CLEAR_TASK_WHEN_RESET is encountered.
 * <p>Activities that are declared with the persistAcrossReboots attribute will be
 * provided with a PersistableBundle in onSavedInstanceState(), These activities may
 * use this PeristableBundle to save their state. Then, following a reboot, that
 * PersistableBundle will be provided back to the activity in its onCreate() method.</td></tr>
 * <tr><td>persistNever</td><td>1</td><td>If this activity forms the root of a task then that task will not be persisted
 * across reboots</td></tr>
 * <tr><td>persistRootOnly</td><td>0</td><td>The default. If this activity forms the root of a task then that task will be
 * persisted across reboots but only the launching intent will be used. If the task
 * relinquishes its identity then the intent used is that of the topmost inherited
 * identity. All activities above this activity in the task will not be persisted.
 * In addition this activity will not be passed a PersistableBundle into which it
 * could have stored its state.</td></tr>
 * </table>
 * @apiSince 21
 */

public static final int persistableMode = 16843821; // 0x101042d

/**
 * Flag to control special persistent mode of an application.  This should
 * not normally be used by applications; it requires that the system keep
 * your application running at all times.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int persistent = 16842765; // 0x101000d

/**
 * Defines the persistence of the drawing cache. The drawing cache might be
 * enabled by a ViewGroup for all its children in specific situations (for
 * instance during a scrolling.) This property lets you persist the cache
 * in memory after its initial usage. Persisting the cache consumes more
 * memory but may prevent frequent garbage collection if the cache is created
 * over and over again. By default the persistence is set to scrolling.
 * Deprecated: The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>all</td><td>3</td><td>The drawing cache is always persisted.</td></tr>
 * <tr><td>animation</td><td>1</td><td>The drawing cache is persisted after a layout animation.</td></tr>
 * <tr><td>none</td><td>0</td><td>The drawing cache is not persisted after use.</td></tr>
 * <tr><td>scrolling</td><td>2</td><td>The drawing cache is persisted after a scroll.</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int persistentDrawingCache = 16842990; // 0x10100ee

/**
 * If set, the "persistent" attribute will only be honored if the feature
 * specified here is present on the device.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 26
 */

public static final int persistentWhenFeatureAvailable = 16844131; // 0x1010563

/**
 * If set, specifies that this TextView has a phone number input
 * method. The default is false.
 * {@deprecated Use inputType instead.}
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 * @deprecatedSince 15
 */

@Deprecated public static final int phoneNumber = 16843111; // 0x1010167

/**
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 * @apiSince 1
 */

public static final int pivotX = 16843189; // 0x10101b5

/**
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 * @apiSince 1
 */

public static final int pivotY = 16843190; // 0x10101b6

/**
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>alias</td><td>3f2</td><td>Pointer icon of 'alias', indicating an alias of/shortcut to something is to be
 * created.</td></tr>
 * <tr><td>all_scroll</td><td>3f5</td><td>Pointer icon of four-way arrows, indicating scrolling all direction.</td></tr>
 * <tr><td>arrow</td><td>3e8</td><td>The default icon of arrow pointer.</td></tr>
 * <tr><td>cell</td><td>3ee</td><td>Pointer icon for cell and grid.</td></tr>
 * <tr><td>context_menu</td><td>3e9</td><td>Pointer icon indicating context-menu will appear.</td></tr>
 * <tr><td>copy</td><td>3f3</td><td>Pointer icon of 'copy', used for drag/drop.</td></tr>
 * <tr><td>crosshair</td><td>3ef</td><td>Pointer icon of crosshair, indicating to spot a location.</td></tr>
 * <tr><td>grab</td><td>3fc</td><td>Pointer icon of a hand sign to grab something.</td></tr>
 * <tr><td>grabbing</td><td>3fd</td><td>Pointer icon of a hand sign while grabbing something.</td></tr>
 * <tr><td>hand</td><td>3ea</td><td>Pointer icon of a hand with the index finger.</td></tr>
 * <tr><td>help</td><td>3eb</td><td>Pointer icon indicating help.</td></tr>
 * <tr><td>horizontal_double_arrow</td><td>3f6</td><td>Pointer icon of horizontal double arrow, indicating horizontal resize.</td></tr>
 * <tr><td>no_drop</td><td>3f4</td><td>Pointer icon of 'no-drop', indicating the drop will not be accepted at the
 * current location.</td></tr>
 * <tr><td>none</td><td>0</td><td>Null icon, pointer becomes invisible.</td></tr>
 * <tr><td>text</td><td>3f0</td><td>Pointer icon of I-beam, usually for text.</td></tr>
 * <tr><td>top_left_diagonal_double_arrow</td><td>3f9</td><td>Pointer icon of diagonal double arrow, starting from top-left to bottom-right.
 * Indicating freeform resize.</td></tr>
 * <tr><td>top_right_diagonal_double_arrow</td><td>3f8</td><td>Pointer icon of diagonal double arrow, starting from top-right to bottom-left.
 * Indicating freeform resize.</td></tr>
 * <tr><td>vertical_double_arrow</td><td>3f7</td><td>Pointer icon of vertical double arrow, indicating vertical resize.</td></tr>
 * <tr><td>vertical_text</td><td>3f1</td><td>Pointer icon of I-beam with 90-degree rotated, for vertical text.</td></tr>
 * <tr><td>wait</td><td>3ec</td><td>Pointer icon indicating something is going on and waiting.</td></tr>
 * <tr><td>zoom_in</td><td>3fa</td><td>Pointer icon indicating zoom-in.</td></tr>
 * <tr><td>zoom_out</td><td>3fb</td><td>Pointer icon indicating zoom-out.</td></tr>
 * </table>
 * @apiSince 24
 */

public static final int pointerIcon = 16844041; // 0x1010509

/**
 * The animation style to use for the popup window.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 9
 */

public static final int popupAnimationStyle = 16843465; // 0x10102c9

/**
 * The background to use for the popup window.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int popupBackground = 16843126; // 0x1010176

/**
 * The characters to display in the popup keyboard.
 * {@deprecated Copy this definition into your own application project.}
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 3
 * @deprecatedSince 29
 */

@Deprecated public static final int popupCharacters = 16843332; // 0x1010244

/**
 * Window elevation to use for the popup window.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 21
 */

public static final int popupElevation = 16843916; // 0x101048c

/**
 * Transition used to move views into the popup window.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 24
 */

public static final int popupEnterTransition = 16844063; // 0x101051f

/**
 * Transition used to move views out of the popup window.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 24
 */

public static final int popupExitTransition = 16844064; // 0x1010520

/**
 * The XML keyboard layout of any popup keyboard.
 * {@deprecated Copy this definition into your own application project.}
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 3
 * @deprecatedSince 29
 */

@Deprecated public static final int popupKeyboard = 16843331; // 0x1010243

/**
 * Layout resource for popup keyboards.
 * {@deprecated Copy this definition into your own application project.}
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 3
 * @deprecatedSince 29
 */

@Deprecated public static final int popupLayout = 16843323; // 0x101023b

/**
 * Default PopupMenu style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int popupMenuStyle = 16843520; // 0x1010300

/**
 * Reference to a theme that should be used to inflate popups
 * shown by widgets in the toolbar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int popupTheme = 16843945; // 0x10104a9

/**
 * Default PopupWindow style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int popupWindowStyle = 16842870; // 0x1010076

/**
 * Specify a URI authority port that is handled, as per
 * {@link android.content.IntentFilter#addDataAuthority
 * IntentFilter.addDataAuthority()}.  If a host is supplied
 * but not a port, any port is matched.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int port = 16842793; // 0x1010029

/**
 * The positive button text for the dialog. Set to @null to hide the positive button.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int positiveButtonText = 16843253; // 0x10101f5

/**
 * Default style for PreferenceCategory.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int preferenceCategoryStyle = 16842892; // 0x101008c

/**
 * Default style for Headers pane in PreferenceActivity.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 24
 */

public static final int preferenceFragmentStyle = 16844038; // 0x1010506

/**
 * Default style for informational Preference.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int preferenceInformationStyle = 16842893; // 0x101008d

/**
 * The preference layout that has the child/tabbed effect.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int preferenceLayoutChild = 16842900; // 0x1010094

/**
 * Default style for PreferenceScreen.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int preferenceScreenStyle = 16842891; // 0x101008b

/**
 * Default style for Preference.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int preferenceStyle = 16842894; // 0x101008e

/**
 * Theme to use for presentations spawned from this theme.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 17
 */

public static final int presentationTheme = 16843712; // 0x10103c0

/**
 * A preview of what the AppWidget will look like after it's configured.
 * If not supplied, the AppWidget's icon will be used.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int previewImage = 16843482; // 0x10102da

/**
 * The alpha applied to the foreground color to create the primary text color.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 26
 */

public static final int primaryContentAlpha = 16844114; // 0x1010552

/**
 * Specify the relative importance or ability in handling a particular
 * Intent.  For receivers, this controls the order in which they are
 * executed to receive a broadcast (note that for
 * asynchronous broadcasts, this order is ignored).  For activities,
 * this provides information about how good an activity is handling an
 * Intent; when multiple activities match an intent and have different
 * priorities, only those with the higher priority value will be
 * considered a match.
 * <p>Only use if you really need to impose some specific
 * order in which the broadcasts are received, or want to forcibly
 * place an activity to always be preferred over others.  The value is a
 * single integer, with higher numbers considered to be better.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 1
 */

public static final int priority = 16842780; // 0x101001c

/**
 * An addition content type description to supply to the input
 * method attached to the text view, which is private to the
 * implementation of the input method.  This simply fills in
 * the {@link android.view.inputmethod.EditorInfo#privateImeOptions
 * EditorInfo.privateImeOptions} field when the input
 * method is connected.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 3
 */

public static final int privateImeOptions = 16843299; // 0x1010223

/**
 * Specify a specific process that the associated code is to run in.
 * Use with the application tag (to supply a default process for all
 * application components), or with the activity, receiver, service,
 * or provider tag (to supply a specific icon for that component).
 * <p>Application components are normally run in a single process that
 * is created for the entire application.  You can use this tag to modify
 * where they run.  If the process name begins with a ':' character,
 * a new process private to that application will be created when needed
 * to run that component (allowing you to spread your application across
 * multiple processes).  If the process name begins with a lower-case
 * character, the component will be run in a global process of that name,
 * provided that you have permission to do so, allowing multiple
 * applications to share one process to reduce resource usage.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int process = 16842769; // 0x1010011

/**
 * Defines the default progress value, between 0 and max.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 1
 */

public static final int progress = 16843063; // 0x1010137

/**
 * Tint to apply to the progress indicator background.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 21
 */

public static final int progressBackgroundTint = 16843877; // 0x1010465

/**
 * Blending mode used to apply the progress indicator background tint.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 * @apiSince 21
 */

public static final int progressBackgroundTintMode = 16843878; // 0x1010466

/**
 * Specifies the horizontal padding on either end for an embedded progress bar.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 11
 */

public static final int progressBarPadding = 16843545; // 0x1010319

/**
 * Default ProgressBar style. This is a medium circular progress bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int progressBarStyle = 16842871; // 0x1010077

/**
 * Horizontal ProgressBar style. This is a horizontal progress bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int progressBarStyleHorizontal = 16842872; // 0x1010078

/**
 * Inverse ProgressBar style. This is a medium circular progress bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 4
 */

public static final int progressBarStyleInverse = 16843399; // 0x1010287

/**
 * Large ProgressBar style. This is a large circular progress bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int progressBarStyleLarge = 16842874; // 0x101007a

/**
 * Large inverse ProgressBar style. This is a large circular progress bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 4
 */

public static final int progressBarStyleLargeInverse = 16843401; // 0x1010289

/**
 * Small ProgressBar style. This is a small circular progress bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int progressBarStyleSmall = 16842873; // 0x1010079

/**
 * Small inverse ProgressBar style. This is a small circular progress bar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 4
 */

public static final int progressBarStyleSmallInverse = 16843400; // 0x1010288

/**
 * Small ProgressBar in title style. This is a small circular progress bar that will be placed in title bars.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int progressBarStyleSmallTitle = 16843279; // 0x101020f

/**
 * Drawable used for the progress mode.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int progressDrawable = 16843068; // 0x101013c

/**
 * Tint to apply to the progress indicator.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 21
 */

public static final int progressTint = 16843875; // 0x1010463

/**
 * Blending mode used to apply the progress indicator tint.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 * @apiSince 21
 */

public static final int progressTintMode = 16843876; // 0x1010464

/**
 * The prompt to display when the spinner's dialog is shown.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int prompt = 16843131; // 0x101017b

/**
 * Name of the property being animated.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 11
 */

public static final int propertyName = 16843489; // 0x10102e1

/**
 * Name of the property being animated as the X coordinate of the pathData.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 21
 */

public static final int propertyXName = 16843892; // 0x1010474

/**
 * Name of the property being animated as the Y coordinate of the pathData.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 21
 */

public static final int propertyYName = 16843893; // 0x1010475

/**
 * Characterizes the potential risk implied in a permission and
 * indicates the procedure the system should follow when determining
 * whether to grant the permission to an application requesting it. {@link
 * android.Manifest.permission Standard permissions} have a predefined and
 * permanent protectionLevel. If you are creating a custom permission in an
 * application, you can define a protectionLevel attribute with one of the
 * values listed below. If no protectionLevel is defined for a custom
 * permission, the system assigns the default ("normal").
 * <p>Each protection level consists of a base permission type and zero or
 * more flags. Use the following functions to extract those.
 * <pre>
 * int basePermissionType = permissionInfo.getProtection();
 * int permissionFlags = permissionInfo.getProtectionFlags();
 * </pre>
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>appPredictor</td><td>200000</td><td>Additional flag from base permission type: this permission can be automatically
 * granted to the system app predictor</td></tr>
 * <tr><td>appop</td><td>40</td><td>Additional flag from base permission type: this permission is closely
 * associated with an app op for controlling access.</td></tr>
 * <tr><td>configurator</td><td>80000</td><td>Additional flag from base permission type: this permission automatically
 * granted to device configurator</td></tr>
 * <tr><td>dangerous</td><td>1</td><td><strong>Base permission type</strong>: a higher-risk permission that
 * would give a requesting application access to private user data or
 * control over the device that can negatively impact the user.  Because
 * this type of permission introduces potential risk, the system may
 * not automatically grant it to the requesting application.  For example,
 * any dangerous permissions requested by an application may be displayed
 * to the user and require confirmation before proceeding, or some other
 * approach may be taken to avoid the user automatically allowing
 * the use of such facilities.</td></tr>
 * <tr><td>development</td><td>20</td><td>Additional flag from base permission type: this permission can also
 * (optionally) be granted to development applications.</td></tr>
 * <tr><td>documenter</td><td>40000</td><td>Additional flag from base permission type: this permission can be automatically
 * granted to the document manager</td></tr>
 * <tr><td>incidentReportApprover</td><td>100000</td><td>Additional flag from base permission type: this permission designates the app
 * that will approve the sharing of incident reports.</td></tr>
 * <tr><td>installer</td><td>100</td><td>Additional flag from base permission type: this permission can be automatically
 * granted to system apps that install packages.</td></tr>
 * <tr><td>instant</td><td>1000</td><td>Additional flag from base permission type: this permission can be granted to instant
 * apps</td></tr>
 * <tr><td>normal</td><td>0</td><td><strong>Base permission type</strong>: a lower-risk permission that gives
 * an application access to isolated application-level features, with minimal
 * risk to other applications, the system, or the user. The system
 * automatically grants this type of permission to a requesting application at
 * installation, without asking for the user's explicit approval (though the
 * user always has the option to review these permissions before installing).</td></tr>
 * <tr><td>oem</td><td>4000</td><td>Additional flag from base permission type: this permission can be granted only
 * if its protection level is signature, the requesting app resides on the OEM partition,
 * and the OEM has white-listed the app to receive this permission by the OEM.</td></tr>
 * <tr><td>pre23</td><td>80</td><td>Additional flag from base permission type: this permission can be automatically
 * granted to apps that target API levels below
 * {@link android.os.Build.VERSION_CODES#M} (before runtime permissions
 * were introduced).</td></tr>
 * <tr><td>preinstalled</td><td>400</td><td>Additional flag from base permission type: this permission can be automatically
 * granted any application pre-installed on the system image (not just privileged
 * apps).</td></tr>
 * <tr><td>privileged</td><td>10</td><td>Additional flag from base permission type: this permission can also
 * be granted to any applications installed as privileged apps on the system image.
 * Please avoid using this option, as the
 * signature protection level should be sufficient for most needs and
 * works regardless of exactly where applications are installed.  This
 * permission flag is used for certain special situations where multiple
 * vendors have applications built in to a system image which need
 * to share specific features explicitly because they are being built
 * together.</td></tr>
 * <tr><td>runtime</td><td>2000</td><td>Additional flag from base permission type: this permission can only be granted to apps
 * that target runtime permissions ({@link android.os.Build.VERSION_CODES#M} and above)</td></tr>
 * <tr><td>setup</td><td>800</td><td>Additional flag from base permission type: this permission can be automatically
 * granted to the setup wizard app</td></tr>
 * <tr><td>signature</td><td>2</td><td><strong>Base permission type</strong>: a permission that the system is
 * to grant only if the requesting application is signed with the same
 * certificate as the application that declared the permission. If the
 * certificates match, the system automatically grants the permission
 * without notifying the user or asking for the user's explicit approval.</td></tr>
 * <tr><td>signatureOrSystem</td><td>3</td><td>Old synonym for "signature|privileged". Deprecated in API level 23.
 * Base permission type: a permission that the system is to grant only
 * to packages in the Android system image <em>or</em> that are signed
 * with the same certificates. Please avoid using this option, as the
 * signature protection level should be sufficient for most needs and
 * works regardless of exactly where applications are installed.  This
 * permission is used for certain special situations where multiple
 * vendors have applications built in to a system image which need
 * to share specific features explicitly because they are being built
 * together.</td></tr>
 * <tr><td>system</td><td>10</td><td>Old synonym for "privileged". Deprecated in API level 23.</td></tr>
 * <tr><td>telephony</td><td>400000</td><td>Additional flag from base permission type: this permission can be automatically
 * granted to the system telephony apps</td></tr>
 * <tr><td>textClassifier</td><td>10000</td><td>Additional flag from base permission type: this permission can be automatically
 * granted to the system default text classifier</td></tr>
 * <tr><td>vendorPrivileged</td><td>8000</td><td>Additional flag from base permission type: this permission can be granted to
 * privileged apps in vendor partition.</td></tr>
 * <tr><td>verifier</td><td>200</td><td>Additional flag from base permission type: this permission can be automatically
 * granted to system apps that verify packages.</td></tr>
 * <tr><td>wellbeing</td><td>20000</td><td>Additional flag from base permission type: this permission will be granted to the
 * wellbeing app, as defined by the OEM.</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int protectionLevel = 16842761; // 0x1010009

/**
 * The attribute that holds a Base64-encoded public key.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 14
 */

public static final int publicKey = 16843686; // 0x10103a6

/**
 * If you wish to handle an action key during normal search query entry, you
 * must define an action string here.  This will be added to the
 * {@link android.content.Intent#ACTION_SEARCH ACTION_SEARCH} intent that is passed to your
 * searchable activity.  To examine the string, use
 * {@link android.content.Intent#getStringExtra getStringExtra(SearchManager.ACTION_MSG)}.
 * <i>Optional attribute.</i>
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int queryActionMsg = 16843227; // 0x10101db

/**
 * If provided and <code>true</code>, this searchable activity will be invoked for all
 * queries in a particular session. If set to <code>false</code> and the activity
 * returned zero results for a query, it will not be invoked again in that session for
 * supersets of that zero-results query. For example, if the activity returned zero
 * results for "bo", it would not be queried again for "bob".
 * The default value is <code>false</code>. <i>Optional attribute.</i>.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 4
 */

public static final int queryAfterZeroResults = 16843394; // 0x1010282

/**
 * Background for the section containing the search query.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int queryBackground = 16843911; // 0x1010487

/**
 * An optional query hint string to be displayed in the empty query field.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 11
 */

public static final int queryHint = 16843608; // 0x1010358

/**
 * Default quickcontact badge style with large quickcontact window.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 6
 */

public static final int quickContactBadgeStyleSmallWindowLarge = 16843443; // 0x10102b3

/**
 * Default quickcontact badge style with medium quickcontact window.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 6
 */

public static final int quickContactBadgeStyleSmallWindowMedium = 16843442; // 0x10102b2

/**
 * Default quickcontact badge style with small quickcontact window.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 6
 */

public static final int quickContactBadgeStyleSmallWindowSmall = 16843441; // 0x10102b1

/**
 * Default quickcontact badge style with large quickcontact window.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 6
 */

public static final int quickContactBadgeStyleWindowLarge = 16843440; // 0x10102b0

/**
 * Default quickcontact badge style with medium quickcontact window.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 6
 */

public static final int quickContactBadgeStyleWindowMedium = 16843439; // 0x10102af

/**
 * Default quickcontact badge style with small quickcontact window.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 6
 */

public static final int quickContactBadgeStyleWindowSmall = 16843438; // 0x10102ae

/**
 * Default RadioButton style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int radioButtonStyle = 16842878; // 0x101007e

/**
 * Defines the radius of the four corners.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int radius = 16843176; // 0x10101a8

/**
 * The rating to set by default.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 1
 */

public static final int rating = 16843077; // 0x1010145

/**
 * Default RatingBar style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int ratingBarStyle = 16842876; // 0x101007c

/**
 * Indicator RatingBar style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int ratingBarStyleIndicator = 16843280; // 0x1010210

/**
 * Small indicator RatingBar style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int ratingBarStyleSmall = 16842877; // 0x101007d

/**
 * A specific {@link android.R.attr#permission} name for read-only
 * access to a {@link android.content.ContentProvider}.  See the
 * <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
 * document for more information on permissions.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int readPermission = 16842759; // 0x1010007

/**
 * The service that provides voice recognition.  This is required.  When the user
 * selects this voice interaction service, they will also be implicitly selecting
 * the component here for their recognition service.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 21
 */

public static final int recognitionService = 16843932; // 0x101049c

/**
 * Specify the configuration changes that trigger the system to recreate the
 * current activity if any of these configuration changes happen in the system.
 * The valid configuration changes include mcc and mnc which are the same with
 * those in configChanges. By default from Android O, we don't recreate the activity
 * even the app doesn't specify mcc or mnc in configChanges. If the app wants to
 * be recreated, specify them in recreateOnConfigChanges.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>mcc</td><td>1</td><td>The IMSI MCC has changed, that is a SIM has been detected and
 * updated the Mobile Country Code.</td></tr>
 * <tr><td>mnc</td><td>2</td><td>The IMSI MNC has changed, that is a SIM has been detected and
 * updated the Mobile Network Code.</td></tr>
 * </table>
 * @apiSince 26
 */

public static final int recreateOnConfigChanges = 16844103; // 0x1010547

/**
 * Whether the preference has enabled to have its view recycled when used in the list
 * view. This is true by default.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 26
 */

public static final int recycleEnabled = 16844121; // 0x1010559

/**
 * Tasks whose root has this attribute set to true will replace baseIntent with that of the
 * next activity in the task. If the next activity also has this attribute set to true then
 * it will yield the baseIntent to any activity that it launches in the same task. This
 * continues until an activity is encountered which has this attribute set to false. False
 * is the default. This attribute set to true also permits activity's use of the
 * TaskDescription to change labels, colors and icons in the recent task list.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 21
 */

public static final int relinquishTaskIdentity = 16843894; // 0x1010476

/**
 * Tells ChangeTransform to track parent changes. Default is true. Corresponds to
 * {@link android.transition.ChangeTransform#setReparent(boolean)}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 21
 */

public static final int reparent = 16843964; // 0x10104bc

/**
 * A parent change should use an overlay or affect the transform of the
 * transitionining View. Default is true. Corresponds to
 * {@link android.transition.ChangeTransform#setReparentWithOverlay(boolean)}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 21
 */

public static final int reparentWithOverlay = 16843965; // 0x10104bd

/**
 * Defines how many times the animation should repeat. The default value is 0.
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>infinite</td><td>ffffffff</td><td></td></tr>
 * </table>
 * @apiSince 1
 */

public static final int repeatCount = 16843199; // 0x10101bf

/**
 * Defines the animation behavior when it reaches the end and the repeat count is
 * greater than 0 or infinite. The default value is restart.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>restart</td><td>1</td><td>The animation starts again from the beginning.</td></tr>
 * <tr><td>reverse</td><td>2</td><td>The animation plays backward.</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int repeatMode = 16843200; // 0x10101c0

/**
 * Application's requirement for five way navigation
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 3
 */

public static final int reqFiveWayNav = 16843314; // 0x1010232

/**
 * Application's requirement for a hard keyboard
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 3
 */

public static final int reqHardKeyboard = 16843305; // 0x1010229

/**
 * The input method preferred by an application.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>nokeys</td><td>1</td><td></td></tr>
 * <tr><td>qwerty</td><td>2</td><td></td></tr>
 * <tr><td>twelvekey</td><td>3</td><td></td></tr>
 * <tr><td>undefined</td><td>0</td><td></td></tr>
 * </table>
 * @apiSince 3
 */

public static final int reqKeyboardType = 16843304; // 0x1010228

/**
 * The navigation device preferred by an application.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>dpad</td><td>2</td><td></td></tr>
 * <tr><td>nonav</td><td>1</td><td></td></tr>
 * <tr><td>trackball</td><td>3</td><td></td></tr>
 * <tr><td>undefined</td><td>0</td><td></td></tr>
 * <tr><td>wheel</td><td>4</td><td></td></tr>
 * </table>
 * @apiSince 3
 */

public static final int reqNavigation = 16843306; // 0x101022a

/**
 * The touch screen type used by an application.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>finger</td><td>3</td><td></td></tr>
 * <tr><td>notouch</td><td>1</td><td></td></tr>
 * <tr><td>stylus</td><td>2</td><td></td></tr>
 * <tr><td>undefined</td><td>0</td><td></td></tr>
 * </table>
 * @apiSince 3
 */

public static final int reqTouchScreen = 16843303; // 0x1010227

/**
 * If {@code true} this app would like to run under the legacy storage
 * model. Note that this may not always be respected due to policy or
 * backwards compatibility reasons.
 * <p>Apps not requesting legacy storage can continue to discover and
 * read media belonging to other apps via {@code MediaStore}.
 * <p>
 * The default value is:
 * - {@code false} for apps with targetSdkVersion >= 29 (Q).
 * - {@code true} for apps with targetSdkVersion < 29.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 29
 */

public static final int requestLegacyExternalStorage = 16844291; // 0x1010603

/**
 * Whether the device must be unlocked before routing data to this service.
 * The default is false.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 19
 */

public static final int requireDeviceUnlock = 16843756; // 0x10103ec

/**
 * Specify whether this feature is required for the application.
 * The default is true, meaning the application requires the
 * feature, and does not want to be installed on devices that
 * don't support it.  If you set this to false, then this will
 * not impose a restriction on where the application can be
 * installed.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 5
 */

public static final int required = 16843406; // 0x101028e

/**
 * Declare that this application requires an account of a certain
 * type. The default value is null and indicates that the application can work without
 * any accounts. The type should correspond to the account authenticator type, such as
 * "com.google".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 18
 */

public static final int requiredAccountType = 16843734; // 0x10103d6

/**
 * Optional: the system must support this feature for the permission to be
 * requested.  If it doesn't support the feature, it will be as if the manifest didn't
 * request it at all.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 26
 */

public static final int requiredFeature = 16844116; // 0x1010554

/**
 * Flag to specify if this application needs to be present for all users. Only pre-installed
 * applications can request this feature. Default value is false.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 18
 */

public static final int requiredForAllUsers = 16843728; // 0x10103d0

/**
 * Optional: the system must NOT support this feature for the permission to be
 * requested.  If it does support the feature, it will be as if the manifest didn't
 * request it at all.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 26
 */

public static final int requiredNotFeature = 16844117; // 0x1010555

/**
 * Defines which edges should be faded on scrolling.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>horizontal</td><td>1000</td><td>Fades horizontal edges only.</td></tr>
 * <tr><td>none</td><td>0</td><td>No edge is faded.</td></tr>
 * <tr><td>vertical</td><td>2000</td><td>Fades vertical edges only.</td></tr>
 * </table>
 * @apiSince 14
 */

public static final int requiresFadingEdge = 16843685; // 0x10103a5

/**
 * Starting with {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2},
 * this is the new way to specify the minimum screen size an application is
 * compatible with.  This attribute provides the required minimum
 * "smallest screen width" (as per the -swNNNdp resource configuration)
 * that the application can run on.  For example, a typical phone
 * screen is 320, a 7" tablet 600, and a 10" tablet 720.  If the
 * smallest screen width of the device is below the value supplied here,
 * then the application is considered incompatible with that device.
 * If not supplied, then any old smallScreens, normalScreens, largeScreens,
 * or xlargeScreens attributes will be used instead.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 13
 */

public static final int requiresSmallestWidthDp = 16843620; // 0x1010364

/**
 * Resize the view by adjusting the clipBounds rather than changing the
 * dimensions of the view itself. The default value is false.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 22
 */

public static final int resizeClip = 16843983; // 0x10104cf

/**
 * Optional parameter which indicates if and how this widget can be
 * resized. Supports combined values using | operator.
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>horizontal</td><td>1</td><td></td></tr>
 * <tr><td>none</td><td>0</td><td></td></tr>
 * <tr><td>vertical</td><td>2</td><td></td></tr>
 * </table>
 * @apiSince 12
 */

public static final int resizeMode = 16843619; // 0x1010363

/**
 * Indicates whether the application can resize itself to newer
 * screen sizes.  This is mostly used to distinguish between old
 * applications that may not be compatible with newly introduced
 * screen sizes and newer applications that should be; it will be
 * set for you automatically based on whether you are targeting
 * a newer platform that supports more screens.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 4
 */

public static final int resizeable = 16843405; // 0x101028d

/**
 * Indicates that it is okay for this activity to be put in multi-window mode. Intended for a
 * multi-window device where there can be multiple activities of various sizes on the screen
 * at the same time.
 * <p>The default value is <code>false</code> for applications with
 * <code>targetSdkVersion</code> lesser than {@link android.os.Build.VERSION_CODES#N} and
 * <code>true</code> otherwise.
 * <p>Setting this flag to <code>false</code> lets the system know that the app may not be
 * tested or optimized for multi-window environment. The system may still put such activity in
 * multi-window with compatibility mode applied. It also does not guarantee that there will be
 * no other apps in multi-window visible on screen (e.g. picture-in-picture) or on other
 * displays. Therefore, this flag cannot be used to assure an exclusive resource access.
 * <p>NOTE: A task's root activity value is applied to all additional activities launched in
 * the task. That is if the root activity of a task is resizeable then the system will treat
 * all other activities in the task as resizeable and will not if the root activity isn't
 * resizeable.
 * <p>NOTE: The value of {@link android.R.attr#screenOrientation} is ignored for
 * resizeable activities when in multi-window mode.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 24
 */

public static final int resizeableActivity = 16844022; // 0x10104f6

/**
 * Resource identifier to assign to this piece of named meta-data.
 * The resource identifier can later be retrieved from the meta data
 * Bundle through {@link android.os.Bundle#getInt Bundle.getInt}.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int resource = 16842789; // 0x1010025

/**
 * Indicate that the application is prepared to attempt a restore of any
 * backed-up dataset, even if the backup is apparently from a newer version
 * of the application than is currently installed on the device.  Setting
 * this attribute to <code>true</code> will permit the Backup Manager to
 * attempt restore even when a version mismatch suggests that the data are
 * incompatible.  <em>Use with caution!</em>
 * <p>The default value of this attribute is <code>false</code>.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 8
 */

public static final int restoreAnyVersion = 16843450; // 0x10102ba

/**
 * @deprecated This attribute is not used by the Android operating system.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 5
 * @deprecatedSince 15
 */

@Deprecated public static final int restoreNeedsApplication = 16843421; // 0x101029d

/**
 * Declare that this application requires access to restricted accounts of a certain
 * type. The default value is null and restricted accounts won\'t be visible to this
 * application. The type should correspond to the account authenticator type, such as
 * "com.google".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 18
 */

public static final int restrictedAccountType = 16843733; // 0x10103d5

/**
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bool</td><td>1</td><td></td></tr>
 * <tr><td>bundle</td><td>7</td><td></td></tr>
 * <tr><td>bundle_array</td><td>8</td><td></td></tr>
 * <tr><td>choice</td><td>2</td><td></td></tr>
 * <tr><td>hidden</td><td>0</td><td></td></tr>
 * <tr><td>integer</td><td>5</td><td></td></tr>
 * <tr><td>multi-select</td><td>4</td><td></td></tr>
 * <tr><td>string</td><td>6</td><td></td></tr>
 * </table>
 * @apiSince 21
 */

public static final int restrictionType = 16843923; // 0x1010493

/**
 * Indicate that it is okay for this activity be resumed while the previous
 * activity is in the process of pausing, without waiting for the previous pause
 * to complete.  Use this with caution: your activity can not acquire any exclusive
 * resources (such as opening the camera or recording audio) when it launches, or it
 * may conflict with the previous activity and fail.
 * <p>The default value of this attribute is <code>false</code>.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 21
 */

public static final int resumeWhilePausing = 16843954; // 0x10104b2

/**
 * Whether this transition is reversible.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 21
 */

public static final int reversible = 16843851; // 0x101044b

/**
 * Internal revision code.  This number is the number used to determine
 * whether one APK is more recent than another: it has no other meaning
 * than that higher numbers are more recent.  This value is only meaningful
 * when the two {@link android.R.attr#versionCode} values are already
 * identical.  When an app is delivered as multiple split APKs, each
 * APK may have a different revisionCode value.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 22
 */

public static final int revisionCode = 16843989; // 0x10104d5

/**
 * Amount of right padding inside the gradient shape.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int right = 16843183; // 0x10101af

/**
 * Default style for RingtonePreference.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int ringtonePreferenceStyle = 16842899; // 0x1010093

/**
 * Which ringtone type(s) to show in the picker.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>alarm</td><td>4</td><td>Alarm sounds.</td></tr>
 * <tr><td>all</td><td>7</td><td>All available ringtone sounds.</td></tr>
 * <tr><td>notification</td><td>2</td><td>Notification sounds.</td></tr>
 * <tr><td>ringtone</td><td>1</td><td>Ringtones.</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int ringtoneType = 16843257; // 0x10101f9

/**
 * rotation of the view, in degrees.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 11
 */

public static final int rotation = 16843558; // 0x1010326

/**
 * Flag allowing the activity to specify which screen rotation animation
 * it desires.  Valid values are "rotate", "crossfade", and "jumpcut"
 * as described in {@link android.view.WindowManager.LayoutParams#rotationAnimation}.
 * Specifying your Rotation animation in the WindowManager.LayoutParams
 * may be racy with app startup and updattransitions occuring during application startup and thusly
 * the manifest attribute is preferred.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>crossfade</td><td>1</td><td></td></tr>
 * <tr><td>jumpcut</td><td>2</td><td></td></tr>
 * <tr><td>rotate</td><td>0</td><td></td></tr>
 * <tr><td>seamless</td><td>3</td><td></td></tr>
 * </table>
 * @apiSince 26
 */

public static final int rotationAnimation = 16844090; // 0x101053a

/**
 * rotation of the view around the x axis, in degrees.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 11
 */

public static final int rotationX = 16843559; // 0x1010327

/**
 * rotation of the view around the y axis, in degrees.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 11
 */

public static final int rotationY = 16843560; // 0x1010328

/**
 * A Drawable resource providing a graphical representation of its
 * associated item.  Use with the
 * application tag (to supply a default round icon for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific round icon for that component).  It may also be
 * used with the intent-filter tag to supply a round icon to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given round icon will be used to display to the user a graphical
 * representation of its associated component; for example, as the round icon
 * for main activity that is displayed in the launcher.  This must be
 * a reference to a Drawable resource containing the image definition.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 25
 */

public static final int roundIcon = 16844076; // 0x101052c

/**
 * The maximum number of rows to create when automatically positioning children.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 14
 */

public static final int rowCount = 16843637; // 0x1010375

/**
 * Fraction of the animation duration used to delay the beginning of
 * the animation of each row.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 * @apiSince 1
 */

public static final int rowDelay = 16843216; // 0x10101d0

/**
 * Row edge flags.
 * {@deprecated Copy this definition into your own application project.}
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>8</td><td>Row is anchored to the bottom of the keyboard.
 * {@deprecated Copy this definition into your own application project.}</td></tr>
 * <tr><td>top</td><td>4</td><td>Row is anchored to the top of the keyboard.
 * {@deprecated Copy this definition into your own application project.}</td></tr>
 * </table>
 * @apiSince 3
 * @deprecatedSince 29
 */

@Deprecated public static final int rowEdgeFlags = 16843329; // 0x1010241

/**
 * Defines the height of each row.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int rowHeight = 16843058; // 0x1010132

/**
 * When set to true, forces row boundaries to appear in the same order
 * as row indices.
 * The default is true.
 * See {@link android.widget.GridLayout#setRowOrderPreserved(boolean)}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 14
 */

public static final int rowOrderPreserved = 16843638; // 0x1010376

/**
 * If false, no state will be saved for this view when it is being
 * frozen. The default is true, allowing the view to be saved
 * (however it also must have an ID assigned to it for its
 * state to be saved).  Setting this to false only disables the
 * state for this view, not for its children which may still
 * be saved.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int saveEnabled = 16842983; // 0x10100e7

/**
 * Specifies where the drawable is positioned after scaling. The default value is
 * left.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
 * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
 * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
 * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
 * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the horizontal gravity: a left gravity will clip the right
 * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
 * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the vertical gravity: a top gravity will clip the bottom
 * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
 * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
 * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
 * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
 * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
 * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int scaleGravity = 16843262; // 0x10101fe

/**
 * Scale height, expressed as a percentage of the drawable's bound. The value's
 * format is XX%. For instance: 100%, 12.5%, etc.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int scaleHeight = 16843261; // 0x10101fd

/**
 * Controls how the image should be resized or moved to match the size
 * of this ImageView.  See {@link android.widget.ImageView.ScaleType}
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>center</td><td>5</td><td>Center the image in the view, but perform no scaling.</td></tr>
 * <tr><td>centerCrop</td><td>6</td><td>Scale the image uniformly (maintain the image's aspect ratio) so both dimensions
 * (width and height) of the image will be equal to or larger than the corresponding
 * dimension of the view (minus padding). The image is then centered in the view.</td></tr>
 * <tr><td>centerInside</td><td>7</td><td>Scale the image uniformly (maintain the image's aspect ratio) so that both
 * dimensions (width and height) of the image will be equal to or less than the
 * corresponding dimension of the view (minus padding). The image is then centered in
 * the view.</td></tr>
 * <tr><td>fitCenter</td><td>3</td><td>Scale the image using {@link android.graphics.Matrix.ScaleToFit#CENTER}.</td></tr>
 * <tr><td>fitEnd</td><td>4</td><td>Scale the image using {@link android.graphics.Matrix.ScaleToFit#END}.</td></tr>
 * <tr><td>fitStart</td><td>2</td><td>Scale the image using {@link android.graphics.Matrix.ScaleToFit#START}.</td></tr>
 * <tr><td>fitXY</td><td>1</td><td>Scale the image using {@link android.graphics.Matrix.ScaleToFit#FILL}.</td></tr>
 * <tr><td>matrix</td><td>0</td><td>Scale using the image matrix when drawing. See
 * {@link android.widget.ImageView#setImageMatrix(Matrix)}.</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int scaleType = 16843037; // 0x101011d

/**
 * Scale width, expressed as a percentage of the drawable's bound. The value's
 * format is XX%. For instance: 100%, 12.5%, etc.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int scaleWidth = 16843260; // 0x10101fc

/**
 * scale of the view in the x direction.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 11
 */

public static final int scaleX = 16843556; // 0x1010324

/**
 * scale of the view in the y direction.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 11
 */

public static final int scaleY = 16843557; // 0x1010325

/**
 * Specify a URI scheme that is handled, as per
 * {@link android.content.IntentFilter#addDataScheme
 * IntentFilter.addDataScheme()}.
 * <p><em>Note: scheme matching in the Android framework is
 * case-sensitive, unlike the formal RFC.  As a result,
 * schemes here should always use lower case letters.</em></p>
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int scheme = 16842791; // 0x1010027

/**
 * Specifies a compatible screen density, as per the device
 * configuration screen density bins.
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>hdpi</td><td>f0</td><td>A high density screen, approximately 240dpi.</td></tr>
 * <tr><td>ldpi</td><td>78</td><td>A low density screen, approximately 120dpi.</td></tr>
 * <tr><td>mdpi</td><td>a0</td><td>A medium density screen, approximately 160dpi.</td></tr>
 * <tr><td>xhdpi</td><td>140</td><td>An extra high density screen, approximately 320dpi.</td></tr>
 * <tr><td>xxhdpi</td><td>1e0</td><td>An extra extra high density screen, approximately 480dpi.</td></tr>
 * <tr><td>xxxhdpi</td><td>280</td><td>An extra extra extra high density screen, approximately 640dpi.</td></tr>
 * </table>
 * @apiSince 9
 */

public static final int screenDensity = 16843467; // 0x10102cb

/**
 * Specify the orientation an activity should be run in.  If not
 * specified, it will run in the current preferred orientation
 * of the screen.
 * <p>This attribute is supported by the <a
 * href="{@docRoot}guide/topics/manifest/activity-element.html">{@code <activity>}</a>
 * element.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>behind</td><td>3</td><td>Keep the screen in the same orientation as whatever is behind
 * this activity.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_BEHIND}.</td></tr>
 * <tr><td>fullSensor</td><td>a</td><td>Orientation is determined by a physical orientation sensor:
 * the display will rotate based on how the user moves the device.
 * This allows any of the 4 possible rotations, regardless of what
 * the device will normally do (for example some devices won't
 * normally use 180 degree rotation).
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_FULL_SENSOR}.</td></tr>
 * <tr><td>fullUser</td><td>d</td><td>Respect the user's sensor-based rotation preference, but if
 * sensor-based rotation is enabled then allow the screen to rotate
 * in all 4 possible directions regardless of what
 * the device will normally do (for example some devices won't
 * normally use 180 degree rotation).
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_FULL_USER}.</td></tr>
 * <tr><td>landscape</td><td>0</td><td>Would like to have the screen in a landscape orientation: that
 * is, with the display wider than it is tall, ignoring sensor data.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_LANDSCAPE}.</td></tr>
 * <tr><td>locked</td><td>e</td><td>Screen is locked to its current rotation, whatever that is.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_LOCKED}.</td></tr>
 * <tr><td>nosensor</td><td>5</td><td>Always ignore orientation determined by orientation sensor:
 * the display will not rotate when the user moves the device.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_NOSENSOR}.</td></tr>
 * <tr><td>portrait</td><td>1</td><td>Would like to have the screen in a portrait orientation: that
 * is, with the display taller than it is wide, ignoring sensor data.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_PORTRAIT}.</td></tr>
 * <tr><td>reverseLandscape</td><td>8</td><td>Would like to have the screen in landscape orientation, turned in
 * the opposite direction from normal landscape.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_REVERSE_LANDSCAPE}.</td></tr>
 * <tr><td>reversePortrait</td><td>9</td><td>Would like to have the screen in portrait orientation, turned in
 * the opposite direction from normal portrait.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_REVERSE_PORTRAIT}.</td></tr>
 * <tr><td>sensor</td><td>4</td><td>Orientation is determined by a physical orientation sensor:
 * the display will rotate based on how the user moves the device.
 * Ignores user's setting to turn off sensor-based rotation.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_SENSOR}.</td></tr>
 * <tr><td>sensorLandscape</td><td>6</td><td>Would like to have the screen in landscape orientation, but can
 * use the sensor to change which direction the screen is facing.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_SENSOR_LANDSCAPE}.</td></tr>
 * <tr><td>sensorPortrait</td><td>7</td><td>Would like to have the screen in portrait orientation, but can
 * use the sensor to change which direction the screen is facing.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_SENSOR_PORTRAIT}.</td></tr>
 * <tr><td>unspecified</td><td>ffffffff</td><td>No preference specified: let the system decide the best
 * orientation.  This will either be the orientation selected
 * by the activity below, or the user's preferred orientation
 * if this activity is the bottom of a task. If the user
 * explicitly turned off sensor based orientation through settings
 * sensor based device rotation will be ignored. If not by default
 * sensor based orientation will be taken into account and the
 * orientation will changed based on how the user rotates the device.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_UNSPECIFIED}.</td></tr>
 * <tr><td>user</td><td>2</td><td>Use the user's current preferred orientation of the handset.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_USER}.</td></tr>
 * <tr><td>userLandscape</td><td>b</td><td>Would like to have the screen in landscape orientation, but if
 * the user has enabled sensor-based rotation then we can use the
 * sensor to change which direction the screen is facing.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_USER_LANDSCAPE}.</td></tr>
 * <tr><td>userPortrait</td><td>c</td><td>Would like to have the screen in portrait orientation, but if
 * the user has enabled sensor-based rotation then we can use the
 * sensor to change which direction the screen is facing.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_USER_PORTRAIT}.</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int screenOrientation = 16842782; // 0x101001e

/**
 * Whether this view should be treated as a focusable unit by screen reader accessibility
 * tools. See {@link android.view.View#setScreenReaderFocusable(boolean)}. The default
 * value, {@code false}, leaves the screen reader to consider other signals, such as
 * focusability or the presence of text, to decide what it focus.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 28
 */

public static final int screenReaderFocusable = 16844148; // 0x1010574

/**
 * Specifies a compatible screen size, as per the device
 * configuration screen size bins.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>large</td><td>190</td><td>A large screen configuration, at least 400x530dp.</td></tr>
 * <tr><td>normal</td><td>12c</td><td>A normal screen configuration, at least 320x480dp.</td></tr>
 * <tr><td>small</td><td>c8</td><td>A small screen configuration, at least 240x320dp.</td></tr>
 * <tr><td>xlarge</td><td>1f4</td><td>An extra large screen configuration, at least 600x800dp.</td></tr>
 * </table>
 * @apiSince 9
 */

public static final int screenSize = 16843466; // 0x10102ca

/**
 * Whether the text is allowed to be wider than the view (and
 * therefore can be scrolled horizontally).
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int scrollHorizontally = 16843099; // 0x101015b

/**
 * Defines which scroll indicators should be displayed when the view
 * can be scrolled. Multiple values may be combined using logical OR,
 * for example "top|bottom".
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>2</td><td>Displays bottom scroll indicator when vew can be scrolled down.</td></tr>
 * <tr><td>end</td><td>20</td><td>Displays right scroll indicator when vew can be scrolled in the
 * end direction.</td></tr>
 * <tr><td>left</td><td>4</td><td>Displays left scroll indicator when vew can be scrolled left.</td></tr>
 * <tr><td>none</td><td>0</td><td>No scroll indicators are displayed.</td></tr>
 * <tr><td>right</td><td>8</td><td>Displays right scroll indicator when vew can be scrolled right.</td></tr>
 * <tr><td>start</td><td>10</td><td>Displays right scroll indicator when vew can be scrolled in the
 * start direction.</td></tr>
 * <tr><td>top</td><td>1</td><td>Displays top scroll indicator when view can be scrolled up.</td></tr>
 * </table>
 * @apiSince 23
 */

public static final int scrollIndicators = 16844006; // 0x10104e6

/**
 * Default ScrollView style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int scrollViewStyle = 16842880; // 0x1010080

/**
 * The initial horizontal scroll offset, in pixels.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int scrollX = 16842962; // 0x10100d2

/**
 * The initial vertical scroll offset, in pixels.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int scrollY = 16842963; // 0x10100d3

/**
 * Defines whether the horizontal scrollbar track should always be drawn.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int scrollbarAlwaysDrawHorizontalTrack = 16842856; // 0x1010068

/**
 * Defines whether the vertical scrollbar track should always be drawn.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int scrollbarAlwaysDrawVerticalTrack = 16842857; // 0x1010069

/**
 * Defines the delay in milliseconds that a scrollbar waits before fade out.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 5
 */

public static final int scrollbarDefaultDelayBeforeFade = 16843433; // 0x10102a9

/**
 * Defines the delay in milliseconds that a scrollbar takes to fade out.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 5
 */

public static final int scrollbarFadeDuration = 16843432; // 0x10102a8

/**
 * Sets the width of vertical scrollbars and height of horizontal scrollbars.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int scrollbarSize = 16842851; // 0x1010063

/**
 * Controls the scrollbar style and position. The scrollbars can be overlaid or
 * inset. When inset, they add to the padding of the view. And the
 * scrollbars can be drawn inside the padding area or on the edge of
 * the view. For example, if a view has a background drawable and you
 * want to draw the scrollbars inside the padding specified by the
 * drawable, you can use insideOverlay or insideInset. If you want them
 * to appear at the edge of the view, ignoring the padding, then you can
 * use outsideOverlay or outsideInset.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>insideInset</td><td>1000000</td><td>Inside the padding and inset.</td></tr>
 * <tr><td>insideOverlay</td><td>0</td><td>Inside the padding and overlaid.</td></tr>
 * <tr><td>outsideInset</td><td>3000000</td><td>Edge of the view and inset.</td></tr>
 * <tr><td>outsideOverlay</td><td>2000000</td><td>Edge of the view and overlaid.</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int scrollbarStyle = 16842879; // 0x101007f

/**
 * Defines the horizontal scrollbar thumb drawable.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int scrollbarThumbHorizontal = 16842852; // 0x1010064

/**
 * Defines the vertical scrollbar thumb drawable.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int scrollbarThumbVertical = 16842853; // 0x1010065

/**
 * Defines the horizontal scrollbar track drawable.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int scrollbarTrackHorizontal = 16842854; // 0x1010066

/**
 * Defines the vertical scrollbar track drawable.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int scrollbarTrackVertical = 16842855; // 0x1010067

/**
 * Defines which scrollbars should be displayed on scrolling or not.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>horizontal</td><td>100</td><td>Displays horizontal scrollbar only.</td></tr>
 * <tr><td>none</td><td>0</td><td>No scrollbar is displayed.</td></tr>
 * <tr><td>vertical</td><td>200</td><td>Displays vertical scrollbar only.</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int scrollbars = 16842974; // 0x10100de

/**
 * When set to true, the list uses a drawing cache during scrolling.
 * This makes the rendering faster but uses more memory. The default
 * value is true.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int scrollingCache = 16843006; // 0x10100fe

/**
 * If supplied, this string will be displayed as the text of the "Search" button.
 * <i>Optional attribute.</i>
 * {@deprecated This will create a non-standard UI appearance, because the search bar UI is
 * changing to use only icons for its buttons.}
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 * @deprecatedSince 15
 */

@Deprecated public static final int searchButtonText = 16843269; // 0x1010205

/**
 * Search icon displayed as a text field hint.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 22
 */

public static final int searchHintIcon = 16843988; // 0x10104d4

/**
 * Search icon.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int searchIcon = 16843907; // 0x1010483

/**
 * Additional features are controlled by mode bits in this field.  Omitting
 * this field, or setting to zero, provides default behavior.  <i>Optional attribute.</i>
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>queryRewriteFromData</td><td>10</td><td>If set, this flag causes the suggestion column SUGGEST_COLUMN_INTENT_DATA to
 * be considered as the text for suggestion query rewriting.  This should only
 * be used when the values in SUGGEST_COLUMN_INTENT_DATA are suitable for user
 * inspection and editing - typically, HTTP/HTTPS Uri's.</td></tr>
 * <tr><td>queryRewriteFromText</td><td>20</td><td>If set, this flag causes the suggestion column SUGGEST_COLUMN_TEXT_1 to
 * be considered as the text for suggestion query rewriting.  This should be used
 * for suggestions in which no query text is provided and the SUGGEST_COLUMN_INTENT_DATA
 * values are not suitable for user inspection and editing.</td></tr>
 * <tr><td>showSearchIconAsBadge</td><td>8</td><td><strong>This is deprecated.</strong><br/>The default
 * application icon is now always used, so this option is
 * obsolete.</td></tr>
 * <tr><td>showSearchLabelAsBadge</td><td>4</td><td>If set, this flag enables the display of the search target (label) within the
 * search bar.  If neither bad mode is selected, no badge will be shown.</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int searchMode = 16843221; // 0x10101d5

/**
 * If provided, this string will be used to describe the searchable item in the
 * searchable items settings within system search settings. <i>Optional
 * attribute.</i>
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 4
 */

public static final int searchSettingsDescription = 16843402; // 0x101028a

/**
 * If provided, this is the trigger indicating that the searchable activity
 * provides suggestions as well.  The value must be a fully-qualified content provider
 * authority (for example, "com.example.android.apis.SuggestionProvider") and should match
 * the "android:authorities" tag in your content provider's manifest entry.  <i>Optional
 * attribute.</i>
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int searchSuggestAuthority = 16843222; // 0x10101d6

/**
 * If provided, and not overridden by an action in the selected suggestion, this
 * string will be placed in the action field of the {@link android.content.Intent Intent}
 * when the user clicks a suggestion.  <i>Optional attribute.</i>
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int searchSuggestIntentAction = 16843225; // 0x10101d9

/**
 * If provided, and not overridden by an action in the selected suggestion, this
 * string will be placed in the data field of the {@link android.content.Intent Intent}
 * when the user clicks a suggestion.  <i>Optional attribute.</i>
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int searchSuggestIntentData = 16843226; // 0x10101da

/**
 * If provided, this will be inserted in the suggestions query Uri, after the authority
 * you have provide but before the standard suggestions path. <i>Optional attribute.</i>
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int searchSuggestPath = 16843223; // 0x10101d7

/**
 * If provided, suggestion queries will be passed into your query function
 * as the <i>selection</i> parameter.  Typically this will be a WHERE clause for your
 * database, and will contain a single question mark, which represents the actual query
 * string that has been typed by the user.  If not provided, then the user query text
 * will be appended to the query Uri (after an additional "/".)  <i>Optional
 * attribute.</i>
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int searchSuggestSelection = 16843224; // 0x10101d8

/**
 * If provided, this is the minimum number of characters needed to trigger
 * search suggestions. The default value is 0. <i>Optional attribute.</i>
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 4
 */

public static final int searchSuggestThreshold = 16843373; // 0x101026d

/**
 * Style for the search query widget.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int searchViewStyle = 16843904; // 0x1010480

/**
 * The alpha applied to the foreground color to create the secondary text color.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 26
 */

public static final int secondaryContentAlpha = 16844115; // 0x1010553

/**
 * Defines the secondary progress value, between 0 and max. This progress is drawn between
 * the primary progress and the background.  It can be ideal for media scenarios such as
 * showing the buffering progress while the default progress shows the play progress.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 1
 */

public static final int secondaryProgress = 16843064; // 0x1010138

/**
 * Tint to apply to the secondary progress indicator.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 21
 */

public static final int secondaryProgressTint = 16843879; // 0x1010467

/**
 * Blending mode used to apply the secondary progress indicator tint.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 * @apiSince 21
 */

public static final int secondaryProgressTintMode = 16843880; // 0x1010468

/**
 * Secure Element which the AIDs should be routed to
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 29
 */

public static final int secureElementName = 16844290; // 0x1010602

/**
 * Default SeekBar style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int seekBarStyle = 16842875; // 0x101007b

/**
 * Style for segmented buttons - a container that houses several buttons
 * with the appearance of a singel button broken into segments.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int segmentedButtonStyle = 16843568; // 0x1010330

/**
 * If the text is selectable, select it all when the view takes
 * focus.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int selectAllOnFocus = 16843102; // 0x101015e

/**
 * Whether the Preference is selectable.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int selectable = 16843238; // 0x10101e6

/**
 * Background drawable for bordered standalone items that need focus/pressed states.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int selectableItemBackground = 16843534; // 0x101030e

/**
 * Background drawable for borderless standalone items that need focus/pressed states.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int selectableItemBackgroundBorderless = 16843868; // 0x101045c

/**
 * @deprecated Drawable for the vertical bar shown at the beginning and at the end of the selected date.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 * @deprecatedSince 23
 */

@Deprecated public static final int selectedDateVerticalBar = 16843591; // 0x1010347

/**
 * @deprecated The background color for the selected week.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 11
 * @deprecatedSince 23
 */

@Deprecated public static final int selectedWeekBackgroundColor = 16843586; // 0x1010342

/**
 * The height of the selection divider.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 29
 */

public static final int selectionDividerHeight = 16844184; // 0x1010598

/**
 * The service that hosts active voice interaction sessions.  This is required.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 21
 */

public static final int sessionService = 16843837; // 0x101043d

/**
 * Component name of an activity that allows the user to modify
 * the settings for this service.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 3
 */

public static final int settingsActivity = 16843301; // 0x1010225

/**
 * Uri that specifies a settings Slice for this wallpaper.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 29
 */

public static final int settingsSliceUri = 16844179; // 0x1010593

/**
 * Component name of an activity that allows the user to set up this service.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 21
 */

public static final int setupActivity = 16843766; // 0x10103f6

/**
 * Place a blurred shadow of text underneath the text, drawn with the
 * specified color. The text shadow produced does not interact with
 * properties on View that are responsible for real time shadows,
 * {@link android.R.styleable#View_elevation elevation} and
 * {@link android.R.styleable#View_translationZ translationZ}.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int shadowColor = 16843105; // 0x1010161

/**
 * Horizontal offset of the text shadow.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 1
 */

public static final int shadowDx = 16843106; // 0x1010162

/**
 * Vertical offset of the text shadow.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 1
 */

public static final int shadowDy = 16843107; // 0x1010163

/**
 * Blur radius of the text shadow.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 1
 */

public static final int shadowRadius = 16843108; // 0x1010164

/**
 * Indicates what shape to fill with a gradient.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>line</td><td>2</td><td>Line shape.</td></tr>
 * <tr><td>oval</td><td>1</td><td>Oval shape.</td></tr>
 * <tr><td>rectangle</td><td>0</td><td>Rectangle shape, with optional rounder corners.</td></tr>
 * <tr><td>ring</td><td>3</td><td>Ring shape.</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int shape = 16843162; // 0x101019a

/**
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int shareInterpolator = 16843195; // 0x10101bb

/**
 * Specify the name of a user ID that will be shared between multiple
 * packages.  By default, each package gets its own unique user-id.
 * By setting this value on two or more packages, each of these packages
 * will be given a single shared user ID, so they can for example run
 * in the same process.  Note that for them to actually get the same
 * user ID, they must also be signed with the same signature.
 * @deprecated Shared user id's cause non-deterministic behaviour within the
 * package manager. As such, it's use is discouraged, deprecated, and will
 * be removed altogether in a future version of Android. Instead, proper
 * communication mechanisms such as services and providers should be used
 * to facilitate interoperability between shared components.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 * @deprecatedSince 29
 */

@Deprecated public static final int sharedUserId = 16842763; // 0x101000b

/**
 * Specify a label for the shared user UID of this package.  This is
 * only used if you have also used android:sharedUserId.  This must
 * be a reference to a string resource; it can not be an explicit
 * string.
 * @deprecated There is no replacement for this attribute.
 * {@link android.R.attr#sharedUserId} has been deprecated making
 * this attribute unnecessary.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 3
 * @deprecatedSince 29
 */

@Deprecated public static final int sharedUserLabel = 16843361; // 0x1010261

/**
 * Flag indicating whether the application can be profiled by the shell user,
 * even when running on a device that is running in user mode.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 29
 */

public static final int shell = 16844180; // 0x1010594

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 25
 */

public static final int shortcutDisabledMessage = 16844075; // 0x101052b

/**
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 25
 */

public static final int shortcutId = 16844072; // 0x1010528

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 25
 */

public static final int shortcutLongLabel = 16844074; // 0x101052a

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 25
 */

public static final int shortcutShortLabel = 16844073; // 0x1010529

/**
 * Whether the view of this Preference should be disabled when
 * this Preference is disabled.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int shouldDisableView = 16843246; // 0x10101ee

/**
 * How this item should display in the Action Bar, if present.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>always</td><td>2</td><td>Always show this item in an actionbar, even if it would override
 * the system's limits of how much stuff to put there. This may make
 * your action bar look bad on some screens. In most cases you should
 * use "ifRoom" instead. Mutually exclusive with "ifRoom" and "never".</td></tr>
 * <tr><td>collapseActionView</td><td>8</td><td>This item's action view collapses to a normal menu
 * item. When expanded, the action view takes over a
 * larger segment of its container.</td></tr>
 * <tr><td>ifRoom</td><td>1</td><td>Show this item in an action bar if there is room for it as determined
 * by the system. Favor this option over "always" where possible.
 * Mutually exclusive with "never" and "always".</td></tr>
 * <tr><td>never</td><td>0</td><td>Never show this item in an action bar, show it in the overflow menu instead.
 * Mutually exclusive with "ifRoom" and "always".</td></tr>
 * <tr><td>withText</td><td>4</td><td>When this item is shown as an action in the action bar, show a text
 * label with it even if it has an icon representation.</td></tr>
 * </table>
 * @apiSince 11
 */

public static final int showAsAction = 16843481; // 0x10102d9

/**
 * Whether to show an item for a default sound.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int showDefault = 16843258; // 0x10101fa

/**
 * Setting for which dividers to show.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>beginning</td><td>1</td><td></td></tr>
 * <tr><td>end</td><td>4</td><td></td></tr>
 * <tr><td>middle</td><td>2</td><td></td></tr>
 * <tr><td>none</td><td>0</td><td></td></tr>
 * </table>
 * @apiSince 11
 */

public static final int showDividers = 16843561; // 0x1010329

/**
 * Specify that an Activity should be shown even if the current/foreground user
 * is different from the user of the Activity. This will also force the
 * <code>android.view.LayoutParams.FLAG_SHOW_WHEN_LOCKED</code> flag
 * to be set for all windows of this activity
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 23
 */

public static final int showForAllUsers = 16844015; // 0x10104ef

/**
 * Whether to show any metadata when previewing the wallpaper. If this value is
 * set to true, any component that shows a preview of this live wallpaper should also show
 * accompanying information like the title, the description, the author and the context
 * description of this wallpaper so the user gets to know further information about this
 * wallpaper.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 25
 */

public static final int showMetadataInPreview = 16844079; // 0x101052f

/**
 * Specify that an Activity should be shown over the lock screen and,
 * in a multiuser environment, across all users' windows.
 * @deprecated use {@link android.R.attr#showForAllUsers} instead.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 17
 * @deprecatedSince 23
 */

@Deprecated public static final int showOnLockScreen = 16843721; // 0x10103c9

/**
 * Whether to show an item for 'Silent'.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int showSilent = 16843259; // 0x10101fb

/**
 * Whether to draw on/off text.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 21
 */

public static final int showText = 16843949; // 0x10104ad

/**
 * @deprecated Whether do show week numbers.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 11
 * @deprecatedSince 23
 */

@Deprecated public static final int showWeekNumber = 16843582; // 0x101033e

/**
 * Specifies whether an {@link android.app.Activity} should be shown on top of the lock screen
 * whenever the lockscreen is up and the activity is resumed. Normally an activity will be
 * transitioned to the stopped state if it is started while the lockscreen is up, but with
 * this flag set the activity will remain in the resumed state visible on-top of the lock
 * screen.
 * <p>This should be used instead of {@link android.view.WindowManager.LayoutParams#FLAG_SHOW_WHEN_LOCKED}
 * flag set for Windows. When using the Window flag during activity startup, there may not be
 * time to add it before the system stops your activity for being behind the lock-screen.
 * This leads to a double life-cycle as it is then restarted.</p>
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 27
 */

public static final int showWhenLocked = 16844137; // 0x1010569

/**
 * @deprecated The number of weeks to be shown.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 11
 * @deprecatedSince 23
 */

@Deprecated public static final int shownWeekCount = 16843585; // 0x1010341

/**
 * The zero-based index of the columns to shrink. The column indices
 * must be separated by a comma: 1, 2, 5. Illegal and duplicate
 * indices are ignored. You can shrink all columns by using the
 * value "*" instead. Note that a column can be marked stretchable
 * and shrinkable at the same time.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int shrinkColumns = 16843082; // 0x101014a

/**
 * Constrains the text to a single horizontally scrolling line
 * instead of letting it wrap onto multiple lines, and advances
 * focus instead of inserting a newline when you press the
 * enter key.
 * The default value is false (multi-line wrapped text mode) for non-editable text, but if
 * you specify any value for inputType, the default is true (single-line input field mode).
 * {@deprecated This attribute is deprecated. Use <code>maxLines</code> instead to change
 * the layout of a static text, and use the <code>textMultiLine</code> flag in the
 * inputType attribute instead for editable text views (if both singleLine and inputType
 * are supplied, the inputType flags will override the value of singleLine). }
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 * @deprecatedSince 15
 */

@Deprecated public static final int singleLine = 16843101; // 0x101015d

/**
 * Whether to use single line for the preference title text. By default, preference title
 * will be constrained to one line, so the default value of this attribute is true.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 26
 */

public static final int singleLineTitle = 16844124; // 0x101055c

/**
 * If set to true, a single instance of this component will run for
 * all users.  That instance will run as user 0, the default/primary
 * user.  When the app running is in processes for other users and interacts
 * with this component (by binding to a service for example) those processes will
 * always interact with the instance running for user 0.  Enabling
 * single user mode forces "exported" of the component to be false, to
 * help avoid introducing multi-user security bugs.  This feature is only
 * available to applications built in to the system image; you must hold the
 * permission INTERACT_ACROSS_USERS in order
 * to use this feature.  This flag can only be used with services,
 * receivers, and providers; it can not be used with activities.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 17
 */

public static final int singleUser = 16843711; // 0x10103bf

/**
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td>Slide to and from the bottom edge of the Scene.</td></tr>
 * <tr><td>end</td><td>800005</td><td>Slide to and from the x-axis position at the end of the Scene root.</td></tr>
 * <tr><td>left</td><td>3</td><td>Slide to and from the left edge of the Scene.</td></tr>
 * <tr><td>right</td><td>5</td><td>Slide to and from the right edge of the Scene.</td></tr>
 * <tr><td>start</td><td>800003</td><td>Slide to and from the x-axis position at the start of the Scene root.</td></tr>
 * <tr><td>top</td><td>30</td><td>Slide to and from the top edge of the Scene.</td></tr>
 * </table>
 * @apiSince 21
 */

public static final int slideEdge = 16843824; // 0x1010430

/**
 * Smaller icon of the authenticator.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 5
 */

public static final int smallIcon = 16843422; // 0x101029e

/**
 * Indicates whether the application supports smaller screen form-factors.
 * A small screen is defined as one with a smaller aspect ratio than
 * the traditional HVGA screen; that is, for a portrait screen, less
 * tall than an HVGA screen.  In practice, this means a QVGA low
 * density or VGA high density screen.  An application that does
 * not support small screens <em>will not be available</em> for
 * small screen devices, since there is little the platform can do
 * to make such an application work on a smaller screen.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 4
 */

public static final int smallScreens = 16843396; // 0x1010284

/**
 * When set to true, the list will use a more refined calculation
 * method based on the pixels height of the items visible on screen. This
 * property is set to true by default but should be set to false if your adapter
 * will display items of varying heights. When this property is set to true and
 * your adapter displays items of varying heights, the scrollbar thumb will
 * change size as the user scrolls through the list. When set to false, the list
 * will use only the number of items in the adapter and the number of items visible
 * on screen to determine the scrollbar's properties.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 3
 */

public static final int smoothScrollbar = 16843313; // 0x1010231

/**
 * Boolean that controls whether a view should have sound effects
 * enabled for events such as clicking and touching.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int soundEffectsEnabled = 16843285; // 0x1010215

/**
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int spacing = 16843027; // 0x1010113

/**
 * Default style for spinner drop down items.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int spinnerDropDownItemStyle = 16842887; // 0x1010087

/**
 * Default spinner item style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int spinnerItemStyle = 16842889; // 0x1010089

/**
 * Display mode for spinner options.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>dialog</td><td>0</td><td>Spinner options will be presented to the user as a dialog window.</td></tr>
 * <tr><td>dropdown</td><td>1</td><td>Spinner options will be presented to the user as an inline dropdown
 * anchored to the spinner widget itself.</td></tr>
 * </table>
 * @apiSince 11
 */

public static final int spinnerMode = 16843505; // 0x10102f1

/**
 * Default Spinner style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int spinnerStyle = 16842881; // 0x1010081

/**
 * Whether the spinners are shown. Only valid for "spinner" mode.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 11
 */

public static final int spinnersShown = 16843595; // 0x101034b

/**
 * Sets whether this ViewGroup should split MotionEvents
 * to separate child views during touch event dispatch.
 * If false (default), touch events will be dispatched to
 * the child view where the first pointer went down until
 * the last pointer goes up.
 * If true, touch events may be dispatched to multiple children.
 * MotionEvents for each pointer will be dispatched to the child
 * view where the initial ACTION_DOWN event happened.
 * See {@link android.view.ViewGroup#setMotionEventSplittingEnabled(boolean)}
 * for more information.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 11
 */

public static final int splitMotionEvents = 16843503; // 0x10102ef

/**
 * When an application is partitioned into splits, this is the name of the
 * split that contains the defined component.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 26
 */

public static final int splitName = 16844105; // 0x1010549

/**
 * Whether to split the track and leave a gap for the thumb drawable.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 21
 */

public static final int splitTrack = 16843852; // 0x101044c

/**
 * Alpha value of the spot shadow projected by elevated views, between 0 and 1.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 21
 */

public static final int spotShadowAlpha = 16843967; // 0x10104bf

/**
 * Sets a drawable as the content of this ImageView.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int src = 16843033; // 0x1010119

/**
 * Specify a URI scheme specific part that must exactly match, as per
 * {@link android.content.IntentFilter#addDataSchemeSpecificPart
 * IntentFilter.addDataSchemeSpecificPart()} with
 * {@link android.os.PatternMatcher#PATTERN_LITERAL}.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 19
 */

public static final int ssp = 16843747; // 0x10103e3

/**
 * Specify a URI scheme specific part that matches a simple pattern, as per
 * {@link android.content.IntentFilter#addDataSchemeSpecificPart
 * IntentFilter.addDataSchemeSpecificPart()} with
 * {@link android.os.PatternMatcher#PATTERN_SIMPLE_GLOB}.
 * Note that because '\' is used as an escape character when
 * reading the string from XML (before it is parsed as a pattern),
 * you will need to double-escape: for example a literal "*" would
 * be written as "\\*" and a literal "\" would be written as
 * "\\\\".  This is basically the same as what you would need to
 * write if constructing the string in Java code.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 19
 */

public static final int sspPattern = 16843749; // 0x10103e5

/**
 * Specify a URI scheme specific part that must be a prefix to match, as per
 * {@link android.content.IntentFilter#addDataSchemeSpecificPart
 * IntentFilter.addDataSchemeSpecificPart()} with
 * {@link android.os.PatternMatcher#PATTERN_PREFIX}.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 19
 */

public static final int sspPrefix = 16843748; // 0x10103e4

/**
 * Used by ListView and GridView to stack their content from the bottom.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int stackFromBottom = 16843005; // 0x10100fd

/**
 * Default StackView style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int stackViewStyle = 16843838; // 0x101043e

/**
 * Default Star style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int starStyle = 16842882; // 0x1010082

/**
 * Start inset to apply to the layer. Overrides {@code left} or
 * {@code right} depending on layout direction.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 23
 */

public static final int start = 16843995; // 0x10104db

/**
 * Start color of the gradient.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int startColor = 16843165; // 0x101019d

/**
 * Delay in milliseconds before the transition starts.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 19
 */

public static final int startDelay = 16843746; // 0x10103e2

/**
 * Delay in milliseconds before the animation runs, once start time is reached.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 1
 */

public static final int startOffset = 16843198; // 0x10101be

/**
 * X coordinate of the start point origin of the gradient.
 * Defined in same coordinates as the path itself
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 24
 */

public static final int startX = 16844048; // 0x1010510

/**
 * Y coordinate of the start point of the gradient within the shape.
 * Defined in same coordinates as the path itself
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 24
 */

public static final int startY = 16844049; // 0x1010511

/**
 * {@deprecated Use minDate instead.}
 * The first year (inclusive), for example "1940".
 * {@deprecated Use minDate instead.}
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 1
 * @deprecatedSince 16
 */

@Deprecated public static final int startYear = 16843132; // 0x101017c

/**
 * Sets the state-based animator for the View.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int stateListAnimator = 16843848; // 0x1010448

/**
 * Indicates that an Activity does not need to have its freeze state
 * (as returned by {@link android.app.Activity#onSaveInstanceState}
 * retained in order to be restarted.  Generally you use this for activities
 * that do not store any state.  When this flag is set, if for some reason
 * the activity is killed before it has a chance to save its state,
 * then the system will not remove it from the activity stack like
 * it normally would.  Instead, the next time the user navigates to
 * it its {@link android.app.Activity#onCreate} method will be called
 * with a null icicle, just like it was starting for the first time.
 * <p>This is used by the Home activity to make sure it does not get
 * removed if it crashes for some reason.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int stateNotNeeded = 16842774; // 0x1010016

/**
 * State identifier indicating the popup will be above the anchor.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int state_above_anchor = 16842922; // 0x10100aa

/**
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * indicating that the Drawable is in a view that is hardware accelerated.
 * This means that the device can at least render a full-screen scaled
 * bitmap with one layer of text and bitmaps composited on top of it
 * at 60fps.  When this is set, the colorBackgroundCacheHint will be
 * ignored even if it specifies a solid color, since that optimization
 * is not needed.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 11
 */

public static final int state_accelerated = 16843547; // 0x101031b

/**
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view or its parent has been "activated" meaning the user has currently
 * marked it as being of interest.  This is an alternative representation of
 * state_checked for when the state should be propagated down the view hierarchy.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 11
 */

public static final int state_activated = 16843518; // 0x10102fe

/**
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view or drawable is considered "active" by its host. Actual usage may vary
 * between views. Consult the host view documentation for details.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int state_active = 16842914; // 0x10100a2

/**
 * State identifier indicating that the object <var>may</var> display a check mark. See
 * {@link android.R.attr#state_checked} for the identifier that indicates whether it is
 * actually checked.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int state_checkable = 16842911; // 0x101009f

/**
 * State identifier indicating that the object is currently checked.  See
 * {@link android.R.attr#state_checkable} for an additional identifier that can indicate
 * if any object may ever display a check, regardless of whether state_checked is
 * currently set.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int state_checked = 16842912; // 0x10100a0

/**
 * State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
 * indicating that the Drawable is in a view that is capable of accepting a drop of
 * the content currently being manipulated in a drag-and-drop operation.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 14
 */

public static final int state_drag_can_accept = 16843624; // 0x1010368

/**
 * State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
 * indicating that a drag operation (for which the Drawable's view is a valid recipient)
 * is currently positioned over the Drawable.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 14
 */

public static final int state_drag_hovered = 16843625; // 0x1010369

/**
 * State identifier indicating the group is empty (has no children).
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int state_empty = 16842921; // 0x10100a9

/**
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view is enabled.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int state_enabled = 16842910; // 0x101009e

/**
 * State identifier indicating the group is expanded.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int state_expanded = 16842920; // 0x10100a8

/**
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view or drawable is in the first position in an ordered set. Actual usage
 * may vary between views. Consult the host view documentation for details.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int state_first = 16842916; // 0x10100a4

/**
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view has input focus.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int state_focused = 16842908; // 0x101009c

/**
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a pointer is hovering over the view.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 14
 */

public static final int state_hovered = 16843623; // 0x1010367

/**
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view or drawable is in the last position in an ordered set. Actual usage
 * may vary between views. Consult the host view documentation for details.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int state_last = 16842918; // 0x10100a6

/**
 * State for {@link android.inputmethodservice.KeyboardView KeyboardView}
 * key preview background.
 * {@deprecated Copy this definition into your own application project.}
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 3
 * @deprecatedSince 29
 */

@Deprecated public static final int state_long_pressable = 16843324; // 0x101023c

/**
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view or drawable is in the middle position in an ordered set. Actual usage
 * may vary between views. Consult the host view documentation for details.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int state_middle = 16842917; // 0x10100a5

/**
 * State identifier indicating a TextView has a multi-line layout.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 11
 */

public static final int state_multiline = 16843597; // 0x101034d

/**
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when the user is pressing down in a view.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int state_pressed = 16842919; // 0x10100a7

/**
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view (or one of its parents) is currently selected.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int state_selected = 16842913; // 0x10100a1

/**
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view or drawable is considered "single" by its host. Actual usage may vary
 * between views. Consult the host view documentation for details.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int state_single = 16842915; // 0x10100a3

/**
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view's window has input focus.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int state_window_focused = 16842909; // 0x101009d

/**
 * A resource id of a static drawable.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int staticWallpaperPreview = 16843569; // 0x1010331

/**
 * The color for the status bar. If the color is not opaque, consider setting
 * {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_STABLE} and
 * {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN}.
 * For this to take effect, the window must be drawing the system bar backgrounds with
 * {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the status bar must not
 * have been requested to be translucent with
 * {@link android.R.attr#windowTranslucentStatus}.
 * Corresponds to {@link android.view.Window#setStatusBarColor(int)}.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 21
 */

public static final int statusBarColor = 16843857; // 0x1010451

/**
 * The step size of the rating.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 1
 */

public static final int stepSize = 16843078; // 0x1010146

/**
 * If set to true, this service with be automatically stopped
 * when the user remove a task rooted in an activity owned by
 * the application.  The default is false.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 14
 */

public static final int stopWithTask = 16843626; // 0x101036a

/**
 * Different audio stream types.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>alarm</td><td>4</td><td></td></tr>
 * <tr><td>music</td><td>3</td><td></td></tr>
 * <tr><td>ring</td><td>2</td><td></td></tr>
 * <tr><td>system</td><td>1</td><td></td></tr>
 * <tr><td>voice</td><td>0</td><td></td></tr>
 * </table>
 * @apiSince 1
 */

public static final int streamType = 16843273; // 0x1010209

/**
 * The zero-based index of the columns to stretch. The column indices
 * must be separated by a comma: 1, 2, 5. Illegal and duplicate
 * indices are ignored. You can stretch all columns by using the
 * value "*" instead. Note that a column can be marked stretchable
 * and shrinkable at the same time.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int stretchColumns = 16843081; // 0x1010149

/**
 * Defines how columns should stretch to fill the available empty space, if any.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>columnWidth</td><td>2</td><td>Each column is stretched equally.</td></tr>
 * <tr><td>none</td><td>0</td><td>Stretching is disabled.</td></tr>
 * <tr><td>spacingWidth</td><td>1</td><td>The spacing between each column is stretched.</td></tr>
 * <tr><td>spacingWidthUniform</td><td>3</td><td>The spacing between each column is uniformly stretched..</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int stretchMode = 16843030; // 0x1010116

/**
 * The opacity of a path stroke, as a value between 0 (completely transparent)
 * and 1 (completely opaque).
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 21
 */

public static final int strokeAlpha = 16843979; // 0x10104cb

/**
 * The color to stroke the path if not defined implies no stroke.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 21
 */

public static final int strokeColor = 16843782; // 0x1010406

/**
 * sets the linecap for a stroked path.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>butt</td><td>0</td><td></td></tr>
 * <tr><td>round</td><td>1</td><td></td></tr>
 * <tr><td>square</td><td>2</td><td></td></tr>
 * </table>
 * @apiSince 21
 */

public static final int strokeLineCap = 16843787; // 0x101040b

/**
 * sets the lineJoin for a stroked path.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bevel</td><td>2</td><td></td></tr>
 * <tr><td>miter</td><td>0</td><td></td></tr>
 * <tr><td>round</td><td>1</td><td></td></tr>
 * </table>
 * @apiSince 21
 */

public static final int strokeLineJoin = 16843788; // 0x101040c

/**
 * sets the Miter limit for a stroked path.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 21
 */

public static final int strokeMiterLimit = 16843789; // 0x101040d

/**
 * The width a path stroke.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 21
 */

public static final int strokeWidth = 16843783; // 0x1010407

/**
 * Drawable for the arrow icon indicating a particular item is a submenu.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 24
 */

public static final int subMenuArrow = 16844019; // 0x10104f3

/**
 * Background for the section containing the action (for example, voice search).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int submitBackground = 16843912; // 0x1010488

/**
 * Specifies subtitle text used for navigationMode="normal".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 11
 */

public static final int subtitle = 16843473; // 0x10102d1

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int subtitleTextAppearance = 16843823; // 0x101042f

/**
 * A color to apply to the subtitle string.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 23
 */

public static final int subtitleTextColor = 16844004; // 0x10104e4

/**
 * Specifies a style to use for subtitle text.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int subtitleTextStyle = 16843513; // 0x10102f9

/**
 * The extra value of the subtype. This string can be any string and will be passed to
 * the SpellChecker.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 14
 */

public static final int subtypeExtraValue = 16843674; // 0x101039a

/**
 * The unique id for the subtype. The input method framework keeps track of enabled
 * subtypes by ID. When the IME package gets upgraded, enabled IDs will stay enabled even
 * if other attributes are different. If the ID is unspecified (by calling the other
 * constructor or 0. Arrays.hashCode(new Object[] {locale, mode, extraValue,
 * isAuxiliary, overridesImplicitlyEnabledSubtype}) will be used instead.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 17
 */

public static final int subtypeId = 16843713; // 0x10103c1

/**
 * The locale of the subtype. This string should be a locale (for example, en_US and
 * fr_FR). This is also used by the framework to know the supported locales
 * of the spell checker. {@link android.view.textservice.SpellCheckerSubtype#getLocale()}
 * returns the value specified in this attribute.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 14
 */

public static final int subtypeLocale = 16843673; // 0x1010399

/**
 * If you wish to handle an action key while a suggestion is being displayed <i>and
 * selected</i>, there are two ways to handle this.  If <i>all</i> of your suggestions
 * can handle the action key, you can simply define the action message using this
 * attribute.  This will be added to the
 * {@link android.content.Intent#ACTION_SEARCH ACTION_SEARCH} intent that is passed to your
 * searchable activity.  To examine the string, use
 * {@link android.content.Intent#getStringExtra getStringExtra(SearchManager.ACTION_MSG)}.
 * <i>Optional attribute.</i>
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int suggestActionMsg = 16843228; // 0x10101dc

/**
 * If you wish to handle an action key while a suggestion is being displayed <i>and
 * selected</i>, but you do not wish to enable this action key for every suggestion,
 * then you can use this attribute to control it on a suggestion-by-suggestion basis.
 * First, you must define a column (and name it here) where your suggestions will include
 * the action string.  Then, in your content provider, you must provide this column, and
 * when desired, provide data in this column.
 * The search manager will look at your suggestion cursor, using the string
 * provided here in order to select a column, and will use that to select a string from
 * the cursor.  That string will be added to the
 * {@link android.content.Intent#ACTION_SEARCH ACTION_SEARCH} intent that is passed to
 * your searchable activity.  To examine the string, use
 * {@link android.content.Intent#getStringExtra
 * getStringExtra(SearchManager.ACTION_MSG)}.  <i>If the data does not exist for the
 * selection suggestion, the action key will be ignored.</i><i>Optional attribute.</i>
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int suggestActionMsgColumn = 16843229; // 0x10101dd

/**
 * Layout for query suggestion rows.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int suggestionRowLayout = 16843910; // 0x1010486

/**
 * The summary for the item.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int summary = 16843241; // 0x10101e9

/**
 * Column in data table that summarizes this data.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 5
 */

public static final int summaryColumn = 16843426; // 0x10102a2

/**
 * The summary for the Preference in a PreferenceActivity screen when the
 * CheckBoxPreference is unchecked. If separate on/off summaries are not
 * needed, the summary attribute can be used instead.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int summaryOff = 16843248; // 0x10101f0

/**
 * The summary for the Preference in a PreferenceActivity screen when the
 * CheckBoxPreference is checked. If separate on/off summaries are not
 * needed, the summary attribute can be used instead.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int summaryOn = 16843247; // 0x10101ef

/**
 * Flag indicating whether this voice interaction service is capable of handling the
 * assist action.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 23
 */

public static final int supportsAssist = 16844016; // 0x10104f0

/**
 * Flag indicating whether this voice interaction service is capable of being launched
 * from the keyguard.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 23
 */

public static final int supportsLaunchVoiceAssistFromKeyguard = 16844017; // 0x10104f1

/**
 * Flag indicating whether this voice interaction service can handle local voice
 * interaction requests from an Activity. This flag is new in
 * {@link android.os.Build.VERSION_CODES#N} and not used in previous versions.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 24
 */

public static final int supportsLocalInteraction = 16844047; // 0x101050f

/**
 * Indicates that this wallpaper service can support multiple engines to render on each
 * surface independently. An example use case is a multi-display set-up where the
 * wallpaper service can render surfaces to each of the connected displays. Corresponds to
 * {@link android.app.WallpaperInfo#supportsMultipleDisplays()}
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 29
 */

public static final int supportsMultipleDisplays = 16844182; // 0x1010596

/**
 * Indicates that the activity specifically supports the picture-in-picture form of
 * multi-window. If true, this activity will support entering picture-in-picture, but will
 * only support split-screen and other forms of multi-window if
 * {@link android.R.attr#resizeableActivity} is also set to true.
 * Note that your activity may still be resized even if this attribute is true and
 * {@link android.R.attr#resizeableActivity} is false.
 * <p>The default value is <code>false</code>.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 24
 */

public static final int supportsPictureInPicture = 16844023; // 0x10104f7

/**
 * Declare that your application will be able to deal with RTL (right to left) layouts.
 * The default value is false.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 17
 */

public static final int supportsRtl = 16843695; // 0x10103af

/**
 * Set to true if this input method supports ways to switch to
 * a next input method (for example, a globe key.). When this is true and
 * InputMethodManager#shouldOfferSwitchingToNextInputMethod() returns true,
 * the IME has to offer ways to invoke InputMethodManager#switchToNextInputMethod()
 * accordingly.
 * <p> Note that the system determines the most appropriate next input method
 * and subtype in order to provide the consistent user experience in switching
 * between IMEs and subtypes.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 19
 */

public static final int supportsSwitchingToNextInputMethod = 16843755; // 0x10103eb

/**
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 5
 */

public static final int supportsUploading = 16843419; // 0x101029b

/**
 * Minimum width for the switch component.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 14
 */

public static final int switchMinWidth = 16843632; // 0x1010370

/**
 * Minimum space between the switch and caption text.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 14
 */

public static final int switchPadding = 16843633; // 0x1010371

/**
 * Default style for switch preferences.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 14
 */

public static final int switchPreferenceStyle = 16843629; // 0x101036d

/**
 * Default style for the Switch widget.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int switchStyle = 16843839; // 0x101043f

/**
 * TextAppearance style for text displayed on the switch thumb.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 14
 */

public static final int switchTextAppearance = 16843630; // 0x101036e

/**
 * The text used on the switch itself when in the "off" state.
 * This should be a very SHORT string, as it appears in a small space.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 14
 */

public static final int switchTextOff = 16843628; // 0x101036c

/**
 * The text used on the switch itself when in the "on" state.
 * This should be a very SHORT string, as it appears in a small space.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 14
 */

public static final int switchTextOn = 16843627; // 0x101036b

/**
 * Flag indicating whether this content provider would like to
 * participate in data synchronization.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int syncable = 16842777; // 0x1010019

/**
 * Determines whether the strip under the tab indicators is drawn or not.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 8
 */

public static final int tabStripEnabled = 16843453; // 0x10102bd

/**
 * Drawable used to draw the left part of the strip underneath the tabs.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 8
 */

public static final int tabStripLeft = 16843451; // 0x10102bb

/**
 * Drawable used to draw the right part of the strip underneath the tabs.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 8
 */

public static final int tabStripRight = 16843452; // 0x10102bc

/**
 * Default TabWidget style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int tabWidgetStyle = 16842883; // 0x1010083

/**
 * Supply a tag for this view containing a String, to be retrieved
 * later with {@link android.view.View#getTag View.getTag()} or
 * searched for with {@link android.view.View#findViewWithTag
 * View.findViewWithTag()}.  It is generally preferable to use
 * IDs (through the android:id attribute) instead of tags because
 * they are faster and allow for compile-time type checking.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int tag = 16842961; // 0x10100d1

/**
 * The name of the activity this alias should launch.  The activity
 * must be in the same manifest as the alias, and have been defined
 * in that manifest before the alias here.  This must use a Java-style
 * naming convention to ensure the name is unique, for example
 * "com.mycompany.MyName".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int targetActivity = 16843266; // 0x1010202

/**
 * The class part of the ComponentName to assign to the Intent, as per
 * {@link android.content.Intent#setComponent Intent.setComponent()}.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int targetClass = 16842799; // 0x101002f

/**
 * @deprecated Removed.
 * Reference to an array resource that be used as description for the targets around the circle.
 * {@deprecated Removed.}
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 14
 * @deprecatedSince 23
 */

@Deprecated public static final int targetDescriptions = 16843680; // 0x10103a0

/**
 * The id of a target on which this transition will animate changes.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 19
 */

public static final int targetId = 16843740; // 0x10103dc

/**
 * The transitionName of the target on which this transition will animation changes.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 21
 */

public static final int targetName = 16843853; // 0x101044d

/**
 * The name of the application package that an Instrumentation object
 * will run against.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int targetPackage = 16842785; // 0x1010021

/**
 * The name of an application's processes that an Instrumentation object
 * will run against.  If not specified, only runs in the main process of the targetPackage.
 * Can either be a comma-separated list of process names or '*' for any process that
 * launches to run targetPackage code.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 26
 */

public static final int targetProcesses = 16844097; // 0x1010541

/**
 * Specifies the target sandbox this app wants to use. Higher sandbox versions
 * will have increasing levels of security.
 * <p>The default value of this attribute is <code>1</code>.
 * <p>
 * @deprecated The security properties have been moved to
 * {@link android.os.Build.VERSION Build.VERSION} 27 and 28.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 26
 * @deprecatedSince 29
 */

@Deprecated public static final int targetSandboxVersion = 16844108; // 0x101054c

/**
 * This is the SDK version number that the application is targeting.
 * It is able to run on older versions (down to minSdkVersion), but
 * was explicitly tested to work with the version specified here.
 * Specifying this version allows the platform to disable compatibility
 * code that are not required or enable newer features that are not
 * available to older applications.  This may also be a string
 * (such as "Donut") if this is built against a development
 * branch, in which case minSdkVersion is also forced to be that
 * string.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 4
 */

public static final int targetSdkVersion = 16843376; // 0x1010270

/**
 * Specify a task name that activities have an "affinity" to.
 * Use with the application tag (to supply a default affinity for all
 * activities in the application), or with the activity tag (to supply
 * a specific affinity for that component).
 * <p>The default value for this attribute is the same as the package
 * name, indicating that all activities in the manifest should generally
 * be considered a single "application" to the user.  You can use this
 * attribute to modify that behavior: either giving them an affinity
 * for another task, if the activities are intended to be part of that
 * task from the user's perspective, or using an empty string for
 * activities that have no affinity to a task.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int taskAffinity = 16842770; // 0x1010012

/**
 * When closing the last activity of a task, this is the animation that is
 * run on the activity of the next task (which is entering the screen).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int taskCloseEnterAnimation = 16842942; // 0x10100be

/**
 * When opening an activity in a new task, this is the animation that is
 * run on the activity of the old task (which is exiting the screen).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int taskCloseExitAnimation = 16842943; // 0x10100bf

/**
 * When opening an activity in a new task, this is the animation that is
 * run on the activity of the new task (which is entering the screen).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int taskOpenEnterAnimation = 16842940; // 0x10100bc

/**
 * When opening an activity in a new task, this is the animation that is
 * run on the activity of the old task (which is exiting the screen).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int taskOpenExitAnimation = 16842941; // 0x10100bd

/**
 * When sending the current task to the background, this is the
 * animation that is run on the top activity of the task behind
 * it (which is entering the screen).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int taskToBackEnterAnimation = 16842946; // 0x10100c2

/**
 * When sending the current task to the background, this is the
 * animation that is run on the top activity of the current task
 * (which is exiting the screen).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int taskToBackExitAnimation = 16842947; // 0x10100c3

/**
 * When bringing an existing task to the foreground, this is the
 * animation that is run on the top activity of the task being brought
 * to the foreground (which is entering the screen).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int taskToFrontEnterAnimation = 16842944; // 0x10100c0

/**
 * When bringing an existing task to the foreground, this is the
 * animation that is run on the current foreground activity
 * (which is exiting the screen).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int taskToFrontExitAnimation = 16842945; // 0x10100c1

/**
 * This is the amount of tension.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 4
 */

public static final int tension = 16843370; // 0x101026a

/**
 * Option to indicate this application is only for testing purposes.
 * For example, it may expose functionality or data outside of itself
 * that would cause a security hole, but is useful for testing.  This
 * kind of application can not be installed without the
 * INSTALL_ALLOW_TEST flag, which means only through adb install.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 4
 */

public static final int testOnly = 16843378; // 0x1010272

/**
 * Text to display.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int text = 16843087; // 0x101014f

/**
 * Defines the alignment of the text.
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>center</td><td>4</td><td>Center the paragraph, for example: ALIGN_CENTER.</td></tr>
 * <tr><td>gravity</td><td>1</td><td>Default for the root view. The gravity determines the alignment, ALIGN_NORMAL,
 * ALIGN_CENTER, or ALIGN_OPPOSITE, which are relative to each paragraph’s
 * text direction.</td></tr>
 * <tr><td>inherit</td><td>0</td><td>Default.</td></tr>
 * <tr><td>textEnd</td><td>3</td><td>Align to the end of the paragraph, for example: ALIGN_OPPOSITE.</td></tr>
 * <tr><td>textStart</td><td>2</td><td>Align to the start of the paragraph, for example: ALIGN_NORMAL.</td></tr>
 * <tr><td>viewEnd</td><td>6</td><td>Align to the end of the view, which is ALIGN_RIGHT if the view’s resolved
 * layoutDirection is LTR, and ALIGN_LEFT otherwise.</td></tr>
 * <tr><td>viewStart</td><td>5</td><td>Align to the start of the view, which is ALIGN_LEFT if the view’s resolved
 * layoutDirection is LTR, and ALIGN_RIGHT otherwise.</td></tr>
 * </table>
 * @apiSince 17
 */

public static final int textAlignment = 16843697; // 0x10103b1

/**
 * Present the text in ALL CAPS. This may use a small-caps form when available.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 14
 */

public static final int textAllCaps = 16843660; // 0x101038c

/**
 * Default appearance of text: color, typeface, size, and style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int textAppearance = 16842804; // 0x1010034

/**
 * Text color, typeface, size, and style for the text inside of a button.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int textAppearanceButton = 16843271; // 0x1010207

/**
 * Default appearance of text against an inverted background:
 * color, typeface, size, and style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int textAppearanceInverse = 16842805; // 0x1010035

/**
 * Text color, typeface, size, and style for "large" text. Defaults to primary text color.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int textAppearanceLarge = 16842816; // 0x1010040

/**
 * Text color, typeface, size, and style for "large" inverse text. Defaults to primary inverse text color.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int textAppearanceLargeInverse = 16842819; // 0x1010043

/**
 * Text color, typeface, size, and style for the text inside of a popup menu.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int textAppearanceLargePopupMenu = 16843521; // 0x1010301

/**
 * The preferred TextAppearance for the primary text of list items.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 14
 */

public static final int textAppearanceListItem = 16843678; // 0x101039e

/**
 * The preferred TextAppearance for the secondary text of list items.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int textAppearanceListItemSecondary = 16843826; // 0x1010432

/**
 * The preferred TextAppearance for the primary text of small list items.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 14
 */

public static final int textAppearanceListItemSmall = 16843679; // 0x101039f

/**
 * Text color, typeface, size, and style for "medium" text. Defaults to primary text color.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int textAppearanceMedium = 16842817; // 0x1010041

/**
 * Text color, typeface, size, and style for "medium" inverse text. Defaults to primary inverse text color.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int textAppearanceMediumInverse = 16842820; // 0x1010044

/**
 * Text color, typeface, size, and style for header text inside of a popup menu.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 24
 */

public static final int textAppearancePopupMenuHeader = 16844034; // 0x1010502

/**
 * Text color, typeface, size, and style for system search result subtitle. Defaults to primary inverse text color.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 5
 */

public static final int textAppearanceSearchResultSubtitle = 16843424; // 0x10102a0

/**
 * Text color, typeface, size, and style for system search result title. Defaults to primary inverse text color.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 5
 */

public static final int textAppearanceSearchResultTitle = 16843425; // 0x10102a1

/**
 * Text color, typeface, size, and style for "small" text. Defaults to secondary text color.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int textAppearanceSmall = 16842818; // 0x1010042

/**
 * Text color, typeface, size, and style for "small" inverse text. Defaults to secondary inverse text color.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int textAppearanceSmallInverse = 16842821; // 0x1010045

/**
 * Text color, typeface, size, and style for small text inside of a popup menu.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int textAppearanceSmallPopupMenu = 16843522; // 0x1010302

/**
 * Drawable to use for check marks.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int textCheckMark = 16842822; // 0x1010046

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int textCheckMarkInverse = 16842823; // 0x1010047

/**
 * Color of text (usually same as colorForeground).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int textColor = 16842904; // 0x1010098

/**
 * Color of list item text in alert dialogs.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 11
 */

public static final int textColorAlertDialogListItem = 16843526; // 0x1010306

/**
 * Color of highlighted text.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int textColorHighlight = 16842905; // 0x1010099

/**
 * Color of highlighted text, when used in a light theme.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 11
 */

public static final int textColorHighlightInverse = 16843599; // 0x101034f

/**
 * Color of hint text (displayed when the field is empty).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int textColorHint = 16842906; // 0x101009a

/**
 * Inverse hint text color.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int textColorHintInverse = 16842815; // 0x101003f

/**
 * Color of link text (URLs).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int textColorLink = 16842907; // 0x101009b

/**
 * Color of link text (URLs), when used in a light theme.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 11
 */

public static final int textColorLinkInverse = 16843600; // 0x1010350

/**
 * The most prominent text color.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int textColorPrimary = 16842806; // 0x1010036

/**
 * Bright text color. Only differentiates based on the disabled state.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int textColorPrimaryDisableOnly = 16842807; // 0x1010037

/**
 * Primary inverse text color, useful for inverted backgrounds.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int textColorPrimaryInverse = 16842809; // 0x1010039

/**
 * Bright inverse text color. Only differentiates based on the disabled state.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 4
 */

public static final int textColorPrimaryInverseDisableOnly = 16843403; // 0x101028b

/**
 * Bright inverse text color. This does not differentiate the disabled state.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int textColorPrimaryInverseNoDisable = 16842813; // 0x101003d

/**
 * Bright text color. This does not differentiate the disabled state. As an example,
 * buttons use this since they display the disabled state via the background and not the
 * foreground text color.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int textColorPrimaryNoDisable = 16842811; // 0x101003b

/**
 * Secondary text color.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int textColorSecondary = 16842808; // 0x1010038

/**
 * Secondary inverse text color, useful for inverted backgrounds.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int textColorSecondaryInverse = 16842810; // 0x101003a

/**
 * Dim inverse text color. This does not differentiate the disabled state.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int textColorSecondaryInverseNoDisable = 16842814; // 0x101003e

/**
 * Dim text color. This does not differentiate the disabled state.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int textColorSecondaryNoDisable = 16842812; // 0x101003c

/**
 * Tertiary text color.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int textColorTertiary = 16843282; // 0x1010212

/**
 * Tertiary inverse text color, useful for inverted backgrounds.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int textColorTertiaryInverse = 16843283; // 0x1010213

/**
 * Reference to a drawable that will be drawn under the insertion cursor.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 12
 */

public static final int textCursorDrawable = 16843618; // 0x1010362

/**
 * Defines the direction of the text.
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>anyRtl</td><td>2</td><td>The paragraph direction is RTL if it contains any strong RTL character, otherwise
 * it is LTR if it contains any strong LTR characters.  If there are neither, the
 * paragraph direction is the view’s resolved layout direction.</td></tr>
 * <tr><td>firstStrong</td><td>1</td><td>Default for the root view. The first strong directional character determines the
 * paragraph direction.  If there is no strong directional character, the paragraph
 * direction is the view’s resolved layout direction.</td></tr>
 * <tr><td>firstStrongLtr</td><td>6</td><td>The first strong directional character determines the paragraph direction. If
 * there is no strong directional character, the paragraph direction is LTR.</td></tr>
 * <tr><td>firstStrongRtl</td><td>7</td><td>The first strong directional character determines the paragraph direction. If
 * there is no strong directional character, the paragraph direction is RTL.</td></tr>
 * <tr><td>inherit</td><td>0</td><td>Default.</td></tr>
 * <tr><td>locale</td><td>5</td><td>The paragraph direction is coming from the system Locale.</td></tr>
 * <tr><td>ltr</td><td>3</td><td>The paragraph direction is left to right.</td></tr>
 * <tr><td>rtl</td><td>4</td><td>The paragraph direction is right to left.</td></tr>
 * </table>
 * @apiSince 17
 */

public static final int textDirection = 16843696; // 0x10103b0

/**
 * Variation of textEditPasteWindowLayout displayed when the clipboard is empty.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int textEditNoPasteWindowLayout = 16843541; // 0x1010315

/**
 * The layout of the view that is displayed on top of the cursor to paste inside a
 * TextEdit field.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int textEditPasteWindowLayout = 16843540; // 0x1010314

/**
 * Variation of textEditSidePasteWindowLayout displayed when the clipboard is empty.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int textEditSideNoPasteWindowLayout = 16843615; // 0x101035f

/**
 * Used instead of textEditPasteWindowLayout when the window is moved on the side of the
 * insertion cursor because it would be clipped if it were positioned on top.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int textEditSidePasteWindowLayout = 16843614; // 0x101035e

/**
 * Layout of the TextView item that will populate the suggestion popup window.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 14
 */

public static final int textEditSuggestionItemLayout = 16843636; // 0x1010374

/**
 * When set to true, the list will filter results as the user types. The
 * List's adapter must support the Filterable interface for this to work.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int textFilterEnabled = 16843007; // 0x10100ff

/**
 * Weight for the font used in the TextView.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 28
 */

public static final int textFontWeight = 16844165; // 0x1010585

/**
 * Indicates that the content of a non-editable TextView can be selected.
 * Default value is false. EditText content is always selectable.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 11
 */

public static final int textIsSelectable = 16843542; // 0x1010316

/**
 * Specifies the {@link android.os.LocaleList} for the text in this TextView.
 * If not given, the system default will be used.
 * May be a string value, which is a comma-separated language tag list, such as "ja-JP,zh-CN".
 * When not specified or an empty string is given, it will fallback to the default one.
 * {@see android.os.LocaleList#forLanguageTags(String)}
 * {@see android.text.TextView#setTextLocales(android.os.LocaleList)}
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 29
 */

public static final int textLocale = 16844178; // 0x1010592

/**
 * The text for the button when it is not checked.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int textOff = 16843045; // 0x1010125

/**
 * The text for the button when it is checked.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int textOn = 16843044; // 0x1010124

/**
 * Sets the horizontal scaling factor for the text.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 1
 */

public static final int textScaleX = 16843089; // 0x1010151

/**
 * Reference to a drawable that will be used to display a text selection
 * anchor for positioning the cursor within text.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 9
 */

public static final int textSelectHandle = 16843463; // 0x10102c7

/**
 * Reference to a drawable that will be used to display a text selection
 * anchor on the left side of a selection region.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 9
 */

public static final int textSelectHandleLeft = 16843461; // 0x10102c5

/**
 * Reference to a drawable that will be used to display a text selection
 * anchor on the right side of a selection region.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 9
 */

public static final int textSelectHandleRight = 16843462; // 0x10102c6

/**
 * Reference to a style that will be used for the window containing a text
 * selection anchor.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 9
 */

public static final int textSelectHandleWindowStyle = 16843464; // 0x10102c8

/**
 * Size of text. Recommended dimension type for text is "sp" for scaled-pixels (example: 15sp).
 * Supported values include the following:<p/>
 * <ul>
 * <li><b>px</b> Pixels</li>
 * <li><b>sp</b> Scaled pixels (scaled to relative pixel size on screen). See {@link android.util.DisplayMetrics} for more information.</li>
 * <li><b>pt</b> Points</li>
 * <li><b>dip</b> Device independent pixels. See {@link android.util.DisplayMetrics} for more information.</li>
 * </ul>
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int textSize = 16842901; // 0x1010095

/**
 * Default text typeface style.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bold</td><td>1</td><td></td></tr>
 * <tr><td>italic</td><td>2</td><td></td></tr>
 * <tr><td>normal</td><td>0</td><td></td></tr>
 * </table>
 * @apiSince 1
 */

public static final int textStyle = 16842903; // 0x1010097

/**
 * Reference to a style that will be used for the window containing a list of possible
 * text suggestions in an EditText.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 14
 */

public static final int textSuggestionsWindowStyle = 16843635; // 0x1010373

/**
 * Default TextView style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int textViewStyle = 16842884; // 0x1010084

/**
 * The overall theme to use for an activity.  Use with either the
 * application tag (to supply a default theme for all activities) or
 * the activity tag (to supply a specific theme for that activity).
 * <p>This automatically sets
 * your activity's Context to use this theme, and may also be used
 * for "starting" animations prior to the activity being launched (to
 * better match what the activity actually looks like).  It is a reference
 * to a style resource defining the theme.  If not set, the default
 * system theme will be used.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int theme = 16842752; // 0x1010000

/**
 * Thickness of the ring. When defined, thicknessRatio is ignored.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 3
 */

public static final int thickness = 16843360; // 0x1010260

/**
 * Thickness of the ring expressed as a ratio of the ring's width. For instance,
 * if thicknessRatio=3, then the thickness equals the ring's width divided by 3.
 * This value is ignored if innerRadius is defined. Default value is 3.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 1
 */

public static final int thicknessRatio = 16843164; // 0x101019c

/**
 * Draws the thumb on a seekbar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int thumb = 16843074; // 0x1010142

/**
 * An offset for the thumb that allows it to extend out of the range of the track.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int thumbOffset = 16843075; // 0x1010143

/**
 * Position of thumb in relation to the track.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>inside</td><td>1</td><td>The thumb is entirely inside the track. At its extremes,
 * the thumb will be contained entirely within the track.</td></tr>
 * <tr><td>midpoint</td><td>0</td><td>The thumb's midpoint is anchored to the track. At its
 * extremes, the thumb will extend half-way outside the
 * track.</td></tr>
 * </table>
 * @apiSince 23
 */

public static final int thumbPosition = 16844005; // 0x10104e5

/**
 * Amount of padding on either side of text within the switch thumb.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 14
 */

public static final int thumbTextPadding = 16843634; // 0x1010372

/**
 * Tint to apply to the thumb drawable.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 21
 */

public static final int thumbTint = 16843889; // 0x1010471

/**
 * Blending mode used to apply the thumb tint.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 * @apiSince 21
 */

public static final int thumbTintMode = 16843890; // 0x1010472

/**
 * Reference to the wallpaper's thumbnail bitmap.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 5
 */

public static final int thumbnail = 16843429; // 0x10102a5

/**
 * Drawable displayed at each progress position on a seekbar.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 24
 */

public static final int tickMark = 16844042; // 0x101050a

/**
 * Tint to apply to the tick mark drawable.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 24
 */

public static final int tickMarkTint = 16844043; // 0x101050b

/**
 * Blending mode used to apply the tick mark tint.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 * @apiSince 24
 */

public static final int tickMarkTintMode = 16844044; // 0x101050c

/**
 * Defines the tile mode. When the tile mode is enabled, the bitmap is repeated.
 * Gravity is ignored when the tile mode is enabled. Default value is "disabled".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>clamp</td><td>0</td><td>Replicates the edge color.</td></tr>
 * <tr><td>disabled</td><td>ffffffff</td><td>Do not tile the bitmap. This is the default value.</td></tr>
 * <tr><td>mirror</td><td>2</td><td>Repeats the shader's image horizontally and vertically, alternating
 * mirror images so that adjacent images always seam.</td></tr>
 * <tr><td>repeat</td><td>1</td><td>Repeats the bitmap in both direction.</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int tileMode = 16843265; // 0x1010201

/**
 * Defines the horizontal tile mode. When the tile mode is enabled, the bitmap is repeated.
 * Gravity is ignored when the tile mode is enabled. Default value is "disabled".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>clamp</td><td>0</td><td>Replicates the edge color.</td></tr>
 * <tr><td>disabled</td><td>ffffffff</td><td>Do not tile the bitmap. This is the default value.</td></tr>
 * <tr><td>mirror</td><td>2</td><td>Repeats the shader's image horizontally, alternating
 * mirror images so that adjacent images always seam.</td></tr>
 * <tr><td>repeat</td><td>1</td><td>Repeats the bitmap horizontally.</td></tr>
 * </table>
 * @apiSince 21
 */

public static final int tileModeX = 16843895; // 0x1010477

/**
 * Defines the vertical tile mode. When the tile mode is enabled, the bitmap is repeated.
 * Gravity is ignored when the tile mode is enabled. Default value is "disabled".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>clamp</td><td>0</td><td>Replicates the edge color.</td></tr>
 * <tr><td>disabled</td><td>ffffffff</td><td>Do not tile the bitmap. This is the default value.</td></tr>
 * <tr><td>mirror</td><td>2</td><td>Repeats the shader's image vertically, alternating
 * mirror images so that adjacent images always seam.</td></tr>
 * <tr><td>repeat</td><td>1</td><td>Repeats the bitmap vertically.</td></tr>
 * </table>
 * @apiSince 21
 */

public static final int tileModeY = 16843896; // 0x1010478

/**
 * The TimePicker dialog theme.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int timePickerDialogTheme = 16843934; // 0x101049e

/**
 * Defines the look of the widget. Prior to the L release, the only choice was
 * spinner. As of L, with the Material theme selected, the default layout is clock,
 * but this attribute can be used to force spinner to be used instead.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>clock</td><td>2</td><td>Time picker with clock face to select the time.</td></tr>
 * <tr><td>spinner</td><td>1</td><td>Time picker with spinner controls to select the time.</td></tr>
 * </table>
 * @apiSince 21
 */

public static final int timePickerMode = 16843956; // 0x10104b4

/**
 * The TimePicker style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int timePickerStyle = 16843933; // 0x101049d

/**
 * Specifies the time zone to use. When this attribute is specified, the
 * TextClock will ignore the time zone of the system. To use the user's
 * time zone, do not specify this attribute. The default value is the
 * user's time zone. Please refer to {@link java.util.TimeZone} for more
 * information about time zone ids.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 17
 */

public static final int timeZone = 16843724; // 0x10103cc

/**
 * The tinting color for the image. By default, the tint will blend using SRC_ATOP mode.
 * Please note that for compatibility reasons, this is NOT consistent with the default
 * SRC_IN tint mode used by {@link android.widget.ImageView#setImageTintList} and by
 * similar tint attributes on other views.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int tint = 16843041; // 0x1010121

/**
 * When a tint color is set, specifies its Porter-Duff blending mode. The
 * default value is src_in, which treats the drawable as an alpha mask.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 * @apiSince 21
 */

public static final int tintMode = 16843771; // 0x10103fb

/**
 * The title associated with the item.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int title = 16843233; // 0x10101e1

/**
 * The condensed title associated with the item.  This is used in situations where the
 * normal title may be too long to be displayed.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int titleCondensed = 16843234; // 0x10101e2

/**
 * Specifies extra space on the left, start, right and end sides
 * of the toolbar's title. Margin values should be positive.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 24
 */

public static final int titleMargin = 16844024; // 0x10104f8

/**
 * Specifies extra space on the bottom side of the toolbar's title.
 * If both this attribute and titleMargin are specified, then this
 * attribute takes precedence. Margin values should be positive.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 24
 */

public static final int titleMarginBottom = 16844028; // 0x10104fc

/**
 * Specifies extra space on the end side of the toolbar's title.
 * If both this attribute and titleMargin are specified, then this
 * attribute takes precedence. Margin values should be positive.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 24
 */

public static final int titleMarginEnd = 16844026; // 0x10104fa

/**
 * Specifies extra space on the start side of the toolbar's title.
 * If both this attribute and titleMargin are specified, then this
 * attribute takes precedence. Margin values should be positive.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 24
 */

public static final int titleMarginStart = 16844025; // 0x10104f9

/**
 * Specifies extra space on the top side of the toolbar's title.
 * If both this attribute and titleMargin are specified, then this
 * attribute takes precedence. Margin values should be positive.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 24
 */

public static final int titleMarginTop = 16844027; // 0x10104fb

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int titleTextAppearance = 16843822; // 0x101042e

/**
 * A color to apply to the title string.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 23
 */

public static final int titleTextColor = 16844003; // 0x10104e3

/**
 * Specifies a style to use for title text.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int titleTextStyle = 16843512; // 0x10102f8

/**
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 1
 */

public static final int toAlpha = 16843211; // 0x10101cb

/**
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 1
 */

public static final int toDegrees = 16843188; // 0x10101b4

/**
 * Keyframe identifier for the ending state.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int toId = 16843849; // 0x1010449

/**
 * The destination scene in this scene change.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 19
 */

public static final int toScene = 16843742; // 0x10103de

/**
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 * @apiSince 1
 */

public static final int toXDelta = 16843207; // 0x10101c7

/**
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 * @apiSince 1
 */

public static final int toXScale = 16843203; // 0x10101c3

/**
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 * @apiSince 1
 */

public static final int toYDelta = 16843209; // 0x10101c9

/**
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 * @apiSince 1
 */

public static final int toYScale = 16843205; // 0x10101c5

/**
 * Default Toolbar style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int toolbarStyle = 16843946; // 0x10104aa

/**
 * The tooltip text associated with the item.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 26
 */

public static final int tooltipText = 16844084; // 0x1010534

/**
 * Amount of top padding inside the gradient shape.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int top = 16843182; // 0x10101ae

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int topBright = 16842955; // 0x10100cb

/**
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int topDark = 16842951; // 0x10100c7

/**
 * Radius of the top left corner.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int topLeftRadius = 16843177; // 0x10101a9

/**
 * Extra offset for the handle at the top of the SlidingDrawer.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 3
 */

public static final int topOffset = 16843352; // 0x1010258

/**
 * Radius of the top right corner.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int topRightRadius = 16843178; // 0x10101aa

/**
 * Set to true if this ViewGroup blocks focus in the presence of a touchscreen.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 21
 */

public static final int touchscreenBlocksFocus = 16843919; // 0x101048f

/**
 * Drawable to use as the "track" that the switch thumb slides within.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 14
 */

public static final int track = 16843631; // 0x101036f

/**
 * Tint to apply to the track.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 23
 */

public static final int trackTint = 16843993; // 0x10104d9

/**
 * Blending mode used to apply the track tint.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 * @apiSince 23
 */

public static final int trackTintMode = 16843994; // 0x10104da

/**
 * Sets the transcript mode for the list. In transcript mode, the list
 * scrolls to the bottom to make new items visible when they are added.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>alwaysScroll</td><td>2</td><td>The list will automatically scroll to the bottom, no matter what items
 * are currently visible.</td></tr>
 * <tr><td>disabled</td><td>0</td><td>Disables transcript mode. This is the default value.</td></tr>
 * <tr><td>normal</td><td>1</td><td>The list will automatically scroll to the bottom when
 * a data set change notification is received and only if the last item is
 * already visible on screen.</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int transcriptMode = 16843008; // 0x1010100

/**
 * x location of the pivot point around which the view will rotate and scale.
 * This xml attribute sets the pivotX property of the View.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 11
 */

public static final int transformPivotX = 16843552; // 0x1010320

/**
 * y location of the pivot point around which the view will rotate and scale.
 * This xml attribute sets the pivotY property of the View.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 11
 */

public static final int transformPivotY = 16843553; // 0x1010321

/**
 * The id of a transition to be used in a particular scene change.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 19
 */

public static final int transition = 16843743; // 0x10103df

/**
 * Sets whether or not this ViewGroup should be treated as a single entity
 * when doing an Activity transition. Typically, the elements inside a
 * ViewGroup are each transitioned from the scene individually. The default
 * for a ViewGroup is false unless it has a background. See
 * {@link android.app.ActivityOptions#makeSceneTransitionAnimation(android.app.Activity,
 * android.view.View, String)} for more information. Corresponds to
 * {@link android.view.ViewGroup#setTransitionGroup(boolean)}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 21
 */

public static final int transitionGroup = 16843777; // 0x1010401

/**
 * Names a View such that it can be identified for Transitions. Names should be
 * unique in the View hierarchy.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 21
 */

public static final int transitionName = 16843776; // 0x1010400

/**
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>sequential</td><td>1</td><td>child transitions should be played sequentially, in the same order
 * as the xml.</td></tr>
 * <tr><td>together</td><td>0</td><td>child transitions should be played together.</td></tr>
 * </table>
 * @apiSince 19
 */

public static final int transitionOrdering = 16843744; // 0x10103e0

/**
 * Changes whether the transition supports appearing and/or disappearing Views.
 * Corresponds to {@link android.transition.Visibility#setMode(int)}.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>mode_in</td><td>1</td><td>Only appearing Views will be supported.</td></tr>
 * <tr><td>mode_out</td><td>2</td><td>Only disappearing Views will be supported.</td></tr>
 * </table>
 * @apiSince 21
 */

public static final int transitionVisibilityMode = 16843900; // 0x101047c

/**
 * The amount to translate the group on X coordinate.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 21
 */

public static final int translateX = 16843866; // 0x101045a

/**
 * The amount to translate the group on Y coordinate.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 21
 */

public static final int translateY = 16843867; // 0x101045b

/**
 * translation in x of the view. This value is added post-layout to the left
 * property of the view, which is set by its layout.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 11
 */

public static final int translationX = 16843554; // 0x1010322

/**
 * translation in y of the view. This value is added post-layout to the top
 * property of the view, which is set by its layout.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 11
 */

public static final int translationY = 16843555; // 0x1010323

/**
 * translation in z of the view. This value is added to its elevation.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 21
 */

public static final int translationZ = 16843770; // 0x10103fa

/**
 * The fraction of the path to trim from the end from 0 to 1 .
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 21
 */

public static final int trimPathEnd = 16843785; // 0x1010409

/**
 * Shift trim region (allows visible region to include the start and end) from 0 to 1.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 21
 */

public static final int trimPathOffset = 16843786; // 0x101040a

/**
 * The fraction of the path to trim from the start from 0 to 1.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 21
 */

public static final int trimPathStart = 16843784; // 0x1010408

/**
 * The index of the font in the ttc (TrueType Collection) font file. If the font file
 * referenced is not in the ttc format, this attribute needs not be specified.
 * {@link android.graphics.Typeface.Builder#setTtcIndex(int)}.
 * The default value is 0. More details about the TrueType Collection font format can be found
 * here: https://en.wikipedia.org/wiki/TrueType#TrueType_Collection.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 28
 */

public static final int ttcIndex = 16844143; // 0x101056f

/**
 * The number of tuners that the TV input service is associated with. This value can be
 * changed at runtime by calling
 * {@link android.media.tv.TvInputManager#updateTvInputInfo(android.media.tv.TvInputInfo)}.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 24
 */

public static final int tunerCount = 16844061; // 0x101051d

/**
 * Specifies whether the screen should be turned on when the {@link android.app.Activity} is resumed.
 * Normally an activity will be transitioned to the stopped state if it is started while the
 * screen if off, but with this flag set the activity will cause the screen to turn on if the
 * activity will be visible and resumed due to the screen coming on. The screen will not be
 * turned on if the activity won't be visible after the screen is turned on. This flag is
 * normally used in conjunction with the {@link android.R.attr#showWhenLocked} flag to make
 * sure the activity is visible after the screen is turned on when the lockscreen is up. In
 * addition, if this flag is set and the activity calls
 * {@link android.app.KeyguardManager#requestDismissKeyguard}
 * the screen will turn on.
 * <p>This should be used instead of {@link android.view.WindowManager.LayoutParams#FLAG_TURN_SCREEN_ON}
 * flag set for Windows. When using the Window flag during activity startup, there may not be
 * time to add it before the system stops your activity because the screen has not yet turned
 * on. This leads to a double life-cycle as it is then restarted.</p>
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 27
 */

public static final int turnScreenOn = 16844138; // 0x101056a

/**
 * Type of gradient. The default type is linear.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>linear</td><td>0</td><td>Linear gradient extending across the center point.</td></tr>
 * <tr><td>radial</td><td>1</td><td>Radial gradient extending from the center point outward.</td></tr>
 * <tr><td>sweep</td><td>2</td><td>Sweep (or angular) gradient sweeping counter-clockwise around the center point.</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int type = 16843169; // 0x10101a1

/**
 * Default text typeface.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>monospace</td><td>3</td><td></td></tr>
 * <tr><td>normal</td><td>0</td><td></td></tr>
 * <tr><td>sans</td><td>1</td><td></td></tr>
 * <tr><td>serif</td><td>2</td><td></td></tr>
 * </table>
 * @apiSince 1
 */

public static final int typeface = 16842902; // 0x1010096

/**
 * Extra options for an activity's UI. Applies to either the {@code <activity>} or
 * {@code <application>} tag. If specified on the {@code <application>}
 * tag these will be considered defaults for all activities in the
 * application.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>none</td><td>0</td><td>No extra UI options. This is the default.</td></tr>
 * <tr><td>splitActionBarWhenNarrow</td><td>1</td><td>Split the options menu into a separate bar at the bottom of
 * the screen when severely constrained for horizontal space.
 * (e.g. portrait mode on a phone.) Instead of a small number
 * of action buttons appearing in the action bar at the top
 * of the screen, the action bar will split into the top navigation
 * section and the bottom menu section. Menu items will not be
 * split across the two bars; they will always appear together.</td></tr>
 * </table>
 * @apiSince 14
 */

public static final int uiOptions = 16843672; // 0x1010398

/**
 * Color used to draw the user's strokes until we are sure it's a gesture.
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 4
 */

public static final int uncertainGestureColor = 16843382; // 0x1010276

/**
 * @deprecated The color for the dates of an unfocused month.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 11
 * @deprecatedSince 23
 */

@Deprecated public static final int unfocusedMonthDateColor = 16843588; // 0x1010344

/**
 * Sets the alpha on the items that are not selected.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 1
 */

public static final int unselectedAlpha = 16843278; // 0x101020e

/**
 * Update period in milliseconds, or 0 if the AppWidget will update itself.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 3
 */

public static final int updatePeriodMillis = 16843344; // 0x1010250

/**
 * Specify whether the 32 bit version of the ABI should be used in a
 * multiArch application. If both abioverride flag (i.e. using abi option of abd install)
 * and use32bitAbi are used, then use32bit is ignored.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 * @apiSince 24
 */

public static final int use32bitAbi = 16844053; // 0x1010515

/**
 * If true, and this is an {@link android.R.attr#isolatedProcess} service, the service
 * will be spawned from an Application Zygote, instead of the regular Zygote.
 * <p>
 * The Application Zygote will first pre-initialize the application's class loader. Then,
 * if the application has defined the {@link android.R.attr#zygotePreloadName} attribute,
 * the Application Zygote will call into that class to allow it to perform
 * application-specific preloads (such as loading a shared library). Therefore,
 * spawning from the Application Zygote will typically reduce the service
 * launch time and reduce its memory usage. The downside of using this flag
 * is that you will have an additional process (the app zygote itself) that
 * is taking up memory. Whether actual memory usage is improved therefore strongly
 * depends on the number of isolated services that an application starts,
 * and how much memory those services save by preloading and sharing memory with
 * the app zygote. Therefore, it is recommended to measure memory usage under
 * typical workloads to determine whether it makes sense to use this flag.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 29
 */

public static final int useAppZygote = 16844183; // 0x1010597

/**
 * When set to true, tells GridLayout to use default margins when none are specified
 * in a view's layout parameters.
 * The default value is false.
 * See {@link android.widget.GridLayout#setUseDefaultMargins(boolean)}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 14
 */

public static final int useDefaultMargins = 16843641; // 0x1010379

/**
 * Flag to specify if this app wants to run the dex within its APK but not extracted or
 * locally compiled variants. This keeps the dex code protected by the APK signature. Such
 * apps will always run in JIT mode (same when they are first installed), and the system will
 * never generate ahead-of-time compiled code for them. Depending on the app's workload,
 * there may be some run time performance change, noteably the cold start time.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 29
 */

public static final int useEmbeddedDex = 16844190; // 0x101059e

/**
 * Use the drawable's intrinsic width and height as minimum size values.
 * Useful if the target drawable is a 9-patch or otherwise should not be scaled
 * down beyond a minimum size.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 11
 */

public static final int useIntrinsicSizeAsMinimum = 16843536; // 0x1010310

/**
 * Whether the drawable level value (see
 * {@link android.graphics.drawable.Drawable#getLevel()}) is used to scale the gradient.
 * Scaling behavior varies based on gradient type. For "linear", adjusts the ending
 * position along the gradient's axis of orientation. For "radial", adjusts the outer
 * radius. For "sweep", adjusts the ending angle. The default value is false.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int useLevel = 16843167; // 0x101019f

/**
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 5
 */

public static final int userVisible = 16843409; // 0x1010291

/**
 * Declare that this application may use cleartext traffic, such as HTTP rather than HTTPS;
 * WebSockets rather than WebSockets Secure; XMPP, IMAP, STMP without STARTTLS or TLS.
 * Defaults to true. If set to false {@code false}, the application declares that it does not
 * intend to use cleartext network traffic, in which case platform components (e.g. HTTP
 * stacks, {@code DownloadManager}, {@code MediaPlayer}) will refuse applications's requests
 * to use cleartext traffic. Third-party libraries are encouraged to honor this flag as well.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 23
 */

public static final int usesCleartextTraffic = 16844012; // 0x10104ec

/**
 * Concrete value to assign to this piece of named meta-data.
 * The data can later be retrieved from the meta data Bundle
 * through {@link android.os.Bundle#getString Bundle.getString},
 * {@link android.os.Bundle#getInt Bundle.getInt},
 * {@link android.os.Bundle#getBoolean Bundle.getBoolean},
 * or {@link android.os.Bundle#getFloat Bundle.getFloat} depending
 * on the type used here.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 1
 */

public static final int value = 16842788; // 0x1010024

/**
 * Value the animation starts from.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 11
 */

public static final int valueFrom = 16843486; // 0x10102de

/**
 * Value the animation animates to.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 11
 */

public static final int valueTo = 16843487; // 0x10102df

/**
 * The type of valueFrom and valueTo.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>colorType</td><td>3</td><td>values are colors, which are integers starting with "#".</td></tr>
 * <tr><td>floatType</td><td>0</td><td>The given values are floats. This is the default value if valueType is
 * unspecified. Note that if any value attribute has a color value
 * (beginning with "#"), then this attribute is ignored and the color values are
 * interpreted as integers.</td></tr>
 * <tr><td>intType</td><td>1</td><td>values are integers.</td></tr>
 * <tr><td>pathType</td><td>2</td><td>values are paths defined as strings.
 * This type is used for path morphing in AnimatedVectorDrawable.</td></tr>
 * </table>
 * @apiSince 11
 */

public static final int valueType = 16843488; // 0x10102e0

/**
 * If true, allows the drawable's padding to change based on the
 * current state that is selected.  If false, the padding will
 * stay the same (based on the maximum padding of all the states).
 * Enabling this feature requires that the owner of the drawable
 * deal with performing layout when the state changes, which is
 * often not supported.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int variablePadding = 16843157; // 0x1010195

/**
 * The vendor name if this print service is vendor specific.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 19
 */

public static final int vendor = 16843751; // 0x10103e7

/**
 * The version of the feature that is being used.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 24
 */

public static final int version = 16844057; // 0x1010519

/**
 * Internal version code.  This is the number used to determine whether
 * one version is more recent than another: it has no other meaning than
 * that higher numbers are more recent.  You could use this number to
 * encode a "x.y" in the lower and upper 16 bits, make it a build
 * number, simply increase it by one each time a new version is
 * released, or define it however else you want, as long as each
 * successive version has a higher number.  This is not a version
 * number generally shown to the user, that is usually supplied
 * with {@link android.R.attr#versionName}.  When an app is delivered
 * as multiple split APKs, each APK must have the exact same versionCode.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 1
 */

public static final int versionCode = 16843291; // 0x101021b

/**
 * Internal major version code.  This is essentially additional high bits
 * for the base version code; it has no other meaning than
 * that higher numbers are more recent.  This is not a version
 * number generally shown to the user, that is usually supplied
 * with {@link android.R.attr#versionName}.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 28
 */

public static final int versionCodeMajor = 16844150; // 0x1010576

/**
 * Optional minimum major version of the package that satisfies the dependency.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 28
 */

public static final int versionMajor = 16844151; // 0x1010577

/**
 * The text shown to the user to indicate the version they have.  This
 * is used for no other purpose than display to the user; the actual
 * significant version number is given by {@link android.R.attr#versionCode}.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int versionName = 16843292; // 0x101021c

/**
 * Amount to offset the touch Y coordinate by, for bias correction.
 * {@deprecated Copy this definition into your own application project.}
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 3
 * @deprecatedSince 29
 */

@Deprecated public static final int verticalCorrection = 16843322; // 0x101023a

/**
 * Default vertical divider between menu items.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int verticalDivider = 16843054; // 0x101012e

/**
 * Default vertical gap between rows of keys.
 * {@deprecated Copy this definition into your own application project.}
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 * @apiSince 3
 * @deprecatedSince 29
 */

@Deprecated public static final int verticalGap = 16843328; // 0x1010240

/**
 * Determines which side the vertical scroll bar should be placed on.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>defaultPosition</td><td>0</td><td>Place the scroll bar wherever the system default determines.</td></tr>
 * <tr><td>left</td><td>1</td><td>Place the scroll bar on the left.</td></tr>
 * <tr><td>right</td><td>2</td><td>Place the scroll bar on the right.</td></tr>
 * </table>
 * @apiSince 11
 */

public static final int verticalScrollbarPosition = 16843572; // 0x1010334

/**
 * Defines the default vertical spacing between rows.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int verticalSpacing = 16843029; // 0x1010115

/**
 * The height of the canvas the drawing is on.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 21
 */

public static final int viewportHeight = 16843779; // 0x1010403

/**
 * The width of the canvas the drawing is on.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 21
 */

public static final int viewportWidth = 16843778; // 0x1010402

/**
 * Controls the initial visibility of the view.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>gone</td><td>2</td><td>Completely hidden, as if the view had not been added.</td></tr>
 * <tr><td>invisible</td><td>1</td><td>Not displayed, but taken into account during layout (space is left for it).</td></tr>
 * <tr><td>visible</td><td>0</td><td>Visible on screen; the default value.</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int visibility = 16842972; // 0x10100dc

/**
 * Provides initial visibility state of the drawable; the default
 * value is false.  See
 * {@link android.graphics.drawable.Drawable#setVisible}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int visible = 16843156; // 0x1010194

/**
 * Specify whether a component should be visible to instant apps.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 26
 */

public static final int visibleToInstantApps = 16844081; // 0x1010531

/**
 * Flag indicating whether the application requests the VM to operate in
 * the safe mode.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 8
 */

public static final int vmSafeMode = 16843448; // 0x10102b8

/**
 * Voice button icon.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int voiceIcon = 16843908; // 0x1010484

/**
 * If provided, this specifies the spoken language to be expected, and that it will be
 * different than the one set in the {@link java.util.Locale#getDefault()}.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 3
 */

public static final int voiceLanguage = 16843349; // 0x1010255

/**
 * If provided, this specifies the language model that should be used by the
 * voice recognition system.  See
 * {@link android.speech.RecognizerIntent#EXTRA_LANGUAGE_MODEL } for more information.
 * If not provided, the default value
 * {@link android.speech.RecognizerIntent#LANGUAGE_MODEL_FREE_FORM } will be used.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 3
 */

public static final int voiceLanguageModel = 16843347; // 0x1010253

/**
 * If provided, enforces the maximum number of results to return, including the "best"
 * result which will always be provided as the SEARCH intent's primary query.  Must be one
 * or greater.  If not provided, the recognizer will choose how many results to return.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 3
 */

public static final int voiceMaxResults = 16843350; // 0x1010256

/**
 * If provided, this specifies a prompt that will be displayed during voice input.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 3
 */

public static final int voicePromptText = 16843348; // 0x1010254

/**
 * Voice search features are controlled by mode bits in this field.  Omitting
 * this field, or setting to zero, provides default behavior.
 * If showVoiceSearchButton is set, then launchWebSearch or launchRecognizer must
 * also be set.  <i>Optional attribute.</i>
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>launchRecognizer</td><td>4</td><td>If set, the voice search button will take the user directly to a built-in
 * voice recording activity.  This activity will prompt the user to speak,
 * transcribe the spoken text, and forward the resulting query
 * text to the searchable activity, just as if the user had typed it into
 * the search UI and clicked the search button.</td></tr>
 * <tr><td>launchWebSearch</td><td>2</td><td>If set, the voice search button will take the user directly to a built-in
 * voice web search activity.  Most applications will not use this flag, as it
 * will take the user away from the activity in which search was invoked.</td></tr>
 * <tr><td>showVoiceSearchButton</td><td>1</td><td>If set, display a voice search button.  This only takes effect if voice search is
 * available on the device.</td></tr>
 * </table>
 * @apiSince 3
 */

public static final int voiceSearchMode = 16843346; // 0x1010252

/**
 * When opening a new activity that hides the wallpaper, while
 * currently showing the wallpaper, this is the animation that
 * is run on the new activity (which is entering the screen).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 5
 */

public static final int wallpaperCloseEnterAnimation = 16843413; // 0x1010295

/**
 * When opening a new activity that hides the wallpaper, while
 * currently showing the wallpaper, this is the animation that
 * is run on the old wallpaper activity (which is exiting the screen).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 5
 */

public static final int wallpaperCloseExitAnimation = 16843414; // 0x1010296

/**
 * When closing a foreround activity that is on top of the wallpaper
 * when the previous activity is also on top of the wallpaper,
 * this is the animation that is run on the previous activity
 * (which is entering the screen).  The wallpaper remains
 * static behind the animation.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 5
 */

public static final int wallpaperIntraCloseEnterAnimation = 16843417; // 0x1010299

/**
 * When closing a foreround activity that is on top of the wallpaper
 * when the previous activity is also on top of the wallpaper,
 * this is the animation that is run on the current activity
 * (which is exiting the screen).  The wallpaper remains
 * static behind the animation.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 5
 */

public static final int wallpaperIntraCloseExitAnimation = 16843418; // 0x101029a

/**
 * When opening a new activity that is on top of the wallpaper
 * when the current activity is also on top of the wallpaper,
 * this is the animation that is run on the new activity
 * (which is entering the screen).  The wallpaper remains
 * static behind the animation.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 5
 */

public static final int wallpaperIntraOpenEnterAnimation = 16843415; // 0x1010297

/**
 * When opening a new activity that is on top of the wallpaper
 * when the current activity is also on top of the wallpaper,
 * this is the animation that is run on the current activity
 * (which is exiting the screen).  The wallpaper remains
 * static behind the animation.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 5
 */

public static final int wallpaperIntraOpenExitAnimation = 16843416; // 0x1010298

/**
 * When opening a new activity that shows the wallpaper, while
 * currently not showing the wallpaper, this is the animation that
 * is run on the new wallpaper activity (which is entering the screen).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 5
 */

public static final int wallpaperOpenEnterAnimation = 16843411; // 0x1010293

/**
 * When opening a new activity that shows the wallpaper, while
 * currently not showing the wallpaper, this is the animation that
 * is run on the current activity (which is exiting the screen).
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 5
 */

public static final int wallpaperOpenExitAnimation = 16843412; // 0x1010294

/**
 * Default WebTextView style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 8
 */

public static final int webTextViewStyle = 16843449; // 0x10102b9

/**
 * Default WebView style.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int webViewStyle = 16842885; // 0x1010085

/**
 * The text appearance for the week day abbreviation in the calendar header.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 11
 */

public static final int weekDayTextAppearance = 16843592; // 0x1010348

/**
 * @deprecated The color for the week numbers.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 11
 * @deprecatedSince 23
 */

@Deprecated public static final int weekNumberColor = 16843589; // 0x1010345

/**
 * @deprecated The color for the separator line between weeks.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 11
 * @deprecatedSince 23
 */

@Deprecated public static final int weekSeparatorLineColor = 16843590; // 0x1010346

/**
 * Defines the maximum weight sum. If unspecified, the sum is computed
 * by adding the layout_weight of all of the children. This can be
 * used for instance to give a single child 50% of the total available
 * space by giving it a layout_weight of 0.5 and setting the weightSum
 * to 1.0.
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * @apiSince 1
 */

public static final int weightSum = 16843048; // 0x1010128

/**
 * Optional parameter which indicates where this widget can be shown,
 * ie. home screen, keyguard, search bar or any combination thereof.
 * Supports combined values using | operator.
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>home_screen</td><td>1</td><td></td></tr>
 * <tr><td>keyguard</td><td>2</td><td></td></tr>
 * <tr><td>searchbox</td><td>4</td><td></td></tr>
 * </table>
 * @apiSince 17
 */

public static final int widgetCategory = 16843716; // 0x10103c4

/**
 * Flags indicating various features supported by the widget. These are hints to the
 * widget host, and do not actually change the behavior of the widget.
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>hide_from_picker</td><td>2</td><td>The widget is added directly by the app, and does not need to appear in
 * the global list of available widgets</td></tr>
 * <tr><td>reconfigurable</td><td>1</td><td>The widget can be reconfigured anytime after it is bound</td></tr>
 * </table>
 * @apiSince 28
 */

public static final int widgetFeatures = 16844153; // 0x1010579

/**
 * The layout for the controllable widget portion of a Preference. This is inflated
 * into the layout for a Preference and should be used more frequently than
 * the layout attribute. For example, a checkbox preference would specify
 * a custom layout (consisting of just the CheckBox) here.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int widgetLayout = 16843243; // 0x10101eb

/**
 * Makes the TextView be exactly this wide.
 * You could get the same effect by specifying this number in the
 * layout parameters.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int width = 16843097; // 0x1010159

/**
 * Flag indicating whether this window should have an Action Bar
 * in place of the usual title bar.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 11
 */

public static final int windowActionBar = 16843469; // 0x10102cd

/**
 * Flag indicating whether this window's Action Bar should overlay
 * application content. Does nothing if the window would not
 * have an Action Bar.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 11
 */

public static final int windowActionBarOverlay = 16843492; // 0x10102e4

/**
 * Flag indicating whether action modes should overlay window content
 * when there is not reserved space for their UI (such as an Action Bar).
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 11
 */

public static final int windowActionModeOverlay = 16843485; // 0x10102dd

/**
 * Flag indicating whether this window allows Activity Transitions.
 * Corresponds to {@link android.view.Window#FEATURE_ACTIVITY_TRANSITIONS}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 21
 */

public static final int windowActivityTransitions = 16843981; // 0x10104cd

/**
 * Flag indicating whether this Window's transition should overlap with
 * the exiting transition of the calling Activity. Corresponds to
 * {@link android.view.Window#setAllowEnterTransitionOverlap(boolean)}.
 * The default value is true.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 21
 */

public static final int windowAllowEnterTransitionOverlap = 16843836; // 0x101043c

/**
 * Flag indicating whether this Window's transition should overlap with
 * the exiting transition of the called Activity when the called Activity
 * finishes. Corresponds to
 * {@link android.view.Window#setAllowReturnTransitionOverlap(boolean)}.
 * The default value is true.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 21
 */

public static final int windowAllowReturnTransitionOverlap = 16843835; // 0x101043b

/**
 * Reference to a style resource holding
 * the set of window animations to use, which can be
 * any of the attributes defined by
 * {@link android.R.styleable#WindowAnimation}.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int windowAnimationStyle = 16842926; // 0x10100ae

/**
 * Drawable to use as the overall window background.  As of
 * {@link android.os.Build.VERSION_CODES#HONEYCOMB}, this may
 * be a selector that uses state_accelerated to pick a non-solid
 * color when running on devices that can draw such a bitmap
 * with complex compositing on top at 60fps.
 * <p>There are a few special considerations to use when setting this
 * drawable:
 * <ul>
 * <li> This information will be used to infer the pixel format
 * for your window's surface.  If the drawable has any
 * non-opaque pixels, your window will be translucent
 * (32 bpp).
 * <li> If you want to draw the entire background
 * yourself, you should set this drawable to some solid
 * color that closely matches that background (so the
 * system's preview of your window will match), and
 * then in code manually set your window's background to
 * null so it will not be drawn.
 * </ul>
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 1
 */

public static final int windowBackground = 16842836; // 0x1010054

/**
 * Drawable to draw selectively within the inset areas when the windowBackground
 * has been set to null. This protects against seeing visual garbage in the
 * surface when the app has not drawn any content into this area. One example is
 * when the user is resizing a window of an activity in multi-window mode.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 24
 */

public static final int windowBackgroundFallback = 16844035; // 0x1010503

/**
 * Whether to clip window content to the outline of the window background.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 21
 */

public static final int windowClipToOutline = 16843947; // 0x10104ab

/**
 * Control whether a container should automatically close itself if
 * the user touches outside of it.  This only applies to activities
 * and dialogs.
 * <p>Note: this attribute will only be respected for applications
 * that are targeting {@link android.os.Build.VERSION_CODES#HONEYCOMB}
 * or later.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 11
 */

public static final int windowCloseOnTouchOutside = 16843611; // 0x101035b

/**
 * This Drawable is overlaid over the foreground of the Window's content area, usually
 * to place a shadow below the title.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int windowContentOverlay = 16842841; // 0x1010059

/**
 * Reference to a TransitionManager XML resource defining the desired
 * transitions between different window content.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int windowContentTransitionManager = 16843769; // 0x10103f9

/**
 * Flag indicating whether this window requests that content changes be performed
 * as scene changes with transitions. Corresponds to
 * {@link android.view.Window#FEATURE_CONTENT_TRANSITIONS}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 21
 */

public static final int windowContentTransitions = 16843768; // 0x10103f8

/**
 * Flag allowing you to disable the splash screen for a window. The default value is
 * false; if set to true, the system can never use the window's theme to show a splash
 * screen before your actual instance is shown to the user.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 3
 */

public static final int windowDisablePreview = 16843298; // 0x1010222

/**
 * Flag indicating whether this Window is responsible for drawing the background for the
 * system bars. If true and the window is not floating, the system bars are drawn with a
 * transparent background and the corresponding areas in this window are filled with the
 * colors specified in {@link android.R.attr#statusBarColor} and
 * {@link android.R.attr#navigationBarColor}. Corresponds to
 * {@link android.view.WindowManager.LayoutParams#FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 21
 */

public static final int windowDrawsSystemBarBackgrounds = 16843856; // 0x1010450

/**
 * Elevation to use for the window.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 21
 */

public static final int windowElevation = 16843920; // 0x1010490

/**
 * Flag indicating that this window should allow touches to be split
 * across other windows that also support split touch.
 * The default value is true for applications with a targetSdkVersion
 * of Honeycomb or newer; false otherwise.
 * When this flag is false, the first pointer that goes down determines
 * the window to which all subsequent touches go until all pointers go up.
 * When this flag is true, each pointer (not necessarily the first) that
 * goes down determines the window to which all subsequent touches of that
 * pointer will go until that pointers go up thereby enabling touches
 * with multiple pointers to be split across multiple windows.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 11
 */

public static final int windowEnableSplitTouch = 16843543; // 0x1010317

/**
 * The animation used when a window is being added.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int windowEnterAnimation = 16842932; // 0x10100b4

/**
 * Reference to a Transition XML resource defining the desired Transition
 * used to move Views into the initial Window's content Scene. Corresponds to
 * {@link android.view.Window#setEnterTransition(android.transition.Transition)}.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int windowEnterTransition = 16843831; // 0x1010437

/**
 * The animation used when a window is being removed.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int windowExitAnimation = 16842933; // 0x10100b5

/**
 * Reference to a Transition XML resource defining the desired Transition
 * used to move Views out of the Window's content Scene when launching a new Activity.
 * Corresponds to
 * {@link android.view.Window#setExitTransition(android.transition.Transition)}.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int windowExitTransition = 16843832; // 0x1010438

/**
 * Drawable to use as a frame around the window.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int windowFrame = 16842837; // 0x1010055

/**
 * Flag indicating whether this window should fill the entire screen.  Corresponds
 * to {@link android.view.WindowManager.LayoutParams#FLAG_FULLSCREEN}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int windowFullscreen = 16843277; // 0x101020d

/**
 * The animation used when a window is going from VISIBLE to INVISIBLE.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int windowHideAnimation = 16842935; // 0x10100b7

/**
 * Flag indicating whether this is a floating window.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int windowIsFloating = 16842839; // 0x1010057

/**
 * Flag indicating whether this is a translucent window. If this attribute is unset (but
 * not if set to false), the window might still be considered translucent, if
 * windowSwipeToDismiss is set to true.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int windowIsTranslucent = 16842840; // 0x1010058

/**
 * Controls how the window is laid out if there is a {@code DisplayCutout}.
 * <p>
 * Defaults to {@code default}.
 * <p>
 * See also
 * {@link android.view.WindowManager.LayoutParams#layoutInDisplayCutoutMode
 * WindowManager.LayoutParams.layoutInDisplayCutoutMode},
 * {@link android.view.WindowManager.LayoutParams#LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT},
 * {@link android.view.WindowManager.LayoutParams#LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES},
 * {@link android.view.WindowManager.LayoutParams#LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER},
 * and {@link android.view.DisplayCutout DisplayCutout}
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>default</td><td>0</td><td><p>
 * The window is allowed to extend into the <code>DisplayCutout</code> area, only if
 * the <code>DisplayCutout</code> is fully contained within a system bar. Otherwise, the
 * window is laid out such that it does not overlap with the <code>DisplayCutout</code>
 * area.
 * <p>
 * Corresponds to <code>LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT</code>.</td></tr>
 * <tr><td>never</td><td>2</td><td><p>
 * The window is never allowed to overlap with the <code>DisplayCutout</code> area.
 * <p>
 * This should be used with windows that transiently set
 * <code>SYSTEM_UI_FLAG_FULLSCREEN</code> to avoid a relayout of the window when the
 * flag is set or cleared.
 * <p>
 * Corresponds to <code>LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER</code>.</td></tr>
 * <tr><td>shortEdges</td><td>1</td><td><p>
 * The window is always allowed to extend into the <code>DisplayCutout</code> areas on the
 * short edges of the screen even if fullscreen or in landscape.
 * The window will never extend into a <code>DisplayCutout</code> area on the long edges of
 * the screen.
 * <p>
 * The window must make sure that no important content overlaps with the
 * <code>DisplayCutout</code>.
 * <p>
 * Corresponds to <code>LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES</code>.</td></tr>
 * </table>
 * @apiSince 27
 */

public static final int windowLayoutInDisplayCutoutMode = 16844166; // 0x1010586

/**
 * If set, the navigation bar will be drawn such that it is compatible with a light
 * navigation bar background.
 * <p>For this to take effect, the window must be drawing the system bar backgrounds with
 * {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the navigation bar must not
 * have been requested to be translucent with
 * {@link android.R.attr#windowTranslucentNavigation}.
 * Corresponds to setting {@link android.view.View#SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR} on
 * the decor view.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 27
 */

public static final int windowLightNavigationBar = 16844140; // 0x101056c

/**
 * If set, the status bar will be drawn such that it is compatible with a light
 * status bar background.
 * <p>For this to take effect, the window must be drawing the system bar backgrounds with
 * {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the status bar must not
 * have been requested to be translucent with
 * {@link android.R.attr#windowTranslucentStatus}.
 * Corresponds to setting {@link android.view.View#SYSTEM_UI_FLAG_LIGHT_STATUS_BAR} on
 * the decor view.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 23
 */

public static final int windowLightStatusBar = 16844000; // 0x10104e0

/**
 * The minimum width the window is allowed to be, along the major
 * axis of the screen.  That is, when in landscape.  Can be either
 * an absolute dimension or a fraction of the screen size in that
 * dimension.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 * @apiSince 11
 */

public static final int windowMinWidthMajor = 16843606; // 0x1010356

/**
 * The minimum width the window is allowed to be, along the minor
 * axis of the screen.  That is, when in portrait.  Can be either
 * an absolute dimension or a fraction of the screen size in that
 * dimension.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 * @apiSince 11
 */

public static final int windowMinWidthMinor = 16843607; // 0x1010357

/**
 * Flag indicating that this window should not be displayed at all.
 * The default value is false; if set to true, and this window is
 * the main window of an Activity, then it will never actually
 * be added to the window manager.  This means that your activity
 * must immediately quit without waiting for user interaction,
 * because there will be no such interaction coming.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 3
 */

public static final int windowNoDisplay = 16843294; // 0x101021e

/**
 * Flag indicating whether there should be no title on this window.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 1
 */

public static final int windowNoTitle = 16842838; // 0x1010056

/**
 * Flag indicating whether this window should extend into overscan region.  Corresponds
 * to {@link android.view.WindowManager.LayoutParams#FLAG_LAYOUT_IN_OVERSCAN}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 18
 */

public static final int windowOverscan = 16843727; // 0x10103cf

/**
 * Reference to a Transition XML resource defining the desired Transition
 * used to move Views in to the scene when returning from a previously-started Activity.
 * Corresponds to
 * {@link android.view.Window#setReenterTransition(android.transition.Transition)}.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int windowReenterTransition = 16843951; // 0x10104af

/**
 * Reference to a Transition XML resource defining the desired Transition
 * used to move Views out of the scene when the Window is
 * preparing to close. Corresponds to
 * {@link android.view.Window#setReturnTransition(android.transition.Transition)}.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int windowReturnTransition = 16843950; // 0x10104ae

/**
 * Reference to a Transition XML resource defining the desired Transition
 * used to move shared elements transferred into the Window's initial content Scene.
 * Corresponds to {@link android.view.Window#setSharedElementEnterTransition(
 * android.transition.Transition)}.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int windowSharedElementEnterTransition = 16843833; // 0x1010439

/**
 * Reference to a Transition XML resource defining the desired Transition
 * used when starting a new Activity to move shared elements prior to transferring
 * to the called Activity.
 * Corresponds to {@link android.view.Window#setSharedElementExitTransition(
 * android.transition.Transition)}.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int windowSharedElementExitTransition = 16843834; // 0x101043a

/**
 * Reference to a Transition XML resource defining the desired Transition
 * used for shared elements transferred back to a calling Activity.
 * Corresponds to {@link android.view.Window#setSharedElementReenterTransition(
 * android.transition.Transition)}.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int windowSharedElementReenterTransition = 16843953; // 0x10104b1

/**
 * Reference to a Transition XML resource defining the desired Transition
 * used to move shared elements transferred back to a calling Activity.
 * Corresponds to {@link android.view.Window#setSharedElementReturnTransition(
 * android.transition.Transition)}.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 */

public static final int windowSharedElementReturnTransition = 16843952; // 0x10104b0

/**
 * Indicates whether or not shared elements should use an overlay
 * during transitions. The default value is true.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 21
 */

public static final int windowSharedElementsUseOverlay = 16843963; // 0x10104bb

/**
 * The animation used when a window is going from INVISIBLE to VISIBLE.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int windowShowAnimation = 16842934; // 0x10100b6

/**
 * Flag indicating that this window's background should be the
 * user's current wallpaper.  Corresponds
 * to {@link android.view.WindowManager.LayoutParams#FLAG_SHOW_WALLPAPER}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 5
 */

public static final int windowShowWallpaper = 16843410; // 0x1010292

/**
 * Defines the default soft input state that this window would
 * like when it is displayed.  Corresponds
 * to {@link android.view.WindowManager.LayoutParams#softInputMode}.
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>adjustNothing</td><td>30</td><td>Don't resize <em>or</em> pan the window to make room for the
 * soft input area; the window is never adjusted for it.</td></tr>
 * <tr><td>adjustPan</td><td>20</td><td>Don't resize the window to make room for the soft input area;
 * instead pan the contents of the window as focus moves inside
 * of it so that the user can see what they are typing.  This is
 * generally less desireable than panning because the user may
 * need to close the input area to get at and interact with
 * parts of the window.</td></tr>
 * <tr><td>adjustResize</td><td>10</td><td>Always resize the window: the content area of the window is
 * reduced to make room for the soft input area.</td></tr>
 * <tr><td>adjustUnspecified</td><td>0</td><td>The window resize/pan adjustment has not been specified,
 * the system will automatically select between resize and pan
 * modes, depending
 * on whether the content of the window has any layout views
 * that can scroll their contents.  If there is such a view,
 * then the window will be resized, with the assumption being
 * that the resizeable area can be reduced to make room for
 * the input UI.</td></tr>
 * <tr><td>stateAlwaysHidden</td><td>3</td><td>Always make the soft input area hidden when this window
 * has input focus.</td></tr>
 * <tr><td>stateAlwaysVisible</td><td>5</td><td>Always make the soft input area visible when this window
 * has input focus.</td></tr>
 * <tr><td>stateHidden</td><td>2</td><td>Make the soft input area hidden when normally appropriate
 * (when the user is navigating forward to your window).</td></tr>
 * <tr><td>stateUnchanged</td><td>1</td><td>Leave the soft input window as-is, in whatever state it
 * last was.</td></tr>
 * <tr><td>stateUnspecified</td><td>0</td><td>Not specified, use what the system thinks is best.  This
 * is the default.</td></tr>
 * <tr><td>stateVisible</td><td>4</td><td>Make the soft input area visible when normally appropriate
 * (when the user is navigating forward to your window).</td></tr>
 * </table>
 * @apiSince 3
 */

public static final int windowSoftInputMode = 16843307; // 0x101022b

/**
 * Reference to a drawable to be used as the splash screen content of the window. This
 * drawable will be placed on top of the {@link android.R.attr#windowBackground} with its
 * bounds inset by the system bars. If the drawable should not be inset by the system
 * bars, use a fullscreen theme.
 * <p>
 * Note that even if no splashscreen content is set on the theme, the system may still
 * show a splash screen using the other attributes on the theme, like the
 * {@link android.R.attr#windowBackground}.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 26
 */

public static final int windowSplashscreenContent = 16844132; // 0x1010564

/**
 * Flag to indicate that a window can be swiped away to be dismissed.
 * Corresponds to {@link android.view.Window#FEATURE_SWIPE_TO_DISMISS}. It will also
 * dynamically change translucency of the window, if the windowIsTranslucent is not set.
 * If windowIsTranslucent is set (to either true or false) it will obey that setting.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 20
 */

public static final int windowSwipeToDismiss = 16843763; // 0x10103f3

/**
 * The style resource to use for a window's title area.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int windowTitleBackgroundStyle = 16842844; // 0x101005c

/**
 * The style resource to use for a window's title bar height.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int windowTitleSize = 16842842; // 0x101005a

/**
 * The style resource to use for a window's title text.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int windowTitleStyle = 16842843; // 0x101005b

/**
 * The duration, in milliseconds, of the window background fade duration
 * when transitioning into or away from an Activity when called with an
 * Activity Transition. Corresponds to
 * {@link android.view.Window#setTransitionBackgroundFadeDuration(long)}.
 * <p>May be an integer value, such as "<code>100</code>".
 * @apiSince 21
 */

public static final int windowTransitionBackgroundFadeDuration = 16843873; // 0x1010461

/**
 * Flag indicating whether this window requests a translucent navigation bar.  Corresponds
 * to {@link android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_NAVIGATION}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 19
 */

public static final int windowTranslucentNavigation = 16843760; // 0x10103f0

/**
 * Flag indicating whether this window requests a translucent status bar.  Corresponds
 * to {@link android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_STATUS}.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 19
 */

public static final int windowTranslucentStatus = 16843759; // 0x10103ef

/**
 * A specific {@link android.R.attr#permission} name for write
 * access to a {@link android.content.ContentProvider}.  See the
 * <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
 * document for more information on permissions.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 1
 */

public static final int writePermission = 16842760; // 0x1010008

/**
 * A coordinate in the X dimension.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int x = 16842924; // 0x10100ac

/**
 * Indicates whether the application supports extra large screen form-factors.
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * @apiSince 9
 */

public static final int xlargeScreens = 16843455; // 0x10102bf

/**
 * A coordinate in the Y dimension.
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * @apiSince 1
 */

public static final int y = 16842925; // 0x10100ad

/**
 * The list year's text appearance in the list.
 * {@deprecated Use yearListTextColor. }
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 21
 * @deprecatedSince 23
 */

@Deprecated public static final int yearListItemTextAppearance = 16843929; // 0x1010499

/**
 * The list year's selected circle color in the list.
 * {@deprecated No longer displayed.}
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * @apiSince 21
 * @deprecatedSince 23
 */

@Deprecated public static final int yearListSelectorColor = 16843930; // 0x101049a

/**
 * Default style for YesNoPreference.
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * @apiSince 1
 */

public static final int yesNoPreferenceStyle = 16842896; // 0x1010090

/**
 * Allows for an adjustment of the Z ordering of the content being
 * animated for the duration of the animation.  The default value is normal.
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>ffffffff</td><td>The content being animated is forced under all other
 * content for the duration of the animation.</td></tr>
 * <tr><td>normal</td><td>0</td><td>The content being animated be kept in its current Z order.</td></tr>
 * <tr><td>top</td><td>1</td><td>The content being animated is forced on top of all other
 * content for the duration of the animation.</td></tr>
 * </table>
 * @apiSince 1
 */

public static final int zAdjustment = 16843201; // 0x10101c1

/**
 * Name of the class that gets invoked for preloading application code, when starting an
 * {@link android.R.attr#isolatedProcess} service that has
 * {@link android.R.attr#useAppZygote} set to <code>true</code>. This is a fully
 * qualified class name (for example, com.mycompany.myapp.MyZygotePreload); as a
 * short-hand if the first character of the class is a period then it is appended
 * to your package name. The class must implement the {@link android.app.ZygotePreload}
 * interface.
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * @apiSince 29
 */

public static final int zygotePreloadName = 16844189; // 0x101059d
}

/** @apiSince 3 */

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class bool {

public bool() { throw new RuntimeException("Stub!"); }
}

/** @apiSince 1 */

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class color {

public color() { throw new RuntimeException("Stub!"); }

/**
 * Equivalent to 0xff000000
 * Equivalent to 0xff000000
 * @apiSince 1
 */

public static final int background_dark = 17170446; // 0x106000e

/**
 * Equivalent to 0xffffffff
 * Equivalent to 0xffffffff
 * @apiSince 1
 */

public static final int background_light = 17170447; // 0x106000f

/**
 * The color black, equivalent to 0xff000000
 * @apiSince 1
 */

public static final int black = 17170444; // 0x106000c

/**
 * Equivalent to 0xffaaaaaa
 * A dark gray, equivalent to 0xffaaaaaa
 * @apiSince 1
 */

public static final int darker_gray = 17170432; // 0x1060000

/**
 * A really bright Holo shade of blue. Equivalent to #ff00ddff.
 * @apiSince 14
 */

public static final int holo_blue_bright = 17170459; // 0x106001b

/**
 * A dark Holo shade of blue. Equivalent to #ff0099cc
 * @apiSince 14
 */

public static final int holo_blue_dark = 17170451; // 0x1060013

/**
 * A light Holo shade of blue. Equivalent to #ff33b5e5.
 * @apiSince 14
 */

public static final int holo_blue_light = 17170450; // 0x1060012

/**
 * A dark Holo shade of green. Equivalent to #ff669900
 * @apiSince 14
 */

public static final int holo_green_dark = 17170453; // 0x1060015

/**
 * A light Holo shade of green. Equivalent to #ff99cc00.
 * @apiSince 14
 */

public static final int holo_green_light = 17170452; // 0x1060014

/**
 * A dark Holo shade of orange. Equivalent to ffff8800.
 * @apiSince 14
 */

public static final int holo_orange_dark = 17170457; // 0x1060019

/**
 * A light Holo shade of orange. Equivalent to #ffffbb33.
 * @apiSince 14
 */

public static final int holo_orange_light = 17170456; // 0x1060018

/**
 * A Holo shade of purple. Equivalent to #ffaa66cc
 * @apiSince 14
 */

public static final int holo_purple = 17170458; // 0x106001a

/**
 * A dark Holo shade of red. Equivalent to #ffcc0000
 * @apiSince 14
 */

public static final int holo_red_dark = 17170455; // 0x1060017

/**
 * A light Holo shade of red. Equivalent to #ffff4444. <
 * @apiSince 14
 */

public static final int holo_red_light = 17170454; // 0x1060016

/**
 * {@deprecated Use a text color from your theme instead.}
 * @apiSince 1
 * @deprecatedSince 28
 */

@Deprecated public static final int primary_text_dark = 17170433; // 0x1060001

/**
 * {@deprecated Use a text color from your theme instead.}
 * @apiSince 1
 * @deprecatedSince 28
 */

@Deprecated public static final int primary_text_dark_nodisable = 17170434; // 0x1060002

/**
 * {@deprecated Use a text color from your theme instead.}
 * @apiSince 1
 * @deprecatedSince 28
 */

@Deprecated public static final int primary_text_light = 17170435; // 0x1060003

/**
 * {@deprecated Use a text color from your theme instead.}
 * @apiSince 1
 * @deprecatedSince 28
 */

@Deprecated public static final int primary_text_light_nodisable = 17170436; // 0x1060004

/**
 * {@deprecated Use a text color from your theme instead.}
 * @apiSince 1
 * @deprecatedSince 28
 */

@Deprecated public static final int secondary_text_dark = 17170437; // 0x1060005

/**
 * {@deprecated Use a text color from your theme instead.}
 * @apiSince 1
 * @deprecatedSince 28
 */

@Deprecated public static final int secondary_text_dark_nodisable = 17170438; // 0x1060006

/**
 * {@deprecated Use a text color from your theme instead.}
 * @apiSince 1
 * @deprecatedSince 28
 */

@Deprecated public static final int secondary_text_light = 17170439; // 0x1060007

/**
 * {@deprecated Use a text color from your theme instead.}
 * @apiSince 1
 * @deprecatedSince 28
 */

@Deprecated public static final int secondary_text_light_nodisable = 17170440; // 0x1060008

/**
 * Equivalent to 0xff808080
 * @apiSince 1
 */

public static final int tab_indicator_text = 17170441; // 0x1060009

/**
 * {@deprecated Use a text color from your theme instead.}
 * @apiSince 1
 * @deprecatedSince 28
 */

@Deprecated public static final int tertiary_text_dark = 17170448; // 0x1060010

/**
 * {@deprecated Use a text color from your theme instead.}
 * @apiSince 1
 * @deprecatedSince 28
 */

@Deprecated public static final int tertiary_text_light = 17170449; // 0x1060011

/**
 * Fully transparent, equivalent to 0x00000000
 * @apiSince 1
 */

public static final int transparent = 17170445; // 0x106000d

/**
 * The color white, equivalent to 0xffffffff
 * @apiSince 1
 */

public static final int white = 17170443; // 0x106000b

/**
 * Equivalent to 0xff000000
 * @apiSince 1
 */

public static final int widget_edittext_dark = 17170442; // 0x106000a
}

/** @apiSince 1 */

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class dimen {

public dimen() { throw new RuntimeException("Stub!"); }

/**
 * The standard size (both width and height) of an application icon that
 * will be displayed in the app launcher and elsewhere.
 * @apiSince 1
 */

public static final int app_icon_size = 17104896; // 0x1050000

/**
 * The platform's desired minimum size for a dialog's width when it
 * is along the major axis (that is the screen is landscape).  This may
 * be either a fraction or a dimension.
 * @apiSince 11
 */

public static final int dialog_min_width_major = 17104899; // 0x1050003

/**
 * The platform's desired minimum size for a dialog's width when it
 * is along the minor axis (that is the screen is portrait).  This may
 * be either a fraction or a dimension.
 * @apiSince 11
 */

public static final int dialog_min_width_minor = 17104900; // 0x1050004

/**
 * The width of the big icons in notifications.
 * @apiSince 11
 */

public static final int notification_large_icon_height = 17104902; // 0x1050006

/**
 * The width of the big icons in notifications.
 * @apiSince 11
 */

public static final int notification_large_icon_width = 17104901; // 0x1050005

/**
 * The height that is used when creating thumbnails of applications.
 * The height that is used when creating thumbnails of applications.
 * The height that is used when creating thumbnails of applications.
 * @apiSince 1
 */

public static final int thumbnail_height = 17104897; // 0x1050001

/**
 * The width that is used when creating thumbnails of applications.
 * The width that is used when creating thumbnails of applications.
 * The width that is used when creating thumbnails of applications.
 * @apiSince 1
 */

public static final int thumbnail_width = 17104898; // 0x1050002
}

/** @apiSince 1 */

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class drawable {

public drawable() { throw new RuntimeException("Stub!"); }

/** @apiSince 1 */

public static final int alert_dark_frame = 17301504; // 0x1080000

/** @apiSince 1 */

public static final int alert_light_frame = 17301505; // 0x1080001

/** @apiSince 1 */

public static final int arrow_down_float = 17301506; // 0x1080002

/** @apiSince 1 */

public static final int arrow_up_float = 17301507; // 0x1080003

/** @apiSince 1 */

public static final int bottom_bar = 17301658; // 0x108009a

/** @apiSince 1 */

public static final int btn_default = 17301508; // 0x1080004

/** @apiSince 1 */

public static final int btn_default_small = 17301509; // 0x1080005

/** @apiSince 1 */

public static final int btn_dialog = 17301527; // 0x1080017

/** @apiSince 1 */

public static final int btn_dropdown = 17301510; // 0x1080006

/** @apiSince 1 */

public static final int btn_minus = 17301511; // 0x1080007

/** @apiSince 1 */

public static final int btn_plus = 17301512; // 0x1080008

/** @apiSince 1 */

public static final int btn_radio = 17301513; // 0x1080009

/** @apiSince 1 */

public static final int btn_star = 17301514; // 0x108000a

/** @apiSince 1 */

public static final int btn_star_big_off = 17301515; // 0x108000b

/** @apiSince 1 */

public static final int btn_star_big_on = 17301516; // 0x108000c

/** @apiSince 1 */

public static final int button_onoff_indicator_off = 17301518; // 0x108000e

/** @apiSince 1 */

public static final int button_onoff_indicator_on = 17301517; // 0x108000d

/** @apiSince 1 */

public static final int checkbox_off_background = 17301519; // 0x108000f

/** @apiSince 1 */

public static final int checkbox_on_background = 17301520; // 0x1080010

/**
 * Drawable to use as a background for separators on a list with a dark background
 * @apiSince 3
 */

public static final int dark_header = 17301669; // 0x10800a5

/** @apiSince 1 */

public static final int dialog_frame = 17301521; // 0x1080011

/** @apiSince 11 */

public static final int dialog_holo_dark_frame = 17301682; // 0x10800b2

/** @apiSince 11 */

public static final int dialog_holo_light_frame = 17301683; // 0x10800b3

/** @apiSince 1 */

public static final int divider_horizontal_bright = 17301522; // 0x1080012

/** @apiSince 1 */

public static final int divider_horizontal_dark = 17301524; // 0x1080014

/** @apiSince 1 */

public static final int divider_horizontal_dim_dark = 17301525; // 0x1080015

/** @apiSince 1 */

public static final int divider_horizontal_textfield = 17301523; // 0x1080013

/** @apiSince 1 */

public static final int edit_text = 17301526; // 0x1080016

/** @apiSince 1 */

public static final int editbox_background = 17301528; // 0x1080018

/** @apiSince 1 */

public static final int editbox_background_normal = 17301529; // 0x1080019

/** @apiSince 1 */

public static final int editbox_dropdown_dark_frame = 17301530; // 0x108001a

/** @apiSince 1 */

public static final int editbox_dropdown_light_frame = 17301531; // 0x108001b

/** @apiSince 1 */

public static final int gallery_thumb = 17301532; // 0x108001c

/** @apiSince 3 */

public static final int ic_btn_speak_now = 17301668; // 0x10800a4

/** @apiSince 1 */

public static final int ic_delete = 17301533; // 0x108001d

/** @apiSince 1 */

public static final int ic_dialog_alert = 17301543; // 0x1080027

/** @apiSince 1 */

public static final int ic_dialog_dialer = 17301544; // 0x1080028

/** @apiSince 1 */

public static final int ic_dialog_email = 17301545; // 0x1080029

/** @apiSince 1 */

public static final int ic_dialog_info = 17301659; // 0x108009b

/** @apiSince 1 */

public static final int ic_dialog_map = 17301546; // 0x108002a

/** @apiSince 1 */

public static final int ic_input_add = 17301547; // 0x108002b

/** @apiSince 1 */

public static final int ic_input_delete = 17301548; // 0x108002c

/** @apiSince 1 */

public static final int ic_input_get = 17301549; // 0x108002d

/** @apiSince 1 */

public static final int ic_lock_idle_alarm = 17301550; // 0x108002e

/** @apiSince 1 */

public static final int ic_lock_idle_charging = 17301534; // 0x108001e

/** @apiSince 1 */

public static final int ic_lock_idle_lock = 17301535; // 0x108001f

/** @apiSince 1 */

public static final int ic_lock_idle_low_battery = 17301536; // 0x1080020

/** @apiSince 1 */

public static final int ic_lock_lock = 17301551; // 0x108002f

/** @apiSince 1 */

public static final int ic_lock_power_off = 17301552; // 0x1080030

/** @apiSince 1 */

public static final int ic_lock_silent_mode = 17301553; // 0x1080031

/** @apiSince 1 */

public static final int ic_lock_silent_mode_off = 17301554; // 0x1080032

/** @apiSince 1 */

public static final int ic_media_ff = 17301537; // 0x1080021

/** @apiSince 1 */

public static final int ic_media_next = 17301538; // 0x1080022

/** @apiSince 1 */

public static final int ic_media_pause = 17301539; // 0x1080023

/** @apiSince 1 */

public static final int ic_media_play = 17301540; // 0x1080024

/** @apiSince 1 */

public static final int ic_media_previous = 17301541; // 0x1080025

/** @apiSince 1 */

public static final int ic_media_rew = 17301542; // 0x1080026

/** @apiSince 1 */

public static final int ic_menu_add = 17301555; // 0x1080033

/** @apiSince 1 */

public static final int ic_menu_agenda = 17301556; // 0x1080034

/** @apiSince 1 */

public static final int ic_menu_always_landscape_portrait = 17301557; // 0x1080035

/** @apiSince 1 */

public static final int ic_menu_call = 17301558; // 0x1080036

/** @apiSince 1 */

public static final int ic_menu_camera = 17301559; // 0x1080037

/** @apiSince 1 */

public static final int ic_menu_close_clear_cancel = 17301560; // 0x1080038

/** @apiSince 1 */

public static final int ic_menu_compass = 17301561; // 0x1080039

/** @apiSince 1 */

public static final int ic_menu_crop = 17301562; // 0x108003a

/** @apiSince 1 */

public static final int ic_menu_day = 17301563; // 0x108003b

/** @apiSince 1 */

public static final int ic_menu_delete = 17301564; // 0x108003c

/** @apiSince 1 */

public static final int ic_menu_directions = 17301565; // 0x108003d

/** @apiSince 1 */

public static final int ic_menu_edit = 17301566; // 0x108003e

/** @apiSince 1 */

public static final int ic_menu_gallery = 17301567; // 0x108003f

/** @apiSince 1 */

public static final int ic_menu_help = 17301568; // 0x1080040

/** @apiSince 1 */

public static final int ic_menu_info_details = 17301569; // 0x1080041

/** @apiSince 1 */

public static final int ic_menu_manage = 17301570; // 0x1080042

/** @apiSince 1 */

public static final int ic_menu_mapmode = 17301571; // 0x1080043

/** @apiSince 1 */

public static final int ic_menu_month = 17301572; // 0x1080044

/** @apiSince 1 */

public static final int ic_menu_more = 17301573; // 0x1080045

/** @apiSince 1 */

public static final int ic_menu_my_calendar = 17301574; // 0x1080046

/** @apiSince 1 */

public static final int ic_menu_mylocation = 17301575; // 0x1080047

/** @apiSince 1 */

public static final int ic_menu_myplaces = 17301576; // 0x1080048

/** @apiSince 1 */

public static final int ic_menu_preferences = 17301577; // 0x1080049

/** @apiSince 1 */

public static final int ic_menu_recent_history = 17301578; // 0x108004a

/** @apiSince 1 */

public static final int ic_menu_report_image = 17301579; // 0x108004b

/** @apiSince 1 */

public static final int ic_menu_revert = 17301580; // 0x108004c

/** @apiSince 1 */

public static final int ic_menu_rotate = 17301581; // 0x108004d

/** @apiSince 1 */

public static final int ic_menu_save = 17301582; // 0x108004e

/** @apiSince 1 */

public static final int ic_menu_search = 17301583; // 0x108004f

/** @apiSince 1 */

public static final int ic_menu_send = 17301584; // 0x1080050

/** @apiSince 1 */

public static final int ic_menu_set_as = 17301585; // 0x1080051

/** @apiSince 1 */

public static final int ic_menu_share = 17301586; // 0x1080052

/** @apiSince 1 */

public static final int ic_menu_slideshow = 17301587; // 0x1080053

/** @apiSince 1 */

public static final int ic_menu_sort_alphabetically = 17301660; // 0x108009c

/** @apiSince 1 */

public static final int ic_menu_sort_by_size = 17301661; // 0x108009d

/** @apiSince 1 */

public static final int ic_menu_today = 17301588; // 0x1080054

/** @apiSince 1 */

public static final int ic_menu_upload = 17301589; // 0x1080055

/** @apiSince 1 */

public static final int ic_menu_upload_you_tube = 17301590; // 0x1080056

/** @apiSince 1 */

public static final int ic_menu_view = 17301591; // 0x1080057

/** @apiSince 1 */

public static final int ic_menu_week = 17301592; // 0x1080058

/** @apiSince 1 */

public static final int ic_menu_zoom = 17301593; // 0x1080059

/** @apiSince 1 */

public static final int ic_notification_clear_all = 17301594; // 0x108005a

/** @apiSince 1 */

public static final int ic_notification_overlay = 17301595; // 0x108005b

/** @apiSince 1 */

public static final int ic_partial_secure = 17301596; // 0x108005c

/** @apiSince 1 */

public static final int ic_popup_disk_full = 17301597; // 0x108005d

/** @apiSince 1 */

public static final int ic_popup_reminder = 17301598; // 0x108005e

/** @apiSince 1 */

public static final int ic_popup_sync = 17301599; // 0x108005f

/** @apiSince 1 */

public static final int ic_search_category_default = 17301600; // 0x1080060

/** @apiSince 1 */

public static final int ic_secure = 17301601; // 0x1080061

/** @apiSince 1 */

public static final int list_selector_background = 17301602; // 0x1080062

/** @apiSince 1 */

public static final int menu_frame = 17301603; // 0x1080063

/** @apiSince 1 */

public static final int menu_full_frame = 17301604; // 0x1080064

/** @apiSince 1 */

public static final int menuitem_background = 17301605; // 0x1080065

/** @apiSince 1 */

public static final int picture_frame = 17301606; // 0x1080066

/** @apiSince 9 */

public static final int presence_audio_away = 17301679; // 0x10800af

/** @apiSince 9 */

public static final int presence_audio_busy = 17301680; // 0x10800b0

/** @apiSince 9 */

public static final int presence_audio_online = 17301681; // 0x10800b1

/** @apiSince 1 */

public static final int presence_away = 17301607; // 0x1080067

/** @apiSince 1 */

public static final int presence_busy = 17301608; // 0x1080068

/** @apiSince 1 */

public static final int presence_invisible = 17301609; // 0x1080069

/** @apiSince 1 */

public static final int presence_offline = 17301610; // 0x108006a

/** @apiSince 1 */

public static final int presence_online = 17301611; // 0x108006b

/**
 * presence drawables for videochat or audiochat capable contacts
 * @apiSince 9
 */

public static final int presence_video_away = 17301676; // 0x10800ac

/** @apiSince 9 */

public static final int presence_video_busy = 17301677; // 0x10800ad

/** @apiSince 9 */

public static final int presence_video_online = 17301678; // 0x10800ae

/** @apiSince 1 */

public static final int progress_horizontal = 17301612; // 0x108006c

/** @apiSince 1 */

public static final int progress_indeterminate_horizontal = 17301613; // 0x108006d

/** @apiSince 1 */

public static final int radiobutton_off_background = 17301614; // 0x108006e

/** @apiSince 1 */

public static final int radiobutton_on_background = 17301615; // 0x108006f

/** @apiSince 1 */

public static final int screen_background_dark = 17301656; // 0x1080098

/**
 * Semi-transparent background that can be used when placing a dark
 * themed UI on top of some arbitrary background (such as the
 * wallpaper).  This darkens the background sufficiently that the UI
 * can be seen.
 * Background drawable that can be used for a transparent activity to
 * be able to display a dark UI: this darkens its background to make
 * a dark (default theme) UI more visible.
 * @apiSince 5
 */

public static final int screen_background_dark_transparent = 17301673; // 0x10800a9

/** @apiSince 1 */

public static final int screen_background_light = 17301657; // 0x1080099

/**
 * Background drawable that can be used for a transparent activity to
 * be able to display a light UI: this lightens its background to make
 * a light UI more visible.
 * @apiSince 5
 */

public static final int screen_background_light_transparent = 17301674; // 0x10800aa

/** @apiSince 1 */

public static final int spinner_background = 17301616; // 0x1080070

/** @apiSince 1 */

public static final int spinner_dropdown_background = 17301617; // 0x1080071

/** @apiSince 1 */

public static final int star_big_off = 17301619; // 0x1080073

/** @apiSince 1 */

public static final int star_big_on = 17301618; // 0x1080072

/** @apiSince 1 */

public static final int star_off = 17301621; // 0x1080075

/** @apiSince 1 */

public static final int star_on = 17301620; // 0x1080074

/** @apiSince 1 */

public static final int stat_notify_call_mute = 17301622; // 0x1080076

/** @apiSince 1 */

public static final int stat_notify_chat = 17301623; // 0x1080077

/** @apiSince 1 */

public static final int stat_notify_error = 17301624; // 0x1080078

/** @apiSince 1 */

public static final int stat_notify_missed_call = 17301631; // 0x108007f

/** @apiSince 1 */

public static final int stat_notify_more = 17301625; // 0x1080079

/** @apiSince 1 */

public static final int stat_notify_sdcard = 17301626; // 0x108007a

/** @apiSince 5 */

public static final int stat_notify_sdcard_prepare = 17301675; // 0x10800ab

/** @apiSince 1 */

public static final int stat_notify_sdcard_usb = 17301627; // 0x108007b

/** @apiSince 1 */

public static final int stat_notify_sync = 17301628; // 0x108007c

/** @apiSince 1 */

public static final int stat_notify_sync_noanim = 17301629; // 0x108007d

/** @apiSince 1 */

public static final int stat_notify_voicemail = 17301630; // 0x108007e

/** @apiSince 1 */

public static final int stat_sys_data_bluetooth = 17301632; // 0x1080080

/** @apiSince 1 */

public static final int stat_sys_download = 17301633; // 0x1080081

/** @apiSince 1 */

public static final int stat_sys_download_done = 17301634; // 0x1080082

/** @apiSince 1 */

public static final int stat_sys_headset = 17301635; // 0x1080083

/**
 * @deprecated Replaced by a private asset in the phone app.
 * @apiSince 1
 * @deprecatedSince 15
 */

@Deprecated public static final int stat_sys_phone_call = 17301636; // 0x1080084

/**
 * @deprecated Replaced by a private asset in the phone app.
 * @apiSince 1
 * @deprecatedSince 15
 */

@Deprecated public static final int stat_sys_phone_call_forward = 17301637; // 0x1080085

/**
 * @deprecated Replaced by a private asset in the phone app.
 * @apiSince 1
 * @deprecatedSince 15
 */

@Deprecated public static final int stat_sys_phone_call_on_hold = 17301638; // 0x1080086

/** @apiSince 1 */

public static final int stat_sys_speakerphone = 17301639; // 0x1080087

/** @apiSince 1 */

public static final int stat_sys_upload = 17301640; // 0x1080088

/** @apiSince 1 */

public static final int stat_sys_upload_done = 17301641; // 0x1080089

/**
 * @deprecated Replaced by a private asset in the phone app.
 * @apiSince 4
 * @deprecatedSince 15
 */

@Deprecated public static final int stat_sys_vp_phone_call = 17301671; // 0x10800a7

/**
 * @deprecated Replaced by a private asset in the phone app.
 * @apiSince 4
 * @deprecatedSince 15
 */

@Deprecated public static final int stat_sys_vp_phone_call_on_hold = 17301672; // 0x10800a8

/** @apiSince 1 */

public static final int stat_sys_warning = 17301642; // 0x108008a

/** @apiSince 1 */

public static final int status_bar_item_app_background = 17301643; // 0x108008b

/** @apiSince 1 */

public static final int status_bar_item_background = 17301644; // 0x108008c

/** @apiSince 1 */

public static final int sym_action_call = 17301645; // 0x108008d

/** @apiSince 1 */

public static final int sym_action_chat = 17301646; // 0x108008e

/** @apiSince 1 */

public static final int sym_action_email = 17301647; // 0x108008f

/** @apiSince 1 */

public static final int sym_call_incoming = 17301648; // 0x1080090

/** @apiSince 1 */

public static final int sym_call_missed = 17301649; // 0x1080091

/** @apiSince 1 */

public static final int sym_call_outgoing = 17301650; // 0x1080092

/** @apiSince 1 */

public static final int sym_contact_card = 17301652; // 0x1080094

/** @apiSince 1 */

public static final int sym_def_app_icon = 17301651; // 0x1080093

/** @apiSince 1 */

public static final int title_bar = 17301653; // 0x1080095

/**
 * Drawable to use as a background for a taller version of the titlebar
 * @apiSince 3
 */

public static final int title_bar_tall = 17301670; // 0x10800a6

/** @apiSince 1 */

public static final int toast_frame = 17301654; // 0x1080096

/** @apiSince 1 */

public static final int zoom_plate = 17301655; // 0x1080097
}

/** @apiSince 11 */

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class fraction {

public fraction() { throw new RuntimeException("Stub!"); }
}

/** @apiSince 1 */

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class id {

public id() { throw new RuntimeException("Stub!"); }

/**
 * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_CONTEXT_CLICK}.
 * @apiSince 23
 */

public static final int accessibilityActionContextClick = 16908348; // 0x102003c

/**
 * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_HIDE_TOOLTIP}.
 * @apiSince 28
 */

public static final int accessibilityActionHideTooltip = 16908357; // 0x1020045

/**
 * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_MOVE_WINDOW}.
 * @apiSince 26
 */

public static final int accessibilityActionMoveWindow = 16908354; // 0x1020042

/**
 * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_PAGE_DOWN}.
 * @apiSince 29
 */

public static final int accessibilityActionPageDown = 16908359; // 0x1020047

/**
 * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_PAGE_LEFT}.
 * @apiSince 29
 */

public static final int accessibilityActionPageLeft = 16908360; // 0x1020048

/**
 * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_PAGE_RIGHT}.
 * @apiSince 29
 */

public static final int accessibilityActionPageRight = 16908361; // 0x1020049

/**
 * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_PAGE_UP}.
 * @apiSince 29
 */

public static final int accessibilityActionPageUp = 16908358; // 0x1020046

/**
 * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_SCROLL_DOWN}.
 * @apiSince 23
 */

public static final int accessibilityActionScrollDown = 16908346; // 0x102003a

/**
 * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_SCROLL_LEFT}.
 * @apiSince 23
 */

public static final int accessibilityActionScrollLeft = 16908345; // 0x1020039

/**
 * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_SCROLL_RIGHT}.
 * @apiSince 23
 */

public static final int accessibilityActionScrollRight = 16908347; // 0x102003b

/**
 * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_SCROLL_TO_POSITION}.
 * @apiSince 23
 */

public static final int accessibilityActionScrollToPosition = 16908343; // 0x1020037

/**
 * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_SCROLL_UP}.
 * @apiSince 23
 */

public static final int accessibilityActionScrollUp = 16908344; // 0x1020038

/**
 * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_SET_PROGRESS}.
 * @apiSince 24
 */

public static final int accessibilityActionSetProgress = 16908349; // 0x102003d

/**
 * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_SHOW_ON_SCREEN}.
 * @apiSince 23
 */

public static final int accessibilityActionShowOnScreen = 16908342; // 0x1020036

/**
 * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_SHOW_TOOLTIP}.
 * @apiSince 28
 */

public static final int accessibilityActionShowTooltip = 16908356; // 0x1020044

/**
 * Menu ID to perform a "add to dictionary" operation.
 * @apiSince 3
 */

public static final int addToDictionary = 16908330; // 0x102002a

/**
 * Action used to manually trigger an autofill request
 * @apiSince 26
 */

public static final int autofill = 16908355; // 0x1020043

/** @apiSince 1 */

public static final int background = 16908288; // 0x1020000

/** @apiSince 1 */

public static final int button1 = 16908313; // 0x1020019

/** @apiSince 1 */

public static final int button2 = 16908314; // 0x102001a

/** @apiSince 1 */

public static final int button3 = 16908315; // 0x102001b

/**
 * The part of the UI shown by an
 * {@link android.inputmethodservice.InputMethodService} that contains the
 * views for displaying candidates for what the user has entered.
 * @apiSince 3
 */

public static final int candidatesArea = 16908317; // 0x102001d

/** @apiSince 1 */

public static final int checkbox = 16908289; // 0x1020001

/**
 * View ID of a {@link android.view.View} to close a popup keyboard
 * @apiSince 3
 */

public static final int closeButton = 16908327; // 0x1020027

/** @apiSince 1 */

public static final int content = 16908290; // 0x1020002

/**
 * Context menu ID for the "Copy" menu item to copy the currently
 * selected (or all) text in a text view to the clipboard.
 * @apiSince 3
 */

public static final int copy = 16908321; // 0x1020021

/**
 * Context menu ID for the "Copy URL" menu item to copy the currently
 * selected URL from the text view to the clipboard.
 * @apiSince 3
 */

public static final int copyUrl = 16908323; // 0x1020023

/** @apiSince 8 */

public static final int custom = 16908331; // 0x102002b

/**
 * Context menu ID for the "Cut" menu item to copy and delete the currently
 * selected (or all) text in a text view to the clipboard.
 * @apiSince 3
 */

public static final int cut = 16908320; // 0x1020020

/** @apiSince 1 */

public static final int edit = 16908291; // 0x1020003

/** @apiSince 1 */

public static final int empty = 16908292; // 0x1020004

/**
 * The part of the UI shown by an
 * {@link android.inputmethodservice.InputMethodService} that contains the
 * views for interacting with the user in extraction mode.
 * @apiSince 3
 */

public static final int extractArea = 16908316; // 0x102001c

/** @apiSince 1 */

public static final int hint = 16908293; // 0x1020005

/** @apiSince 11 */

public static final int home = 16908332; // 0x102002c

/** @apiSince 1 */

public static final int icon = 16908294; // 0x1020006

/** @apiSince 1 */

public static final int icon1 = 16908295; // 0x1020007

/** @apiSince 1 */

public static final int icon2 = 16908296; // 0x1020008

/** @apiSince 24 */

public static final int icon_frame = 16908350; // 0x102003e

/** @apiSince 1 */

public static final int input = 16908297; // 0x1020009

/**
 * The part of the UI shown by an
 * {@link android.inputmethodservice.InputMethodService} that contains the
 * views for entering text using the screen.
 * @apiSince 3
 */

public static final int inputArea = 16908318; // 0x102001e

/**
 * View ID of the text editor inside of an extracted text layout.
 * @apiSince 3
 */

public static final int inputExtractEditText = 16908325; // 0x1020025

/**
 * View ID of the {@link android.inputmethodservice.KeyboardView} within
 * an input method's input area.
 * {@deprecated Use Copy this definition into your own application project.}
 * @apiSince 3
 * @deprecatedSince 29
 */

@Deprecated public static final int keyboardView = 16908326; // 0x1020026

/** @apiSince 1 */

public static final int list = 16908298; // 0x102000a

/** @apiSince 24 */

public static final int list_container = 16908351; // 0x102003f

/** @apiSince 21 */

public static final int mask = 16908334; // 0x102002e

/** @apiSince 1 */

public static final int message = 16908299; // 0x102000b

/** @apiSince 21 */

public static final int navigationBarBackground = 16908336; // 0x1020030

/**
 * Context menu ID for the "Paste" menu item to copy the current contents
 * of the clipboard into the text view.
 * @apiSince 3
 */

public static final int paste = 16908322; // 0x1020022

/** @apiSince 23 */

public static final int pasteAsPlainText = 16908337; // 0x1020031

/** @apiSince 1 */

public static final int primary = 16908300; // 0x102000c

/** @apiSince 1 */

public static final int progress = 16908301; // 0x102000d

/** @apiSince 23 */

public static final int redo = 16908339; // 0x1020033

/** @apiSince 23 */

public static final int replaceText = 16908340; // 0x1020034

/** @apiSince 1 */

public static final int secondaryProgress = 16908303; // 0x102000f

/**
 * Context menu ID for the "Select All" menu item to select all text
 * in a text view.
 * @apiSince 3
 */

public static final int selectAll = 16908319; // 0x102001f

/**
 * Context menu ID for the "Select text..." menu item to switch to text
 * selection context mode in text views.
 * @apiSince 11
 */

public static final int selectTextMode = 16908333; // 0x102002d

/** @apiSince 1 */

public static final int selectedIcon = 16908302; // 0x102000e

/** @apiSince 23 */

public static final int shareText = 16908341; // 0x1020035

/**
 * Menu ID to perform a "start selecting text" operation.
 * @apiSince 3
 */

public static final int startSelectingText = 16908328; // 0x1020028

/** @apiSince 21 */

public static final int statusBarBackground = 16908335; // 0x102002f

/**
 * Menu ID to perform a "stop selecting text" operation.
 * @apiSince 3
 */

public static final int stopSelectingText = 16908329; // 0x1020029

/** @apiSince 1 */

public static final int summary = 16908304; // 0x1020010

/**
 * Context menu ID for the "Input Method" menu item to being up the
 * input method picker dialog, allowing the user to switch to another
 * input method.
 * @apiSince 3
 */

public static final int switchInputMethod = 16908324; // 0x1020024

/** @apiSince 24 */

public static final int switch_widget = 16908352; // 0x1020040

/** @apiSince 1 */

public static final int tabcontent = 16908305; // 0x1020011

/** @apiSince 1 */

public static final int tabhost = 16908306; // 0x1020012

/** @apiSince 1 */

public static final int tabs = 16908307; // 0x1020013

/** @apiSince 1 */

public static final int text1 = 16908308; // 0x1020014

/** @apiSince 1 */

public static final int text2 = 16908309; // 0x1020015

/** @apiSince 26 */

public static final int textAssist = 16908353; // 0x1020041

/** @apiSince 1 */

public static final int title = 16908310; // 0x1020016

/** @apiSince 1 */

public static final int toggle = 16908311; // 0x1020017

/** @apiSince 23 */

public static final int undo = 16908338; // 0x1020032

/** @apiSince 1 */

public static final int widget_frame = 16908312; // 0x1020018
}

/** @apiSince 3 */

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class integer {

public integer() { throw new RuntimeException("Stub!"); }

/**
 * The duration (in milliseconds) of a long animation.
 * @apiSince 3
 */

public static final int config_longAnimTime = 17694722; // 0x10e0002

/**
 * The duration (in milliseconds) of a medium-length animation.
 * @apiSince 3
 */

public static final int config_mediumAnimTime = 17694721; // 0x10e0001

/**
 * The duration (in milliseconds) of a short animation.
 * @apiSince 3
 */

public static final int config_shortAnimTime = 17694720; // 0x10e0000

/**
 * Maximum numerical value that will be shown in a status bar
 * notification icon or in the notification itself. Will be replaced
 * with @string/status_bar_notification_info_overflow when shown in the
 * UI.
 * @apiSince 14
 */

public static final int status_bar_notification_info_maxnum = 17694723; // 0x10e0003
}

/** @apiSince 11 */

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class interpolator {

public interpolator() { throw new RuntimeException("Stub!"); }

/**
 * Acceleration curve matching a cubic ease out function.
 * @apiSince 11
 */

public static final int accelerate_cubic = 17563650; // 0x10c0002

/**
 * Acceleration curve matching an ease in + ease out function
 * @apiSince 11
 */

public static final int accelerate_decelerate = 17563654; // 0x10c0006

/**
 * Acceleration curve matching a quadtratic ease out function.
 * @apiSince 11
 */

public static final int accelerate_quad = 17563648; // 0x10c0000

/**
 * Acceleration curve matching a quint ease out function.
 * @apiSince 11
 */

public static final int accelerate_quint = 17563652; // 0x10c0004

/**
 * An interpolator where the change starts backward then flings forward.
 * @apiSince 11
 */

public static final int anticipate = 17563655; // 0x10c0007

/**
 * An interpolator where the change starts backward then flings forward and
 * overshoots the target value and finally goes back to the final value.
 * @apiSince 11
 */

public static final int anticipate_overshoot = 17563657; // 0x10c0009

/**
 * An interpolator where the change bounces at the end.
 * @apiSince 11
 */

public static final int bounce = 17563658; // 0x10c000a

/**
 * Repeats the animation for one cycle. The rate of change follows a
 * sinusoidal pattern.
 * @apiSince 11
 */

public static final int cycle = 17563660; // 0x10c000c

/**
 * Acceleration curve matching a cubic ease in function.
 * @apiSince 11
 */

public static final int decelerate_cubic = 17563651; // 0x10c0003

/**
 * Acceleration curve matching a quadtratic ease in function.
 * @apiSince 11
 */

public static final int decelerate_quad = 17563649; // 0x10c0001

/**
 * Acceleration curve matching a quint ease in function.
 * @apiSince 11
 */

public static final int decelerate_quint = 17563653; // 0x10c0005

/**
 * An interpolator which accelerates fast but decelerates extra slowly.
 * @apiSince 28
 */

public static final int fast_out_extra_slow_in = 17563674; // 0x10c001a

/**
 * An interpolator which accelerates fast and keeps accelerating until the end.
 * @apiSince 21
 */

public static final int fast_out_linear_in = 17563663; // 0x10c000f

/**
 * An interpolator which accelerates fast but decelerates slowly.
 * @apiSince 21
 */

public static final int fast_out_slow_in = 17563661; // 0x10c000d

/**
 * An interpolator where the rate of change is constant.
 * @apiSince 11
 */

public static final int linear = 17563659; // 0x10c000b

/**
 * An interpolator which starts with a peak non-zero velocity and decelerates slowly.
 * @apiSince 21
 */

public static final int linear_out_slow_in = 17563662; // 0x10c000e

/**
 * An interpolator where the change flings forward and overshoots the last
 * value then comes back.
 * @apiSince 11
 */

public static final int overshoot = 17563656; // 0x10c0008
}

/** @apiSince 1 */

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class layout {

public layout() { throw new RuntimeException("Stub!"); }

/** @apiSince 1 */

public static final int activity_list_item = 17367040; // 0x1090000

/** @apiSince 1 */

public static final int browser_link_context_header = 17367054; // 0x109000e

/** @apiSince 1 */

public static final int expandable_list_content = 17367041; // 0x1090001

/**
 * Standard content view for a {@link android.app.ListFragment}.
 * If you are implementing a subclass of ListFragment with your
 * own customized content, you can include this layout in that
 * content to still retain all of the standard functionality of
 * the base class.
 * @apiSince 11
 */

public static final int list_content = 17367060; // 0x1090014

/** @apiSince 1 */

public static final int preference_category = 17367042; // 0x1090002

/** @apiSince 1 */

public static final int select_dialog_item = 17367057; // 0x1090011

/** @apiSince 1 */

public static final int select_dialog_multichoice = 17367059; // 0x1090013

/** @apiSince 1 */

public static final int select_dialog_singlechoice = 17367058; // 0x1090012

/** @apiSince 1 */

public static final int simple_dropdown_item_1line = 17367050; // 0x109000a

/** @apiSince 1 */

public static final int simple_expandable_list_item_1 = 17367046; // 0x1090006

/** @apiSince 1 */

public static final int simple_expandable_list_item_2 = 17367047; // 0x1090007

/** @apiSince 1 */

public static final int simple_gallery_item = 17367051; // 0x109000b

/** @apiSince 1 */

public static final int simple_list_item_1 = 17367043; // 0x1090003

/** @apiSince 1 */

public static final int simple_list_item_2 = 17367044; // 0x1090004

/**
 * A version of {@link #simple_list_item_1} that is able to change its
 * background state to indicate when it is activated (that is checked by
 * a ListView).
 * @apiSince 11
 */

public static final int simple_list_item_activated_1 = 17367062; // 0x1090016

/**
 * A version of {@link #simple_list_item_2} that is able to change its
 * background state to indicate when it is activated (that is checked by
 * a ListView).
 * @apiSince 11
 */

public static final int simple_list_item_activated_2 = 17367063; // 0x1090017

/** @apiSince 1 */

public static final int simple_list_item_checked = 17367045; // 0x1090005

/** @apiSince 1 */

public static final int simple_list_item_multiple_choice = 17367056; // 0x1090010

/** @apiSince 1 */

public static final int simple_list_item_single_choice = 17367055; // 0x109000f

/**
 * A simple ListView item layout which can contain text and support (single or multiple) item selection.
 * @apiSince 11
 */

public static final int simple_selectable_list_item = 17367061; // 0x1090015

/** @apiSince 1 */

public static final int simple_spinner_dropdown_item = 17367049; // 0x1090009

/** @apiSince 1 */

public static final int simple_spinner_item = 17367048; // 0x1090008

/** @apiSince 1 */

public static final int test_list_item = 17367052; // 0x109000c

/** @apiSince 1 */

public static final int two_line_list_item = 17367053; // 0x109000d
}

/** @apiSince 11 */

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class menu {

public menu() { throw new RuntimeException("Stub!"); }
}

/** @apiSince 11 */

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class mipmap {

public mipmap() { throw new RuntimeException("Stub!"); }

/**
 * Default icon for applications that don't specify an icon.
 * @apiSince 11
 */

public static final int sym_def_app_icon = 17629184; // 0x10d0000
}

/** @apiSince 1 */

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class plurals {

public plurals() { throw new RuntimeException("Stub!"); }
}

/** @apiSince 1 */

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class raw {

public raw() { throw new RuntimeException("Stub!"); }
}

/** @apiSince 1 */

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class string {

public string() { throw new RuntimeException("Stub!"); }

/**
 * Button to close error alert when a video cannot be played
 * @apiSince 1
 */

public static final int VideoView_error_button = 17039376; // 0x1040010

/**
 * Text for error alert when a video container is not valid for progressive download/playback.
 * @apiSince 3
 */

public static final int VideoView_error_text_invalid_progressive_playback = 17039381; // 0x1040015

/**
 * Text for error alert when a video cannot be played. it can be used by any app.
 * @apiSince 1
 */

public static final int VideoView_error_text_unknown = 17039377; // 0x1040011

/**
 * Title for error alert when a video cannot be played.  it can be used by any app.
 * @apiSince 1
 */

public static final int VideoView_error_title = 17039378; // 0x1040012

/**
 * Item on EditText context menu. This action is used to request autofill.
 * @apiSince 27
 */

public static final int autofill = 17039386; // 0x104001a

/**
 * Preference framework strings.
 * @apiSince 1
 */

public static final int cancel = 17039360; // 0x1040000

/**
 * Item on EditText context menu. This action is used to cut selected the text into the clipboard.
 * @apiSince 1
 */

public static final int copy = 17039361; // 0x1040001

/**
 * Item on EditText context menu. This action is used to copy a URL from the edit field into the clipboard.
 * @apiSince 1
 */

public static final int copyUrl = 17039362; // 0x1040002

/**
 * Item on EditText context menu.  This action is used to cut selected the text into the clipboard.
 * @apiSince 1
 */

public static final int cut = 17039363; // 0x1040003

/**
 * What the UI should display for "Msisdn" unless overridden by the SIM
 * @apiSince 1
 */

public static final int defaultMsisdnAlphaTag = 17039365; // 0x1040005

/**
 * What the UI should display for "voice mail" unless overridden by the SIM
 * @apiSince 1
 */

public static final int defaultVoiceMailAlphaTag = 17039364; // 0x1040004

/**
 * This is the generic "attention" string to be used in attention dialogs.  Typically
 * combined with setIconAttribute(android.R.attr.alertDialogIcon)
 * (or setIcon(android.R.drawable.ic_dialog_alert) on legacy versions of the platform)
 * @apiSince 3
 */

public static final int dialog_alert_title = 17039380; // 0x1040014

/**
 * How to display the lack of a phone number
 * @apiSince 1
 */

public static final int emptyPhoneNumber = 17039366; // 0x1040006

/**
 * Content description which should be used for the fingerprint icon.
 * @apiSince 23
 */

public static final int fingerprint_icon_content_description = 17039384; // 0x1040018

/**
 * Displayed when a web request failed because the URL isn't in a valid form.
 * @apiSince 1
 */

public static final int httpErrorBadUrl = 17039367; // 0x1040007

/**
 * Displayed when a web request failed because the protocol of the server is not supported.
 * @apiSince 1
 */

public static final int httpErrorUnsupportedScheme = 17039368; // 0x1040008

/**
 * Preference framework strings. {@deprecated Do not use. Incorrectly matches android.R.string.cancel rather than "no".}
 * @apiSince 1
 * @deprecatedSince R
 */

@Deprecated public static final int no = 17039369; // 0x1040009

/**
 * Preference framework strings.
 * @apiSince 1
 */

public static final int ok = 17039370; // 0x104000a

/**
 * Item on EditText context menu. This action is used to paste from the clipboard into the eidt field
 * @apiSince 1
 */

public static final int paste = 17039371; // 0x104000b

/**
 * Item on EditText context menu. This action is used to paste from the clipboard into the eidt field without formatting
 * @apiSince 26
 */

public static final int paste_as_plain_text = 17039385; // 0x1040019

/**
 * This is the default button label in the system-wide search UI.
 * It is also used by the home screen's search "widget". It should be short
 * @apiSince 1
 */

public static final int search_go = 17039372; // 0x104000c

/**
 * Item on EditText context menu. This action is used to select all text in the edit field.
 * @apiSince 1
 */

public static final int selectAll = 17039373; // 0x104000d

/**
 * Item on EditText context menu. Added only when the context menu is not empty, it enable selection context mode. [CHAR LIMIT=20]
 * @apiSince 11
 */

public static final int selectTextMode = 17039382; // 0x1040016

/**
 * Text to use when the number in a notification info is too large
 * (greater than status_bar_notification_info_maxnum, defined in
 * values/config.xml) and must be truncated. May need to be localized
 * for most appropriate textual indicator of "more than X".
 * [CHAR LIMIT=4]
 * @apiSince 14
 */

public static final int status_bar_notification_info_overflow = 17039383; // 0x1040017

/**
 * How to display the lack of a name
 * @apiSince 1
 */

public static final int unknownName = 17039374; // 0x104000e

/**
 * Used in Contacts for a field that has no label and in Note Pad
 * for a note with no name.
 * @apiSince 1
 */

public static final int untitled = 17039375; // 0x104000f

/**
 * Preference framework strings. {@deprecated Do not use. Incorrectly matches android.R.string.ok rather than "yes".}
 * @apiSince 1
 * @deprecatedSince R
 */

@Deprecated public static final int yes = 17039379; // 0x1040013
}

/** @apiSince 1 */

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class style {

public style() { throw new RuntimeException("Stub!"); }

/**
 * Base style for animations.  This style specifies no animations.
 * @apiSince 1
 */

public static final int Animation = 16973824; // 0x1030000

/**
 * Standard animations for a full-screen window or activity.
 * @apiSince 1
 */

public static final int Animation_Activity = 16973825; // 0x1030001

/**
 * Standard animations for a non-full-screen window or activity.
 * @apiSince 1
 */

public static final int Animation_Dialog = 16973826; // 0x1030002

/**
 * Window animations that are applied to input method overlay windows.
 * @apiSince 5
 */

public static final int Animation_InputMethod = 16973910; // 0x1030056

/** @apiSince 1 */

public static final int Animation_Toast = 16973828; // 0x1030004

/**
 * Standard animations for a translucent window or activity.  This
 * style is <em>not</em> used by default for the translucent theme
 * (since translucent activities are a special case that have no
 * clear UI paradigm), but you can make your own specialized theme
 * with this animation style if you would like to have the standard
 * platform transition animation.
 * @apiSince 1
 */

public static final int Animation_Translucent = 16973827; // 0x1030003

/**
 * Other Styles
 * @apiSince 14
 */

public static final int DeviceDefault_ButtonBar = 16974287; // 0x10301cf

/** @apiSince 14 */

public static final int DeviceDefault_ButtonBar_AlertDialog = 16974288; // 0x10301d0

/** @apiSince 14 */

public static final int DeviceDefault_Light_ButtonBar = 16974290; // 0x10301d2

/** @apiSince 14 */

public static final int DeviceDefault_Light_ButtonBar_AlertDialog = 16974291; // 0x10301d3

/** @apiSince 14 */

public static final int DeviceDefault_Light_SegmentedButton = 16974292; // 0x10301d4

/** @apiSince 14 */

public static final int DeviceDefault_SegmentedButton = 16974289; // 0x10301d1

/** @apiSince 11 */

public static final int Holo_ButtonBar = 16974053; // 0x10300e5

/** @apiSince 11 */

public static final int Holo_ButtonBar_AlertDialog = 16974055; // 0x10300e7

/** @apiSince 11 */

public static final int Holo_Light_ButtonBar = 16974054; // 0x10300e6

/** @apiSince 11 */

public static final int Holo_Light_ButtonBar_AlertDialog = 16974056; // 0x10300e8

/** @apiSince 11 */

public static final int Holo_Light_SegmentedButton = 16974058; // 0x10300ea

/** @apiSince 11 */

public static final int Holo_SegmentedButton = 16974057; // 0x10300e9

/** @apiSince 1 */

public static final int MediaButton = 16973879; // 0x1030037

/** @apiSince 1 */

public static final int MediaButton_Ffwd = 16973883; // 0x103003b

/** @apiSince 1 */

public static final int MediaButton_Next = 16973881; // 0x1030039

/** @apiSince 1 */

public static final int MediaButton_Pause = 16973885; // 0x103003d

/** @apiSince 1 */

public static final int MediaButton_Play = 16973882; // 0x103003a

/** @apiSince 1 */

public static final int MediaButton_Previous = 16973880; // 0x1030038

/** @apiSince 1 */

public static final int MediaButton_Rew = 16973884; // 0x103003c

/** @apiSince 1 */

public static final int TextAppearance = 16973886; // 0x103003e

/**
 * Text Appearance Styles
 * @apiSince 14
 */

public static final int TextAppearance_DeviceDefault = 16974253; // 0x10301ad

/** @apiSince 14 */

public static final int TextAppearance_DeviceDefault_DialogWindowTitle = 16974264; // 0x10301b8

/** @apiSince 14 */

public static final int TextAppearance_DeviceDefault_Inverse = 16974254; // 0x10301ae

/** @apiSince 14 */

public static final int TextAppearance_DeviceDefault_Large = 16974255; // 0x10301af

/** @apiSince 14 */

public static final int TextAppearance_DeviceDefault_Large_Inverse = 16974256; // 0x10301b0

/** @apiSince 14 */

public static final int TextAppearance_DeviceDefault_Medium = 16974257; // 0x10301b1

/** @apiSince 14 */

public static final int TextAppearance_DeviceDefault_Medium_Inverse = 16974258; // 0x10301b2

/** @apiSince 14 */

public static final int TextAppearance_DeviceDefault_SearchResult_Subtitle = 16974262; // 0x10301b6

/** @apiSince 14 */

public static final int TextAppearance_DeviceDefault_SearchResult_Title = 16974261; // 0x10301b5

/** @apiSince 14 */

public static final int TextAppearance_DeviceDefault_Small = 16974259; // 0x10301b3

/** @apiSince 14 */

public static final int TextAppearance_DeviceDefault_Small_Inverse = 16974260; // 0x10301b4

/** @apiSince 14 */

public static final int TextAppearance_DeviceDefault_Widget = 16974265; // 0x10301b9

/** @apiSince 14 */

public static final int TextAppearance_DeviceDefault_Widget_ActionBar_Menu = 16974286; // 0x10301ce

/** @apiSince 14 */

public static final int TextAppearance_DeviceDefault_Widget_ActionBar_Subtitle = 16974279; // 0x10301c7

/**
 * @deprecated Action bars are now themed using the inheritable android:theme attribute.
 * @apiSince 14
 * @deprecatedSince 21
 */

@Deprecated public static final int TextAppearance_DeviceDefault_Widget_ActionBar_Subtitle_Inverse = 16974283; // 0x10301cb

/** @apiSince 14 */

public static final int TextAppearance_DeviceDefault_Widget_ActionBar_Title = 16974278; // 0x10301c6

/**
 * @deprecated Action bars are now themed using the inheritable android:theme attribute.
 * @apiSince 14
 * @deprecatedSince 21
 */

@Deprecated public static final int TextAppearance_DeviceDefault_Widget_ActionBar_Title_Inverse = 16974282; // 0x10301ca

/** @apiSince 14 */

public static final int TextAppearance_DeviceDefault_Widget_ActionMode_Subtitle = 16974281; // 0x10301c9

/**
 * @deprecated Action bars are now themed using the inheritable android:theme attribute.
 * @apiSince 14
 * @deprecatedSince 21
 */

@Deprecated public static final int TextAppearance_DeviceDefault_Widget_ActionMode_Subtitle_Inverse = 16974285; // 0x10301cd

/** @apiSince 14 */

public static final int TextAppearance_DeviceDefault_Widget_ActionMode_Title = 16974280; // 0x10301c8

/**
 * @deprecated Action bars are now themed using the inheritable android:theme attribute.
 * @apiSince 14
 * @deprecatedSince 21
 */

@Deprecated public static final int TextAppearance_DeviceDefault_Widget_ActionMode_Title_Inverse = 16974284; // 0x10301cc

/** @apiSince 14 */

public static final int TextAppearance_DeviceDefault_Widget_Button = 16974266; // 0x10301ba

/** @apiSince 14 */

public static final int TextAppearance_DeviceDefault_Widget_DropDownHint = 16974271; // 0x10301bf

/** @apiSince 14 */

public static final int TextAppearance_DeviceDefault_Widget_DropDownItem = 16974272; // 0x10301c0

/** @apiSince 14 */

public static final int TextAppearance_DeviceDefault_Widget_EditText = 16974274; // 0x10301c2

/** @apiSince 14 */

public static final int TextAppearance_DeviceDefault_Widget_IconMenu_Item = 16974267; // 0x10301bb

/** @apiSince 14 */

public static final int TextAppearance_DeviceDefault_Widget_PopupMenu = 16974275; // 0x10301c3

/** @apiSince 14 */

public static final int TextAppearance_DeviceDefault_Widget_PopupMenu_Large = 16974276; // 0x10301c4

/** @apiSince 14 */

public static final int TextAppearance_DeviceDefault_Widget_PopupMenu_Small = 16974277; // 0x10301c5

/** @apiSince 14 */

public static final int TextAppearance_DeviceDefault_Widget_TabWidget = 16974268; // 0x10301bc

/** @apiSince 14 */

public static final int TextAppearance_DeviceDefault_Widget_TextView = 16974269; // 0x10301bd

/** @apiSince 14 */

public static final int TextAppearance_DeviceDefault_Widget_TextView_PopupMenu = 16974270; // 0x10301be

/** @apiSince 14 */

public static final int TextAppearance_DeviceDefault_Widget_TextView_SpinnerItem = 16974273; // 0x10301c1

/** @apiSince 14 */

public static final int TextAppearance_DeviceDefault_WindowTitle = 16974263; // 0x10301b7

/** @apiSince 1 */

public static final int TextAppearance_DialogWindowTitle = 16973889; // 0x1030041

/**
 * Text Styles
 * @apiSince 13
 */

public static final int TextAppearance_Holo = 16974075; // 0x10300fb

/** @apiSince 13 */

public static final int TextAppearance_Holo_DialogWindowTitle = 16974103; // 0x1030117

/** @apiSince 13 */

public static final int TextAppearance_Holo_Inverse = 16974076; // 0x10300fc

/** @apiSince 13 */

public static final int TextAppearance_Holo_Large = 16974077; // 0x10300fd

/** @apiSince 13 */

public static final int TextAppearance_Holo_Large_Inverse = 16974078; // 0x10300fe

/** @apiSince 13 */

public static final int TextAppearance_Holo_Medium = 16974079; // 0x10300ff

/** @apiSince 13 */

public static final int TextAppearance_Holo_Medium_Inverse = 16974080; // 0x1030100

/** @apiSince 13 */

public static final int TextAppearance_Holo_SearchResult_Subtitle = 16974084; // 0x1030104

/** @apiSince 13 */

public static final int TextAppearance_Holo_SearchResult_Title = 16974083; // 0x1030103

/** @apiSince 13 */

public static final int TextAppearance_Holo_Small = 16974081; // 0x1030101

/** @apiSince 13 */

public static final int TextAppearance_Holo_Small_Inverse = 16974082; // 0x1030102

/** @apiSince 13 */

public static final int TextAppearance_Holo_Widget = 16974085; // 0x1030105

/** @apiSince 14 */

public static final int TextAppearance_Holo_Widget_ActionBar_Menu = 16974112; // 0x1030120

/** @apiSince 13 */

public static final int TextAppearance_Holo_Widget_ActionBar_Subtitle = 16974099; // 0x1030113

/** @apiSince 14 */

public static final int TextAppearance_Holo_Widget_ActionBar_Subtitle_Inverse = 16974109; // 0x103011d

/** @apiSince 13 */

public static final int TextAppearance_Holo_Widget_ActionBar_Title = 16974098; // 0x1030112

/** @apiSince 14 */

public static final int TextAppearance_Holo_Widget_ActionBar_Title_Inverse = 16974108; // 0x103011c

/** @apiSince 13 */

public static final int TextAppearance_Holo_Widget_ActionMode_Subtitle = 16974101; // 0x1030115

/** @apiSince 14 */

public static final int TextAppearance_Holo_Widget_ActionMode_Subtitle_Inverse = 16974111; // 0x103011f

/** @apiSince 13 */

public static final int TextAppearance_Holo_Widget_ActionMode_Title = 16974100; // 0x1030114

/** @apiSince 14 */

public static final int TextAppearance_Holo_Widget_ActionMode_Title_Inverse = 16974110; // 0x103011e

/** @apiSince 13 */

public static final int TextAppearance_Holo_Widget_Button = 16974086; // 0x1030106

/** @apiSince 13 */

public static final int TextAppearance_Holo_Widget_DropDownHint = 16974091; // 0x103010b

/** @apiSince 13 */

public static final int TextAppearance_Holo_Widget_DropDownItem = 16974092; // 0x103010c

/** @apiSince 13 */

public static final int TextAppearance_Holo_Widget_EditText = 16974094; // 0x103010e

/** @apiSince 13 */

public static final int TextAppearance_Holo_Widget_IconMenu_Item = 16974087; // 0x1030107

/** @apiSince 13 */

public static final int TextAppearance_Holo_Widget_PopupMenu = 16974095; // 0x103010f

/** @apiSince 13 */

public static final int TextAppearance_Holo_Widget_PopupMenu_Large = 16974096; // 0x1030110

/** @apiSince 13 */

public static final int TextAppearance_Holo_Widget_PopupMenu_Small = 16974097; // 0x1030111

/**
 * This style is for smaller screens; values-xlarge defines a version
 * for larger screens.
 * @apiSince 13
 */

public static final int TextAppearance_Holo_Widget_TabWidget = 16974088; // 0x1030108

/** @apiSince 13 */

public static final int TextAppearance_Holo_Widget_TextView = 16974089; // 0x1030109

/** @apiSince 13 */

public static final int TextAppearance_Holo_Widget_TextView_PopupMenu = 16974090; // 0x103010a

/** @apiSince 13 */

public static final int TextAppearance_Holo_Widget_TextView_SpinnerItem = 16974093; // 0x103010d

/** @apiSince 13 */

public static final int TextAppearance_Holo_WindowTitle = 16974102; // 0x1030116

/** @apiSince 1 */

public static final int TextAppearance_Inverse = 16973887; // 0x103003f

/** @apiSince 1 */

public static final int TextAppearance_Large = 16973890; // 0x1030042

/** @apiSince 1 */

public static final int TextAppearance_Large_Inverse = 16973891; // 0x1030043

/**
 * Text styles
 * @apiSince 21
 */

public static final int TextAppearance_Material = 16974317; // 0x10301ed

/** @apiSince 21 */

public static final int TextAppearance_Material_Body1 = 16974320; // 0x10301f0

/** @apiSince 21 */

public static final int TextAppearance_Material_Body2 = 16974319; // 0x10301ef

/** @apiSince 21 */

public static final int TextAppearance_Material_Button = 16974318; // 0x10301ee

/** @apiSince 21 */

public static final int TextAppearance_Material_Caption = 16974321; // 0x10301f1

/** @apiSince 21 */

public static final int TextAppearance_Material_DialogWindowTitle = 16974322; // 0x10301f2

/** @apiSince 21 */

public static final int TextAppearance_Material_Display1 = 16974326; // 0x10301f6

/** @apiSince 21 */

public static final int TextAppearance_Material_Display2 = 16974325; // 0x10301f5

/** @apiSince 21 */

public static final int TextAppearance_Material_Display3 = 16974324; // 0x10301f4

/** @apiSince 21 */

public static final int TextAppearance_Material_Display4 = 16974323; // 0x10301f3

/** @apiSince 21 */

public static final int TextAppearance_Material_Headline = 16974327; // 0x10301f7

/**
 * Deprecated text styles
 * @apiSince 21
 */

public static final int TextAppearance_Material_Inverse = 16974328; // 0x10301f8

/** @apiSince 21 */

public static final int TextAppearance_Material_Large = 16974329; // 0x10301f9

/** @apiSince 21 */

public static final int TextAppearance_Material_Large_Inverse = 16974330; // 0x10301fa

/** @apiSince 21 */

public static final int TextAppearance_Material_Medium = 16974331; // 0x10301fb

/** @apiSince 21 */

public static final int TextAppearance_Material_Medium_Inverse = 16974332; // 0x10301fc

/** @apiSince 21 */

public static final int TextAppearance_Material_Menu = 16974333; // 0x10301fd

/** @apiSince 21 */

public static final int TextAppearance_Material_Notification = 16974334; // 0x10301fe

/** @apiSince 21 */

public static final int TextAppearance_Material_Notification_Emphasis = 16974335; // 0x10301ff

/** @apiSince 21 */

public static final int TextAppearance_Material_Notification_Info = 16974336; // 0x1030200

/** @apiSince 21 */

public static final int TextAppearance_Material_Notification_Line2 = 16974337; // 0x1030201

/** @apiSince 21 */

public static final int TextAppearance_Material_Notification_Time = 16974338; // 0x1030202

/** @apiSince 21 */

public static final int TextAppearance_Material_Notification_Title = 16974339; // 0x1030203

/** @apiSince 21 */

public static final int TextAppearance_Material_SearchResult_Subtitle = 16974340; // 0x1030204

/** @apiSince 21 */

public static final int TextAppearance_Material_SearchResult_Title = 16974341; // 0x1030205

/** @apiSince 21 */

public static final int TextAppearance_Material_Small = 16974342; // 0x1030206

/** @apiSince 21 */

public static final int TextAppearance_Material_Small_Inverse = 16974343; // 0x1030207

/** @apiSince 21 */

public static final int TextAppearance_Material_Subhead = 16974344; // 0x1030208

/** @apiSince 21 */

public static final int TextAppearance_Material_Title = 16974345; // 0x1030209

/** @apiSince 21 */

public static final int TextAppearance_Material_Widget = 16974347; // 0x103020b

/** @apiSince 21 */

public static final int TextAppearance_Material_Widget_ActionBar_Menu = 16974348; // 0x103020c

/** @apiSince 21 */

public static final int TextAppearance_Material_Widget_ActionBar_Subtitle = 16974349; // 0x103020d

/** @apiSince 21 */

public static final int TextAppearance_Material_Widget_ActionBar_Subtitle_Inverse = 16974350; // 0x103020e

/** @apiSince 21 */

public static final int TextAppearance_Material_Widget_ActionBar_Title = 16974351; // 0x103020f

/** @apiSince 21 */

public static final int TextAppearance_Material_Widget_ActionBar_Title_Inverse = 16974352; // 0x1030210

/** @apiSince 21 */

public static final int TextAppearance_Material_Widget_ActionMode_Subtitle = 16974353; // 0x1030211

/** @apiSince 21 */

public static final int TextAppearance_Material_Widget_ActionMode_Subtitle_Inverse = 16974354; // 0x1030212

/** @apiSince 21 */

public static final int TextAppearance_Material_Widget_ActionMode_Title = 16974355; // 0x1030213

/** @apiSince 21 */

public static final int TextAppearance_Material_Widget_ActionMode_Title_Inverse = 16974356; // 0x1030214

/** @apiSince 21 */

public static final int TextAppearance_Material_Widget_Button = 16974357; // 0x1030215

/** @apiSince 24 */

public static final int TextAppearance_Material_Widget_Button_Borderless_Colored = 16974559; // 0x10302df

/** @apiSince 24 */

public static final int TextAppearance_Material_Widget_Button_Colored = 16974558; // 0x10302de

/** @apiSince 23 */

public static final int TextAppearance_Material_Widget_Button_Inverse = 16974548; // 0x10302d4

/** @apiSince 21 */

public static final int TextAppearance_Material_Widget_DropDownHint = 16974358; // 0x1030216

/** @apiSince 21 */

public static final int TextAppearance_Material_Widget_DropDownItem = 16974359; // 0x1030217

/** @apiSince 21 */

public static final int TextAppearance_Material_Widget_EditText = 16974360; // 0x1030218

/** @apiSince 21 */

public static final int TextAppearance_Material_Widget_IconMenu_Item = 16974361; // 0x1030219

/** @apiSince 21 */

public static final int TextAppearance_Material_Widget_PopupMenu = 16974362; // 0x103021a

/** @apiSince 21 */

public static final int TextAppearance_Material_Widget_PopupMenu_Large = 16974363; // 0x103021b

/** @apiSince 21 */

public static final int TextAppearance_Material_Widget_PopupMenu_Small = 16974364; // 0x103021c

/** @apiSince 21 */

public static final int TextAppearance_Material_Widget_TabWidget = 16974365; // 0x103021d

/** @apiSince 21 */

public static final int TextAppearance_Material_Widget_TextView = 16974366; // 0x103021e

/** @apiSince 21 */

public static final int TextAppearance_Material_Widget_TextView_PopupMenu = 16974367; // 0x103021f

/** @apiSince 21 */

public static final int TextAppearance_Material_Widget_TextView_SpinnerItem = 16974368; // 0x1030220

/** @apiSince 21 */

public static final int TextAppearance_Material_Widget_Toolbar_Subtitle = 16974369; // 0x1030221

/** @apiSince 21 */

public static final int TextAppearance_Material_Widget_Toolbar_Title = 16974370; // 0x1030222

/** @apiSince 21 */

public static final int TextAppearance_Material_WindowTitle = 16974346; // 0x103020a

/** @apiSince 1 */

public static final int TextAppearance_Medium = 16973892; // 0x1030044

/** @apiSince 1 */

public static final int TextAppearance_Medium_Inverse = 16973893; // 0x1030045

/** @apiSince 1 */

public static final int TextAppearance_Small = 16973894; // 0x1030046

/** @apiSince 1 */

public static final int TextAppearance_Small_Inverse = 16973895; // 0x1030047

/**
 * Notification content styles
 * @apiSince 9
 */

public static final int TextAppearance_StatusBar_EventContent = 16973927; // 0x1030067

/** @apiSince 9 */

public static final int TextAppearance_StatusBar_EventContent_Title = 16973928; // 0x1030068

/** @apiSince 9 */

public static final int TextAppearance_StatusBar_Icon = 16973926; // 0x1030066

/** @apiSince 9 */

public static final int TextAppearance_StatusBar_Title = 16973925; // 0x1030065

/** @apiSince 14 */

public static final int TextAppearance_SuggestionHighlight = 16974104; // 0x1030118

/** @apiSince 1 */

public static final int TextAppearance_Theme = 16973888; // 0x1030040

/** @apiSince 1 */

public static final int TextAppearance_Theme_Dialog = 16973896; // 0x1030048

/** @apiSince 1 */

public static final int TextAppearance_Widget = 16973897; // 0x1030049

/** @apiSince 1 */

public static final int TextAppearance_Widget_Button = 16973898; // 0x103004a

/** @apiSince 1 */

public static final int TextAppearance_Widget_DropDownHint = 16973904; // 0x1030050

/** @apiSince 1 */

public static final int TextAppearance_Widget_DropDownItem = 16973905; // 0x1030051

/** @apiSince 1 */

public static final int TextAppearance_Widget_EditText = 16973900; // 0x103004c

/** @apiSince 1 */

public static final int TextAppearance_Widget_IconMenu_Item = 16973899; // 0x103004b

/** @apiSince 11 */

public static final int TextAppearance_Widget_PopupMenu_Large = 16973952; // 0x1030080

/** @apiSince 11 */

public static final int TextAppearance_Widget_PopupMenu_Small = 16973953; // 0x1030081

/** @apiSince 1 */

public static final int TextAppearance_Widget_TabWidget = 16973901; // 0x103004d

/** @apiSince 1 */

public static final int TextAppearance_Widget_TextView = 16973902; // 0x103004e

/** @apiSince 1 */

public static final int TextAppearance_Widget_TextView_PopupMenu = 16973903; // 0x103004f

/** @apiSince 1 */

public static final int TextAppearance_Widget_TextView_SpinnerItem = 16973906; // 0x1030052

/** @apiSince 1 */

public static final int TextAppearance_WindowTitle = 16973907; // 0x1030053

/**
 * The default theme for apps on API level 10 and lower. This is the theme used for
 * activities that have not explicitly set their own theme.
 * <p>You can count on this being a dark
 * background with light text on top, but should try to make no
 * other assumptions about its appearance. In particular, the text
 * inside of widgets using this theme may be completely different,
 * with the widget container being a light color and the text on top
 * of it a dark color.
 * <p>If you're developing for API level 11 and higher, you should instead use {@link
 * #Theme_Holo} or {@link #Theme_DeviceDefault}.</p>
 * @apiSince 1
 */

public static final int Theme = 16973829; // 0x1030005

/** @apiSince 21 */

public static final int ThemeOverlay = 16974407; // 0x1030247

/**
 * Theme overlay that replaces colorAccent with the colorAccent from {@link #Theme_DeviceDefault_DayNight}.
 * @apiSince 29
 */

public static final int ThemeOverlay_DeviceDefault_Accent_DayNight = 16974564; // 0x10302e4

/** @apiSince 21 */

public static final int ThemeOverlay_Material = 16974408; // 0x1030248

/**
 * Theme overlay that replaces the normal control color, which by default is the same as the
 * secondary text color, with the primary text color.
 * @apiSince 21
 */

public static final int ThemeOverlay_Material_ActionBar = 16974409; // 0x1030249

/**
 * Theme overlay that replaces colors with their dark versions but preserves
 * the value of colorAccent, colorPrimary and its variants.
 * @apiSince 21
 */

public static final int ThemeOverlay_Material_Dark = 16974411; // 0x103024b

/**
 * Theme overlay that replaces colors with their dark versions and replaces the normal
 * control color, which by default is the same as the secondary text color, with the primary
 * text color.
 * @apiSince 21
 */

public static final int ThemeOverlay_Material_Dark_ActionBar = 16974412; // 0x103024c

/**
 * Theme overlay that overrides window properties to display as a dialog.
 * Override behaviour to set the theme colours for dialogs, keep them the same.
 * @apiSince 23
 */

public static final int ThemeOverlay_Material_Dialog = 16974550; // 0x10302d6

/** @apiSince 23 */

public static final int ThemeOverlay_Material_Dialog_Alert = 16974551; // 0x10302d7

/**
 * Theme overlay that replaces colors with their light versions but preserves
 * the value of colorAccent, colorPrimary and its variants.
 * @apiSince 21
 */

public static final int ThemeOverlay_Material_Light = 16974410; // 0x103024a

/**
 * Variant on {@link #Theme} that ensures the background is
 * completely black.  This is useful for things like image viewers and
 * media players.   If you want the normal (dark background) theme
 * do <em>not</em> use this, use {@link #Theme}.
 * @apiSince 1
 */

public static final int Theme_Black = 16973832; // 0x1030008

/**
 * Variant of {@link #Theme_Black} with no title bar
 * @apiSince 1
 */

public static final int Theme_Black_NoTitleBar = 16973833; // 0x1030009

/**
 * Variant of {@link #Theme_Black} that has no title bar and
 * no status bar.  This theme
 * sets {@link android.R.attr#windowFullscreen} to true.
 * @apiSince 1
 */

public static final int Theme_Black_NoTitleBar_Fullscreen = 16973834; // 0x103000a

/** @apiSince 14 */

public static final int Theme_DeviceDefault = 16974120; // 0x1030128

/**
 * DeviceDefault theme for day/night activities.
 * @apiSince 29
 */

public static final int Theme_DeviceDefault_DayNight = 16974563; // 0x10302e3

/**
 * DeviceDefault theme for dialog windows and activities. This changes the window to be
 * floating (not fill the entire screen), and puts a frame around its contents. You can set this
 * theme on an activity if you would like to make an activity that looks like a Dialog.
 * DeviceDefault theme for dialog windows and activities. In contrast to Material, the
 * watch theme is not floating. You can set this theme on an activity if you would like to make
 * an activity that looks like a Dialog.
 * @apiSince 14
 */

public static final int Theme_DeviceDefault_Dialog = 16974126; // 0x103012e

/**
 * DeviceDefault theme for a window that will be displayed either full-screen on smaller
 * screens (small, normal) or as a dialog on larger screens (large, xlarge).
 * DeviceDefault theme for a window that will be displayed either full-screen on smaller
 * screens (small, normal) or as a dialog on larger screens (large, xlarge).
 * @apiSince 14
 */

public static final int Theme_DeviceDefault_DialogWhenLarge = 16974134; // 0x1030136

/**
 * DeviceDefault theme for a window without an action bar that will be displayed either
 * full-screen on smaller screens (small, normal) or as a dialog on larger screens (large,
 * xlarge).
 * DeviceDefault theme for a window without an action bar that will be displayed either
 * full-screen on smaller screens (small, normal) or as a dialog on larger screens (large,
 * xlarge).
 * @apiSince 14
 */

public static final int Theme_DeviceDefault_DialogWhenLarge_NoActionBar = 16974135; // 0x1030137

/** @apiSince 22 */

public static final int Theme_DeviceDefault_Dialog_Alert = 16974545; // 0x10302d1

/**
 * Variant of {@link #Theme_DeviceDefault_Dialog} that has a nice minimum width for a
 * regular dialog.
 * Variant of {@link #Theme_DeviceDefault_Dialog} that has a nice minimum width for a
 * regular dialog.
 * @apiSince 14
 */

public static final int Theme_DeviceDefault_Dialog_MinWidth = 16974127; // 0x103012f

/**
 * Variant of {@link #Theme_DeviceDefault_Dialog} without an action bar
 * Variant of {@link #Theme_DeviceDefault_Dialog} without an action bar
 * @apiSince 14
 */

public static final int Theme_DeviceDefault_Dialog_NoActionBar = 16974128; // 0x1030130

/**
 * Variant of {@link #Theme_DeviceDefault_Dialog_NoActionBar} that has a nice minimum width
 * for a regular dialog.
 * Variant of {@link #Theme_DeviceDefault_Dialog_NoActionBar} that has a nice minimum width
 * for a regular dialog.
 * @apiSince 14
 */

public static final int Theme_DeviceDefault_Dialog_NoActionBar_MinWidth = 16974129; // 0x1030131

/**
 * DeviceDefault style for input methods, which is used by the
 * {@link android.inputmethodservice.InputMethodService} class.
 * DeviceDefault style for input methods, which is used by the
 * {@link android.inputmethodservice.InputMethodService} class.
 * @apiSince 14
 */

public static final int Theme_DeviceDefault_InputMethod = 16974142; // 0x103013e

/**
 * Variant of {@link #Theme_DeviceDefault} with a light-colored style
 * @apiSince 14
 */

public static final int Theme_DeviceDefault_Light = 16974123; // 0x103012b

/**
 * Variant of the DeviceDefault (light) theme that has a solid (opaque) action bar with an
 * inverse color profile.
 * @apiSince 14
 */

public static final int Theme_DeviceDefault_Light_DarkActionBar = 16974143; // 0x103013f

/**
 * DeviceDefault light theme for dialog windows and activities. This changes the window to be
 * floating (not fill the entire screen), and puts a frame around its contents. You can set this
 * theme on an activity if you would like to make an activity that looks like a Dialog.
 * @apiSince 14
 */

public static final int Theme_DeviceDefault_Light_Dialog = 16974130; // 0x1030132

/**
 * DeviceDefault light theme for a window that will be displayed either full-screen on smaller
 * screens (small, normal) or as a dialog on larger screens (large, xlarge).
 * @apiSince 14
 */

public static final int Theme_DeviceDefault_Light_DialogWhenLarge = 16974136; // 0x1030138

/**
 * DeviceDefault light theme for a window without an action bar that will be displayed either
 * full-screen on smaller screens (small, normal) or as a dialog on larger screens (large,
 * xlarge).
 * @apiSince 14
 */

public static final int Theme_DeviceDefault_Light_DialogWhenLarge_NoActionBar = 16974137; // 0x1030139

/** @apiSince 22 */

public static final int Theme_DeviceDefault_Light_Dialog_Alert = 16974546; // 0x10302d2

/**
 * Variant of {@link #Theme_DeviceDefault_Light_Dialog} that has a nice minimum width for a
 * regular dialog.
 * @apiSince 14
 */

public static final int Theme_DeviceDefault_Light_Dialog_MinWidth = 16974131; // 0x1030133

/**
 * Variant of {@link #Theme_DeviceDefault_Light_Dialog} without an action bar
 * @apiSince 14
 */

public static final int Theme_DeviceDefault_Light_Dialog_NoActionBar = 16974132; // 0x1030134

/**
 * Variant of {@link #Theme_DeviceDefault_Light_Dialog_NoActionBar} that has a nice minimum
 * width for a regular dialog.
 * @apiSince 14
 */

public static final int Theme_DeviceDefault_Light_Dialog_NoActionBar_MinWidth = 16974133; // 0x1030135

/**
 * Variant of {@link #Theme_DeviceDefault_Light} with no action bar
 * @apiSince 14
 */

public static final int Theme_DeviceDefault_Light_NoActionBar = 16974124; // 0x103012c

/**
 * Variant of {@link #Theme_DeviceDefault_Light} with no action bar and no status bar.
 * This theme sets {@link android.R.attr#windowFullscreen} to true.
 * @apiSince 14
 */

public static final int Theme_DeviceDefault_Light_NoActionBar_Fullscreen = 16974125; // 0x103012d

/**
 * Variant of {@link #Theme_DeviceDefault_Light} with no action bar and no status bar
 * and extending in to overscan region.  This theme
 * sets {@link android.R.attr#windowFullscreen} and {@link android.R.attr#windowOverscan}
 * to true.
 * @apiSince 18
 */

public static final int Theme_DeviceDefault_Light_NoActionBar_Overscan = 16974304; // 0x10301e0

/**
 * Variant of {@link #Theme_DeviceDefault_Light} that has no title bar and translucent
 * system decor.  This theme sets {@link android.R.attr#windowTranslucentStatus} and
 * {@link android.R.attr#windowTranslucentNavigation} to true.
 * @apiSince 19
 */

public static final int Theme_DeviceDefault_Light_NoActionBar_TranslucentDecor = 16974308; // 0x10301e4

/**
 * DeviceDefault light theme for panel windows. This removes all extraneous window
 * decorations, so you basically have an empty rectangle in which to place your content. It makes
 * the window floating, with a transparent background, and turns off dimming behind the window.
 * @apiSince 14
 */

public static final int Theme_DeviceDefault_Light_Panel = 16974139; // 0x103013b

/**
 * Variant of {@link #Theme_DeviceDefault} with no action bar
 * Variant of {@link #Theme_DeviceDefault} with no action bar
 * @apiSince 14
 */

public static final int Theme_DeviceDefault_NoActionBar = 16974121; // 0x1030129

/**
 * Variant of {@link #Theme_DeviceDefault} with no action bar and no status bar.  This theme
 * sets {@link android.R.attr#windowFullscreen} to true.
 * Variant of {@link #Theme_DeviceDefault} with no action bar and no status bar.  This theme
 * sets {@link android.R.attr#windowFullscreen} to true.
 * @apiSince 14
 */

public static final int Theme_DeviceDefault_NoActionBar_Fullscreen = 16974122; // 0x103012a

/**
 * Variant of {@link #Theme_DeviceDefault} with no action bar and no status bar and
 * extending in to overscan region.  This theme
 * sets {@link android.R.attr#windowFullscreen} and {@link android.R.attr#windowOverscan}
 * to true.
 * Variant of {@link #Theme_DeviceDefault} with no action bar and no status bar and
 * extending in to overscan region.  This theme
 * sets {@link android.R.attr#windowFullscreen} and {@link android.R.attr#windowOverscan}
 * to true.
 * @apiSince 18
 */

public static final int Theme_DeviceDefault_NoActionBar_Overscan = 16974303; // 0x10301df

/**
 * Variant of {@link #Theme_DeviceDefault} that has no title bar and translucent
 * system decor.  This theme sets {@link android.R.attr#windowTranslucentStatus} and
 * {@link android.R.attr#windowTranslucentNavigation} to true.
 * Variant of {@link #Theme_DeviceDefault} that has no title bar and translucent
 * system decor.  This theme sets {@link android.R.attr#windowTranslucentStatus} and
 * {@link android.R.attr#windowTranslucentNavigation} to true.
 * @apiSince 19
 */

public static final int Theme_DeviceDefault_NoActionBar_TranslucentDecor = 16974307; // 0x10301e3

/**
 * DeviceDefault theme for panel windows. This removes all extraneous window
 * decorations, so you basically have an empty rectangle in which to place your content. It makes
 * the window floating, with a transparent background, and turns off dimming behind the window.
 * DeviceDefault theme for panel windows. This removes all extraneous window
 * decorations, so you basically have an empty rectangle in which to place your content. It makes
 * the window floating, with a transparent background, and turns off dimming behind the window.
 * @apiSince 14
 */

public static final int Theme_DeviceDefault_Panel = 16974138; // 0x103013a

/**
 * DeviceDefault theme for a window that should look like the Settings app.
 * DeviceDefault theme for a window that should look like the Settings app.
 * DeviceDefault theme for a window that should look like the Settings app.
 * @apiSince 21
 */

public static final int Theme_DeviceDefault_Settings = 16974371; // 0x1030223

/**
 * DeviceDefault theme for windows that want to have the user's selected wallpaper appear
 * behind them.
 * DeviceDefault theme for windows that want to have the user's selected wallpaper appear
 * behind them.
 * @apiSince 14
 */

public static final int Theme_DeviceDefault_Wallpaper = 16974140; // 0x103013c

/**
 * DeviceDefault theme for windows that want to have the user's selected wallpaper appear
 * behind them and without an action bar.
 * DeviceDefault theme for windows that want to have the user's selected wallpaper appear
 * behind them and without an action bar.
 * @apiSince 14
 */

public static final int Theme_DeviceDefault_Wallpaper_NoTitleBar = 16974141; // 0x103013d

/**
 * Default theme for dialog windows and activities (on API level 10 and lower),
 * which is used by the
 * {@link android.app.Dialog} class.  This changes the window to be
 * floating (not fill the entire screen), and puts a frame around its
 * contents.  You can set this theme on an activity if you would like to
 * make an activity that looks like a Dialog.
 * @apiSince 1
 */

public static final int Theme_Dialog = 16973835; // 0x103000b

/**
 * Honeycomb holographic theme (dark version).
 * <p>This is the default system theme for apps that target API level 11 - 20. Starting
 * with API level 14, the default system theme is supplied by {@link #Theme_DeviceDefault},
 * which might apply a different style on different devices. If you want to ensure that your
 * app consistently uses the Holo theme at all times, you must explicitly declare it in your
 * manifest. For example, {@code <application android:theme="@android:style/Theme.Holo">}.
 * For more information, read <a
 * href="http://android-developers.blogspot.com/2012/01/holo-everywhere.html">Holo
 * Everywhere</a>.</p>
 * <p>The widgets in the holographic theme are translucent on their background, so
 * applications must ensure that any background they use with this theme is itself
 * dark; otherwise, it will be difficult to see the widgets. This UI style also includes a
 * full action bar by default.</p>
 * <p>Styles used by the Holo theme are named using the convention Type.Holo.Etc
 * (for example, {@code Widget.Holo.Button} and {@code
 * TextAppearance.Holo.Widget.PopupMenu.Large}).
 * Specific resources used by Holo are named using the convention @type/foo_bar_baz_holo
 * with trailing _dark or _light specifiers if they are not shared between both light and
 * dark versions of the theme.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 * @apiSince 11
 * @deprecatedSince 28
 */

@Deprecated public static final int Theme_Holo = 16973931; // 0x103006b

/**
 * Holo theme for dialog windows and activities, which is used by the
 * {@link android.app.Dialog} class.  This changes the window to be
 * floating (not fill the entire screen), and puts a frame around its
 * contents.  You can set this theme on an activity if you would like to
 * make an activity that looks like a Dialog.
 * This is the default Dialog theme for applications targeting Honeycomb
 * or newer.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 * @apiSince 11
 * @deprecatedSince 28
 */

@Deprecated public static final int Theme_Holo_Dialog = 16973935; // 0x103006f

/**
 * Theme for a window that will be displayed either full-screen on
 * smaller screens (small, normal) or as a dialog on larger screens
 * (large, xlarge).
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 * @apiSince 11
 * @deprecatedSince 28
 */

@Deprecated public static final int Theme_Holo_DialogWhenLarge = 16973943; // 0x1030077

/**
 * Theme for a window without a title bar that will be displayed either
 * full-screen on smaller screens (small, normal) or as a dialog on larger screens
 * (large, xlarge).
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 * @apiSince 11
 * @deprecatedSince 28
 */

@Deprecated public static final int Theme_Holo_DialogWhenLarge_NoActionBar = 16973944; // 0x1030078

/**
 * Variant of Theme.Holo.Dialog that has a nice minimum width for
 * a regular dialog.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 * @apiSince 11
 * @deprecatedSince 28
 */

@Deprecated public static final int Theme_Holo_Dialog_MinWidth = 16973936; // 0x1030070

/**
 * Variant of Theme.Holo.Dialog that does not include a title bar.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 * @apiSince 11
 * @deprecatedSince 28
 */

@Deprecated public static final int Theme_Holo_Dialog_NoActionBar = 16973937; // 0x1030071

/**
 * Variant of Theme.Holo.Dialog.NoActionBar that has a nice minimum width for
 * a regular dialog.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 * @apiSince 11
 * @deprecatedSince 28
 */

@Deprecated public static final int Theme_Holo_Dialog_NoActionBar_MinWidth = 16973938; // 0x1030072

/**
 * Default theme for holo style input methods, which is used by the
 * {@link android.inputmethodservice.InputMethodService} class.
 * this inherits from Theme.Panel, but sets up IME appropriate animations
 * and a few custom attributes.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 * @apiSince 11
 * @deprecatedSince 28
 */

@Deprecated public static final int Theme_Holo_InputMethod = 16973951; // 0x103007f

/**
 * Honeycomb holographic theme (light version).  The widgets in the
 * holographic theme are translucent on their brackground, so applications
 * must ensure that any background they use with this theme is itself
 * light; otherwise, it will be difficult to see the widgets.  This
 * UI style also includes a full action bar by default.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 * @apiSince 11
 * @deprecatedSince 28
 */

@Deprecated public static final int Theme_Holo_Light = 16973934; // 0x103006e

/**
 * Variant of the holographic (light) theme that has a solid (opaque) action bar
 * with an inverse color profile. The dark action bar sharply stands out against
 * the light content.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 * @apiSince 14
 * @deprecatedSince 28
 */

@Deprecated public static final int Theme_Holo_Light_DarkActionBar = 16974105; // 0x1030119

/**
 * Holo light theme for dialog windows and activities, which is used by the
 * {@link android.app.Dialog} class.  This changes the window to be
 * floating (not fill the entire screen), and puts a frame around its
 * contents.  You can set this theme on an activity if you would like to
 * make an activity that looks like a Dialog.
 * This is the default Dialog theme for applications targeting Honeycomb
 * or newer.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 * @apiSince 11
 * @deprecatedSince 28
 */

@Deprecated public static final int Theme_Holo_Light_Dialog = 16973939; // 0x1030073

/**
 * Theme for a window that will be displayed either full-screen on
 * smaller screens (small, normal) or as a dialog on larger screens
 * (large, xlarge).
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 * @apiSince 11
 * @deprecatedSince 28
 */

@Deprecated public static final int Theme_Holo_Light_DialogWhenLarge = 16973945; // 0x1030079

/**
 * Theme for a window without an action bar that will be displayed either full-screen
 * on smaller screens (small, normal) or as a dialog on larger screens
 * (large, xlarge).
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 * @apiSince 11
 * @deprecatedSince 28
 */

@Deprecated public static final int Theme_Holo_Light_DialogWhenLarge_NoActionBar = 16973946; // 0x103007a

/**
 * Variant of Theme.Holo.Light.Dialog that has a nice minimum width for
 * a regular dialog.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 * @apiSince 11
 * @deprecatedSince 28
 */

@Deprecated public static final int Theme_Holo_Light_Dialog_MinWidth = 16973940; // 0x1030074

/**
 * Variant of Theme.Holo.Light.Dialog that does not include a title bar.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 * @apiSince 11
 * @deprecatedSince 28
 */

@Deprecated public static final int Theme_Holo_Light_Dialog_NoActionBar = 16973941; // 0x1030075

/**
 * Variant of Theme.Holo.Light.Dialog.NoActionBar that has a nice minimum width for
 * a regular dialog.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 * @apiSince 11
 * @deprecatedSince 28
 */

@Deprecated public static final int Theme_Holo_Light_Dialog_NoActionBar_MinWidth = 16973942; // 0x1030076

/**
 * Variant of the holographic (light) theme with no action bar.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 * @apiSince 13
 * @deprecatedSince 28
 */

@Deprecated public static final int Theme_Holo_Light_NoActionBar = 16974064; // 0x10300f0

/**
 * Variant of the holographic (light) theme that has no title bar and fills
 * the entire screen.  This theme
 * sets {@link android.R.attr#windowFullscreen} to true.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 * @apiSince 13
 * @deprecatedSince 28
 */

@Deprecated public static final int Theme_Holo_Light_NoActionBar_Fullscreen = 16974065; // 0x10300f1

/**
 * Variant of the holographic (light) theme that has no title bar and fills
 * the entire screen and extends into the display overscan region.  This theme
 * sets {@link android.R.attr#windowFullscreen} and {@link android.R.attr#windowOverscan}
 * to true.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 * @apiSince 18
 * @deprecatedSince 28
 */

@Deprecated public static final int Theme_Holo_Light_NoActionBar_Overscan = 16974302; // 0x10301de

/**
 * Variant of the holographic (light) theme that has no title bar and translucent
 * system decor.  This theme sets {@link android.R.attr#windowTranslucentStatus} and
 * {@link android.R.attr#windowTranslucentNavigation} to true.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 * @apiSince 19
 * @deprecatedSince 28
 */

@Deprecated public static final int Theme_Holo_Light_NoActionBar_TranslucentDecor = 16974306; // 0x10301e2

/**
 * Default holo light theme for panel windows.  This removes all extraneous
 * window decorations, so you basically have an empty rectangle in which
 * to place your content.  It makes the window floating, with a transparent
 * background, and turns off dimming behind the window.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 * @apiSince 11
 * @deprecatedSince 28
 */

@Deprecated public static final int Theme_Holo_Light_Panel = 16973948; // 0x103007c

/**
 * Variant of the holographic (dark) theme with no action bar.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 * @apiSince 11
 * @deprecatedSince 28
 */

@Deprecated public static final int Theme_Holo_NoActionBar = 16973932; // 0x103006c

/**
 * Variant of the holographic (dark) theme that has no title bar and fills
 * the entire screen.  This theme
 * sets {@link android.R.attr#windowFullscreen} to true.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 * @apiSince 11
 * @deprecatedSince 28
 */

@Deprecated public static final int Theme_Holo_NoActionBar_Fullscreen = 16973933; // 0x103006d

/**
 * Variant of the holographic (dark) theme that has no title bar and fills
 * the entire screen and extends into the display overscan region.  This theme
 * sets {@link android.R.attr#windowFullscreen} and {@link android.R.attr#windowOverscan}
 * to true.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 * @apiSince 18
 * @deprecatedSince 28
 */

@Deprecated public static final int Theme_Holo_NoActionBar_Overscan = 16974301; // 0x10301dd

/**
 * Variant of the holographic (dark) theme that has no title bar and translucent
 * system decor.  This theme sets {@link android.R.attr#windowTranslucentStatus} and
 * {@link android.R.attr#windowTranslucentNavigation} to true.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 * @apiSince 19
 * @deprecatedSince 28
 */

@Deprecated public static final int Theme_Holo_NoActionBar_TranslucentDecor = 16974305; // 0x10301e1

/**
 * Default holo dark theme for panel windows.  This removes all extraneous
 * window decorations, so you basically have an empty rectangle in which
 * to place your content.  It makes the window floating, with a transparent
 * background, and turns off dimming behind the window.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 * @apiSince 11
 * @deprecatedSince 28
 */

@Deprecated public static final int Theme_Holo_Panel = 16973947; // 0x103007b

/**
 * Default holographic (dark) for windows that want to have the user's selected
 * wallpaper appear behind them.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 * @apiSince 11
 * @deprecatedSince 28
 */

@Deprecated public static final int Theme_Holo_Wallpaper = 16973949; // 0x103007d

/**
 * Default holographic (dark) for windows that want to have the user's selected
 * wallpaper appear behind them and without an action bar.
 * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
 * @apiSince 11
 * @deprecatedSince 28
 */

@Deprecated public static final int Theme_Holo_Wallpaper_NoTitleBar = 16973950; // 0x103007e

/**
 * Default theme for input methods (on API level 10 and lower), which is used by the
 * {@link android.inputmethodservice.InputMethodService} class.
 * this inherits from Theme.Panel, but sets up IME appropriate animations
 * and a few custom attributes.
 * @apiSince 3
 */

public static final int Theme_InputMethod = 16973908; // 0x1030054

/**
 * Theme for a light background with dark text on top.  Set your activity
 * to this theme if you would like such an appearance.  As with the
 * default theme, you should try to assume little more than that the
 * background will be a light color.
 * <p>This is designed for API level 10 and lower.</p>
 * @apiSince 1
 */

public static final int Theme_Light = 16973836; // 0x103000c

/**
 * Variant of {@link #Theme_Light} with no title bar
 * @apiSince 1
 */

public static final int Theme_Light_NoTitleBar = 16973837; // 0x103000d

/**
 * Variant of {@link #Theme_Light} that has no title bar and
 * no status bar.  This theme
 * sets {@link android.R.attr#windowFullscreen} to true.
 * @apiSince 1
 */

public static final int Theme_Light_NoTitleBar_Fullscreen = 16973838; // 0x103000e

/**
 * Default light theme for panel windows (on API level 10 and lower).  This removes all
 * extraneous window decorations, so you basically have an empty rectangle in which
 * to place your content.  It makes the window floating, with a transparent
 * background, and turns off dimming behind the window.
 * @apiSince 3
 */

public static final int Theme_Light_Panel = 16973914; // 0x103005a

/**
 * Theme for a wallpaper's setting activity, which is designed to be a transparent
 * background with a light shade, so the previous Activity is visible in the background.
 * @apiSince 5
 */

public static final int Theme_Light_WallpaperSettings = 16973922; // 0x1030062

/**
 * Material theme (dark version).
 * <p>If you want to ensure that your
 * app consistently uses the Material theme at all times, you must explicitly declare it in your
 * manifest. For example, {@code <application android:theme="@style/Theme.Material">}.
 * <p>Styles used by the Material theme are named using the convention Type.Material.Etc
 * (for example, {@code Widget.Material.Button} and {@code
 * TextAppearance.Material.Widget.PopupMenu.Large}).
 * Specific resources used by Material are named using the convention @type/foo_bar_baz_material
 * with trailing _dark or _light specifiers if they are not shared between both light and
 * dark versions of the theme.
 * @apiSince 21
 */

public static final int Theme_Material = 16974372; // 0x1030224

/**
 * Material theme for dialog windows and activities, which is used by the
 * {@link android.app.Dialog} class.  This changes the window to be
 * floating (not fill the entire screen), and puts a frame around its
 * contents.  You can set this theme on an activity if you would like to
 * make an activity that looks like a Dialog.
 * Force the background and floating colours to be the default colours.
 * @apiSince 21
 */

public static final int Theme_Material_Dialog = 16974373; // 0x1030225

/**
 * Theme for a window that will be displayed either full-screen on
 * smaller screens (small, normal) or as a dialog on larger screens
 * (large, xlarge).
 * @apiSince 21
 */

public static final int Theme_Material_DialogWhenLarge = 16974379; // 0x103022b

/**
 * Theme for a window without a title bar that will be displayed either
 * full-screen on smaller screens (small, normal) or as a dialog on larger screens
 * (large, xlarge).
 * @apiSince 21
 */

public static final int Theme_Material_DialogWhenLarge_NoActionBar = 16974380; // 0x103022c

/**
 * Material theme for alert dialog windows, which is used by the
 * {@link android.app.AlertDialog} class.  This is basically a dialog
 * but sets the background to empty so it can do two-tone backgrounds.
 * For applications targeting Honeycomb or newer, this is the default
 * AlertDialog theme.
 * @apiSince 21
 */

public static final int Theme_Material_Dialog_Alert = 16974374; // 0x1030226

/**
 * Variant of Theme.Material.Dialog that has a nice minimum width for
 * a regular dialog.
 * @apiSince 21
 */

public static final int Theme_Material_Dialog_MinWidth = 16974375; // 0x1030227

/**
 * Variant of Theme.Material.Dialog that does not include a title bar.
 * @apiSince 21
 */

public static final int Theme_Material_Dialog_NoActionBar = 16974376; // 0x1030228

/**
 * Variant of Theme.Material.Dialog.NoActionBar that has a nice minimum width for
 * a regular dialog.
 * @apiSince 21
 */

public static final int Theme_Material_Dialog_NoActionBar_MinWidth = 16974377; // 0x1030229

/**
 * Theme for a presentation window on a secondary display.
 * @apiSince 21
 */

public static final int Theme_Material_Dialog_Presentation = 16974378; // 0x103022a

/**
 * Default theme for material style input methods, which is used by the
 * {@link android.inputmethodservice.InputMethodService} class.
 * this inherits from Theme.Panel, but sets up IME appropriate animations
 * and a few custom attributes.
 * Default theme for material style input methods, which is used by the
 * {@link android.inputmethodservice.InputMethodService} class.
 * this inherits from Theme.Panel, but sets up IME appropriate animations
 * and a few custom attributes.
 * @apiSince 21
 */

public static final int Theme_Material_InputMethod = 16974381; // 0x103022d

/**
 * Material theme (light version).
 * @apiSince 21
 */

public static final int Theme_Material_Light = 16974391; // 0x1030237

/**
 * Variant of the material (light) theme that has a solid (opaque) action bar
 * with an inverse color profile. The dark action bar sharply stands out against
 * the light content.
 * @apiSince 21
 */

public static final int Theme_Material_Light_DarkActionBar = 16974392; // 0x1030238

/**
 * Material light theme for dialog windows and activities, which is used by the
 * {@link android.app.Dialog} class.  This changes the window to be
 * floating (not fill the entire screen), and puts a frame around its
 * contents.  You can set this theme on an activity if you would like to
 * make an activity that looks like a Dialog.
 * Force the background and floating colours to be the default colours.
 * @apiSince 21
 */

public static final int Theme_Material_Light_Dialog = 16974393; // 0x1030239

/**
 * Theme for a window that will be displayed either full-screen on
 * smaller screens (small, normal) or as a dialog on larger screens
 * (large, xlarge).
 * @apiSince 21
 */

public static final int Theme_Material_Light_DialogWhenLarge = 16974399; // 0x103023f

/**
 * Theme for a window with a dark title bar that will be displayed either
 * full-screen on smaller screens (small, normal) or as a dialog on larger screens
 * (large, xlarge).
 * @apiSince 24
 */

public static final int Theme_Material_Light_DialogWhenLarge_DarkActionBar = 16974552; // 0x10302d8

/**
 * Theme for a window without an action bar that will be displayed either full-screen
 * on smaller screens (small, normal) or as a dialog on larger screens
 * (large, xlarge).
 * @apiSince 21
 */

public static final int Theme_Material_Light_DialogWhenLarge_NoActionBar = 16974400; // 0x1030240

/**
 * Material light theme for alert dialog windows, which is used by the
 * {@link android.app.AlertDialog} class.  This is basically a dialog
 * but sets the background to empty so it can do two-tone backgrounds.
 * For applications targeting Honeycomb or newer, this is the default
 * AlertDialog theme.
 * @apiSince 21
 */

public static final int Theme_Material_Light_Dialog_Alert = 16974394; // 0x103023a

/**
 * Variant of Theme.Material.Light.Dialog that has a nice minimum width for
 * a regular dialog.
 * @apiSince 21
 */

public static final int Theme_Material_Light_Dialog_MinWidth = 16974395; // 0x103023b

/**
 * Variant of Theme.Material.Light.Dialog that does not include a title bar.
 * @apiSince 21
 */

public static final int Theme_Material_Light_Dialog_NoActionBar = 16974396; // 0x103023c

/**
 * Variant of Theme.Material.Light.Dialog.NoActionBar that has a nice minimum width for
 * a regular dialog.
 * @apiSince 21
 */

public static final int Theme_Material_Light_Dialog_NoActionBar_MinWidth = 16974397; // 0x103023d

/**
 * Theme for a presentation window on a secondary display.
 * @apiSince 21
 */

public static final int Theme_Material_Light_Dialog_Presentation = 16974398; // 0x103023e

/**
 * Variant of the material (light) theme that has a light status bar background with dark
 * status bar contents.
 * @apiSince 23
 */

public static final int Theme_Material_Light_LightStatusBar = 16974549; // 0x10302d5

/**
 * Variant of the material (light) theme with no action bar.
 * @apiSince 21
 */

public static final int Theme_Material_Light_NoActionBar = 16974401; // 0x1030241

/**
 * Variant of the material (light) theme that has no title bar and fills
 * the entire screen.  This theme
 * sets {@link android.R.attr#windowFullscreen} to true.
 * @apiSince 21
 */

public static final int Theme_Material_Light_NoActionBar_Fullscreen = 16974402; // 0x1030242

/**
 * Variant of the material (light) theme that has no title bar and fills
 * the entire screen and extends into the display overscan region.  This theme
 * sets {@link android.R.attr#windowFullscreen} and {@link android.R.attr#windowOverscan}
 * to true.
 * @apiSince 21
 */

public static final int Theme_Material_Light_NoActionBar_Overscan = 16974403; // 0x1030243

/**
 * Variant of the material (light) theme that has no title bar and translucent
 * system decor.  This theme sets {@link android.R.attr#windowTranslucentStatus} and
 * {@link android.R.attr#windowTranslucentNavigation} to true.
 * @apiSince 21
 */

public static final int Theme_Material_Light_NoActionBar_TranslucentDecor = 16974404; // 0x1030244

/**
 * Default material light theme for panel windows.  This removes all extraneous
 * window decorations, so you basically have an empty rectangle in which
 * to place your content.  It makes the window floating, with a transparent
 * background, and turns off dimming behind the window.
 * @apiSince 21
 */

public static final int Theme_Material_Light_Panel = 16974405; // 0x1030245

/**
 * Material light theme for an activity that is to be used for voice interaction.
 * This gives the activity a floating dialog style, to incorporate with the
 * system voice experience.
 * @apiSince 21
 */

public static final int Theme_Material_Light_Voice = 16974406; // 0x1030246

/**
 * Variant of the material (dark) theme with no action bar.
 * @apiSince 21
 */

public static final int Theme_Material_NoActionBar = 16974382; // 0x103022e

/**
 * Variant of the material (dark) theme that has no title bar and fills
 * the entire screen.  This theme
 * sets {@link android.R.attr#windowFullscreen} to true.
 * @apiSince 21
 */

public static final int Theme_Material_NoActionBar_Fullscreen = 16974383; // 0x103022f

/**
 * Variant of the material (dark) theme that has no title bar and fills
 * the entire screen and extends into the display overscan region.  This theme
 * sets {@link android.R.attr#windowFullscreen} and {@link android.R.attr#windowOverscan}
 * to true.
 * @apiSince 21
 */

public static final int Theme_Material_NoActionBar_Overscan = 16974384; // 0x1030230

/**
 * Variant of the material (dark) theme that has no title bar and translucent
 * system decor.  This theme sets {@link android.R.attr#windowTranslucentStatus} and
 * {@link android.R.attr#windowTranslucentNavigation} to true.
 * @apiSince 21
 */

public static final int Theme_Material_NoActionBar_TranslucentDecor = 16974385; // 0x1030231

/**
 * Default material dark theme for panel windows.  This removes all extraneous
 * window decorations, so you basically have an empty rectangle in which
 * to place your content.  It makes the window floating, with a transparent
 * background, and turns off dimming behind the window.
 * @apiSince 21
 */

public static final int Theme_Material_Panel = 16974386; // 0x1030232

/**
 * Default theme for Settings and activities launched from Settings.
 * Force all settings themes to use normal Material theme.
 * @apiSince 21
 */

public static final int Theme_Material_Settings = 16974387; // 0x1030233

/**
 * Material theme for an activity that is to be used for voice interaction.
 * This gives the activity a floating dialog style, to incorporate with the
 * system voice experience.
 * @apiSince 21
 */

public static final int Theme_Material_Voice = 16974388; // 0x1030234

/**
 * Default material (dark) for windows that want to have the user's selected
 * wallpaper appear behind them.
 * @apiSince 21
 */

public static final int Theme_Material_Wallpaper = 16974389; // 0x1030235

/**
 * Default material (dark) for windows that want to have the user's selected
 * wallpaper appear behind them and without an action bar.
 * @apiSince 21
 */

public static final int Theme_Material_Wallpaper_NoTitleBar = 16974390; // 0x1030236

/**
 * Default theme for activities that don't actually display a UI; that
 * is, they finish themselves before being resumed.
 * @apiSince 3
 */

public static final int Theme_NoDisplay = 16973909; // 0x1030055

/**
 * Variant of {@link #Theme} with no title bar
 * @apiSince 1
 */

public static final int Theme_NoTitleBar = 16973830; // 0x1030006

/**
 * Variant of {@link #Theme} that has no title bar and no status bar.  This theme
 * sets {@link android.R.attr#windowFullscreen} to true.
 * @apiSince 1
 */

public static final int Theme_NoTitleBar_Fullscreen = 16973831; // 0x1030007

/**
 * No title bar, but Action Mode bars will overlay application content
 * instead of pushing it down to make room.
 * @apiSince 11
 */

public static final int Theme_NoTitleBar_OverlayActionModes = 16973930; // 0x103006a

/**
 * Default dark theme for panel windows (on API level 10 and lower).  This removes all
 * extraneous window decorations, so you basically have an empty rectangle in which
 * to place your content.  It makes the window floating, with a transparent
 * background, and turns off dimming behind the window.
 * @apiSince 3
 */

public static final int Theme_Panel = 16973913; // 0x1030059

/**
 * Theme for translucent activities (on API level 10 and lower). That is, windows
 * that allow you to see through them to the windows behind.  This sets up the translucent
 * flag and appropriate animations for your windows.
 * @apiSince 1
 */

public static final int Theme_Translucent = 16973839; // 0x103000f

/**
 * Variant of {@link #Theme_Translucent} with no title bar
 * @apiSince 1
 */

public static final int Theme_Translucent_NoTitleBar = 16973840; // 0x1030010

/**
 * Variant of {@link #Theme_Translucent} that has no title bar and
 * no status bar
 * @apiSince 1
 */

public static final int Theme_Translucent_NoTitleBar_Fullscreen = 16973841; // 0x1030011

/**
 * Theme for windows that want to have the user's selected
 * wallpaper appear behind them (for API level 10 and lower).
 * @apiSince 5
 */

public static final int Theme_Wallpaper = 16973918; // 0x103005e

/**
 * Theme for a wallpaper's setting activity, which is designed to be a transparent
 * background with a dark shade, so the previous Activity is visible in the background.
 * @apiSince 5
 */

public static final int Theme_WallpaperSettings = 16973921; // 0x1030061

/**
 * Variant of {@link #Theme_Wallpaper} that has no title bar
 * @apiSince 5
 */

public static final int Theme_Wallpaper_NoTitleBar = 16973919; // 0x103005f

/**
 * Variant of {@link #Theme_Wallpaper} that
 * has no title bar or status bar.
 * @apiSince 5
 */

public static final int Theme_Wallpaper_NoTitleBar_Fullscreen = 16973920; // 0x1030060

/**
 * Default theme with an Action Bar.
 * @apiSince 11
 */

public static final int Theme_WithActionBar = 16973929; // 0x1030069

/**
 * Widget Styles
 * @apiSince 1
 */

public static final int Widget = 16973842; // 0x1030012

/** @apiSince 1 */

public static final int Widget_AbsListView = 16973843; // 0x1030013

/** @apiSince 11 */

public static final int Widget_ActionBar = 16973954; // 0x1030082

/** @apiSince 13 */

public static final int Widget_ActionBar_TabBar = 16974068; // 0x10300f4

/** @apiSince 13 */

public static final int Widget_ActionBar_TabText = 16974067; // 0x10300f3

/** @apiSince 13 */

public static final int Widget_ActionBar_TabView = 16974066; // 0x10300f2

/** @apiSince 11 */

public static final int Widget_ActionButton = 16973956; // 0x1030084

/** @apiSince 11 */

public static final int Widget_ActionButton_CloseMode = 16973960; // 0x1030088

/** @apiSince 11 */

public static final int Widget_ActionButton_Overflow = 16973959; // 0x1030087

/** @apiSince 1 */

public static final int Widget_AutoCompleteTextView = 16973863; // 0x1030027

/** @apiSince 1 */

public static final int Widget_Button = 16973844; // 0x1030014

/** @apiSince 1 */

public static final int Widget_Button_Inset = 16973845; // 0x1030015

/** @apiSince 1 */

public static final int Widget_Button_Small = 16973846; // 0x1030016

/** @apiSince 1 */

public static final int Widget_Button_Toggle = 16973847; // 0x1030017

/** @apiSince 11 */

public static final int Widget_CalendarView = 16974059; // 0x10300eb

/** @apiSince 1 */

public static final int Widget_CompoundButton = 16973848; // 0x1030018

/** @apiSince 1 */

public static final int Widget_CompoundButton_CheckBox = 16973849; // 0x1030019

/** @apiSince 1 */

public static final int Widget_CompoundButton_RadioButton = 16973850; // 0x103001a

/** @apiSince 1 */

public static final int Widget_CompoundButton_Star = 16973851; // 0x103001b

/** @apiSince 11 */

public static final int Widget_DatePicker = 16974062; // 0x10300ee

/**
 * Widget Styles
 * @apiSince 14
 */

public static final int Widget_DeviceDefault = 16974144; // 0x1030140

/** @apiSince 14 */

public static final int Widget_DeviceDefault_ActionBar = 16974187; // 0x103016b

/** @apiSince 14 */

public static final int Widget_DeviceDefault_ActionBar_Solid = 16974195; // 0x1030173

/** @apiSince 14 */

public static final int Widget_DeviceDefault_ActionBar_TabBar = 16974194; // 0x1030172

/** @apiSince 14 */

public static final int Widget_DeviceDefault_ActionBar_TabText = 16974193; // 0x1030171

/** @apiSince 14 */

public static final int Widget_DeviceDefault_ActionBar_TabView = 16974192; // 0x1030170

/** @apiSince 14 */

public static final int Widget_DeviceDefault_ActionButton = 16974182; // 0x1030166

/** @apiSince 14 */

public static final int Widget_DeviceDefault_ActionButton_CloseMode = 16974186; // 0x103016a

/** @apiSince 14 */

public static final int Widget_DeviceDefault_ActionButton_Overflow = 16974183; // 0x1030167

/** @apiSince 14 */

public static final int Widget_DeviceDefault_ActionButton_TextButton = 16974184; // 0x1030168

/** @apiSince 14 */

public static final int Widget_DeviceDefault_ActionMode = 16974185; // 0x1030169

/** @apiSince 14 */

public static final int Widget_DeviceDefault_AutoCompleteTextView = 16974151; // 0x1030147

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Button = 16974145; // 0x1030141

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Button_Borderless = 16974188; // 0x103016c

/**
 * Colored borderless ink button
 * @apiSince 28
 */

public static final int Widget_DeviceDefault_Button_Borderless_Colored = 16974561; // 0x10302e1

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Button_Borderless_Small = 16974149; // 0x1030145

/** @apiSince 28 */

public static final int Widget_DeviceDefault_Button_Colored = 16974560; // 0x10302e0

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Button_Inset = 16974147; // 0x1030143

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Button_Small = 16974146; // 0x1030142

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Button_Toggle = 16974148; // 0x1030144

/** @apiSince 14 */

public static final int Widget_DeviceDefault_CalendarView = 16974190; // 0x103016e

/** @apiSince 17 */

public static final int Widget_DeviceDefault_CheckedTextView = 16974299; // 0x10301db

/** @apiSince 14 */

public static final int Widget_DeviceDefault_CompoundButton_CheckBox = 16974152; // 0x1030148

/** @apiSince 14 */

public static final int Widget_DeviceDefault_CompoundButton_RadioButton = 16974169; // 0x1030159

/** @apiSince 14 */

public static final int Widget_DeviceDefault_CompoundButton_Star = 16974173; // 0x103015d

/** @apiSince 14 */

public static final int Widget_DeviceDefault_DatePicker = 16974191; // 0x103016f

/** @apiSince 14 */

public static final int Widget_DeviceDefault_DropDownItem = 16974177; // 0x1030161

/** @apiSince 14 */

public static final int Widget_DeviceDefault_DropDownItem_Spinner = 16974178; // 0x1030162

/** @apiSince 14 */

public static final int Widget_DeviceDefault_EditText = 16974154; // 0x103014a

/** @apiSince 14 */

public static final int Widget_DeviceDefault_ExpandableListView = 16974155; // 0x103014b

/** @apiSince 21 */

public static final int Widget_DeviceDefault_FastScroll = 16974313; // 0x10301e9

/** @apiSince 14 */

public static final int Widget_DeviceDefault_GridView = 16974156; // 0x103014c

/** @apiSince 14 */

public static final int Widget_DeviceDefault_HorizontalScrollView = 16974171; // 0x103015b

/** @apiSince 14 */

public static final int Widget_DeviceDefault_ImageButton = 16974157; // 0x103014d

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light = 16974196; // 0x1030174

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_ActionBar = 16974243; // 0x10301a3

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_ActionBar_Solid = 16974247; // 0x10301a7

/**
 * @deprecated Action bars are now themed using the inheritable android:theme attribute.
 * @apiSince 14
 * @deprecatedSince 21
 */

@Deprecated public static final int Widget_DeviceDefault_Light_ActionBar_Solid_Inverse = 16974248; // 0x10301a8

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_ActionBar_TabBar = 16974246; // 0x10301a6

/**
 * @deprecated Action bars are now themed using the inheritable android:theme attribute.
 * @apiSince 14
 * @deprecatedSince 21
 */

@Deprecated public static final int Widget_DeviceDefault_Light_ActionBar_TabBar_Inverse = 16974249; // 0x10301a9

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_ActionBar_TabText = 16974245; // 0x10301a5

/**
 * @deprecated Action bars are now themed using the inheritable android:theme attribute.
 * @apiSince 14
 * @deprecatedSince 21
 */

@Deprecated public static final int Widget_DeviceDefault_Light_ActionBar_TabText_Inverse = 16974251; // 0x10301ab

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_ActionBar_TabView = 16974244; // 0x10301a4

/**
 * @deprecated Action bars are now themed using the inheritable android:theme attribute.
 * @apiSince 14
 * @deprecatedSince 21
 */

@Deprecated public static final int Widget_DeviceDefault_Light_ActionBar_TabView_Inverse = 16974250; // 0x10301aa

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_ActionButton = 16974239; // 0x103019f

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_ActionButton_CloseMode = 16974242; // 0x10301a2

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_ActionButton_Overflow = 16974240; // 0x10301a0

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_ActionMode = 16974241; // 0x10301a1

/**
 * @deprecated Action bars are now themed using the inheritable android:theme attribute.
 * @apiSince 14
 * @deprecatedSince 21
 */

@Deprecated public static final int Widget_DeviceDefault_Light_ActionMode_Inverse = 16974252; // 0x10301ac

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_AutoCompleteTextView = 16974203; // 0x103017b

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_Button = 16974197; // 0x1030175

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_Button_Borderless_Small = 16974201; // 0x1030179

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_Button_Inset = 16974199; // 0x1030177

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_Button_Small = 16974198; // 0x1030176

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_Button_Toggle = 16974200; // 0x1030178

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_CalendarView = 16974238; // 0x103019e

/** @apiSince 17 */

public static final int Widget_DeviceDefault_Light_CheckedTextView = 16974300; // 0x10301dc

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_CompoundButton_CheckBox = 16974204; // 0x103017c

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_CompoundButton_RadioButton = 16974224; // 0x1030190

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_CompoundButton_Star = 16974228; // 0x1030194

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_DropDownItem = 16974232; // 0x1030198

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_DropDownItem_Spinner = 16974233; // 0x1030199

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_EditText = 16974206; // 0x103017e

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_ExpandableListView = 16974207; // 0x103017f

/** @apiSince 21 */

public static final int Widget_DeviceDefault_Light_FastScroll = 16974315; // 0x10301eb

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_GridView = 16974208; // 0x1030180

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_HorizontalScrollView = 16974226; // 0x1030192

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_ImageButton = 16974209; // 0x1030181

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_ListPopupWindow = 16974235; // 0x103019b

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_ListView = 16974210; // 0x1030182

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_ListView_DropDown = 16974205; // 0x103017d

/** @apiSince 16 */

public static final int Widget_DeviceDefault_Light_MediaRouteButton = 16974296; // 0x10301d8

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_PopupMenu = 16974236; // 0x103019c

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_PopupWindow = 16974211; // 0x1030183

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_ProgressBar = 16974212; // 0x1030184

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_ProgressBar_Horizontal = 16974213; // 0x1030185

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_ProgressBar_Inverse = 16974217; // 0x1030189

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_ProgressBar_Large = 16974216; // 0x1030188

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_ProgressBar_Large_Inverse = 16974219; // 0x103018b

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_ProgressBar_Small = 16974214; // 0x1030186

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_ProgressBar_Small_Inverse = 16974218; // 0x103018a

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_ProgressBar_Small_Title = 16974215; // 0x1030187

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_RatingBar = 16974221; // 0x103018d

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_RatingBar_Indicator = 16974222; // 0x103018e

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_RatingBar_Small = 16974223; // 0x103018f

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_ScrollView = 16974225; // 0x1030191

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_SeekBar = 16974220; // 0x103018c

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_Spinner = 16974227; // 0x1030193

/** @apiSince 21 */

public static final int Widget_DeviceDefault_Light_StackView = 16974316; // 0x10301ec

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_Tab = 16974237; // 0x103019d

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_TabWidget = 16974229; // 0x1030195

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_TextView = 16974202; // 0x103017a

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_TextView_SpinnerItem = 16974234; // 0x103019a

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_WebTextView = 16974230; // 0x1030196

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Light_WebView = 16974231; // 0x1030197

/** @apiSince 14 */

public static final int Widget_DeviceDefault_ListPopupWindow = 16974180; // 0x1030164

/** @apiSince 14 */

public static final int Widget_DeviceDefault_ListView = 16974158; // 0x103014e

/** @apiSince 14 */

public static final int Widget_DeviceDefault_ListView_DropDown = 16974153; // 0x1030149

/** @apiSince 16 */

public static final int Widget_DeviceDefault_MediaRouteButton = 16974295; // 0x10301d7

/** @apiSince 14 */

public static final int Widget_DeviceDefault_PopupMenu = 16974181; // 0x1030165

/** @apiSince 14 */

public static final int Widget_DeviceDefault_PopupWindow = 16974159; // 0x103014f

/** @apiSince 14 */

public static final int Widget_DeviceDefault_ProgressBar = 16974160; // 0x1030150

/** @apiSince 14 */

public static final int Widget_DeviceDefault_ProgressBar_Horizontal = 16974161; // 0x1030151

/** @apiSince 14 */

public static final int Widget_DeviceDefault_ProgressBar_Large = 16974164; // 0x1030154

/** @apiSince 14 */

public static final int Widget_DeviceDefault_ProgressBar_Small = 16974162; // 0x1030152

/** @apiSince 14 */

public static final int Widget_DeviceDefault_ProgressBar_Small_Title = 16974163; // 0x1030153

/** @apiSince 14 */

public static final int Widget_DeviceDefault_RatingBar = 16974166; // 0x1030156

/** @apiSince 14 */

public static final int Widget_DeviceDefault_RatingBar_Indicator = 16974167; // 0x1030157

/** @apiSince 14 */

public static final int Widget_DeviceDefault_RatingBar_Small = 16974168; // 0x1030158

/** @apiSince 14 */

public static final int Widget_DeviceDefault_ScrollView = 16974170; // 0x103015a

/** @apiSince 14 */

public static final int Widget_DeviceDefault_SeekBar = 16974165; // 0x1030155

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Spinner = 16974172; // 0x103015c

/** @apiSince 21 */

public static final int Widget_DeviceDefault_StackView = 16974314; // 0x10301ea

/** @apiSince 14 */

public static final int Widget_DeviceDefault_Tab = 16974189; // 0x103016d

/** @apiSince 14 */

public static final int Widget_DeviceDefault_TabWidget = 16974174; // 0x103015e

/** @apiSince 14 */

public static final int Widget_DeviceDefault_TextView = 16974150; // 0x1030146

/** @apiSince 14 */

public static final int Widget_DeviceDefault_TextView_SpinnerItem = 16974179; // 0x1030163

/** @apiSince 14 */

public static final int Widget_DeviceDefault_WebTextView = 16974175; // 0x103015f

/** @apiSince 14 */

public static final int Widget_DeviceDefault_WebView = 16974176; // 0x1030160

/** @apiSince 1 */

public static final int Widget_DropDownItem = 16973867; // 0x103002b

/** @apiSince 1 */

public static final int Widget_DropDownItem_Spinner = 16973868; // 0x103002c

/** @apiSince 1 */

public static final int Widget_EditText = 16973859; // 0x1030023

/** @apiSince 1 */

public static final int Widget_ExpandableListView = 16973860; // 0x1030024

/** @apiSince 21 */

public static final int Widget_FastScroll = 16974309; // 0x10301e5

/** @apiSince 11 */

public static final int Widget_FragmentBreadCrumbs = 16973961; // 0x1030089

/** @apiSince 1 */

public static final int Widget_Gallery = 16973877; // 0x1030035

/** @apiSince 1 */

public static final int Widget_GridView = 16973874; // 0x1030032

/**
 * Widget Styles
 * @apiSince 11
 */

public static final int Widget_Holo = 16973962; // 0x103008a

/** @apiSince 11 */

public static final int Widget_Holo_ActionBar = 16974004; // 0x10300b4

/** @apiSince 14 */

public static final int Widget_Holo_ActionBar_Solid = 16974113; // 0x1030121

/** @apiSince 13 */

public static final int Widget_Holo_ActionBar_TabBar = 16974071; // 0x10300f7

/** @apiSince 13 */

public static final int Widget_Holo_ActionBar_TabText = 16974070; // 0x10300f6

/** @apiSince 13 */

public static final int Widget_Holo_ActionBar_TabView = 16974069; // 0x10300f5

/** @apiSince 11 */

public static final int Widget_Holo_ActionButton = 16973999; // 0x10300af

/** @apiSince 11 */

public static final int Widget_Holo_ActionButton_CloseMode = 16974003; // 0x10300b3

/** @apiSince 11 */

public static final int Widget_Holo_ActionButton_Overflow = 16974000; // 0x10300b0

/** @apiSince 11 */

public static final int Widget_Holo_ActionButton_TextButton = 16974001; // 0x10300b1

/** @apiSince 11 */

public static final int Widget_Holo_ActionMode = 16974002; // 0x10300b2

/** @apiSince 11 */

public static final int Widget_Holo_AutoCompleteTextView = 16973968; // 0x1030090

/** @apiSince 11 */

public static final int Widget_Holo_Button = 16973963; // 0x103008b

/** @apiSince 11 */

public static final int Widget_Holo_Button_Borderless = 16974050; // 0x10300e2

/** @apiSince 14 */

public static final int Widget_Holo_Button_Borderless_Small = 16974106; // 0x103011a

/** @apiSince 11 */

public static final int Widget_Holo_Button_Inset = 16973965; // 0x103008d

/** @apiSince 11 */

public static final int Widget_Holo_Button_Small = 16973964; // 0x103008c

/** @apiSince 11 */

public static final int Widget_Holo_Button_Toggle = 16973966; // 0x103008e

/** @apiSince 11 */

public static final int Widget_Holo_CalendarView = 16974060; // 0x10300ec

/** @apiSince 17 */

public static final int Widget_Holo_CheckedTextView = 16974297; // 0x10301d9

/** @apiSince 11 */

public static final int Widget_Holo_CompoundButton_CheckBox = 16973969; // 0x1030091

/** @apiSince 11 */

public static final int Widget_Holo_CompoundButton_RadioButton = 16973986; // 0x10300a2

/** @apiSince 11 */

public static final int Widget_Holo_CompoundButton_Star = 16973990; // 0x10300a6

/** @apiSince 11 */

public static final int Widget_Holo_DatePicker = 16974063; // 0x10300ef

/** @apiSince 11 */

public static final int Widget_Holo_DropDownItem = 16973994; // 0x10300aa

/** @apiSince 11 */

public static final int Widget_Holo_DropDownItem_Spinner = 16973995; // 0x10300ab

/** @apiSince 11 */

public static final int Widget_Holo_EditText = 16973971; // 0x1030093

/** @apiSince 11 */

public static final int Widget_Holo_ExpandableListView = 16973972; // 0x1030094

/** @apiSince 11 */

public static final int Widget_Holo_GridView = 16973973; // 0x1030095

/** @apiSince 11 */

public static final int Widget_Holo_HorizontalScrollView = 16973988; // 0x10300a4

/** @apiSince 11 */

public static final int Widget_Holo_ImageButton = 16973974; // 0x1030096

/**
 * Light widget styles
 * @apiSince 11
 */

public static final int Widget_Holo_Light = 16974005; // 0x10300b5

/** @apiSince 11 */

public static final int Widget_Holo_Light_ActionBar = 16974049; // 0x10300e1

/** @apiSince 14 */

public static final int Widget_Holo_Light_ActionBar_Solid = 16974114; // 0x1030122

/** @apiSince 14 */

public static final int Widget_Holo_Light_ActionBar_Solid_Inverse = 16974115; // 0x1030123

/** @apiSince 13 */

public static final int Widget_Holo_Light_ActionBar_TabBar = 16974074; // 0x10300fa

/** @apiSince 14 */

public static final int Widget_Holo_Light_ActionBar_TabBar_Inverse = 16974116; // 0x1030124

/** @apiSince 13 */

public static final int Widget_Holo_Light_ActionBar_TabText = 16974073; // 0x10300f9

/** @apiSince 14 */

public static final int Widget_Holo_Light_ActionBar_TabText_Inverse = 16974118; // 0x1030126

/** @apiSince 13 */

public static final int Widget_Holo_Light_ActionBar_TabView = 16974072; // 0x10300f8

/** @apiSince 14 */

public static final int Widget_Holo_Light_ActionBar_TabView_Inverse = 16974117; // 0x1030125

/** @apiSince 11 */

public static final int Widget_Holo_Light_ActionButton = 16974045; // 0x10300dd

/** @apiSince 11 */

public static final int Widget_Holo_Light_ActionButton_CloseMode = 16974048; // 0x10300e0

/** @apiSince 11 */

public static final int Widget_Holo_Light_ActionButton_Overflow = 16974046; // 0x10300de

/** @apiSince 11 */

public static final int Widget_Holo_Light_ActionMode = 16974047; // 0x10300df

/** @apiSince 14 */

public static final int Widget_Holo_Light_ActionMode_Inverse = 16974119; // 0x1030127

/** @apiSince 11 */

public static final int Widget_Holo_Light_AutoCompleteTextView = 16974011; // 0x10300bb

/** @apiSince 11 */

public static final int Widget_Holo_Light_Button = 16974006; // 0x10300b6

/** @apiSince 14 */

public static final int Widget_Holo_Light_Button_Borderless_Small = 16974107; // 0x103011b

/** @apiSince 11 */

public static final int Widget_Holo_Light_Button_Inset = 16974008; // 0x10300b8

/** @apiSince 11 */

public static final int Widget_Holo_Light_Button_Small = 16974007; // 0x10300b7

/** @apiSince 11 */

public static final int Widget_Holo_Light_Button_Toggle = 16974009; // 0x10300b9

/** @apiSince 11 */

public static final int Widget_Holo_Light_CalendarView = 16974061; // 0x10300ed

/** @apiSince 17 */

public static final int Widget_Holo_Light_CheckedTextView = 16974298; // 0x10301da

/** @apiSince 11 */

public static final int Widget_Holo_Light_CompoundButton_CheckBox = 16974012; // 0x10300bc

/** @apiSince 11 */

public static final int Widget_Holo_Light_CompoundButton_RadioButton = 16974032; // 0x10300d0

/** @apiSince 11 */

public static final int Widget_Holo_Light_CompoundButton_Star = 16974036; // 0x10300d4

/** @apiSince 11 */

public static final int Widget_Holo_Light_DropDownItem = 16974040; // 0x10300d8

/** @apiSince 11 */

public static final int Widget_Holo_Light_DropDownItem_Spinner = 16974041; // 0x10300d9

/** @apiSince 11 */

public static final int Widget_Holo_Light_EditText = 16974014; // 0x10300be

/** @apiSince 11 */

public static final int Widget_Holo_Light_ExpandableListView = 16974015; // 0x10300bf

/** @apiSince 11 */

public static final int Widget_Holo_Light_GridView = 16974016; // 0x10300c0

/** @apiSince 11 */

public static final int Widget_Holo_Light_HorizontalScrollView = 16974034; // 0x10300d2

/** @apiSince 11 */

public static final int Widget_Holo_Light_ImageButton = 16974017; // 0x10300c1

/** @apiSince 11 */

public static final int Widget_Holo_Light_ListPopupWindow = 16974043; // 0x10300db

/** @apiSince 11 */

public static final int Widget_Holo_Light_ListView = 16974018; // 0x10300c2

/** @apiSince 11 */

public static final int Widget_Holo_Light_ListView_DropDown = 16974013; // 0x10300bd

/** @apiSince 16 */

public static final int Widget_Holo_Light_MediaRouteButton = 16974294; // 0x10301d6

/** @apiSince 11 */

public static final int Widget_Holo_Light_PopupMenu = 16974044; // 0x10300dc

/** @apiSince 11 */

public static final int Widget_Holo_Light_PopupWindow = 16974019; // 0x10300c3

/** @apiSince 11 */

public static final int Widget_Holo_Light_ProgressBar = 16974020; // 0x10300c4

/** @apiSince 11 */

public static final int Widget_Holo_Light_ProgressBar_Horizontal = 16974021; // 0x10300c5

/** @apiSince 11 */

public static final int Widget_Holo_Light_ProgressBar_Inverse = 16974025; // 0x10300c9

/** @apiSince 11 */

public static final int Widget_Holo_Light_ProgressBar_Large = 16974024; // 0x10300c8

/** @apiSince 11 */

public static final int Widget_Holo_Light_ProgressBar_Large_Inverse = 16974027; // 0x10300cb

/** @apiSince 11 */

public static final int Widget_Holo_Light_ProgressBar_Small = 16974022; // 0x10300c6

/** @apiSince 11 */

public static final int Widget_Holo_Light_ProgressBar_Small_Inverse = 16974026; // 0x10300ca

/** @apiSince 11 */

public static final int Widget_Holo_Light_ProgressBar_Small_Title = 16974023; // 0x10300c7

/** @apiSince 11 */

public static final int Widget_Holo_Light_RatingBar = 16974029; // 0x10300cd

/** @apiSince 11 */

public static final int Widget_Holo_Light_RatingBar_Indicator = 16974030; // 0x10300ce

/** @apiSince 11 */

public static final int Widget_Holo_Light_RatingBar_Small = 16974031; // 0x10300cf

/** @apiSince 11 */

public static final int Widget_Holo_Light_ScrollView = 16974033; // 0x10300d1

/** @apiSince 11 */

public static final int Widget_Holo_Light_SeekBar = 16974028; // 0x10300cc

/** @apiSince 11 */

public static final int Widget_Holo_Light_Spinner = 16974035; // 0x10300d3

/** @apiSince 11 */

public static final int Widget_Holo_Light_Tab = 16974052; // 0x10300e4

/** @apiSince 11 */

public static final int Widget_Holo_Light_TabWidget = 16974037; // 0x10300d5

/** @apiSince 11 */

public static final int Widget_Holo_Light_TextView = 16974010; // 0x10300ba

/** @apiSince 11 */

public static final int Widget_Holo_Light_TextView_SpinnerItem = 16974042; // 0x10300da

/** @apiSince 11 */

public static final int Widget_Holo_Light_WebTextView = 16974038; // 0x10300d6

/** @apiSince 11 */

public static final int Widget_Holo_Light_WebView = 16974039; // 0x10300d7

/** @apiSince 11 */

public static final int Widget_Holo_ListPopupWindow = 16973997; // 0x10300ad

/** @apiSince 11 */

public static final int Widget_Holo_ListView = 16973975; // 0x1030097

/** @apiSince 11 */

public static final int Widget_Holo_ListView_DropDown = 16973970; // 0x1030092

/** @apiSince 16 */

public static final int Widget_Holo_MediaRouteButton = 16974293; // 0x10301d5

/** @apiSince 11 */

public static final int Widget_Holo_PopupMenu = 16973998; // 0x10300ae

/** @apiSince 11 */

public static final int Widget_Holo_PopupWindow = 16973976; // 0x1030098

/** @apiSince 11 */

public static final int Widget_Holo_ProgressBar = 16973977; // 0x1030099

/** @apiSince 11 */

public static final int Widget_Holo_ProgressBar_Horizontal = 16973978; // 0x103009a

/** @apiSince 11 */

public static final int Widget_Holo_ProgressBar_Large = 16973981; // 0x103009d

/** @apiSince 11 */

public static final int Widget_Holo_ProgressBar_Small = 16973979; // 0x103009b

/** @apiSince 11 */

public static final int Widget_Holo_ProgressBar_Small_Title = 16973980; // 0x103009c

/** @apiSince 11 */

public static final int Widget_Holo_RatingBar = 16973983; // 0x103009f

/** @apiSince 11 */

public static final int Widget_Holo_RatingBar_Indicator = 16973984; // 0x10300a0

/** @apiSince 11 */

public static final int Widget_Holo_RatingBar_Small = 16973985; // 0x10300a1

/** @apiSince 11 */

public static final int Widget_Holo_ScrollView = 16973987; // 0x10300a3

/** @apiSince 11 */

public static final int Widget_Holo_SeekBar = 16973982; // 0x103009e

/** @apiSince 11 */

public static final int Widget_Holo_Spinner = 16973989; // 0x10300a5

/** @apiSince 11 */

public static final int Widget_Holo_Tab = 16974051; // 0x10300e3

/** @apiSince 11 */

public static final int Widget_Holo_TabWidget = 16973991; // 0x10300a7

/** @apiSince 11 */

public static final int Widget_Holo_TextView = 16973967; // 0x103008f

/** @apiSince 11 */

public static final int Widget_Holo_TextView_SpinnerItem = 16973996; // 0x10300ac

/** @apiSince 11 */

public static final int Widget_Holo_WebTextView = 16973992; // 0x10300a8

/** @apiSince 11 */

public static final int Widget_Holo_WebView = 16973993; // 0x10300a9

/** @apiSince 1 */

public static final int Widget_ImageButton = 16973862; // 0x1030026

/** @apiSince 1 */

public static final int Widget_ImageWell = 16973861; // 0x1030025

/**
 * {@deprecated Use Copy this definition into your own application project.}
 * @apiSince 3
 * @deprecatedSince 29
 */

@Deprecated public static final int Widget_KeyboardView = 16973911; // 0x1030057

/** @apiSince 11 */

public static final int Widget_ListPopupWindow = 16973957; // 0x1030085

/** @apiSince 1 */

public static final int Widget_ListView = 16973870; // 0x103002e

/** @apiSince 1 */

public static final int Widget_ListView_DropDown = 16973872; // 0x1030030

/** @apiSince 1 */

public static final int Widget_ListView_Menu = 16973873; // 0x1030031

/** @apiSince 1 */

public static final int Widget_ListView_White = 16973871; // 0x103002f

/** @apiSince 21 */

public static final int Widget_Material = 16974413; // 0x103024d

/** @apiSince 21 */

public static final int Widget_Material_ActionBar = 16974414; // 0x103024e

/** @apiSince 21 */

public static final int Widget_Material_ActionBar_Solid = 16974415; // 0x103024f

/** @apiSince 21 */

public static final int Widget_Material_ActionBar_TabBar = 16974416; // 0x1030250

/** @apiSince 21 */

public static final int Widget_Material_ActionBar_TabText = 16974417; // 0x1030251

/** @apiSince 21 */

public static final int Widget_Material_ActionBar_TabView = 16974418; // 0x1030252

/** @apiSince 21 */

public static final int Widget_Material_ActionButton = 16974419; // 0x1030253

/** @apiSince 21 */

public static final int Widget_Material_ActionButton_CloseMode = 16974420; // 0x1030254

/** @apiSince 21 */

public static final int Widget_Material_ActionButton_Overflow = 16974421; // 0x1030255

/** @apiSince 21 */

public static final int Widget_Material_ActionMode = 16974422; // 0x1030256

/** @apiSince 21 */

public static final int Widget_Material_AutoCompleteTextView = 16974423; // 0x1030257

/**
 * Bordered ink button
 * @apiSince 21
 */

public static final int Widget_Material_Button = 16974424; // 0x1030258

/** @apiSince 21 */

public static final int Widget_Material_ButtonBar = 16974431; // 0x103025f

/** @apiSince 21 */

public static final int Widget_Material_ButtonBar_AlertDialog = 16974432; // 0x1030260

/**
 * Borderless ink button
 * @apiSince 21
 */

public static final int Widget_Material_Button_Borderless = 16974425; // 0x1030259

/**
 * Colored borderless ink button
 * @apiSince 21
 */

public static final int Widget_Material_Button_Borderless_Colored = 16974426; // 0x103025a

/**
 * Small borderless ink button
 * @apiSince 21
 */

public static final int Widget_Material_Button_Borderless_Small = 16974427; // 0x103025b

/**
 * Colored bordered ink button
 * @apiSince 23
 */

public static final int Widget_Material_Button_Colored = 16974547; // 0x10302d3

/** @apiSince 21 */

public static final int Widget_Material_Button_Inset = 16974428; // 0x103025c

/**
 * Small bordered ink button
 * @apiSince 21
 */

public static final int Widget_Material_Button_Small = 16974429; // 0x103025d

/** @apiSince 21 */

public static final int Widget_Material_Button_Toggle = 16974430; // 0x103025e

/** @apiSince 21 */

public static final int Widget_Material_CalendarView = 16974433; // 0x1030261

/** @apiSince 21 */

public static final int Widget_Material_CheckedTextView = 16974434; // 0x1030262

/** @apiSince 21 */

public static final int Widget_Material_CompoundButton_CheckBox = 16974435; // 0x1030263

/** @apiSince 21 */

public static final int Widget_Material_CompoundButton_RadioButton = 16974436; // 0x1030264

/** @apiSince 21 */

public static final int Widget_Material_CompoundButton_Star = 16974437; // 0x1030265

/** @apiSince 24 */

public static final int Widget_Material_CompoundButton_Switch = 16974554; // 0x10302da

/** @apiSince 21 */

public static final int Widget_Material_DatePicker = 16974438; // 0x1030266

/** @apiSince 21 */

public static final int Widget_Material_DropDownItem = 16974439; // 0x1030267

/** @apiSince 21 */

public static final int Widget_Material_DropDownItem_Spinner = 16974440; // 0x1030268

/** @apiSince 21 */

public static final int Widget_Material_EditText = 16974441; // 0x1030269

/** @apiSince 21 */

public static final int Widget_Material_ExpandableListView = 16974442; // 0x103026a

/** @apiSince 21 */

public static final int Widget_Material_FastScroll = 16974443; // 0x103026b

/** @apiSince 21 */

public static final int Widget_Material_GridView = 16974444; // 0x103026c

/** @apiSince 21 */

public static final int Widget_Material_HorizontalScrollView = 16974445; // 0x103026d

/** @apiSince 21 */

public static final int Widget_Material_ImageButton = 16974446; // 0x103026e

/**
 * Light widget styles
 * @apiSince 21
 */

public static final int Widget_Material_Light = 16974478; // 0x103028e

/** @apiSince 21 */

public static final int Widget_Material_Light_ActionBar = 16974479; // 0x103028f

/** @apiSince 21 */

public static final int Widget_Material_Light_ActionBar_Solid = 16974480; // 0x1030290

/** @apiSince 21 */

public static final int Widget_Material_Light_ActionBar_TabBar = 16974481; // 0x1030291

/** @apiSince 21 */

public static final int Widget_Material_Light_ActionBar_TabText = 16974482; // 0x1030292

/** @apiSince 21 */

public static final int Widget_Material_Light_ActionBar_TabView = 16974483; // 0x1030293

/** @apiSince 21 */

public static final int Widget_Material_Light_ActionButton = 16974484; // 0x1030294

/** @apiSince 21 */

public static final int Widget_Material_Light_ActionButton_CloseMode = 16974485; // 0x1030295

/** @apiSince 21 */

public static final int Widget_Material_Light_ActionButton_Overflow = 16974486; // 0x1030296

/** @apiSince 21 */

public static final int Widget_Material_Light_ActionMode = 16974487; // 0x1030297

/** @apiSince 21 */

public static final int Widget_Material_Light_AutoCompleteTextView = 16974488; // 0x1030298

/** @apiSince 21 */

public static final int Widget_Material_Light_Button = 16974489; // 0x1030299

/** @apiSince 21 */

public static final int Widget_Material_Light_ButtonBar = 16974496; // 0x10302a0

/** @apiSince 21 */

public static final int Widget_Material_Light_ButtonBar_AlertDialog = 16974497; // 0x10302a1

/** @apiSince 21 */

public static final int Widget_Material_Light_Button_Borderless = 16974490; // 0x103029a

/** @apiSince 21 */

public static final int Widget_Material_Light_Button_Borderless_Colored = 16974491; // 0x103029b

/** @apiSince 21 */

public static final int Widget_Material_Light_Button_Borderless_Small = 16974492; // 0x103029c

/** @apiSince 21 */

public static final int Widget_Material_Light_Button_Inset = 16974493; // 0x103029d

/** @apiSince 21 */

public static final int Widget_Material_Light_Button_Small = 16974494; // 0x103029e

/** @apiSince 21 */

public static final int Widget_Material_Light_Button_Toggle = 16974495; // 0x103029f

/** @apiSince 21 */

public static final int Widget_Material_Light_CalendarView = 16974498; // 0x10302a2

/** @apiSince 21 */

public static final int Widget_Material_Light_CheckedTextView = 16974499; // 0x10302a3

/** @apiSince 21 */

public static final int Widget_Material_Light_CompoundButton_CheckBox = 16974500; // 0x10302a4

/** @apiSince 21 */

public static final int Widget_Material_Light_CompoundButton_RadioButton = 16974501; // 0x10302a5

/** @apiSince 21 */

public static final int Widget_Material_Light_CompoundButton_Star = 16974502; // 0x10302a6

/** @apiSince 24 */

public static final int Widget_Material_Light_CompoundButton_Switch = 16974555; // 0x10302db

/** @apiSince 21 */

public static final int Widget_Material_Light_DatePicker = 16974503; // 0x10302a7

/** @apiSince 21 */

public static final int Widget_Material_Light_DropDownItem = 16974504; // 0x10302a8

/** @apiSince 21 */

public static final int Widget_Material_Light_DropDownItem_Spinner = 16974505; // 0x10302a9

/** @apiSince 21 */

public static final int Widget_Material_Light_EditText = 16974506; // 0x10302aa

/** @apiSince 21 */

public static final int Widget_Material_Light_ExpandableListView = 16974507; // 0x10302ab

/** @apiSince 21 */

public static final int Widget_Material_Light_FastScroll = 16974508; // 0x10302ac

/** @apiSince 21 */

public static final int Widget_Material_Light_GridView = 16974509; // 0x10302ad

/** @apiSince 21 */

public static final int Widget_Material_Light_HorizontalScrollView = 16974510; // 0x10302ae

/** @apiSince 21 */

public static final int Widget_Material_Light_ImageButton = 16974511; // 0x10302af

/** @apiSince 21 */

public static final int Widget_Material_Light_ListPopupWindow = 16974512; // 0x10302b0

/** @apiSince 21 */

public static final int Widget_Material_Light_ListView = 16974513; // 0x10302b1

/** @apiSince 21 */

public static final int Widget_Material_Light_ListView_DropDown = 16974514; // 0x10302b2

/** @apiSince 21 */

public static final int Widget_Material_Light_MediaRouteButton = 16974515; // 0x10302b3

/** @apiSince 24 */

public static final int Widget_Material_Light_NumberPicker = 16974557; // 0x10302dd

/** @apiSince 21 */

public static final int Widget_Material_Light_PopupMenu = 16974516; // 0x10302b4

/** @apiSince 21 */

public static final int Widget_Material_Light_PopupMenu_Overflow = 16974517; // 0x10302b5

/** @apiSince 21 */

public static final int Widget_Material_Light_PopupWindow = 16974518; // 0x10302b6

/** @apiSince 21 */

public static final int Widget_Material_Light_ProgressBar = 16974519; // 0x10302b7

/** @apiSince 21 */

public static final int Widget_Material_Light_ProgressBar_Horizontal = 16974520; // 0x10302b8

/** @apiSince 21 */

public static final int Widget_Material_Light_ProgressBar_Inverse = 16974521; // 0x10302b9

/** @apiSince 21 */

public static final int Widget_Material_Light_ProgressBar_Large = 16974522; // 0x10302ba

/** @apiSince 21 */

public static final int Widget_Material_Light_ProgressBar_Large_Inverse = 16974523; // 0x10302bb

/** @apiSince 21 */

public static final int Widget_Material_Light_ProgressBar_Small = 16974524; // 0x10302bc

/** @apiSince 21 */

public static final int Widget_Material_Light_ProgressBar_Small_Inverse = 16974525; // 0x10302bd

/** @apiSince 21 */

public static final int Widget_Material_Light_ProgressBar_Small_Title = 16974526; // 0x10302be

/** @apiSince 21 */

public static final int Widget_Material_Light_RatingBar = 16974527; // 0x10302bf

/** @apiSince 21 */

public static final int Widget_Material_Light_RatingBar_Indicator = 16974528; // 0x10302c0

/** @apiSince 21 */

public static final int Widget_Material_Light_RatingBar_Small = 16974529; // 0x10302c1

/** @apiSince 21 */

public static final int Widget_Material_Light_ScrollView = 16974530; // 0x10302c2

/** @apiSince 21 */

public static final int Widget_Material_Light_SearchView = 16974531; // 0x10302c3

/** @apiSince 21 */

public static final int Widget_Material_Light_SeekBar = 16974532; // 0x10302c4

/** @apiSince 21 */

public static final int Widget_Material_Light_SegmentedButton = 16974533; // 0x10302c5

/** @apiSince 21 */

public static final int Widget_Material_Light_Spinner = 16974535; // 0x10302c7

/** @apiSince 21 */

public static final int Widget_Material_Light_Spinner_Underlined = 16974536; // 0x10302c8

/** @apiSince 21 */

public static final int Widget_Material_Light_StackView = 16974534; // 0x10302c6

/** @apiSince 21 */

public static final int Widget_Material_Light_Tab = 16974537; // 0x10302c9

/** @apiSince 21 */

public static final int Widget_Material_Light_TabWidget = 16974538; // 0x10302ca

/** @apiSince 21 */

public static final int Widget_Material_Light_TextView = 16974539; // 0x10302cb

/** @apiSince 21 */

public static final int Widget_Material_Light_TextView_SpinnerItem = 16974540; // 0x10302cc

/** @apiSince 21 */

public static final int Widget_Material_Light_TimePicker = 16974541; // 0x10302cd

/** @apiSince 21 */

public static final int Widget_Material_Light_WebTextView = 16974542; // 0x10302ce

/** @apiSince 21 */

public static final int Widget_Material_Light_WebView = 16974543; // 0x10302cf

/** @apiSince 21 */

public static final int Widget_Material_ListPopupWindow = 16974447; // 0x103026f

/** @apiSince 21 */

public static final int Widget_Material_ListView = 16974448; // 0x1030270

/** @apiSince 21 */

public static final int Widget_Material_ListView_DropDown = 16974449; // 0x1030271

/** @apiSince 21 */

public static final int Widget_Material_MediaRouteButton = 16974450; // 0x1030272

/** @apiSince 24 */

public static final int Widget_Material_NumberPicker = 16974556; // 0x10302dc

/** @apiSince 21 */

public static final int Widget_Material_PopupMenu = 16974451; // 0x1030273

/** @apiSince 21 */

public static final int Widget_Material_PopupMenu_Overflow = 16974452; // 0x1030274

/** @apiSince 21 */

public static final int Widget_Material_PopupWindow = 16974453; // 0x1030275

/** @apiSince 21 */

public static final int Widget_Material_ProgressBar = 16974454; // 0x1030276

/** @apiSince 21 */

public static final int Widget_Material_ProgressBar_Horizontal = 16974455; // 0x1030277

/** @apiSince 21 */

public static final int Widget_Material_ProgressBar_Large = 16974456; // 0x1030278

/** @apiSince 21 */

public static final int Widget_Material_ProgressBar_Small = 16974457; // 0x1030279

/** @apiSince 21 */

public static final int Widget_Material_ProgressBar_Small_Title = 16974458; // 0x103027a

/** @apiSince 21 */

public static final int Widget_Material_RatingBar = 16974459; // 0x103027b

/** @apiSince 21 */

public static final int Widget_Material_RatingBar_Indicator = 16974460; // 0x103027c

/** @apiSince 21 */

public static final int Widget_Material_RatingBar_Small = 16974461; // 0x103027d

/** @apiSince 21 */

public static final int Widget_Material_ScrollView = 16974462; // 0x103027e

/** @apiSince 21 */

public static final int Widget_Material_SearchView = 16974463; // 0x103027f

/** @apiSince 21 */

public static final int Widget_Material_SeekBar = 16974464; // 0x1030280

/**
 * A seek bar with tick marks at each progress value.
 * @apiSince 24
 */

public static final int Widget_Material_SeekBar_Discrete = 16974553; // 0x10302d9

/** @apiSince 21 */

public static final int Widget_Material_SegmentedButton = 16974465; // 0x1030281

/** @apiSince 21 */

public static final int Widget_Material_Spinner = 16974467; // 0x1030283

/** @apiSince 21 */

public static final int Widget_Material_Spinner_Underlined = 16974468; // 0x1030284

/** @apiSince 21 */

public static final int Widget_Material_StackView = 16974466; // 0x1030282

/** @apiSince 21 */

public static final int Widget_Material_Tab = 16974469; // 0x1030285

/** @apiSince 21 */

public static final int Widget_Material_TabWidget = 16974470; // 0x1030286

/** @apiSince 21 */

public static final int Widget_Material_TextView = 16974471; // 0x1030287

/** @apiSince 21 */

public static final int Widget_Material_TextView_SpinnerItem = 16974472; // 0x1030288

/** @apiSince 21 */

public static final int Widget_Material_TimePicker = 16974473; // 0x1030289

/** @apiSince 21 */

public static final int Widget_Material_Toolbar = 16974474; // 0x103028a

/** @apiSince 21 */

public static final int Widget_Material_Toolbar_Button_Navigation = 16974475; // 0x103028b

/** @apiSince 21 */

public static final int Widget_Material_WebTextView = 16974476; // 0x103028c

/** @apiSince 21 */

public static final int Widget_Material_WebView = 16974477; // 0x103028d

/** @apiSince 11 */

public static final int Widget_PopupMenu = 16973958; // 0x1030086

/** @apiSince 1 */

public static final int Widget_PopupWindow = 16973878; // 0x1030036

/** @apiSince 1 */

public static final int Widget_ProgressBar = 16973852; // 0x103001c

/** @apiSince 1 */

public static final int Widget_ProgressBar_Horizontal = 16973855; // 0x103001f

/** @apiSince 4 */

public static final int Widget_ProgressBar_Inverse = 16973915; // 0x103005b

/** @apiSince 1 */

public static final int Widget_ProgressBar_Large = 16973853; // 0x103001d

/** @apiSince 4 */

public static final int Widget_ProgressBar_Large_Inverse = 16973916; // 0x103005c

/** @apiSince 1 */

public static final int Widget_ProgressBar_Small = 16973854; // 0x103001e

/** @apiSince 4 */

public static final int Widget_ProgressBar_Small_Inverse = 16973917; // 0x103005d

/** @apiSince 1 */

public static final int Widget_RatingBar = 16973857; // 0x1030021

/** @apiSince 1 */

public static final int Widget_ScrollView = 16973869; // 0x103002d

/** @apiSince 1 */

public static final int Widget_SeekBar = 16973856; // 0x1030020

/** @apiSince 1 */

public static final int Widget_Spinner = 16973864; // 0x1030028

/** @apiSince 11 */

public static final int Widget_Spinner_DropDown = 16973955; // 0x1030083

/** @apiSince 21 */

public static final int Widget_StackView = 16974310; // 0x10301e6

/** @apiSince 1 */

public static final int Widget_TabWidget = 16973876; // 0x1030034

/** @apiSince 1 */

public static final int Widget_TextView = 16973858; // 0x1030022

/** @apiSince 1 */

public static final int Widget_TextView_PopupMenu = 16973865; // 0x1030029

/** @apiSince 1 */

public static final int Widget_TextView_SpinnerItem = 16973866; // 0x103002a

/** @apiSince 21 */

public static final int Widget_Toolbar = 16974311; // 0x10301e7

/** @apiSince 21 */

public static final int Widget_Toolbar_Button_Navigation = 16974312; // 0x10301e8

/** @apiSince 1 */

public static final int Widget_WebView = 16973875; // 0x1030033
}

/**
 * @doconly
 */

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class styleable {

public styleable() { throw new RuntimeException("Stub!"); }

/**
 * Attributes that can be used with a AbsListView.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AbsListView_listSelector android:listSelector}</code></td><td>Drawable used to indicate the currently selected item in the list.</td></tr>
 * <tr><td><code>{@link #AbsListView_drawSelectorOnTop android:drawSelectorOnTop}</code></td><td>When set to true, the selector will be drawn over the selected item.</td></tr>
 * <tr><td><code>{@link #AbsListView_stackFromBottom android:stackFromBottom}</code></td><td>Used by ListView and GridView to stack their content from the bottom.</td></tr>
 * <tr><td><code>{@link #AbsListView_scrollingCache android:scrollingCache}</code></td><td>When set to true, the list uses a drawing cache during scrolling.</td></tr>
 * <tr><td><code>{@link #AbsListView_textFilterEnabled android:textFilterEnabled}</code></td><td>When set to true, the list will filter results as the user types.</td></tr>
 * <tr><td><code>{@link #AbsListView_transcriptMode android:transcriptMode}</code></td><td>Sets the transcript mode for the list.</td></tr>
 * <tr><td><code>{@link #AbsListView_cacheColorHint android:cacheColorHint}</code></td><td>Indicates that this list will always be drawn on top of solid, single-color
 * opaque background.</td></tr>
 * <tr><td><code>{@link #AbsListView_choiceMode android:choiceMode}</code></td><td>Defines the choice behavior for the view.</td></tr>
 * <tr><td><code>{@link #AbsListView_fastScrollEnabled android:fastScrollEnabled}</code></td><td>Enables the fast scroll thumb that can be dragged to quickly scroll through
 * the list.</td></tr>
 * <tr><td><code>{@link #AbsListView_smoothScrollbar android:smoothScrollbar}</code></td><td>When set to true, the list will use a more refined calculation
 * method based on the pixels height of the items visible on screen.</td></tr>
 * <tr><td><code>{@link #AbsListView_fastScrollAlwaysVisible android:fastScrollAlwaysVisible}</code></td><td>When set to true, the list will always show the fast scroll interface.</td></tr>
 * <tr><td><code>{@link #AbsListView_fastScrollStyle android:fastScrollStyle}</code></td><td>Specifies the style of the fast scroll decorations.</td></tr>
 * </table>
 * @see #AbsListView_listSelector
 * @see #AbsListView_drawSelectorOnTop
 * @see #AbsListView_stackFromBottom
 * @see #AbsListView_scrollingCache
 * @see #AbsListView_textFilterEnabled
 * @see #AbsListView_transcriptMode
 * @see #AbsListView_cacheColorHint
 * @see #AbsListView_choiceMode
 * @see #AbsListView_fastScrollEnabled
 * @see #AbsListView_smoothScrollbar
 * @see #AbsListView_fastScrollAlwaysVisible
 * @see #AbsListView_fastScrollStyle
 */

public static final int[] AbsListView;
static { AbsListView = new int[0]; }

/**
 * <p>
 * @attr description
 * Indicates that this list will always be drawn on top of solid, single-color
 * opaque background. This allows the list to optimize drawing.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:cacheColorHint
 */

public static final int AbsListView_cacheColorHint = 6; // 0x6

/**
 * <p>
 * @attr description
 * Defines the choice behavior for the view. By default, lists do not have
 * any choice behavior. By setting the choiceMode to singleChoice, the list
 * allows up to one item to be in a chosen state. By setting the choiceMode to
 * multipleChoice, the list allows any number of items to be chosen.
 * Finally, by setting the choiceMode to multipleChoiceModal the list allows
 * any number of items to be chosen in a special selection mode.
 * The application will supply a
 * {@link android.widget.AbsListView.MultiChoiceModeListener} using
 * {@link android.widget.AbsListView#setMultiChoiceModeListener} to control the
 * selection mode. This uses the {@link android.view.ActionMode} API.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>multipleChoice</td><td>2</td><td>The list allows multiple choices.</td></tr>
 * <tr><td>multipleChoiceModal</td><td>3</td><td>The list allows multiple choices in a custom selection mode.</td></tr>
 * <tr><td>none</td><td>0</td><td>Normal list that does not indicate choices.</td></tr>
 * <tr><td>singleChoice</td><td>1</td><td>The list allows up to one choice.</td></tr>
 * </table>
 *
 * @attr name android:choiceMode
 */

public static final int AbsListView_choiceMode = 7; // 0x7

/**
 * <p>
 * @attr description
 * When set to true, the selector will be drawn over the selected item.
 * Otherwise the selector is drawn behind the selected item. The default
 * value is false.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:drawSelectorOnTop
 */

public static final int AbsListView_drawSelectorOnTop = 1; // 0x1

/**
 * <p>
 * @attr description
 * When set to true, the list will always show the fast scroll interface.
 * This setting implies fastScrollEnabled.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:fastScrollAlwaysVisible
 */

public static final int AbsListView_fastScrollAlwaysVisible = 10; // 0xa

/**
 * <p>
 * @attr description
 * Enables the fast scroll thumb that can be dragged to quickly scroll through
 * the list.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:fastScrollEnabled
 */

public static final int AbsListView_fastScrollEnabled = 8; // 0x8

/**
 * <p>
 * @attr description
 * Specifies the style of the fast scroll decorations.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:fastScrollStyle
 */

public static final int AbsListView_fastScrollStyle = 11; // 0xb

/**
 * <p>
 * @attr description
 * Drawable used to indicate the currently selected item in the list.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:listSelector
 */

public static final int AbsListView_listSelector = 0; // 0x0

/**
 * <p>
 * @attr description
 * When set to true, the list uses a drawing cache during scrolling.
 * This makes the rendering faster but uses more memory. The default
 * value is true.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:scrollingCache
 */

public static final int AbsListView_scrollingCache = 3; // 0x3

/**
 * <p>
 * @attr description
 * When set to true, the list will use a more refined calculation
 * method based on the pixels height of the items visible on screen. This
 * property is set to true by default but should be set to false if your adapter
 * will display items of varying heights. When this property is set to true and
 * your adapter displays items of varying heights, the scrollbar thumb will
 * change size as the user scrolls through the list. When set to false, the list
 * will use only the number of items in the adapter and the number of items visible
 * on screen to determine the scrollbar's properties.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:smoothScrollbar
 */

public static final int AbsListView_smoothScrollbar = 9; // 0x9

/**
 * <p>
 * @attr description
 * Used by ListView and GridView to stack their content from the bottom.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:stackFromBottom
 */

public static final int AbsListView_stackFromBottom = 2; // 0x2

/**
 * <p>
 * @attr description
 * When set to true, the list will filter results as the user types. The
 * List's adapter must support the Filterable interface for this to work.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:textFilterEnabled
 */

public static final int AbsListView_textFilterEnabled = 4; // 0x4

/**
 * <p>
 * @attr description
 * Sets the transcript mode for the list. In transcript mode, the list
 * scrolls to the bottom to make new items visible when they are added.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>alwaysScroll</td><td>2</td><td>The list will automatically scroll to the bottom, no matter what items
 * are currently visible.</td></tr>
 * <tr><td>disabled</td><td>0</td><td>Disables transcript mode. This is the default value.</td></tr>
 * <tr><td>normal</td><td>1</td><td>The list will automatically scroll to the bottom when
 * a data set change notification is received and only if the last item is
 * already visible on screen.</td></tr>
 * </table>
 *
 * @attr name android:transcriptMode
 */

public static final int AbsListView_transcriptMode = 5; // 0x5

/**
 * Attributes that can be used with a AbsSpinner.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AbsSpinner_entries android:entries}</code></td><td>Reference to an array resource that will populate a list/adapter.</td></tr>
 * </table>
 * @see #AbsSpinner_entries
 */

public static final int[] AbsSpinner;
static { AbsSpinner = new int[0]; }

/**
 * <p>
 * @attr description
 * Reference to an array resource that will populate the Spinner.  For static content,
 * this is simpler than populating the Spinner programmatically.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:entries
 */

public static final int AbsSpinner_entries = 0; // 0x0

/**
 * Attributes that can be used with a AbsoluteLayout_Layout.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AbsoluteLayout_Layout_layout_x android:layout_x}</code></td><td></td></tr>
 * <tr><td><code>{@link #AbsoluteLayout_Layout_layout_y android:layout_y}</code></td><td></td></tr>
 * </table>
 * @see #AbsoluteLayout_Layout_layout_x
 * @see #AbsoluteLayout_Layout_layout_y
 */

public static final int[] AbsoluteLayout_Layout;
static { AbsoluteLayout_Layout = new int[0]; }

/**
 * <p>This symbol is the offset where the {@link android.R.attr#layout_x}
 * attribute's value can be found in the {@link #AbsoluteLayout_Layout} array.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:layout_x
 */

public static final int AbsoluteLayout_Layout_layout_x = 0; // 0x0

/**
 * <p>This symbol is the offset where the {@link android.R.attr#layout_y}
 * attribute's value can be found in the {@link #AbsoluteLayout_Layout} array.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:layout_y
 */

public static final int AbsoluteLayout_Layout_layout_y = 1; // 0x1

/**
 * Attributes that can be used with a AccelerateInterpolator.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AccelerateInterpolator_factor android:factor}</code></td><td>This is the amount of deceleration to add when easing in.</td></tr>
 * </table>
 * @see #AccelerateInterpolator_factor
 */

public static final int[] AccelerateInterpolator;
static { AccelerateInterpolator = new int[0]; }

/**
 * <p>
 * @attr description
 * This is the amount of deceleration to add when easing in.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:factor
 */

public static final int AccelerateInterpolator_factor = 0; // 0x0

/**
 * Use <code>accessibility-service</code> as the root tag of the XML resource that
 * describes an {@link android.accessibilityservice.AccessibilityService} service,
 * which is referenced from its
 * {@link android.accessibilityservice.AccessibilityService#SERVICE_META_DATA}
 * meta-data entry.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AccessibilityService_description android:description}</code></td><td>Descriptive text for the associated data.</td></tr>
 * <tr><td><code>{@link #AccessibilityService_summary android:summary}</code></td><td>The summary for the item.</td></tr>
 * <tr><td><code>{@link #AccessibilityService_settingsActivity android:settingsActivity}</code></td><td>Component name of an activity that allows the user to modify
 * the settings for this service.</td></tr>
 * <tr><td><code>{@link #AccessibilityService_accessibilityEventTypes android:accessibilityEventTypes}</code></td><td>The event types this service would like to receive as specified in
 * {@link android.view.accessibility.AccessibilityEvent}.</td></tr>
 * <tr><td><code>{@link #AccessibilityService_packageNames android:packageNames}</code></td><td>Comma separated package names from which this service would like to receive events (leave out for all packages).</td></tr>
 * <tr><td><code>{@link #AccessibilityService_accessibilityFeedbackType android:accessibilityFeedbackType}</code></td><td>The feedback types this service provides as specified in
 * {@link android.accessibilityservice.AccessibilityServiceInfo}.</td></tr>
 * <tr><td><code>{@link #AccessibilityService_notificationTimeout android:notificationTimeout}</code></td><td>The minimal period in milliseconds between two accessibility events of the same type
 * are sent to this service.</td></tr>
 * <tr><td><code>{@link #AccessibilityService_accessibilityFlags android:accessibilityFlags}</code></td><td>Additional flags as specified in
 * {@link android.accessibilityservice.AccessibilityServiceInfo}.</td></tr>
 * <tr><td><code>{@link #AccessibilityService_canRetrieveWindowContent android:canRetrieveWindowContent}</code></td><td>Attribute whether the accessibility service wants to be able to retrieve the
 * active window content.</td></tr>
 * <tr><td><code>{@link #AccessibilityService_canRequestTouchExplorationMode android:canRequestTouchExplorationMode}</code></td><td>Attribute whether the accessibility service wants to be able to request touch
 * exploration mode in which touched items are spoken aloud and the UI can be
 * explored via gestures.</td></tr>
 * <tr><td><code>{@link #AccessibilityService_canRequestEnhancedWebAccessibility android:canRequestEnhancedWebAccessibility}</code></td><td>Attribute whether the accessibility service wants to be able to request enhanced
 * web accessibility enhancements.</td></tr>
 * <tr><td><code>{@link #AccessibilityService_canRequestFilterKeyEvents android:canRequestFilterKeyEvents}</code></td><td>Attribute whether the accessibility service wants to be able to request to
 * filter key events.</td></tr>
 * <tr><td><code>{@link #AccessibilityService_canControlMagnification android:canControlMagnification}</code></td><td>Attribute whether the accessibility service wants to be able to control
 * display magnification.</td></tr>
 * <tr><td><code>{@link #AccessibilityService_canPerformGestures android:canPerformGestures}</code></td><td>Attribute whether the accessibility service wants to be able to perform gestures.</td></tr>
 * <tr><td><code>{@link #AccessibilityService_canRequestFingerprintGestures android:canRequestFingerprintGestures}</code></td><td>Attribute whether the accessibility service wants to be able to capture gestures from
 * the fingerprint sensor.</td></tr>
 * <tr><td><code>{@link #AccessibilityService_nonInteractiveUiTimeout android:nonInteractiveUiTimeout}</code></td><td>A recommended timeout in milliseconds used in
 * {@link android.view.accessibility.AccessibilityManager#getRecommendedTimeoutMillis(int, int)
 * android.view.accessibility.AccessibilityManager.getRecommendedTimeoutMillis(int, int)}
 * to return a suitable value for UIs that do not include interactive controls.</td></tr>
 * <tr><td><code>{@link #AccessibilityService_interactiveUiTimeout android:interactiveUiTimeout}</code></td><td>A recommended timeout in milliseconds used in
 * {@link android.view.accessibility.AccessibilityManager#getRecommendedTimeoutMillis(int, int)
 * android.view.accessibility.AccessibilityManager.getRecommendedTimeoutMillis(int, int)}
 * to return a suitable value for interactive controls.</td></tr>
 * </table>
 * @see #AccessibilityService_description
 * @see #AccessibilityService_summary
 * @see #AccessibilityService_settingsActivity
 * @see #AccessibilityService_accessibilityEventTypes
 * @see #AccessibilityService_packageNames
 * @see #AccessibilityService_accessibilityFeedbackType
 * @see #AccessibilityService_notificationTimeout
 * @see #AccessibilityService_accessibilityFlags
 * @see #AccessibilityService_canRetrieveWindowContent
 * @see #AccessibilityService_canRequestTouchExplorationMode
 * @see #AccessibilityService_canRequestEnhancedWebAccessibility
 * @see #AccessibilityService_canRequestFilterKeyEvents
 * @see #AccessibilityService_canControlMagnification
 * @see #AccessibilityService_canPerformGestures
 * @see #AccessibilityService_canRequestFingerprintGestures
 * @see #AccessibilityService_nonInteractiveUiTimeout
 * @see #AccessibilityService_interactiveUiTimeout
 */

public static final int[] AccessibilityService;
static { AccessibilityService = new int[0]; }

/**
 * <p>
 * @attr description
 * The event types this service would like to receive as specified in
 * {@link android.view.accessibility.AccessibilityEvent}. This setting
 * can be changed at runtime by calling
 * {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
 * android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>typeAllMask</td><td>ffffffff</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPES_ALL_MASK} i.e. all events.</td></tr>
 * <tr><td>typeAnnouncement</td><td>4000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_ANNOUNCEMENT} events.</td></tr>
 * <tr><td>typeAssistReadingContext</td><td>1000000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_ASSIST_READING_CONTEXT} events.</td></tr>
 * <tr><td>typeContextClicked</td><td>800000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_CONTEXT_CLICKED} events.</td></tr>
 * <tr><td>typeGestureDetectionEnd</td><td>80000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_GESTURE_DETECTION_END} events.</td></tr>
 * <tr><td>typeGestureDetectionStart</td><td>40000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_GESTURE_DETECTION_START} events.</td></tr>
 * <tr><td>typeNotificationStateChanged</td><td>40</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_NOTIFICATION_STATE_CHANGED} events.</td></tr>
 * <tr><td>typeTouchExplorationGestureEnd</td><td>400</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_TOUCH_EXPLORATION_GESTURE_END} events.</td></tr>
 * <tr><td>typeTouchExplorationGestureStart</td><td>200</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_TOUCH_EXPLORATION_GESTURE_START} events.</td></tr>
 * <tr><td>typeTouchInteractionEnd</td><td>200000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_TOUCH_INTERACTION_END} events.</td></tr>
 * <tr><td>typeTouchInteractionStart</td><td>100000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_TOUCH_INTERACTION_START} events.</td></tr>
 * <tr><td>typeViewAccessibilityFocusCleared</td><td>10000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED} events.</td></tr>
 * <tr><td>typeViewAccessibilityFocused</td><td>8000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_ACCESSIBILITY_FOCUSED} events.</td></tr>
 * <tr><td>typeViewClicked</td><td>1</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_CLICKED} events.</td></tr>
 * <tr><td>typeViewFocused</td><td>8</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_FOCUSED} events.</td></tr>
 * <tr><td>typeViewHoverEnter</td><td>80</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_HOVER_ENTER} events.</td></tr>
 * <tr><td>typeViewHoverExit</td><td>100</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_HOVER_EXIT} events.</td></tr>
 * <tr><td>typeViewLongClicked</td><td>2</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_LONG_CLICKED} events.</td></tr>
 * <tr><td>typeViewScrolled</td><td>1000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_SCROLLED} events.</td></tr>
 * <tr><td>typeViewSelected</td><td>4</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_SELECTED} events.</td></tr>
 * <tr><td>typeViewTextChanged</td><td>10</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_TEXT_CHANGED} events.</td></tr>
 * <tr><td>typeViewTextSelectionChanged</td><td>2000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_TEXT_SELECTION_CHANGED} events.</td></tr>
 * <tr><td>typeViewTextTraversedAtMovementGranularity</td><td>20000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY} events.</td></tr>
 * <tr><td>typeWindowContentChanged</td><td>800</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_WINDOW_CONTENT_CHANGED} events.</td></tr>
 * <tr><td>typeWindowStateChanged</td><td>20</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_WINDOW_STATE_CHANGED} events.</td></tr>
 * <tr><td>typeWindowsChanged</td><td>400000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_WINDOWS_CHANGED} events.</td></tr>
 * </table>
 *
 * @attr name android:accessibilityEventTypes
 */

public static final int AccessibilityService_accessibilityEventTypes = 3; // 0x3

/**
 * <p>
 * @attr description
 * The feedback types this service provides as specified in
 * {@link android.accessibilityservice.AccessibilityServiceInfo}. This setting
 * can be changed at runtime by calling
 * {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
 * android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>feedbackAllMask</td><td>ffffffff</td><td>Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_ALL_MASK} feedback.</td></tr>
 * <tr><td>feedbackAudible</td><td>4</td><td>Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_AUDIBLE} feedback.</td></tr>
 * <tr><td>feedbackGeneric</td><td>10</td><td>Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_GENERIC} feedback.</td></tr>
 * <tr><td>feedbackHaptic</td><td>2</td><td>Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_HAPTIC} feedback.</td></tr>
 * <tr><td>feedbackSpoken</td><td>1</td><td>Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_SPOKEN} feedback.</td></tr>
 * <tr><td>feedbackVisual</td><td>8</td><td>Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_VISUAL} feedback.</td></tr>
 * </table>
 *
 * @attr name android:accessibilityFeedbackType
 */

public static final int AccessibilityService_accessibilityFeedbackType = 5; // 0x5

/**
 * <p>
 * @attr description
 * Additional flags as specified in
 * {@link android.accessibilityservice.AccessibilityServiceInfo}.
 * This setting can be changed at runtime by calling
 * {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
 * android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>flagDefault</td><td>1</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#DEFAULT}.</td></tr>
 * <tr><td>flagEnableAccessibilityVolume</td><td>80</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_ENABLE_ACCESSIBILITY_VOLUME}.</td></tr>
 * <tr><td>flagIncludeNotImportantViews</td><td>2</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_INCLUDE_NOT_IMPORTANT_VIEWS}.</td></tr>
 * <tr><td>flagReportViewIds</td><td>10</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REPORT_VIEW_IDS}.</td></tr>
 * <tr><td>flagRequestAccessibilityButton</td><td>100</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_ACCESSIBILITY_BUTTON}.</td></tr>
 * <tr><td>flagRequestEnhancedWebAccessibility</td><td>8</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_ENHANCED_WEB_ACCESSIBILITY}.
 * Not used by the framework.</td></tr>
 * <tr><td>flagRequestFilterKeyEvents</td><td>20</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_FILTER_KEY_EVENTS}.</td></tr>
 * <tr><td>flagRequestFingerprintGestures</td><td>200</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_FINGERPRINT_GESTURES}.</td></tr>
 * <tr><td>flagRequestShortcutWarningDialogSpokenFeedback</td><td>400</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_SHORTCUT_WARNING_DIALOG_SPOKEN_FEEDBACK}.</td></tr>
 * <tr><td>flagRequestTouchExplorationMode</td><td>4</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE}.</td></tr>
 * <tr><td>flagRetrieveInteractiveWindows</td><td>40</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_RETRIEVE_INTERACTIVE_WINDOWS}.</td></tr>
 * </table>
 *
 * @attr name android:accessibilityFlags
 */

public static final int AccessibilityService_accessibilityFlags = 7; // 0x7

/**
 * <p>
 * @attr description
 * Attribute whether the accessibility service wants to be able to control
 * display magnification.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:canControlMagnification
 */

public static final int AccessibilityService_canControlMagnification = 12; // 0xc

/**
 * <p>
 * @attr description
 * Attribute whether the accessibility service wants to be able to perform gestures.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:canPerformGestures
 */

public static final int AccessibilityService_canPerformGestures = 13; // 0xd

/**
 * <p>
 * @attr description
 * Attribute whether the accessibility service wants to be able to request enhanced
 * web accessibility enhancements.
 * {@deprecated Not used by the framework}
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:canRequestEnhancedWebAccessibility
 */

@Deprecated public static final int AccessibilityService_canRequestEnhancedWebAccessibility = 10; // 0xa

/**
 * <p>
 * @attr description
 * Attribute whether the accessibility service wants to be able to request to
 * filter key events.
 * <p>
 * Required to allow setting the {@link android.accessibilityservice
 * #AccessibilityServiceInfo#FLAG_REQUEST_FILTER_KEY_EVENTS} flag.
 * </p>
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:canRequestFilterKeyEvents
 */

public static final int AccessibilityService_canRequestFilterKeyEvents = 11; // 0xb

/**
 * <p>
 * @attr description
 * Attribute whether the accessibility service wants to be able to capture gestures from
 * the fingerprint sensor.
 * <p>
 * Required to allow setting the {@link android.accessibilityservice
 * #AccessibilityServiceInfo#FLAG_REQUEST_FINGERPRINT_GESTURES} flag to have any effect.
 * </p>
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:canRequestFingerprintGestures
 */

public static final int AccessibilityService_canRequestFingerprintGestures = 14; // 0xe

/**
 * <p>
 * @attr description
 * Attribute whether the accessibility service wants to be able to request touch
 * exploration mode in which touched items are spoken aloud and the UI can be
 * explored via gestures.
 * <p>
 * Required to allow setting the {@link android.accessibilityservice
 * #AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE} flag.
 * </p>
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:canRequestTouchExplorationMode
 */

public static final int AccessibilityService_canRequestTouchExplorationMode = 9; // 0x9

/**
 * <p>
 * @attr description
 * Attribute whether the accessibility service wants to be able to retrieve the
 * active window content. This setting cannot be changed at runtime.
 * <p>
 * Required to allow setting the {@link android.accessibilityservice
 * #AccessibilityServiceInfo#FLAG_RETRIEVE_INTERACTIVE_WINDOWS} flag.
 * </p>
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:canRetrieveWindowContent
 */

public static final int AccessibilityService_canRetrieveWindowContent = 8; // 0x8

/**
 * <p>
 * @attr description
 * Short description of the accessibility service purpose or behavior.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:description
 */

public static final int AccessibilityService_description = 0; // 0x0

/**
 * <p>
 * @attr description
 * A recommended timeout in milliseconds used in
 * {@link android.view.accessibility.AccessibilityManager#getRecommendedTimeoutMillis(int, int)
 * android.view.accessibility.AccessibilityManager.getRecommendedTimeoutMillis(int, int)}
 * to return a suitable value for interactive controls.
 * This setting can be changed at runtime by calling
 * {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
 * android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:interactiveUiTimeout
 */

public static final int AccessibilityService_interactiveUiTimeout = 16; // 0x10

/**
 * <p>
 * @attr description
 * A recommended timeout in milliseconds used in
 * {@link android.view.accessibility.AccessibilityManager#getRecommendedTimeoutMillis(int, int)
 * android.view.accessibility.AccessibilityManager.getRecommendedTimeoutMillis(int, int)}
 * to return a suitable value for UIs that do not include interactive controls.
 * This setting can be changed at runtime by calling
 * {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
 * android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:nonInteractiveUiTimeout
 */

public static final int AccessibilityService_nonInteractiveUiTimeout = 15; // 0xf

/**
 * <p>
 * @attr description
 * The minimal period in milliseconds between two accessibility events of the same type
 * are sent to this service. This setting can be changed at runtime by calling
 * {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
 * android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:notificationTimeout
 */

public static final int AccessibilityService_notificationTimeout = 6; // 0x6

/**
 * <p>
 * @attr description
 * Comma separated package names from which this service would like to receive events (leave out for all packages).
 * {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
 * android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:packageNames
 */

public static final int AccessibilityService_packageNames = 4; // 0x4

/**
 * <p>
 * @attr description
 * Component name of an activity that allows the user to modify
 * the settings for this service. This setting cannot be changed at runtime.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:settingsActivity
 */

public static final int AccessibilityService_settingsActivity = 2; // 0x2

/**
 * <p>
 * @attr description
 * Brief summary of the accessibility service purpose or behavior.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:summary
 */

public static final int AccessibilityService_summary = 1; // 0x1

/**
 * Use <code>account-authenticator</code> as the root tag of the XML resource that
 * describes an account authenticator.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AccountAuthenticator_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
 * <tr><td><code>{@link #AccountAuthenticator_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AccountAuthenticator_accountType android:accountType}</code></td><td>The account type this authenticator handles.</td></tr>
 * <tr><td><code>{@link #AccountAuthenticator_smallIcon android:smallIcon}</code></td><td>Smaller icon of the authenticator.</td></tr>
 * <tr><td><code>{@link #AccountAuthenticator_accountPreferences android:accountPreferences}</code></td><td>A preferences.xml file for authenticator-specific settings.</td></tr>
 * <tr><td><code>{@link #AccountAuthenticator_customTokens android:customTokens}</code></td><td>Account handles its own token storage and permissions.</td></tr>
 * </table>
 * @see #AccountAuthenticator_label
 * @see #AccountAuthenticator_icon
 * @see #AccountAuthenticator_accountType
 * @see #AccountAuthenticator_smallIcon
 * @see #AccountAuthenticator_accountPreferences
 * @see #AccountAuthenticator_customTokens
 */

public static final int[] AccountAuthenticator;
static { AccountAuthenticator = new int[0]; }

/**
 * <p>
 * @attr description
 * A preferences.xml file for authenticator-specific settings.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:accountPreferences
 */

public static final int AccountAuthenticator_accountPreferences = 4; // 0x4

/**
 * <p>
 * @attr description
 * The account type this authenticator handles.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:accountType
 */

public static final int AccountAuthenticator_accountType = 2; // 0x2

/**
 * <p>
 * @attr description
 * Account handles its own token storage and permissions.
 * Default to false
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:customTokens
 */

public static final int AccountAuthenticator_customTokens = 5; // 0x5

/**
 * <p>
 * @attr description
 * The icon of the authenticator.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:icon
 */

public static final int AccountAuthenticator_icon = 1; // 0x1

/**
 * <p>
 * @attr description
 * The user-visible name of the authenticator.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:label
 */

public static final int AccountAuthenticator_label = 0; // 0x0

/**
 * <p>
 * @attr description
 * Smaller icon of the authenticator.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:smallIcon
 */

public static final int AccountAuthenticator_smallIcon = 3; // 0x3

/**
 * Attributes used to style the Action Bar.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #ActionBar_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
 * associated item.</td></tr>
 * <tr><td><code>{@link #ActionBar_progressBarStyle android:progressBarStyle}</code></td><td>Default ProgressBar style.</td></tr>
 * <tr><td><code>{@link #ActionBar_background android:background}</code></td><td>A drawable to use as the background.</td></tr>
 * <tr><td><code>{@link #ActionBar_divider android:divider}</code></td><td>Drawable or color to draw between list items.</td></tr>
 * <tr><td><code>{@link #ActionBar_height android:height}</code></td><td>Makes the TextView be exactly this tall.</td></tr>
 * <tr><td><code>{@link #ActionBar_title android:title}</code></td><td>The title associated with the item.</td></tr>
 * <tr><td><code>{@link #ActionBar_logo android:logo}</code></td><td>A Drawable resource providing an extended graphical logo for its
 * associated item.</td></tr>
 * <tr><td><code>{@link #ActionBar_navigationMode android:navigationMode}</code></td><td>The type of navigation to use.</td></tr>
 * <tr><td><code>{@link #ActionBar_displayOptions android:displayOptions}</code></td><td>Options affecting how the action bar is displayed.</td></tr>
 * <tr><td><code>{@link #ActionBar_subtitle android:subtitle}</code></td><td>Specifies subtitle text used for navigationMode="normal".</td></tr>
 * <tr><td><code>{@link #ActionBar_customNavigationLayout android:customNavigationLayout}</code></td><td>Specifies a layout for custom navigation.</td></tr>
 * <tr><td><code>{@link #ActionBar_titleTextStyle android:titleTextStyle}</code></td><td>Specifies a style to use for title text.</td></tr>
 * <tr><td><code>{@link #ActionBar_subtitleTextStyle android:subtitleTextStyle}</code></td><td>Specifies a style to use for subtitle text.</td></tr>
 * <tr><td><code>{@link #ActionBar_homeAsUpIndicator android:homeAsUpIndicator}</code></td><td>Specifies a drawable to use for the 'home as up' indicator.</td></tr>
 * <tr><td><code>{@link #ActionBar_indeterminateProgressStyle android:indeterminateProgressStyle}</code></td><td>Specifies a style resource to use for an indeterminate progress spinner.</td></tr>
 * <tr><td><code>{@link #ActionBar_progressBarPadding android:progressBarPadding}</code></td><td>Specifies the horizontal padding on either end for an embedded progress bar.</td></tr>
 * <tr><td><code>{@link #ActionBar_homeLayout android:homeLayout}</code></td><td>Specifies a layout to use for the "home" section of the action bar.</td></tr>
 * <tr><td><code>{@link #ActionBar_itemPadding android:itemPadding}</code></td><td>Specifies padding that should be applied to the left and right sides of
 * system-provided items in the bar.</td></tr>
 * <tr><td><code>{@link #ActionBar_backgroundStacked android:backgroundStacked}</code></td><td>Specifies a background drawable for a second stacked row of the action bar.</td></tr>
 * <tr><td><code>{@link #ActionBar_backgroundSplit android:backgroundSplit}</code></td><td>Specifies a background drawable for the bottom component of a split action bar.</td></tr>
 * <tr><td><code>{@link #ActionBar_elevation android:elevation}</code></td><td>base z depth of the view.</td></tr>
 * <tr><td><code>{@link #ActionBar_hideOnContentScroll android:hideOnContentScroll}</code></td><td>Set true to hide the action bar on a vertical nested scroll of content.</td></tr>
 * <tr><td><code>{@link #ActionBar_contentInsetStart android:contentInsetStart}</code></td><td>Minimum inset for content views within a bar.</td></tr>
 * <tr><td><code>{@link #ActionBar_contentInsetEnd android:contentInsetEnd}</code></td><td>Minimum inset for content views within a bar.</td></tr>
 * <tr><td><code>{@link #ActionBar_contentInsetLeft android:contentInsetLeft}</code></td><td>Minimum inset for content views within a bar.</td></tr>
 * <tr><td><code>{@link #ActionBar_contentInsetRight android:contentInsetRight}</code></td><td>Minimum inset for content views within a bar.</td></tr>
 * <tr><td><code>{@link #ActionBar_popupTheme android:popupTheme}</code></td><td>Reference to a theme that should be used to inflate popups
 * shown by widgets in the toolbar.</td></tr>
 * <tr><td><code>{@link #ActionBar_contentInsetStartWithNavigation android:contentInsetStartWithNavigation}</code></td><td>Minimum inset for content views within a bar when a navigation button
 * is present, such as the Up button.</td></tr>
 * <tr><td><code>{@link #ActionBar_contentInsetEndWithActions android:contentInsetEndWithActions}</code></td><td>Minimum inset for content views within a bar when actions from a menu
 * are present.</td></tr>
 * </table>
 * @see #ActionBar_icon
 * @see #ActionBar_progressBarStyle
 * @see #ActionBar_background
 * @see #ActionBar_divider
 * @see #ActionBar_height
 * @see #ActionBar_title
 * @see #ActionBar_logo
 * @see #ActionBar_navigationMode
 * @see #ActionBar_displayOptions
 * @see #ActionBar_subtitle
 * @see #ActionBar_customNavigationLayout
 * @see #ActionBar_titleTextStyle
 * @see #ActionBar_subtitleTextStyle
 * @see #ActionBar_homeAsUpIndicator
 * @see #ActionBar_indeterminateProgressStyle
 * @see #ActionBar_progressBarPadding
 * @see #ActionBar_homeLayout
 * @see #ActionBar_itemPadding
 * @see #ActionBar_backgroundStacked
 * @see #ActionBar_backgroundSplit
 * @see #ActionBar_elevation
 * @see #ActionBar_hideOnContentScroll
 * @see #ActionBar_contentInsetStart
 * @see #ActionBar_contentInsetEnd
 * @see #ActionBar_contentInsetLeft
 * @see #ActionBar_contentInsetRight
 * @see #ActionBar_popupTheme
 * @see #ActionBar_contentInsetStartWithNavigation
 * @see #ActionBar_contentInsetEndWithActions
 */

public static final int[] ActionBar;
static { ActionBar = new int[0]; }

/**
 * Attributes that can be used with a ActionBar_LayoutParams.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #ActionBar_LayoutParams_layout_gravity android:layout_gravity}</code></td><td>Standard gravity constant that a child supplies to its parent.</td></tr>
 * </table>
 * @see #ActionBar_LayoutParams_layout_gravity
 */

public static final int[] ActionBar_LayoutParams;
static { ActionBar_LayoutParams = new int[0]; }

/**
 * <p>
 * @attr description
 * Standard gravity constant that a child supplies to its parent.
 * Defines how the child view should be positioned, on both the X and Y axes, within its enclosing layout.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
 * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
 * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
 * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
 * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the horizontal gravity: a left gravity will clip the right
 * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
 * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the vertical gravity: a top gravity will clip the bottom
 * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
 * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
 * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
 * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
 * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
 * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
 * </table>
 *
 * @attr name android:layout_gravity
 */

public static final int ActionBar_LayoutParams_layout_gravity = 0; // 0x0

/**
 * <p>
 * @attr description
 * Specifies a background drawable for the action bar.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:background
 */

public static final int ActionBar_background = 2; // 0x2

/**
 * <p>
 * @attr description
 * Specifies a background drawable for the bottom component of a split action bar.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:backgroundSplit
 */

public static final int ActionBar_backgroundSplit = 19; // 0x13

/**
 * <p>
 * @attr description
 * Specifies a background drawable for a second stacked row of the action bar.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:backgroundStacked
 */

public static final int ActionBar_backgroundStacked = 18; // 0x12

/**
 * <p>
 * @attr description
 * Minimum inset for content views within a bar. Navigation buttons and
 * menu views are excepted. Only valid for some themes and configurations.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:contentInsetEnd
 */

public static final int ActionBar_contentInsetEnd = 23; // 0x17

/**
 * <p>
 * @attr description
 * Minimum inset for content views within a bar when actions from a menu
 * are present. Only valid for some themes and configurations.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:contentInsetEndWithActions
 */

public static final int ActionBar_contentInsetEndWithActions = 28; // 0x1c

/**
 * <p>
 * @attr description
 * Minimum inset for content views within a bar. Navigation buttons and
 * menu views are excepted. Only valid for some themes and configurations.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:contentInsetLeft
 */

public static final int ActionBar_contentInsetLeft = 24; // 0x18

/**
 * <p>
 * @attr description
 * Minimum inset for content views within a bar. Navigation buttons and
 * menu views are excepted. Only valid for some themes and configurations.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:contentInsetRight
 */

public static final int ActionBar_contentInsetRight = 25; // 0x19

/**
 * <p>
 * @attr description
 * Minimum inset for content views within a bar. Navigation buttons and
 * menu views are excepted. Only valid for some themes and configurations.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:contentInsetStart
 */

public static final int ActionBar_contentInsetStart = 22; // 0x16

/**
 * <p>
 * @attr description
 * Minimum inset for content views within a bar when a navigation button
 * is present, such as the Up button. Only valid for some themes and configurations.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:contentInsetStartWithNavigation
 */

public static final int ActionBar_contentInsetStartWithNavigation = 27; // 0x1b

/**
 * <p>
 * @attr description
 * Specifies a layout for custom navigation. Overrides navigationMode.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:customNavigationLayout
 */

public static final int ActionBar_customNavigationLayout = 10; // 0xa

/**
 * <p>
 * @attr description
 * Options affecting how the action bar is displayed.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>disableHome</td><td>20</td><td></td></tr>
 * <tr><td>homeAsUp</td><td>4</td><td></td></tr>
 * <tr><td>none</td><td>0</td><td></td></tr>
 * <tr><td>showCustom</td><td>10</td><td></td></tr>
 * <tr><td>showHome</td><td>2</td><td></td></tr>
 * <tr><td>showTitle</td><td>8</td><td></td></tr>
 * <tr><td>useLogo</td><td>1</td><td></td></tr>
 * </table>
 *
 * @attr name android:displayOptions
 */

public static final int ActionBar_displayOptions = 8; // 0x8

/**
 * <p>
 * @attr description
 * Specifies the drawable used for item dividers.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:divider
 */

public static final int ActionBar_divider = 3; // 0x3

/**
 * <p>
 * @attr description
 * Elevation for the action bar itself.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:elevation
 */

public static final int ActionBar_elevation = 20; // 0x14

/**
 * <p>
 * @attr description
 * Specifies a fixed height.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:height
 */

public static final int ActionBar_height = 4; // 0x4

/**
 * <p>
 * @attr description
 * Set true to hide the action bar on a vertical nested scroll of content.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:hideOnContentScroll
 */

public static final int ActionBar_hideOnContentScroll = 21; // 0x15

/**
 * <p>
 * @attr description
 * Up navigation glyph.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:homeAsUpIndicator
 */

public static final int ActionBar_homeAsUpIndicator = 13; // 0xd

/**
 * <p>
 * @attr description
 * Specifies a layout to use for the "home" section of the action bar.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:homeLayout
 */

public static final int ActionBar_homeLayout = 16; // 0x10

/**
 * <p>
 * @attr description
 * Specifies the drawable used for the application icon.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:icon
 */

public static final int ActionBar_icon = 0; // 0x0

/**
 * <p>
 * @attr description
 * Specifies a style resource to use for an indeterminate progress spinner.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:indeterminateProgressStyle
 */

public static final int ActionBar_indeterminateProgressStyle = 14; // 0xe

/**
 * <p>
 * @attr description
 * Specifies padding that should be applied to the left and right sides of
 * system-provided items in the bar.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:itemPadding
 */

public static final int ActionBar_itemPadding = 17; // 0x11

/**
 * <p>
 * @attr description
 * Specifies the drawable used for the application logo.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:logo
 */

public static final int ActionBar_logo = 6; // 0x6

/**
 * <p>
 * @attr description
 * The type of navigation to use.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>listMode</td><td>1</td><td>The action bar will use a selection list for navigation.</td></tr>
 * <tr><td>normal</td><td>0</td><td>Normal static title text.</td></tr>
 * <tr><td>tabMode</td><td>2</td><td>The action bar will use a series of horizontal tabs for navigation.</td></tr>
 * </table>
 *
 * @attr name android:navigationMode
 */

public static final int ActionBar_navigationMode = 7; // 0x7

/**
 * <p>
 * @attr description
 * Reference to a theme that should be used to inflate popups
 * shown by widgets in the action bar.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:popupTheme
 */

public static final int ActionBar_popupTheme = 26; // 0x1a

/**
 * <p>
 * @attr description
 * Specifies the horizontal padding on either end for an embedded progress bar.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:progressBarPadding
 */

public static final int ActionBar_progressBarPadding = 15; // 0xf

/**
 * <p>
 * @attr description
 * Specifies a style resource to use for an embedded progress bar.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:progressBarStyle
 */

public static final int ActionBar_progressBarStyle = 1; // 0x1

/**
 * <p>
 * @attr description
 * Specifies subtitle text used for navigationMode="normal".
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:subtitle
 */

public static final int ActionBar_subtitle = 9; // 0x9

/**
 * <p>
 * @attr description
 * Specifies a style to use for subtitle text.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:subtitleTextStyle
 */

public static final int ActionBar_subtitleTextStyle = 12; // 0xc

/**
 * <p>
 * @attr description
 * Specifies title text used for navigationMode="normal".
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:title
 */

public static final int ActionBar_title = 5; // 0x5

/**
 * <p>
 * @attr description
 * Specifies a style to use for title text.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:titleTextStyle
 */

public static final int ActionBar_titleTextStyle = 11; // 0xb

/**
 * Attributes that can be used with a ActionMenuItemView.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #ActionMenuItemView_minWidth android:minWidth}</code></td><td></td></tr>
 * </table>
 * @see #ActionMenuItemView_minWidth
 */

public static final int[] ActionMenuItemView;
static { ActionMenuItemView = new int[0]; }

/**
 * <p>This symbol is the offset where the {@link android.R.attr#minWidth}
 * attribute's value can be found in the {@link #ActionMenuItemView} array.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:minWidth
 */

public static final int ActionMenuItemView_minWidth = 0; // 0x0

/**
 * Attributes that can be used with a ActionMode.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #ActionMode_background android:background}</code></td><td>A drawable to use as the background.</td></tr>
 * <tr><td><code>{@link #ActionMode_height android:height}</code></td><td>Makes the TextView be exactly this tall.</td></tr>
 * <tr><td><code>{@link #ActionMode_titleTextStyle android:titleTextStyle}</code></td><td>Specifies a style to use for title text.</td></tr>
 * <tr><td><code>{@link #ActionMode_subtitleTextStyle android:subtitleTextStyle}</code></td><td>Specifies a style to use for subtitle text.</td></tr>
 * <tr><td><code>{@link #ActionMode_backgroundSplit android:backgroundSplit}</code></td><td>Specifies a background drawable for the bottom component of a split action bar.</td></tr>
 * </table>
 * @see #ActionMode_background
 * @see #ActionMode_height
 * @see #ActionMode_titleTextStyle
 * @see #ActionMode_subtitleTextStyle
 * @see #ActionMode_backgroundSplit
 */

public static final int[] ActionMode;
static { ActionMode = new int[0]; }

/**
 * <p>
 * @attr description
 * Specifies a background for the action mode bar.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:background
 */

public static final int ActionMode_background = 0; // 0x0

/**
 * <p>
 * @attr description
 * Specifies a background for the split action mode bar.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:backgroundSplit
 */

public static final int ActionMode_backgroundSplit = 4; // 0x4

/**
 * <p>
 * @attr description
 * Specifies a fixed height for the action mode bar.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:height
 */

public static final int ActionMode_height = 1; // 0x1

/**
 * <p>
 * @attr description
 * Specifies a style to use for subtitle text.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:subtitleTextStyle
 */

public static final int ActionMode_subtitleTextStyle = 3; // 0x3

/**
 * <p>
 * @attr description
 * Specifies a style to use for title text.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:titleTextStyle
 */

public static final int ActionMode_titleTextStyle = 2; // 0x2

/**
 * Attrbitutes for a ActvityChooserView.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * </table>
 */

public static final int[] ActivityChooserView;
static { ActivityChooserView = new int[0]; }

/**
 * Attributes that can be used with a AdapterViewAnimator.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AdapterViewAnimator_inAnimation android:inAnimation}</code></td><td>Identifier for the animation to use when a view is shown.</td></tr>
 * <tr><td><code>{@link #AdapterViewAnimator_outAnimation android:outAnimation}</code></td><td>Identifier for the animation to use when a view is hidden.</td></tr>
 * <tr><td><code>{@link #AdapterViewAnimator_animateFirstView android:animateFirstView}</code></td><td>Defines whether to animate the current View when the ViewAnimation
 * is first displayed.</td></tr>
 * <tr><td><code>{@link #AdapterViewAnimator_loopViews android:loopViews}</code></td><td>Defines whether the animator loops to the first view once it
 * has reached the end of the list.</td></tr>
 * </table>
 * @see #AdapterViewAnimator_inAnimation
 * @see #AdapterViewAnimator_outAnimation
 * @see #AdapterViewAnimator_animateFirstView
 * @see #AdapterViewAnimator_loopViews
 */

public static final int[] AdapterViewAnimator;
static { AdapterViewAnimator = new int[0]; }

/**
 * <p>
 * @attr description
 * Defines whether to animate the current View when the ViewAnimation
 * is first displayed.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:animateFirstView
 */

public static final int AdapterViewAnimator_animateFirstView = 2; // 0x2

/**
 * <p>
 * @attr description
 * Identifier for the animation to use when a view is shown.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:inAnimation
 */

public static final int AdapterViewAnimator_inAnimation = 0; // 0x0

/**
 * <p>
 * @attr description
 * Defines whether the animator loops to the first view once it
 * has reached the end of the list.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:loopViews
 */

public static final int AdapterViewAnimator_loopViews = 3; // 0x3

/**
 * <p>
 * @attr description
 * Identifier for the animation to use when a view is hidden.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:outAnimation
 */

public static final int AdapterViewAnimator_outAnimation = 1; // 0x1

/**
 * Attributes that can be used with a AdapterViewFlipper.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AdapterViewFlipper_flipInterval android:flipInterval}</code></td><td></td></tr>
 * <tr><td><code>{@link #AdapterViewFlipper_autoStart android:autoStart}</code></td><td>When true, automatically start animating.</td></tr>
 * </table>
 * @see #AdapterViewFlipper_flipInterval
 * @see #AdapterViewFlipper_autoStart
 */

public static final int[] AdapterViewFlipper;
static { AdapterViewFlipper = new int[0]; }

/**
 * <p>
 * @attr description
 * When true, automatically start animating.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:autoStart
 */

public static final int AdapterViewFlipper_autoStart = 1; // 0x1

/**
 * <p>This symbol is the offset where the {@link android.R.attr#flipInterval}
 * attribute's value can be found in the {@link #AdapterViewFlipper} array.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:flipInterval
 */

public static final int AdapterViewFlipper_flipInterval = 0; // 0x0

/**
 * Drawable used to draw adaptive icons with foreground and background layers.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AdaptiveIconDrawableLayer_drawable android:drawable}</code></td><td>Reference to a drawable resource to use for the frame.</td></tr>
 * </table>
 * @see #AdaptiveIconDrawableLayer_drawable
 */

public static final int[] AdaptiveIconDrawableLayer;
static { AdaptiveIconDrawableLayer = new int[0]; }

/**
 * <p>
 * @attr description
 * The drawable to use for the layer.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:drawable
 */

public static final int AdaptiveIconDrawableLayer_drawable = 0; // 0x0

/**
 * Specify one or more <code>aid-filter</code> elements inside a
 * <code>aid-group</code> element to specify an ISO7816 Application ID (AID)
 * your service can handle.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AidFilter_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * </table>
 * @see #AidFilter_name
 */

public static final int[] AidFilter;
static { AidFilter = new int[0]; }

/**
 * <p>
 * @attr description
 * The ISO7816 Application ID. This attribute is mandatory.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int AidFilter_name = 0; // 0x0

/**
 * Specify one or more <code>aid-group</code> elements inside a
 * <code>host-apdu-service</code> or <code>offhost-apdu-service</code>
 * element to define a group of ISO7816 Application ID (AIDs) that
 * your service can handle.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AidGroup_description android:description}</code></td><td>Descriptive text for the associated data.</td></tr>
 * <tr><td><code>{@link #AidGroup_category android:category}</code></td><td>Category of the resource overlay.</td></tr>
 * </table>
 * @see #AidGroup_description
 * @see #AidGroup_category
 */

public static final int[] AidGroup;
static { AidGroup = new int[0]; }

/**
 * <p>
 * @attr description
 * The category attribute will be used by the Android platform to present
 * multiple applications that register ISO 7816 Application IDs (AIDs) in the
 * same category uniformly.
 * Additionally, when a category is specified, Android will ensure that either
 * all AIDs in this group are routed to this application, or none at all.
 * This attribute is optional.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:category
 */

public static final int AidGroup_category = 1; // 0x1

/**
 * <p>
 * @attr description
 * Short description of what the AID group implements. This attribute is mandatory.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:description
 */

public static final int AidGroup_description = 0; // 0x0

/**
 * Specify one or more <code>aid-prefix-filter</code> elements inside a
 * <code>aid-group</code> element to specify an ISO7816 Application ID (AID)
 * prefix your service can handle.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AidPrefixFilter_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * </table>
 * @see #AidPrefixFilter_name
 */

public static final int[] AidPrefixFilter;
static { AidPrefixFilter = new int[0]; }

/**
 * <p>
 * @attr description
 * The ISO7816 Application ID. This attribute is mandatory.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int AidPrefixFilter_name = 0; // 0x0

/**
 * The set of attributes that describe a AlertDialog's theme.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AlertDialog_fullDark android:fullDark}</code></td><td></td></tr>
 * <tr><td><code>{@link #AlertDialog_topDark android:topDark}</code></td><td></td></tr>
 * <tr><td><code>{@link #AlertDialog_centerDark android:centerDark}</code></td><td></td></tr>
 * <tr><td><code>{@link #AlertDialog_bottomDark android:bottomDark}</code></td><td></td></tr>
 * <tr><td><code>{@link #AlertDialog_fullBright android:fullBright}</code></td><td></td></tr>
 * <tr><td><code>{@link #AlertDialog_topBright android:topBright}</code></td><td></td></tr>
 * <tr><td><code>{@link #AlertDialog_centerBright android:centerBright}</code></td><td></td></tr>
 * <tr><td><code>{@link #AlertDialog_bottomBright android:bottomBright}</code></td><td></td></tr>
 * <tr><td><code>{@link #AlertDialog_bottomMedium android:bottomMedium}</code></td><td></td></tr>
 * <tr><td><code>{@link #AlertDialog_centerMedium android:centerMedium}</code></td><td></td></tr>
 * <tr><td><code>{@link #AlertDialog_layout android:layout}</code></td><td>Supply an identifier for the layout resource to inflate when the ViewStub
 * becomes visible or when forced to do so.</td></tr>
 * </table>
 * @see #AlertDialog_fullDark
 * @see #AlertDialog_topDark
 * @see #AlertDialog_centerDark
 * @see #AlertDialog_bottomDark
 * @see #AlertDialog_fullBright
 * @see #AlertDialog_topBright
 * @see #AlertDialog_centerBright
 * @see #AlertDialog_bottomBright
 * @see #AlertDialog_bottomMedium
 * @see #AlertDialog_centerMedium
 * @see #AlertDialog_layout
 */

public static final int[] AlertDialog;
static { AlertDialog = new int[0]; }

/**
 * <p>This symbol is the offset where the {@link android.R.attr#bottomBright}
 * attribute's value can be found in the {@link #AlertDialog} array.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:bottomBright
 */

public static final int AlertDialog_bottomBright = 7; // 0x7

/**
 * <p>This symbol is the offset where the {@link android.R.attr#bottomDark}
 * attribute's value can be found in the {@link #AlertDialog} array.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:bottomDark
 */

public static final int AlertDialog_bottomDark = 3; // 0x3

/**
 * <p>This symbol is the offset where the {@link android.R.attr#bottomMedium}
 * attribute's value can be found in the {@link #AlertDialog} array.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:bottomMedium
 */

public static final int AlertDialog_bottomMedium = 8; // 0x8

/**
 * <p>This symbol is the offset where the {@link android.R.attr#centerBright}
 * attribute's value can be found in the {@link #AlertDialog} array.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:centerBright
 */

public static final int AlertDialog_centerBright = 6; // 0x6

/**
 * <p>This symbol is the offset where the {@link android.R.attr#centerDark}
 * attribute's value can be found in the {@link #AlertDialog} array.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:centerDark
 */

public static final int AlertDialog_centerDark = 2; // 0x2

/**
 * <p>This symbol is the offset where the {@link android.R.attr#centerMedium}
 * attribute's value can be found in the {@link #AlertDialog} array.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:centerMedium
 */

public static final int AlertDialog_centerMedium = 9; // 0x9

/**
 * <p>This symbol is the offset where the {@link android.R.attr#fullBright}
 * attribute's value can be found in the {@link #AlertDialog} array.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:fullBright
 */

public static final int AlertDialog_fullBright = 4; // 0x4

/**
 * <p>This symbol is the offset where the {@link android.R.attr#fullDark}
 * attribute's value can be found in the {@link #AlertDialog} array.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:fullDark
 */

public static final int AlertDialog_fullDark = 0; // 0x0

/**
 * <p>
 * @attr description
 * Supply an identifier for the layout resource to inflate when the ViewStub
 * becomes visible or when forced to do so. The layout resource must be a
 * valid reference to a layout.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:layout
 */

public static final int AlertDialog_layout = 10; // 0xa

/**
 * <p>This symbol is the offset where the {@link android.R.attr#topBright}
 * attribute's value can be found in the {@link #AlertDialog} array.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:topBright
 */

public static final int AlertDialog_topBright = 5; // 0x5

/**
 * <p>This symbol is the offset where the {@link android.R.attr#topDark}
 * attribute's value can be found in the {@link #AlertDialog} array.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:topDark
 */

public static final int AlertDialog_topDark = 1; // 0x1

/**
 * Attributes that can be used with a AlphaAnimation.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AlphaAnimation_fromAlpha android:fromAlpha}</code></td><td></td></tr>
 * <tr><td><code>{@link #AlphaAnimation_toAlpha android:toAlpha}</code></td><td></td></tr>
 * </table>
 * @see #AlphaAnimation_fromAlpha
 * @see #AlphaAnimation_toAlpha
 */

public static final int[] AlphaAnimation;
static { AlphaAnimation = new int[0]; }

/**
 * <p>This symbol is the offset where the {@link android.R.attr#fromAlpha}
 * attribute's value can be found in the {@link #AlphaAnimation} array.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:fromAlpha
 */

public static final int AlphaAnimation_fromAlpha = 0; // 0x0

/**
 * <p>This symbol is the offset where the {@link android.R.attr#toAlpha}
 * attribute's value can be found in the {@link #AlphaAnimation} array.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:toAlpha
 */

public static final int AlphaAnimation_toAlpha = 1; // 0x1

/**
 * Attributes that can be used with a AnalogClock.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AnalogClock_dial android:dial}</code></td><td></td></tr>
 * <tr><td><code>{@link #AnalogClock_hand_hour android:hand_hour}</code></td><td></td></tr>
 * <tr><td><code>{@link #AnalogClock_hand_minute android:hand_minute}</code></td><td></td></tr>
 * </table>
 * @see #AnalogClock_dial
 * @see #AnalogClock_hand_hour
 * @see #AnalogClock_hand_minute
 */

public static final int[] AnalogClock;
static { AnalogClock = new int[0]; }

/**
 * <p>This symbol is the offset where the {@link android.R.attr#dial}
 * attribute's value can be found in the {@link #AnalogClock} array.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:dial
 */

public static final int AnalogClock_dial = 0; // 0x0

/**
 * <p>This symbol is the offset where the {@link android.R.attr#hand_hour}
 * attribute's value can be found in the {@link #AnalogClock} array.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:hand_hour
 */

public static final int AnalogClock_hand_hour = 1; // 0x1

/**
 * <p>This symbol is the offset where the {@link android.R.attr#hand_minute}
 * attribute's value can be found in the {@link #AnalogClock} array.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:hand_minute
 */

public static final int AnalogClock_hand_minute = 2; // 0x2

/**
 * The <code>manifest</code> tag is the root of an
 * <code>AndroidManifest.xml</code> file,
 * describing the contents of an Android package (.apk) file.  One
 * attribute must always be supplied: <code>package</code> gives a
 * unique name for the package, using a Java-style naming convention
 * to avoid name collisions.  For example, applications published
 * by Google could have names of the form
 * <code>com.google.app.<em>appname</em></code>
 * <p>Inside of the manifest tag, may appear the following tags
 * in any order: {@link #AndroidManifestPermission permission},
 * {@link #AndroidManifestPermissionGroup permission-group},
 * {@link #AndroidManifestPermissionTree permission-tree},
 * {@link #AndroidManifestUsesSdk uses-sdk},
 * {@link #AndroidManifestUsesPermission uses-permission},
 * {@link #AndroidManifestUsesConfiguration uses-configuration},
 * {@link #AndroidManifestApplication application},
 * {@link #AndroidManifestInstrumentation instrumentation},
 * {@link #AndroidManifestUsesFeature uses-feature}.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifest_sharedUserId android:sharedUserId}</code></td><td>Specify the name of a user ID that will be shared between multiple
 * packages.</td></tr>
 * <tr><td><code>{@link #AndroidManifest_versionCode android:versionCode}</code></td><td>Internal version code.</td></tr>
 * <tr><td><code>{@link #AndroidManifest_versionName android:versionName}</code></td><td>The text shown to the user to indicate the version they have.</td></tr>
 * <tr><td><code>{@link #AndroidManifest_sharedUserLabel android:sharedUserLabel}</code></td><td>Specify a label for the shared user UID of this package.</td></tr>
 * <tr><td><code>{@link #AndroidManifest_installLocation android:installLocation}</code></td><td>The default install location defined by an application.</td></tr>
 * <tr><td><code>{@link #AndroidManifest_revisionCode android:revisionCode}</code></td><td>Internal revision code.</td></tr>
 * <tr><td><code>{@link #AndroidManifest_isolatedSplits android:isolatedSplits}</code></td><td>If set to <code>true</code>, indicates to the platform that any split APKs
 * installed for this application should be loaded into their own Context
 * objects and not appear in the base application's Context.</td></tr>
 * <tr><td><code>{@link #AndroidManifest_targetSandboxVersion android:targetSandboxVersion}</code></td><td>Specifies the target sandbox this app wants to use.</td></tr>
 * <tr><td><code>{@link #AndroidManifest_isFeatureSplit android:isFeatureSplit}</code></td><td>If set to <code>true</code>, indicates to the platform that this APK is
 * a 'feature' split and that it implicitly depends on the base APK.</td></tr>
 * <tr><td><code>{@link #AndroidManifest_compileSdkVersion android:compileSdkVersion}</code></td><td>The user-visible SDK version (ex.</td></tr>
 * <tr><td><code>{@link #AndroidManifest_compileSdkVersionCodename android:compileSdkVersionCodename}</code></td><td>The development codename (ex.</td></tr>
 * <tr><td><code>{@link #AndroidManifest_versionCodeMajor android:versionCodeMajor}</code></td><td>Internal major version code.</td></tr>
 * <tr><td><code>{@link #AndroidManifest_isSplitRequired android:isSplitRequired}</code></td><td>Flag to specify if this APK requires at least one split [either feature or
 * resource] to be present in order to function.</td></tr>
 * </table>
 * @see #AndroidManifest_sharedUserId
 * @see #AndroidManifest_versionCode
 * @see #AndroidManifest_versionName
 * @see #AndroidManifest_sharedUserLabel
 * @see #AndroidManifest_installLocation
 * @see #AndroidManifest_revisionCode
 * @see #AndroidManifest_isolatedSplits
 * @see #AndroidManifest_targetSandboxVersion
 * @see #AndroidManifest_isFeatureSplit
 * @see #AndroidManifest_compileSdkVersion
 * @see #AndroidManifest_compileSdkVersionCodename
 * @see #AndroidManifest_versionCodeMajor
 * @see #AndroidManifest_isSplitRequired
 */

public static final int[] AndroidManifest;
static { AndroidManifest = new int[0]; }

/**
 * Attributes that can be supplied in an AndroidManifest.xml
 * <code>action</code> tag, a child of the
 * {@link #AndroidManifestIntentFilter intent-filter} tag.
 * See {@link android.content.IntentFilter#addAction} for
 * more information.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestAction_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * </table>
 * @see #AndroidManifestAction_name
 */

public static final int[] AndroidManifestAction;
static { AndroidManifestAction = new int[0]; }

/**
 * <p>
 * @attr description
 * The name of an action that is handled, using the Java-style
 * naming convention.  For example, to support
 * {@link android.content.Intent#ACTION_VIEW Intent.ACTION_VIEW}
 * you would put <code>android.intent.action.VIEW</code> here.
 * Custom actions should generally use a prefix matching the
 * package name.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int AndroidManifestAction_name = 0; // 0x0

/**
 * The <code>activity</code> tag declares an
 * {@link android.app.Activity} class that is available
 * as part of the package's application components, implementing
 * a part of the application's user interface.
 * <p>Zero or more {@link #AndroidManifestIntentFilter intent-filter}
 * tags can be included inside of an activity, to specify the Intents
 * that it can handle.  If none are specified, the activity can
 * only be started through direct specification of its class name.
 * The activity tag appears as a child tag of the
 * {@link #AndroidManifestApplication application} tag.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_theme android:theme}</code></td><td>The overall theme to use for an activity.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_permission android:permission}</code></td><td>Specify a permission that a client is required to have in order to
 * use the associated object.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_enabled android:enabled}</code></td><td>Specifies whether the widget is enabled.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_exported android:exported}</code></td><td>Flag indicating whether the given application component is available
 * to other applications.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_process android:process}</code></td><td>Specify a specific process that the associated code is to run in.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_taskAffinity android:taskAffinity}</code></td><td>Specify a task name that activities have an "affinity" to.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_multiprocess android:multiprocess}</code></td><td>Specify whether a component is allowed to have multiple instances
 * of itself running in different processes.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_finishOnTaskLaunch android:finishOnTaskLaunch}</code></td><td>Specify whether an activity should be finished when its task is
 * brought to the foreground by relaunching from the home screen.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_clearTaskOnLaunch android:clearTaskOnLaunch}</code></td><td>Specify whether an activity's task should be cleared when it
 * is re-launched from the home screen.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_stateNotNeeded android:stateNotNeeded}</code></td><td>Indicates that an Activity does not need to have its freeze state
 * (as returned by {@link android.app.Activity#onSaveInstanceState}
 * retained in order to be restarted.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_excludeFromRecents android:excludeFromRecents}</code></td><td>Indicates that an Activity should be excluded from the list of
 * recently launched activities.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_launchMode android:launchMode}</code></td><td>Specify how an activity should be launched.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_screenOrientation android:screenOrientation}</code></td><td>Specify the orientation an activity should be run in.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_configChanges android:configChanges}</code></td><td>Specify one or more configuration changes that the activity will
 * handle itself.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_description android:description}</code></td><td>Descriptive text for the associated data.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_alwaysRetainTaskState android:alwaysRetainTaskState}</code></td><td>Specify whether an acitivty's task state should always be maintained
 * by the system, or if it is allowed to reset the task to its initial
 * state in certain situations.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_allowTaskReparenting android:allowTaskReparenting}</code></td><td>Specify that an activity can be moved out of a task it is in to
 * the task it has an affinity for when appropriate.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_windowSoftInputMode android:windowSoftInputMode}</code></td><td>Defines the default soft input state that this window would
 * like when it is displayed.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_noHistory android:noHistory}</code></td><td>Specify whether an activity should be kept in its history stack.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_finishOnCloseSystemDialogs android:finishOnCloseSystemDialogs}</code></td><td>Specify whether an activity should be finished when a "close system
 * windows" request has been made.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_logo android:logo}</code></td><td>A Drawable resource providing an extended graphical logo for its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_immersive android:immersive}</code></td><td>Flag declaring this activity to be 'immersive'; immersive activities
 * should not be interrupted with other activities or notifications.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_hardwareAccelerated android:hardwareAccelerated}</code></td><td><p>Flag indicating whether the application's rendering should be hardware
 * accelerated if possible.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_uiOptions android:uiOptions}</code></td><td>Extra options for an activity's UI.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_parentActivityName android:parentActivityName}</code></td><td>The name of the logical parent of the activity as it appears in the manifest.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_singleUser android:singleUser}</code></td><td>If set to true, a single instance of this component will run for
 * all users.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_showOnLockScreen android:showOnLockScreen}</code></td><td>Specify that an Activity should be shown over the lock screen and,
 * in a multiuser environment, across all users' windows.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_banner android:banner}</code></td><td>A Drawable resource providing an extended graphical banner for its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_allowEmbedded android:allowEmbedded}</code></td><td>Indicate that the activity can be launched as the embedded child of another
 * activity.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_persistableMode android:persistableMode}</code></td><td>Define how an activity persist across reboots.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_documentLaunchMode android:documentLaunchMode}</code></td><td>This attribute specifies that an activity shall become the root activity of a
 * new task each time it is launched.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_maxRecents android:maxRecents}</code></td><td>The maximum number of entries of tasks rooted at this activity in the recent task list.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_autoRemoveFromRecents android:autoRemoveFromRecents}</code></td><td>Tasks launched by activities with this attribute will remain in the recent tasks
 * list until the last activity in the task is completed.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_relinquishTaskIdentity android:relinquishTaskIdentity}</code></td><td>Tasks whose root has this attribute set to true will replace baseIntent with that of the
 * next activity in the task.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_resumeWhilePausing android:resumeWhilePausing}</code></td><td>Indicate that it is okay for this activity be resumed while the previous
 * activity is in the process of pausing, without waiting for the previous pause
 * to complete.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_lockTaskMode android:lockTaskMode}</code></td><td>This value indicates how tasks rooted at this activity will behave in lockTask mode.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_showForAllUsers android:showForAllUsers}</code></td><td>Specify that an Activity should be shown even if the current/foreground user
 * is different from the user of the Activity.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_resizeableActivity android:resizeableActivity}</code></td><td>Indicates that it is okay for this activity to be put in multi-window mode.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_supportsPictureInPicture android:supportsPictureInPicture}</code></td><td>Indicates that the activity specifically supports the picture-in-picture form of
 * multi-window.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_directBootAware android:directBootAware}</code></td><td>Indicate if this component is aware of direct boot lifecycle, and can be
 * safely run before the user has entered their credentials (such as a lock
 * pattern or PIN).</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_enableVrMode android:enableVrMode}</code></td><td>Flag declaring that this activity will be run in VR mode, and specifying
 * the component of the {@link android.service.vr.VrListenerService} that should be
 * bound while this Activity is visible if it is installed and enabled on this device.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_roundIcon android:roundIcon}</code></td><td>A Drawable resource providing a graphical representation of its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_visibleToInstantApps android:visibleToInstantApps}</code></td><td>Specify whether a component should be visible to instant apps.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_rotationAnimation android:rotationAnimation}</code></td><td>Flag allowing the activity to specify which screen rotation animation
 * it desires.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_recreateOnConfigChanges android:recreateOnConfigChanges}</code></td><td>Specify the configuration changes that trigger the system to recreate the
 * current activity if any of these configuration changes happen in the system.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_splitName android:splitName}</code></td><td>When an application is partitioned into splits, this is the name of the
 * split that contains the defined component.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_colorMode android:colorMode}</code></td><td>Specify the color mode the activity desires.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_maxAspectRatio android:maxAspectRatio}</code></td><td>This value indicates the maximum aspect ratio the activity supports.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_showWhenLocked android:showWhenLocked}</code></td><td>Specifies whether an {@link android.app.Activity} should be shown on top of the lock screen
 * whenever the lockscreen is up and the activity is resumed.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_turnScreenOn android:turnScreenOn}</code></td><td>Specifies whether the screen should be turned on when the {@link android.app.Activity} is resumed.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_minAspectRatio android:minAspectRatio}</code></td><td>This value indicates the minimum aspect ratio the activity supports.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivity_inheritShowWhenLocked android:inheritShowWhenLocked}</code></td><td>Specifies whether this {@link android.app.Activity} should be shown on
 * top of the lock screen whenever the lockscreen is up and this activity has another
 * activity behind it with the {@link android.R.attr#showWhenLocked} attribute set.</td></tr>
 * </table>
 * @see #AndroidManifestActivity_theme
 * @see #AndroidManifestActivity_label
 * @see #AndroidManifestActivity_icon
 * @see #AndroidManifestActivity_name
 * @see #AndroidManifestActivity_permission
 * @see #AndroidManifestActivity_enabled
 * @see #AndroidManifestActivity_exported
 * @see #AndroidManifestActivity_process
 * @see #AndroidManifestActivity_taskAffinity
 * @see #AndroidManifestActivity_multiprocess
 * @see #AndroidManifestActivity_finishOnTaskLaunch
 * @see #AndroidManifestActivity_clearTaskOnLaunch
 * @see #AndroidManifestActivity_stateNotNeeded
 * @see #AndroidManifestActivity_excludeFromRecents
 * @see #AndroidManifestActivity_launchMode
 * @see #AndroidManifestActivity_screenOrientation
 * @see #AndroidManifestActivity_configChanges
 * @see #AndroidManifestActivity_description
 * @see #AndroidManifestActivity_alwaysRetainTaskState
 * @see #AndroidManifestActivity_allowTaskReparenting
 * @see #AndroidManifestActivity_windowSoftInputMode
 * @see #AndroidManifestActivity_noHistory
 * @see #AndroidManifestActivity_finishOnCloseSystemDialogs
 * @see #AndroidManifestActivity_logo
 * @see #AndroidManifestActivity_immersive
 * @see #AndroidManifestActivity_hardwareAccelerated
 * @see #AndroidManifestActivity_uiOptions
 * @see #AndroidManifestActivity_parentActivityName
 * @see #AndroidManifestActivity_singleUser
 * @see #AndroidManifestActivity_showOnLockScreen
 * @see #AndroidManifestActivity_banner
 * @see #AndroidManifestActivity_allowEmbedded
 * @see #AndroidManifestActivity_persistableMode
 * @see #AndroidManifestActivity_documentLaunchMode
 * @see #AndroidManifestActivity_maxRecents
 * @see #AndroidManifestActivity_autoRemoveFromRecents
 * @see #AndroidManifestActivity_relinquishTaskIdentity
 * @see #AndroidManifestActivity_resumeWhilePausing
 * @see #AndroidManifestActivity_lockTaskMode
 * @see #AndroidManifestActivity_showForAllUsers
 * @see #AndroidManifestActivity_resizeableActivity
 * @see #AndroidManifestActivity_supportsPictureInPicture
 * @see #AndroidManifestActivity_directBootAware
 * @see #AndroidManifestActivity_enableVrMode
 * @see #AndroidManifestActivity_roundIcon
 * @see #AndroidManifestActivity_visibleToInstantApps
 * @see #AndroidManifestActivity_rotationAnimation
 * @see #AndroidManifestActivity_recreateOnConfigChanges
 * @see #AndroidManifestActivity_splitName
 * @see #AndroidManifestActivity_colorMode
 * @see #AndroidManifestActivity_maxAspectRatio
 * @see #AndroidManifestActivity_showWhenLocked
 * @see #AndroidManifestActivity_turnScreenOn
 * @see #AndroidManifestActivity_minAspectRatio
 * @see #AndroidManifestActivity_inheritShowWhenLocked
 */

public static final int[] AndroidManifestActivity;
static { AndroidManifestActivity = new int[0]; }

/**
 * The <code>activity-alias</code> tag declares a new
 * name for an existing {@link #AndroidManifestActivity activity}
 * tag.
 * <p>Zero or more {@link #AndroidManifestIntentFilter intent-filter}
 * tags can be included inside of an activity-alias, to specify the Intents
 * that it can handle.  If none are specified, the activity can
 * only be started through direct specification of its class name.
 * The activity-alias tag appears as a child tag of the
 * {@link #AndroidManifestApplication application} tag.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestActivityAlias_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivityAlias_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivityAlias_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivityAlias_permission android:permission}</code></td><td>Specify a permission that a client is required to have in order to
 * use the associated object.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivityAlias_enabled android:enabled}</code></td><td>Specifies whether the widget is enabled.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivityAlias_exported android:exported}</code></td><td>Flag indicating whether the given application component is available
 * to other applications.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivityAlias_description android:description}</code></td><td>Descriptive text for the associated data.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivityAlias_targetActivity android:targetActivity}</code></td><td>The name of the activity this alias should launch.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivityAlias_logo android:logo}</code></td><td>A Drawable resource providing an extended graphical logo for its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivityAlias_parentActivityName android:parentActivityName}</code></td><td>The name of the logical parent of the activity as it appears in the manifest.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivityAlias_banner android:banner}</code></td><td>A Drawable resource providing an extended graphical banner for its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestActivityAlias_roundIcon android:roundIcon}</code></td><td>A Drawable resource providing a graphical representation of its
 * associated item.</td></tr>
 * </table>
 * @see #AndroidManifestActivityAlias_label
 * @see #AndroidManifestActivityAlias_icon
 * @see #AndroidManifestActivityAlias_name
 * @see #AndroidManifestActivityAlias_permission
 * @see #AndroidManifestActivityAlias_enabled
 * @see #AndroidManifestActivityAlias_exported
 * @see #AndroidManifestActivityAlias_description
 * @see #AndroidManifestActivityAlias_targetActivity
 * @see #AndroidManifestActivityAlias_logo
 * @see #AndroidManifestActivityAlias_parentActivityName
 * @see #AndroidManifestActivityAlias_banner
 * @see #AndroidManifestActivityAlias_roundIcon
 */

public static final int[] AndroidManifestActivityAlias;
static { AndroidManifestActivityAlias = new int[0]; }

/**
 * <p>
 * @attr description
 * A Drawable resource providing an extended graphical banner for its
 * associated item. Use with the application tag (to supply a default
 * banner for all application activities), or with the activity, tag to
 * supply a banner for a specific activity.
 * <p>The given banner will be used to display to the user a graphical
 * representation of an activity in the Leanback application launcher.
 * Since banners are displayed only in the Leanback launcher, they should
 * only be used with activities (and applications) that support Leanback
 * mode. These are activities that handle Intents of category
 * {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
 * Intent.CATEGORY_LEANBACK_LAUNCHER}.
 * <p>This must be a reference to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:banner
 */

public static final int AndroidManifestActivityAlias_banner = 10; // 0xa

/**
 * <p>
 * @attr description
 * Descriptive text for the associated data.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:description
 */

public static final int AndroidManifestActivityAlias_description = 6; // 0x6

/**
 * <p>
 * @attr description
 * Specify whether the activity-alias is enabled or not (that is, can be instantiated by the system).
 * It can also be specified for an application as a whole, in which case a value of "false"
 * will override any component specific values (a value of "true" will not override the
 * component specific values).
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:enabled
 */

public static final int AndroidManifestActivityAlias_enabled = 4; // 0x4

/**
 * <p>
 * @attr description
 * Flag indicating whether the given application component is available
 * to other applications.  If false, it can only be accessed by
 * applications with its same user id (which usually means only by
 * code in its own package).  If true, it can be invoked by external
 * entities, though which ones can do so may be controlled through
 * permissions.  The default value is false for activity, receiver,
 * and service components that do not specify any intent filters; it
 * is true for activity, receiver, and service components that do
 * have intent filters (implying they expect to be invoked by others
 * who do not know their particular component name) and for all
 * content providers.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:exported
 */

public static final int AndroidManifestActivityAlias_exported = 5; // 0x5

/**
 * <p>
 * @attr description
 * A Drawable resource providing a graphical representation of its
 * associated item.  Use with the
 * application tag (to supply a default icon for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific icon for that component).  It may also be
 * used with the intent-filter tag to supply an icon to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given icon will be used to display to the user a graphical
 * representation of its associated component; for example, as the icon
 * for main activity that is displayed in the launcher.  This must be
 * a reference to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:icon
 */

public static final int AndroidManifestActivityAlias_icon = 1; // 0x1

/**
 * <p>
 * @attr description
 * A user-legible name for the given item.  Use with the
 * application tag (to supply a default label for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific label for that component).  It may also be
 * used with the intent-filter tag to supply a label to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given label will be used wherever the user sees information
 * about its associated component; for example, as the name of a
 * main activity that is displayed in the launcher.  You should
 * generally set this to a reference to a string resource, so that
 * it can be localized, however it is also allowed to supply a plain
 * string for quick and dirty programming.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:label
 */

public static final int AndroidManifestActivityAlias_label = 0; // 0x0

/**
 * <p>
 * @attr description
 * A Drawable resource providing an extended graphical logo for its
 * associated item. Use with the application tag (to supply a default
 * logo for all application components), or with the activity, receiver,
 * service, or instrumentation tag (to supply a specific logo for that
 * component). It may also be used with the intent-filter tag to supply
 * a logo to show to the user when an activity is being selected based
 * on a particular Intent.
 * <p>The given logo will be used to display to the user a graphical
 * representation of its associated component; for example as the
 * header in the Action Bar. The primary differences between an icon
 * and a logo are that logos are often wider and more detailed, and are
 * used without an accompanying text caption. This must be a reference
 * to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:logo
 */

public static final int AndroidManifestActivityAlias_logo = 8; // 0x8

/**
 * <p>
 * @attr description
 * Required name of the class implementing the activity, deriving from
 * {@link android.app.Activity}.  This is a fully
 * qualified class name (for example, com.mycompany.myapp.MyActivity); as a
 * short-hand if the first character of the class
 * is a period then it is appended to your package name.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int AndroidManifestActivityAlias_name = 2; // 0x2

/**
 * <p>
 * @attr description
 * The name of the logical parent of the activity as it appears in the manifest.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:parentActivityName
 */

public static final int AndroidManifestActivityAlias_parentActivityName = 9; // 0x9

/**
 * <p>
 * @attr description
 * Specify a permission that a client is required to have in order to
 * use the associated object.  If the client does not hold the named
 * permission, its request will fail.  See the
 * <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
 * document for more information on permissions.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:permission
 */

public static final int AndroidManifestActivityAlias_permission = 3; // 0x3

/**
 * <p>
 * @attr description
 * A Drawable resource providing a graphical representation of its
 * associated item.  Use with the
 * application tag (to supply a default round icon for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific round icon for that component).  It may also be
 * used with the intent-filter tag to supply a round icon to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given round icon will be used to display to the user a graphical
 * representation of its associated component; for example, as the round icon
 * for main activity that is displayed in the launcher.  This must be
 * a reference to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:roundIcon
 */

public static final int AndroidManifestActivityAlias_roundIcon = 11; // 0xb

/**
 * <p>
 * @attr description
 * The name of the activity this alias should launch.  The activity
 * must be in the same manifest as the alias, and have been defined
 * in that manifest before the alias here.  This must use a Java-style
 * naming convention to ensure the name is unique, for example
 * "com.mycompany.MyName".
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:targetActivity
 */

public static final int AndroidManifestActivityAlias_targetActivity = 7; // 0x7

/**
 * <p>
 * @attr description
 * Indicate that the activity can be launched as the embedded child of another
 * activity. Particularly in the case where the child lives in a container
 * such as a Display owned by another activity.
 * <p>The default value of this attribute is <code>false</code>.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:allowEmbedded
 */

public static final int AndroidManifestActivity_allowEmbedded = 31; // 0x1f

/**
 * <p>
 * @attr description
 * Specify that an activity can be moved out of a task it is in to
 * the task it has an affinity for when appropriate.  Use with the
 * application tag (to supply a default for all activities in the
 * application), or with an activity tag (to supply a specific
 * setting for that component).
 * <p>Normally when an application is started, it is associated with
 * the task of the activity that started it and stays there for its
 * entire lifetime.  You can use the allowTaskReparenting feature to force an
 * activity to be re-parented to a different task when the task it is
 * in goes to the background.  Typically this is used to cause the
 * activities of an application to move back to the main task associated
 * with that application.  The activity is re-parented to the task
 * with the same {@link android.R.attr#taskAffinity} as it has.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:allowTaskReparenting
 */

public static final int AndroidManifestActivity_allowTaskReparenting = 19; // 0x13

/**
 * <p>
 * @attr description
 * Specify whether an acitivty's task state should always be maintained
 * by the system, or if it is allowed to reset the task to its initial
 * state in certain situations.
 * <p>Normally the system will reset a task (remove all activities from
 * the stack and reset the root activity) in certain situations when
 * the user re-selects that task from the home screen.  Typically this
 * will be done if the user hasn't visited that task for a certain
 * amount of time, such as 30 minutes.
 * <p>By setting this attribute, the user will always return to your
 * task in its last state, regardless of how they get there.  This is
 * useful, for example, in an application like the web browser where there
 * is a lot of state (such as multiple open tabs) that the application
 * would not like to lose.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:alwaysRetainTaskState
 */

public static final int AndroidManifestActivity_alwaysRetainTaskState = 18; // 0x12

/**
 * <p>
 * @attr description
 * Tasks launched by activities with this attribute will remain in the recent tasks
 * list until the last activity in the task is completed.  When that happens the task
 * will be automatically removed from the recent tasks list.  This overrides the caller's
 * use of {@link android.content.Intent#FLAG_ACTIVITY_RETAIN_IN_RECENTS
 * Intent.FLAG_ACTIVITY_RETAIN_IN_RECENTS}
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:autoRemoveFromRecents
 */

public static final int AndroidManifestActivity_autoRemoveFromRecents = 35; // 0x23

/**
 * <p>
 * @attr description
 * A Drawable resource providing an extended graphical banner for its
 * associated item. Use with the application tag (to supply a default
 * banner for all application activities), or with the activity, tag to
 * supply a banner for a specific activity.
 * <p>The given banner will be used to display to the user a graphical
 * representation of an activity in the Leanback application launcher.
 * Since banners are displayed only in the Leanback launcher, they should
 * only be used with activities (and applications) that support Leanback
 * mode. These are activities that handle Intents of category
 * {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
 * Intent.CATEGORY_LEANBACK_LAUNCHER}.
 * <p>This must be a reference to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:banner
 */

public static final int AndroidManifestActivity_banner = 30; // 0x1e

/**
 * <p>
 * @attr description
 * Specify whether an activity's task should be cleared when it
 * is re-launched from the home screen.  As a result, every time the
 * user starts the task, they will be brought to its root activity,
 * regardless of whether they used BACK or HOME to last leave it.
 * This flag only applies to activities that
 * are used to start the root of a new task.
 * <p>An example of the use of this flag would be for the case where
 * a user launches activity A from home, and from there goes to
 * activity B.  They now press home, and then return to activity A.
 * Normally they would see activity B, since that is what they were
 * last doing in A's task.  However, if A has set this flag to true,
 * then upon going to the background all of the tasks on top of it (B
 * in this case) are removed, so when the user next returns to A they
 * will restart at its original activity.
 * <p>When this option is used in conjunction with
 * {@link android.R.attr#allowTaskReparenting}, the allowTaskReparenting trumps the
 * clear.  That is, all activities above the root activity of the
 * task will be removed: those that have an affinity will be moved
 * to the task they are associated with, otherwise they will simply
 * be dropped as described here.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:clearTaskOnLaunch
 */

public static final int AndroidManifestActivity_clearTaskOnLaunch = 11; // 0xb

/**
 * <p>
 * @attr description
 * Specify the color mode the activity desires. The requested color mode may be ignored
 * depending on the capabilities of the display the activity is displayed on.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>default</td><td>0</td><td>The default color mode (typically sRGB, low-dynamic range).</td></tr>
 * <tr><td>hdr</td><td>2</td><td>High dynamic range color mode.</td></tr>
 * <tr><td>wideColorGamut</td><td>1</td><td>Wide color gamut color mode.</td></tr>
 * </table>
 *
 * @attr name android:colorMode
 */

public static final int AndroidManifestActivity_colorMode = 49; // 0x31

/**
 * <p>
 * @attr description
 * Specify one or more configuration changes that the activity will
 * handle itself.  If not specified, the activity will be restarted
 * if any of these configuration changes happen in the system.  Otherwise,
 * the activity will remain running and its
 * {@link android.app.Activity#onConfigurationChanged Activity.onConfigurationChanged}
 * method called with the new configuration.
 * <p>Note that all of these configuration changes can impact the
 * resource values seen by the application, so you will generally need
 * to re-retrieve all resources (including view layouts, drawables, etc)
 * to correctly handle any configuration change.
 * <p>These values must be kept in sync with those in
 * {@link android.content.pm.ActivityInfo} and
 * include/utils/ResourceTypes.h.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>colorMode</td><td>4000</td><td>The color mode of the screen has changed (color gamut or dynamic range).</td></tr>
 * <tr><td>density</td><td>1000</td><td>The display density has changed. This might be caused by the user
 * specifying a different display scale, or it might be caused by a
 * different display being activated.</td></tr>
 * <tr><td>fontScale</td><td>40000000</td><td>The font scaling factor has changed, that is the user has
 * selected a new global font size.</td></tr>
 * <tr><td>keyboard</td><td>10</td><td>The keyboard type has changed, for example the user has plugged
 * in an external keyboard.</td></tr>
 * <tr><td>keyboardHidden</td><td>20</td><td>The keyboard or navigation accessibility has changed, for example
 * the user has slid the keyboard out to expose it.  Note that
 * despite its name, this applied to any accessibility: keyboard
 * or navigation.</td></tr>
 * <tr><td>layoutDirection</td><td>2000</td><td>The layout direction has changed. For example going from LTR to RTL.</td></tr>
 * <tr><td>locale</td><td>4</td><td>The locale has changed, that is the user has selected a new
 * language that text should be displayed in.</td></tr>
 * <tr><td>mcc</td><td>1</td><td>The IMSI MCC has changed, that is a SIM has been detected and
 * updated the Mobile Country Code. By default from Android O, we
 * don't recreate the activity even the app doesn't specify mcc in
 * configChanges. If the app wants to recreate the activity, specify
 * mcc in recreateOnConfigChanges.</td></tr>
 * <tr><td>mnc</td><td>2</td><td>The IMSI MNC has changed, that is a SIM has been detected and
 * updated the Mobile Network Code. By default from Android O, we
 * don't recreate the activity even the app doesn't specify mnc in
 * configChanges. If the app wants to recreate the acvitity, specify
 * mnc in recreateOnConfigChanges.</td></tr>
 * <tr><td>navigation</td><td>40</td><td>The navigation type has changed.  Should never normally happen.</td></tr>
 * <tr><td>orientation</td><td>80</td><td>The screen orientation has changed, that is the user has
 * rotated the device.</td></tr>
 * <tr><td>screenLayout</td><td>100</td><td>The screen layout has changed.  This might be caused by a
 * different display being activated.</td></tr>
 * <tr><td>screenSize</td><td>400</td><td>The current available screen size has changed.  If applications don't
 * target at least {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2}
 * then the activity will always handle this itself (the change
 * will not result in a restart).  This represents a change in the
 * currently available size, so will change when the user switches
 * between landscape and portrait.</td></tr>
 * <tr><td>smallestScreenSize</td><td>800</td><td>The physical screen size has changed.  If applications don't
 * target at least {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2}
 * then the activity will always handle this itself (the change
 * will not result in a restart).  This represents a change in size
 * regardless of orientation, so will only change when the actual
 * physical screen size has changed such as switching to an external
 * display.</td></tr>
 * <tr><td>touchscreen</td><td>8</td><td>The touchscreen has changed.  Should never normally happen.</td></tr>
 * <tr><td>uiMode</td><td>200</td><td>The global user interface mode has changed.  For example,
 * going in or out of car mode, night mode changing, etc.</td></tr>
 * </table>
 *
 * @attr name android:configChanges
 */

public static final int AndroidManifestActivity_configChanges = 16; // 0x10

/**
 * <p>
 * @attr description
 * Descriptive text for the associated data.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:description
 */

public static final int AndroidManifestActivity_description = 17; // 0x11

/**
 * <p>
 * @attr description
 * Indicate if this component is aware of direct boot lifecycle, and can be
 * safely run before the user has entered their credentials (such as a lock
 * pattern or PIN).
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:directBootAware
 */

public static final int AndroidManifestActivity_directBootAware = 42; // 0x2a

/**
 * <p>
 * @attr description
 * This attribute specifies that an activity shall become the root activity of a
 * new task each time it is launched. Using this attribute permits the user to
 * have multiple documents from the same applications appear in the recent tasks list.
 * <p>Such a document is any kind of item for which an application may want to
 * maintain multiple simultaneous instances. Examples might be text files, web
 * pages, spreadsheets, or emails. Each such document will be in a separate
 * task in the recent taskss list.
 * <p>This attribute is equivalent to adding the flag {@link
 * android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT} to every Intent used to launch
 * the activity.
 * <p>The documentLaunchMode attribute may be assigned one of four values, "none",
 * "intoExisting", "always" and "never", described in detail below. For values other than
 * <code>none</code> and <code>never</code> the activity must be defined with
 * {@link android.R.attr#launchMode} <code>standard</code>.
 * If this attribute is not specified, <code>none</code> will be used.
 * Note that <code>none</code> can be overridden at run time if the Intent used
 * to launch it contains the flag {@link android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT
 * Intent.FLAG_ACTIVITY_NEW_DOCUMENT}.
 * Similarly <code>intoExisting</code> will be overridden by the flag
 * {@link android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT
 * Intent.FLAG_ACTIVITY_NEW_DOCUMENT} combined with
 * {@link android.content.Intent#FLAG_ACTIVITY_MULTIPLE_TASK
 * Intent.FLAG_ACTIVITY_MULTIPLE_TASK}. If the value of
 * documentLaunchModes is <code>never</code> then any use of
 * {@link android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT
 * Intent.FLAG_ACTIVITY_NEW_DOCUMENT} to launch this activity will be ignored.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>always</td><td>2</td><td>A new task rooted at this activity will be created. This will happen whether or
 * not there is an existing task whose ComponentName and data URI match
 * that of the launcing intent This is the equivalent of launching an activity
 * with {@link
 * android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT Intent.FLAG_ACTIVITY_NEW_DOCUMENT}
 * and {@link android.content.Intent#FLAG_ACTIVITY_MULTIPLE_TASK
 * Intent.FLAG_ACTIVITY_MULTIPLE_TASK} both set.</td></tr>
 * <tr><td>intoExisting</td><td>1</td><td>All tasks will be searched for one whose base Intent's ComponentName and
 * data URI match those of the launching Intent. If such a task is found
 * that task will be cleared and restarted with the root activity receiving a call
 * to {@link android.app.Activity#onNewIntent Activity.onNewIntent}. If no
 * such task is found a new task will be created.
 * <p>This is the equivalent of launching an activity with {@link
 * android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT Intent.FLAG_ACTIVITY_NEW_DOCUMENT}
 * set and without {@link android.content.Intent#FLAG_ACTIVITY_MULTIPLE_TASK
 * Intent.FLAG_ACTIVITY_MULTIPLE_TASK} set.</td></tr>
 * <tr><td>never</td><td>3</td><td>This activity will not be launched into a new document even if the Intent contains
 * {@link android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT
 * Intent.FLAG_ACTIVITY_NEW_DOCUMENT}. This gives the activity writer ultimate
 * control over how their activity is used. Note that applications prior to api
 * 21 will default to documentLaunchMode="none" so only activities that explicitly
 * opt out with <code>"never"</code> may do so.</td></tr>
 * <tr><td>none</td><td>0</td><td>The default mode, which will create a new task only when
 * {@link android.content.Intent#FLAG_ACTIVITY_NEW_TASK
 * Intent.FLAG_ACTIVITY_NEW_TASK} is set.</td></tr>
 * </table>
 *
 * @attr name android:documentLaunchMode
 */

public static final int AndroidManifestActivity_documentLaunchMode = 33; // 0x21

/**
 * <p>
 * @attr description
 * Flag declaring that this activity will be run in VR mode, and specifying
 * the component of the {@link android.service.vr.VrListenerService} that should be
 * bound while this Activity is visible if it is installed and enabled on this device.
 * This is equivalent to calling {@link android.app.Activity#setVrModeEnabled} with the
 * the given component name within the Activity that this attribute is set for.
 * Declaring this will prevent the system from leaving VR mode during an Activity
 * transtion from one VR activity to another.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:enableVrMode
 */

public static final int AndroidManifestActivity_enableVrMode = 43; // 0x2b

/**
 * <p>
 * @attr description
 * Specify whether the activity is enabled or not (that is, can be instantiated by the system).
 * It can also be specified for an application as a whole, in which case a value of "false"
 * will override any component specific values (a value of "true" will not override the
 * component specific values).
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:enabled
 */

public static final int AndroidManifestActivity_enabled = 5; // 0x5

/**
 * <p>
 * @attr description
 * Indicates that an Activity should be excluded from the list of
 * recently launched activities.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:excludeFromRecents
 */

public static final int AndroidManifestActivity_excludeFromRecents = 13; // 0xd

/**
 * <p>
 * @attr description
 * Flag indicating whether the given application component is available
 * to other applications.  If false, it can only be accessed by
 * applications with its same user id (which usually means only by
 * code in its own package).  If true, it can be invoked by external
 * entities, though which ones can do so may be controlled through
 * permissions.  The default value is false for activity, receiver,
 * and service components that do not specify any intent filters; it
 * is true for activity, receiver, and service components that do
 * have intent filters (implying they expect to be invoked by others
 * who do not know their particular component name) and for all
 * content providers.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:exported
 */

public static final int AndroidManifestActivity_exported = 6; // 0x6

/**
 * <p>
 * @attr description
 * Specify whether an activity should be finished when a "close system
 * windows" request has been made.  This happens, for example, when
 * the home key is pressed, when the device is locked, when a system
 * dialog showing recent applications is displayed, etc.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:finishOnCloseSystemDialogs
 */

public static final int AndroidManifestActivity_finishOnCloseSystemDialogs = 22; // 0x16

/**
 * <p>
 * @attr description
 * Specify whether an activity should be finished when its task is
 * brought to the foreground by relaunching from the home screen.
 * <p>If both this option and {@link android.R.attr#allowTaskReparenting} are
 * specified, the finish trumps the affinity: the affinity will be
 * ignored and the activity simply finished.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:finishOnTaskLaunch
 */

public static final int AndroidManifestActivity_finishOnTaskLaunch = 10; // 0xa

/**
 * <p>
 * @attr description
 * <p>Flag indicating whether the application's rendering should be hardware
 * accelerated if possible. This flag is turned on by default for applications
 * that are targeting {@link android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH}
 * or later.</p>
 * <p>This flag can be set on the application and any activity declared
 * in the manifest. When enabled for the application, each activity is
 * automatically assumed to be hardware accelerated. This flag can be
 * overridden in the activity tags, either turning it off (if on for the
 * application) or on (if off for the application.)</p>
 * <p>When this flag is turned on for an activity (either directly or via
 * the application tag), every window created from the activity, including
 * the activity's own window, will be hardware accelerated, if possible.</p>
 * <p>Please refer to the documentation of
 * {@link android.view.WindowManager.LayoutParams#FLAG_HARDWARE_ACCELERATED}
 * for more information on how to control this flag programmatically.</p>
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:hardwareAccelerated
 */

public static final int AndroidManifestActivity_hardwareAccelerated = 25; // 0x19

/**
 * <p>
 * @attr description
 * A Drawable resource providing a graphical representation of its
 * associated item.  Use with the
 * application tag (to supply a default icon for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific icon for that component).  It may also be
 * used with the intent-filter tag to supply an icon to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given icon will be used to display to the user a graphical
 * representation of its associated component; for example, as the icon
 * for main activity that is displayed in the launcher.  This must be
 * a reference to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:icon
 */

public static final int AndroidManifestActivity_icon = 2; // 0x2

/**
 * <p>
 * @attr description
 * Flag declaring this activity to be 'immersive'; immersive activities
 * should not be interrupted with other activities or notifications.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:immersive
 */

public static final int AndroidManifestActivity_immersive = 24; // 0x18

/**
 * <p>
 * @attr description
 * Specifies whether this {@link android.app.Activity} should be shown on
 * top of the lock screen whenever the lockscreen is up and this activity has another
 * activity behind it with the {@link android.R.attr#showWhenLocked} attribute set. That
 * is, this activity is only visible on the lock screen if there is another activity with
 * the {@link android.R.attr#showWhenLocked} attribute visible at the same time on the
 * lock screen. A use case for this is permission dialogs, that should only be visible on
 * the lock screen if their requesting activity is also visible.
 * <p>The default value of this attribute is <code>false</code>.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:inheritShowWhenLocked
 */

public static final int AndroidManifestActivity_inheritShowWhenLocked = 54; // 0x36

/**
 * <p>
 * @attr description
 * A user-legible name for the given item.  Use with the
 * application tag (to supply a default label for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific label for that component).  It may also be
 * used with the intent-filter tag to supply a label to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given label will be used wherever the user sees information
 * about its associated component; for example, as the name of a
 * main activity that is displayed in the launcher.  You should
 * generally set this to a reference to a string resource, so that
 * it can be localized, however it is also allowed to supply a plain
 * string for quick and dirty programming.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:label
 */

public static final int AndroidManifestActivity_label = 1; // 0x1

/**
 * <p>
 * @attr description
 * Specify how an activity should be launched.  See the
 * <a href="{@docRoot}guide/topics/fundamentals/tasks-and-back-stack.html">Tasks and Back
 * Stack</a> document for important information on how these options impact
 * the behavior of your application.
 * <p>If this attribute is not specified, <code>standard</code> launch
 * mode will be used.  Note that the particular launch behavior can
 * be changed in some ways at runtime through the
 * {@link android.content.Intent} flags
 * {@link android.content.Intent#FLAG_ACTIVITY_SINGLE_TOP},
 * {@link android.content.Intent#FLAG_ACTIVITY_NEW_TASK}, and
 * {@link android.content.Intent#FLAG_ACTIVITY_MULTIPLE_TASK}.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>singleInstance</td><td>3</td><td>Only allow one instance of this activity to ever be
 * running.  This activity gets a unique task with only itself running
 * in it; if it is ever launched again with the same Intent, then that
 * task will be brought forward and its
 * {@link android.app.Activity#onNewIntent Activity.onNewIntent()}
 * method called.  If this
 * activity tries to start a new activity, that new activity will be
 * launched in a separate task.  See the
 * <a href="{@docRoot}guide/topics/fundamentals/tasks-and-back-stack.html">Tasks and Back
 * Stack</a> document for more details about tasks.</td></tr>
 * <tr><td>singleTask</td><td>2</td><td>If, when starting the activity, there is already a task running
 * that starts with this activity, then instead of starting a new
 * instance the current task is brought to the front.  The existing
 * instance will receive a call to {@link android.app.Activity#onNewIntent
 * Activity.onNewIntent()}
 * with the new Intent that is being started, and with the
 * {@link android.content.Intent#FLAG_ACTIVITY_BROUGHT_TO_FRONT
 * Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT} flag set.  This is a superset
 * of the singleTop mode, where if there is already an instance
 * of the activity being started at the top of the stack, it will
 * receive the Intent as described there (without the
 * FLAG_ACTIVITY_BROUGHT_TO_FRONT flag set).  See the
 * <a href="{@docRoot}guide/topics/fundamentals/tasks-and-back-stack.html">Tasks and Back
 * Stack</a> document for more details about tasks.</td></tr>
 * <tr><td>singleTop</td><td>1</td><td>If, when starting the activity, there is already an
 * instance of the same activity class in the foreground that is
 * interacting with the user, then
 * re-use that instance.  This existing instance will receive a call to
 * {@link android.app.Activity#onNewIntent Activity.onNewIntent()} with
 * the new Intent that is being started.</td></tr>
 * <tr><td>standard</td><td>0</td><td>The default mode, which will usually create a new instance of
 * the activity when it is started, though this behavior may change
 * with the introduction of other options such as
 * {@link android.content.Intent#FLAG_ACTIVITY_NEW_TASK
 * Intent.FLAG_ACTIVITY_NEW_TASK}.</td></tr>
 * </table>
 *
 * @attr name android:launchMode
 */

public static final int AndroidManifestActivity_launchMode = 14; // 0xe

/**
 * <p>
 * @attr description
 * This value indicates how tasks rooted at this activity will behave in lockTask mode.
 * While in lockTask mode the system will not launch non-permitted tasks until
 * lockTask mode is disabled.
 * <p>While in lockTask mode with multiple permitted tasks running, each launched task is
 * permitted to finish, transitioning to the previous locked task, until there is only one
 * task remaining. At that point the last task running is not permitted to finish, unless it
 * uses the value always.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>always</td><td>2</td><td>Tasks rooted at this activity will always launch into lockTask mode. If the system is
 * already in lockTask mode when this task is launched then the new task will be launched
 * on top of the current task. Tasks launched in this mode are capable of exiting
 * lockTask mode using {@link android.app.Activity#finish()}.
 * <p>Note: This mode is only available to system and privileged applications.
 * Non-privileged apps with this value will be treated as normal.</td></tr>
 * <tr><td>if_whitelisted</td><td>3</td><td>If the DevicePolicyManager (DPM) authorizes this package ({@link
 * android.app.admin.DevicePolicyManager#setLockTaskPackages}) then this mode is
 * identical to always, except that the activity needs to call
 * {@link android.app.Activity#stopLockTask} before being able to finish if it is the last
 * locked task.
 * If the DPM does not authorize this package then this mode is identical to normal.</td></tr>
 * <tr><td>never</td><td>1</td><td>Tasks will not launch into lockTask mode and cannot be placed there using
 * {@link android.app.Activity#startLockTask} or be pinned from the Overview screen.
 * If the system is already in lockTask mode when a new task rooted at this activity is
 * launched that task will not be started.
 * <p>Note: This mode is only available to system and privileged applications.
 * Non-privileged apps with this value will be treated as normal.</td></tr>
 * <tr><td>normal</td><td>0</td><td>This is the default value. Tasks will not launch into lockTask mode but can be
 * placed there by calling {@link android.app.Activity#startLockTask}. If a task with
 * this mode has been whitelisted using {@link
 * android.app.admin.DevicePolicyManager#setLockTaskPackages} then calling
 * {@link android.app.Activity#startLockTask} will enter lockTask mode immediately,
 * otherwise the user will be presented with a dialog to approve entering pinned mode.
 * <p>If the system is already in lockTask mode when a new task rooted at this activity
 * is launched that task will or will not start depending on whether the package of this
 * activity has been whitelisted.
 * <p>Tasks rooted at this activity can only exit lockTask mode using
 * {@link android.app.Activity#stopLockTask}.</td></tr>
 * </table>
 *
 * @attr name android:lockTaskMode
 */

public static final int AndroidManifestActivity_lockTaskMode = 38; // 0x26

/**
 * <p>
 * @attr description
 * A Drawable resource providing an extended graphical logo for its
 * associated item. Use with the application tag (to supply a default
 * logo for all application components), or with the activity, receiver,
 * service, or instrumentation tag (to supply a specific logo for that
 * component). It may also be used with the intent-filter tag to supply
 * a logo to show to the user when an activity is being selected based
 * on a particular Intent.
 * <p>The given logo will be used to display to the user a graphical
 * representation of its associated component; for example as the
 * header in the Action Bar. The primary differences between an icon
 * and a logo are that logos are often wider and more detailed, and are
 * used without an accompanying text caption. This must be a reference
 * to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:logo
 */

public static final int AndroidManifestActivity_logo = 23; // 0x17

/**
 * <p>
 * @attr description
 * This value indicates the maximum aspect ratio the activity supports. If the app runs on a
 * device with a wider aspect ratio, the system automatically letterboxes the app, leaving
 * portions of the screen unused so the app can run at its specified maximum aspect ratio.
 * <p>
 * Maximum aspect ratio, expressed as (longer dimension / shorter dimension) in decimal
 * form. For example, if the maximum aspect ratio is 7:3, set value to 2.33.
 * <p>
 * Value needs to be greater or equal to 1.0, otherwise it is ignored.
 * <p>
 * NOTE: This attribute is ignored if the activity has
 * {@link android.R.attr#resizeableActivity} set to true.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:maxAspectRatio
 */

public static final int AndroidManifestActivity_maxAspectRatio = 50; // 0x32

/**
 * <p>
 * @attr description
 * The maximum number of entries of tasks rooted at this activity in the recent task list.
 * When this number of entries is reached the least recently used instance of this activity
 * will be removed from recents. The value will be clamped between 1 and 100 inclusive.
 * The default value for this if it is not specified is 15.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:maxRecents
 */

public static final int AndroidManifestActivity_maxRecents = 34; // 0x22

/**
 * <p>
 * @attr description
 * This value indicates the minimum aspect ratio the activity supports. If the app runs on a
 * device with a narrower aspect ratio, the system automatically letterboxes the app, leaving
 * portions of the screen unused so the app can run at its specified minimum aspect ratio.
 * <p>
 * Minimum aspect ratio, expressed as (longer dimension / shorter dimension) in decimal
 * form. For example, if the minimum aspect ratio is 4:3, set value to 1.33.
 * <p>
 * Value needs to be greater or equal to 1.0, otherwise it is ignored.
 * <p>
 * NOTE: This attribute is ignored if the activity has
 * {@link android.R.attr#resizeableActivity} set to true.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:minAspectRatio
 */

public static final int AndroidManifestActivity_minAspectRatio = 53; // 0x35

/**
 * <p>
 * @attr description
 * Specify whether a component is allowed to have multiple instances
 * of itself running in different processes.  Use with the activity
 * and provider tags.
 * <p>Normally the system will ensure that all instances of a particular
 * component are only running in a single process.  You can use this
 * attribute to disable that behavior, allowing the system to create
 * instances wherever they are used (provided permissions allow it).
 * This is most often used with content providers, so that instances
 * of a provider can be created in each client process, allowing them
 * to be used without performing IPC.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:multiprocess
 */

public static final int AndroidManifestActivity_multiprocess = 9; // 0x9

/**
 * <p>
 * @attr description
 * Required name of the class implementing the activity, deriving from
 * {@link android.app.Activity}.  This is a fully
 * qualified class name (for example, com.mycompany.myapp.MyActivity); as a
 * short-hand if the first character of the class
 * is a period then it is appended to your package name.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int AndroidManifestActivity_name = 3; // 0x3

/**
 * <p>
 * @attr description
 * Specify whether an activity should be kept in its history stack.
 * If this attribute is set, then as soon as the user navigates away
 * from the activity it will be finished and they will no longer be
 * able to return to it.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:noHistory
 */

public static final int AndroidManifestActivity_noHistory = 21; // 0x15

/**
 * <p>
 * @attr description
 * The name of the logical parent of the activity as it appears in the manifest.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:parentActivityName
 */

public static final int AndroidManifestActivity_parentActivityName = 27; // 0x1b

/**
 * <p>
 * @attr description
 * Specify a permission that a client is required to have in order to
 * use the associated object.  If the client does not hold the named
 * permission, its request will fail.  See the
 * <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
 * document for more information on permissions.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:permission
 */

public static final int AndroidManifestActivity_permission = 4; // 0x4

/**
 * <p>
 * @attr description
 * Define how an activity persist across reboots. Activities defined as "never" will not
 * be persisted. Those defined as "always" will be persisted. Those defined as "taskOnly"
 * will persist the root activity of the task only. See below for more detail as to
 * what gets persisted.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>persistAcrossReboots</td><td>2</td><td>If this activity forms the root of a task then the task and this activity will
 * be persisted across reboots. If the activity above this activity is also
 * tagged with the attribute <code>"persist"</code> then it will be persisted as well.
 * And so on up the task stack until either an activity without the
 * <code>persistableMode="persistAcrossReboots"</code> attribute or one that was launched
 * with the flag Intent.FLAG_CLEAR_TASK_WHEN_RESET is encountered.
 * <p>Activities that are declared with the persistAcrossReboots attribute will be
 * provided with a PersistableBundle in onSavedInstanceState(), These activities may
 * use this PeristableBundle to save their state. Then, following a reboot, that
 * PersistableBundle will be provided back to the activity in its onCreate() method.</td></tr>
 * <tr><td>persistNever</td><td>1</td><td>If this activity forms the root of a task then that task will not be persisted
 * across reboots</td></tr>
 * <tr><td>persistRootOnly</td><td>0</td><td>The default. If this activity forms the root of a task then that task will be
 * persisted across reboots but only the launching intent will be used. If the task
 * relinquishes its identity then the intent used is that of the topmost inherited
 * identity. All activities above this activity in the task will not be persisted.
 * In addition this activity will not be passed a PersistableBundle into which it
 * could have stored its state.</td></tr>
 * </table>
 *
 * @attr name android:persistableMode
 */

public static final int AndroidManifestActivity_persistableMode = 32; // 0x20

/**
 * <p>
 * @attr description
 * Specify a specific process that the associated code is to run in.
 * Use with the application tag (to supply a default process for all
 * application components), or with the activity, receiver, service,
 * or provider tag (to supply a specific icon for that component).
 * <p>Application components are normally run in a single process that
 * is created for the entire application.  You can use this tag to modify
 * where they run.  If the process name begins with a ':' character,
 * a new process private to that application will be created when needed
 * to run that component (allowing you to spread your application across
 * multiple processes).  If the process name begins with a lower-case
 * character, the component will be run in a global process of that name,
 * provided that you have permission to do so, allowing multiple
 * applications to share one process to reduce resource usage.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:process
 */

public static final int AndroidManifestActivity_process = 7; // 0x7

/**
 * <p>
 * @attr description
 * Specify the configuration changes that trigger the system to recreate the
 * current activity if any of these configuration changes happen in the system.
 * The valid configuration changes include mcc and mnc which are the same with
 * those in configChanges. By default from Android O, we don't recreate the activity
 * even the app doesn't specify mcc or mnc in configChanges. If the app wants to
 * be recreated, specify them in recreateOnConfigChanges.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>mcc</td><td>1</td><td>The IMSI MCC has changed, that is a SIM has been detected and
 * updated the Mobile Country Code.</td></tr>
 * <tr><td>mnc</td><td>2</td><td>The IMSI MNC has changed, that is a SIM has been detected and
 * updated the Mobile Network Code.</td></tr>
 * </table>
 *
 * @attr name android:recreateOnConfigChanges
 */

public static final int AndroidManifestActivity_recreateOnConfigChanges = 47; // 0x2f

/**
 * <p>
 * @attr description
 * Tasks whose root has this attribute set to true will replace baseIntent with that of the
 * next activity in the task. If the next activity also has this attribute set to true then
 * it will yield the baseIntent to any activity that it launches in the same task. This
 * continues until an activity is encountered which has this attribute set to false. False
 * is the default. This attribute set to true also permits activity's use of the
 * TaskDescription to change labels, colors and icons in the recent task list.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:relinquishTaskIdentity
 */

public static final int AndroidManifestActivity_relinquishTaskIdentity = 36; // 0x24

/**
 * <p>
 * @attr description
 * Indicates that it is okay for this activity to be put in multi-window mode. Intended for a
 * multi-window device where there can be multiple activities of various sizes on the screen
 * at the same time.
 * <p>The default value is <code>false</code> for applications with
 * <code>targetSdkVersion</code> lesser than {@link android.os.Build.VERSION_CODES#N} and
 * <code>true</code> otherwise.
 * <p>Setting this flag to <code>false</code> lets the system know that the app may not be
 * tested or optimized for multi-window environment. The system may still put such activity in
 * multi-window with compatibility mode applied. It also does not guarantee that there will be
 * no other apps in multi-window visible on screen (e.g. picture-in-picture) or on other
 * displays. Therefore, this flag cannot be used to assure an exclusive resource access.
 * <p>NOTE: A task's root activity value is applied to all additional activities launched in
 * the task. That is if the root activity of a task is resizeable then the system will treat
 * all other activities in the task as resizeable and will not if the root activity isn't
 * resizeable.
 * <p>NOTE: The value of {@link android.R.attr#screenOrientation} is ignored for
 * resizeable activities when in multi-window mode.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:resizeableActivity
 */

public static final int AndroidManifestActivity_resizeableActivity = 40; // 0x28

/**
 * <p>
 * @attr description
 * Indicate that it is okay for this activity be resumed while the previous
 * activity is in the process of pausing, without waiting for the previous pause
 * to complete.  Use this with caution: your activity can not acquire any exclusive
 * resources (such as opening the camera or recording audio) when it launches, or it
 * may conflict with the previous activity and fail.
 * <p>The default value of this attribute is <code>false</code>.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:resumeWhilePausing
 */

public static final int AndroidManifestActivity_resumeWhilePausing = 37; // 0x25

/**
 * <p>
 * @attr description
 * Flag allowing the activity to specify which screen rotation animation
 * it desires.  Valid values are "rotate", "crossfade", and "jumpcut"
 * as described in {@link android.view.WindowManager.LayoutParams#rotationAnimation}.
 * Specifying your Rotation animation in the WindowManager.LayoutParams
 * may be racy with app startup and updattransitions occuring during application startup and thusly
 * the manifest attribute is preferred.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>crossfade</td><td>1</td><td></td></tr>
 * <tr><td>jumpcut</td><td>2</td><td></td></tr>
 * <tr><td>rotate</td><td>0</td><td></td></tr>
 * <tr><td>seamless</td><td>3</td><td></td></tr>
 * </table>
 *
 * @attr name android:rotationAnimation
 */

public static final int AndroidManifestActivity_rotationAnimation = 46; // 0x2e

/**
 * <p>
 * @attr description
 * A Drawable resource providing a graphical representation of its
 * associated item.  Use with the
 * application tag (to supply a default round icon for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific round icon for that component).  It may also be
 * used with the intent-filter tag to supply a round icon to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given round icon will be used to display to the user a graphical
 * representation of its associated component; for example, as the round icon
 * for main activity that is displayed in the launcher.  This must be
 * a reference to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:roundIcon
 */

public static final int AndroidManifestActivity_roundIcon = 44; // 0x2c

/**
 * <p>
 * @attr description
 * Specify the orientation an activity should be run in.  If not
 * specified, it will run in the current preferred orientation
 * of the screen.
 * <p>This attribute is supported by the <a
 * href="{@docRoot}guide/topics/manifest/activity-element.html">{@code <activity>}</a>
 * element.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>behind</td><td>3</td><td>Keep the screen in the same orientation as whatever is behind
 * this activity.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_BEHIND}.</td></tr>
 * <tr><td>fullSensor</td><td>a</td><td>Orientation is determined by a physical orientation sensor:
 * the display will rotate based on how the user moves the device.
 * This allows any of the 4 possible rotations, regardless of what
 * the device will normally do (for example some devices won't
 * normally use 180 degree rotation).
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_FULL_SENSOR}.</td></tr>
 * <tr><td>fullUser</td><td>d</td><td>Respect the user's sensor-based rotation preference, but if
 * sensor-based rotation is enabled then allow the screen to rotate
 * in all 4 possible directions regardless of what
 * the device will normally do (for example some devices won't
 * normally use 180 degree rotation).
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_FULL_USER}.</td></tr>
 * <tr><td>landscape</td><td>0</td><td>Would like to have the screen in a landscape orientation: that
 * is, with the display wider than it is tall, ignoring sensor data.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_LANDSCAPE}.</td></tr>
 * <tr><td>locked</td><td>e</td><td>Screen is locked to its current rotation, whatever that is.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_LOCKED}.</td></tr>
 * <tr><td>nosensor</td><td>5</td><td>Always ignore orientation determined by orientation sensor:
 * the display will not rotate when the user moves the device.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_NOSENSOR}.</td></tr>
 * <tr><td>portrait</td><td>1</td><td>Would like to have the screen in a portrait orientation: that
 * is, with the display taller than it is wide, ignoring sensor data.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_PORTRAIT}.</td></tr>
 * <tr><td>reverseLandscape</td><td>8</td><td>Would like to have the screen in landscape orientation, turned in
 * the opposite direction from normal landscape.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_REVERSE_LANDSCAPE}.</td></tr>
 * <tr><td>reversePortrait</td><td>9</td><td>Would like to have the screen in portrait orientation, turned in
 * the opposite direction from normal portrait.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_REVERSE_PORTRAIT}.</td></tr>
 * <tr><td>sensor</td><td>4</td><td>Orientation is determined by a physical orientation sensor:
 * the display will rotate based on how the user moves the device.
 * Ignores user's setting to turn off sensor-based rotation.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_SENSOR}.</td></tr>
 * <tr><td>sensorLandscape</td><td>6</td><td>Would like to have the screen in landscape orientation, but can
 * use the sensor to change which direction the screen is facing.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_SENSOR_LANDSCAPE}.</td></tr>
 * <tr><td>sensorPortrait</td><td>7</td><td>Would like to have the screen in portrait orientation, but can
 * use the sensor to change which direction the screen is facing.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_SENSOR_PORTRAIT}.</td></tr>
 * <tr><td>unspecified</td><td>ffffffff</td><td>No preference specified: let the system decide the best
 * orientation.  This will either be the orientation selected
 * by the activity below, or the user's preferred orientation
 * if this activity is the bottom of a task. If the user
 * explicitly turned off sensor based orientation through settings
 * sensor based device rotation will be ignored. If not by default
 * sensor based orientation will be taken into account and the
 * orientation will changed based on how the user rotates the device.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_UNSPECIFIED}.</td></tr>
 * <tr><td>user</td><td>2</td><td>Use the user's current preferred orientation of the handset.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_USER}.</td></tr>
 * <tr><td>userLandscape</td><td>b</td><td>Would like to have the screen in landscape orientation, but if
 * the user has enabled sensor-based rotation then we can use the
 * sensor to change which direction the screen is facing.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_USER_LANDSCAPE}.</td></tr>
 * <tr><td>userPortrait</td><td>c</td><td>Would like to have the screen in portrait orientation, but if
 * the user has enabled sensor-based rotation then we can use the
 * sensor to change which direction the screen is facing.
 * Corresponds to
 * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_USER_PORTRAIT}.</td></tr>
 * </table>
 *
 * @attr name android:screenOrientation
 */

public static final int AndroidManifestActivity_screenOrientation = 15; // 0xf

/**
 * <p>
 * @attr description
 * Specify that an Activity should be shown even if the current/foreground user
 * is different from the user of the Activity. This will also force the
 * <code>android.view.LayoutParams.FLAG_SHOW_WHEN_LOCKED</code> flag
 * to be set for all windows of this activity
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:showForAllUsers
 */

public static final int AndroidManifestActivity_showForAllUsers = 39; // 0x27

/**
 * <p>
 * @attr description
 * @deprecated use {@link android.R.attr#showForAllUsers} instead.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:showOnLockScreen
 */

@Deprecated public static final int AndroidManifestActivity_showOnLockScreen = 29; // 0x1d

/**
 * <p>
 * @attr description
 * Specifies whether an {@link android.app.Activity} should be shown on top of the lock screen
 * whenever the lockscreen is up and the activity is resumed. Normally an activity will be
 * transitioned to the stopped state if it is started while the lockscreen is up, but with
 * this flag set the activity will remain in the resumed state visible on-top of the lock
 * screen.
 * <p>This should be used instead of {@link android.view.WindowManager.LayoutParams#FLAG_SHOW_WHEN_LOCKED}
 * flag set for Windows. When using the Window flag during activity startup, there may not be
 * time to add it before the system stops your activity for being behind the lock-screen.
 * This leads to a double life-cycle as it is then restarted.</p>
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:showWhenLocked
 */

public static final int AndroidManifestActivity_showWhenLocked = 51; // 0x33

/**
 * <p>
 * @attr description
 * If set to true, a single instance of this component will run for
 * all users.  That instance will run as user 0, the default/primary
 * user.  When the app running is in processes for other users and interacts
 * with this component (by binding to a service for example) those processes will
 * always interact with the instance running for user 0.  Enabling
 * single user mode forces "exported" of the component to be false, to
 * help avoid introducing multi-user security bugs.  This feature is only
 * available to applications built in to the system image; you must hold the
 * permission INTERACT_ACROSS_USERS in order
 * to use this feature.  This flag can only be used with services,
 * receivers, and providers; it can not be used with activities.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:singleUser
 */

public static final int AndroidManifestActivity_singleUser = 28; // 0x1c

/**
 * <p>
 * @attr description
 * The code for this component is located in the given split.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:splitName
 */

public static final int AndroidManifestActivity_splitName = 48; // 0x30

/**
 * <p>
 * @attr description
 * Indicates that an Activity does not need to have its freeze state
 * (as returned by {@link android.app.Activity#onSaveInstanceState}
 * retained in order to be restarted.  Generally you use this for activities
 * that do not store any state.  When this flag is set, if for some reason
 * the activity is killed before it has a chance to save its state,
 * then the system will not remove it from the activity stack like
 * it normally would.  Instead, the next time the user navigates to
 * it its {@link android.app.Activity#onCreate} method will be called
 * with a null icicle, just like it was starting for the first time.
 * <p>This is used by the Home activity to make sure it does not get
 * removed if it crashes for some reason.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:stateNotNeeded
 */

public static final int AndroidManifestActivity_stateNotNeeded = 12; // 0xc

/**
 * <p>
 * @attr description
 * Indicates that the activity specifically supports the picture-in-picture form of
 * multi-window. If true, this activity will support entering picture-in-picture, but will
 * only support split-screen and other forms of multi-window if
 * {@link android.R.attr#resizeableActivity} is also set to true.
 * Note that your activity may still be resized even if this attribute is true and
 * {@link android.R.attr#resizeableActivity} is false.
 * <p>The default value is <code>false</code>.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:supportsPictureInPicture
 */

public static final int AndroidManifestActivity_supportsPictureInPicture = 41; // 0x29

/**
 * <p>
 * @attr description
 * Specify a task name that activities have an "affinity" to.
 * Use with the application tag (to supply a default affinity for all
 * activities in the application), or with the activity tag (to supply
 * a specific affinity for that component).
 * <p>The default value for this attribute is the same as the package
 * name, indicating that all activities in the manifest should generally
 * be considered a single "application" to the user.  You can use this
 * attribute to modify that behavior: either giving them an affinity
 * for another task, if the activities are intended to be part of that
 * task from the user's perspective, or using an empty string for
 * activities that have no affinity to a task.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:taskAffinity
 */

public static final int AndroidManifestActivity_taskAffinity = 8; // 0x8

/**
 * <p>
 * @attr description
 * The overall theme to use for an activity.  Use with either the
 * application tag (to supply a default theme for all activities) or
 * the activity tag (to supply a specific theme for that activity).
 * <p>This automatically sets
 * your activity's Context to use this theme, and may also be used
 * for "starting" animations prior to the activity being launched (to
 * better match what the activity actually looks like).  It is a reference
 * to a style resource defining the theme.  If not set, the default
 * system theme will be used.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:theme
 */

public static final int AndroidManifestActivity_theme = 0; // 0x0

/**
 * <p>
 * @attr description
 * Specifies whether the screen should be turned on when the {@link android.app.Activity} is resumed.
 * Normally an activity will be transitioned to the stopped state if it is started while the
 * screen if off, but with this flag set the activity will cause the screen to turn on if the
 * activity will be visible and resumed due to the screen coming on. The screen will not be
 * turned on if the activity won't be visible after the screen is turned on. This flag is
 * normally used in conjunction with the {@link android.R.attr#showWhenLocked} flag to make
 * sure the activity is visible after the screen is turned on when the lockscreen is up. In
 * addition, if this flag is set and the activity calls
 * {@link android.app.KeyguardManager#requestDismissKeyguard}
 * the screen will turn on.
 * <p>This should be used instead of {@link android.view.WindowManager.LayoutParams#FLAG_TURN_SCREEN_ON}
 * flag set for Windows. When using the Window flag during activity startup, there may not be
 * time to add it before the system stops your activity because the screen has not yet turned
 * on. This leads to a double life-cycle as it is then restarted.</p>
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:turnScreenOn
 */

public static final int AndroidManifestActivity_turnScreenOn = 52; // 0x34

/**
 * <p>
 * @attr description
 * Extra options for an activity's UI. Applies to either the {@code <activity>} or
 * {@code <application>} tag. If specified on the {@code <application>}
 * tag these will be considered defaults for all activities in the
 * application.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>none</td><td>0</td><td>No extra UI options. This is the default.</td></tr>
 * <tr><td>splitActionBarWhenNarrow</td><td>1</td><td>Split the options menu into a separate bar at the bottom of
 * the screen when severely constrained for horizontal space.
 * (e.g. portrait mode on a phone.) Instead of a small number
 * of action buttons appearing in the action bar at the top
 * of the screen, the action bar will split into the top navigation
 * section and the bottom menu section. Menu items will not be
 * split across the two bars; they will always appear together.</td></tr>
 * </table>
 *
 * @attr name android:uiOptions
 */

public static final int AndroidManifestActivity_uiOptions = 26; // 0x1a

/**
 * <p>
 * @attr description
 * Specify whether a component should be visible to instant apps.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:visibleToInstantApps
 */

public static final int AndroidManifestActivity_visibleToInstantApps = 45; // 0x2d

/**
 * <p>
 * @attr description
 * Specify the default soft-input mode for the main window of
 * this activity.  A value besides "unspecified" here overrides
 * any value in the theme.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>adjustNothing</td><td>30</td><td>Don't resize <em>or</em> pan the window to make room for the
 * soft input area; the window is never adjusted for it.</td></tr>
 * <tr><td>adjustPan</td><td>20</td><td>Don't resize the window to make room for the soft input area;
 * instead pan the contents of the window as focus moves inside
 * of it so that the user can see what they are typing.  This is
 * generally less desireable than panning because the user may
 * need to close the input area to get at and interact with
 * parts of the window.</td></tr>
 * <tr><td>adjustResize</td><td>10</td><td>Always resize the window: the content area of the window is
 * reduced to make room for the soft input area.</td></tr>
 * <tr><td>adjustUnspecified</td><td>0</td><td>The window resize/pan adjustment has not been specified,
 * the system will automatically select between resize and pan
 * modes, depending
 * on whether the content of the window has any layout views
 * that can scroll their contents.  If there is such a view,
 * then the window will be resized, with the assumption being
 * that the resizeable area can be reduced to make room for
 * the input UI.</td></tr>
 * <tr><td>stateAlwaysHidden</td><td>3</td><td>Always make the soft input area hidden when this window
 * has input focus.</td></tr>
 * <tr><td>stateAlwaysVisible</td><td>5</td><td>Always make the soft input area visible when this window
 * has input focus.</td></tr>
 * <tr><td>stateHidden</td><td>2</td><td>Make the soft input area hidden when normally appropriate
 * (when the user is navigating forward to your window).</td></tr>
 * <tr><td>stateUnchanged</td><td>1</td><td>Leave the soft input window as-is, in whatever state it
 * last was.</td></tr>
 * <tr><td>stateUnspecified</td><td>0</td><td>Not specified, use what the system thinks is best.  This
 * is the default.</td></tr>
 * <tr><td>stateVisible</td><td>4</td><td>Make the soft input area visible when normally appropriate
 * (when the user is navigating forward to your window).</td></tr>
 * </table>
 *
 * @attr name android:windowSoftInputMode
 */

public static final int AndroidManifestActivity_windowSoftInputMode = 20; // 0x14

/**
 * The <code>additional-certificate</code> specifies the SHA-256 digest of a static
 * shared library's additional signing certificate. You need to use this tag if the
 * library is singed with more than one certificate.
 * <p>This appears as a child tag of the
 * {@link #AndroidManifestUsesStaticLibrary uses-static-library} or
 * {@link #AndroidManifestUsesPackage uses-package} tag.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestAdditionalCertificate_certDigest android:certDigest}</code></td><td>Optional SHA-256 digest of the package signing certificate.</td></tr>
 * </table>
 * @see #AndroidManifestAdditionalCertificate_certDigest
 */

public static final int[] AndroidManifestAdditionalCertificate;
static { AndroidManifestAdditionalCertificate = new int[0]; }

/**
 * <p>
 * @attr description
 * The SHA-256 digest of the library signing certificate.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:certDigest
 */

public static final int AndroidManifestAdditionalCertificate_certDigest = 0; // 0x0

/**
 * The <code>application</code> tag describes application-level components
 * contained in the package, as well as general application
 * attributes.  Many of the attributes you can supply here (such
 * as theme, label, icon, permission, process, taskAffinity,
 * and allowTaskReparenting) serve
 * as default values for the corresponding attributes of components
 * declared inside of the application.
 * <p>Inside of this element you specify what the application contains,
 * using the elements {@link #AndroidManifestProvider provider},
 * {@link #AndroidManifestService service},
 * {@link #AndroidManifestReceiver receiver},
 * {@link #AndroidManifestActivity activity},
 * {@link #AndroidManifestActivityAlias activity-alias},
 * {@link #AndroidManifestUsesLibrary uses-library},
 * {@link #AndroidManifestUsesStaticLibrary uses-static-library}, and
 * {@link #AndroidManifestUsesPackage uses-package}.
 * The application tag
 * appears as a child of the root {@link #AndroidManifest manifest} tag in
 * an application's manifest file.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_theme android:theme}</code></td><td>The overall theme to use for an activity.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_manageSpaceActivity android:manageSpaceActivity}</code></td><td>Name of the activity to be launched to manage application's space on
 * device.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_allowClearUserData android:allowClearUserData}</code></td><td>Option to let applications specify that user data can/cannot be
 * cleared.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_permission android:permission}</code></td><td>Specify a permission that a client is required to have in order to
 * use the associated object.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_hasCode android:hasCode}</code></td><td>Indicate whether this application contains code.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_persistent android:persistent}</code></td><td>Flag to control special persistent mode of an application.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_enabled android:enabled}</code></td><td>Specifies whether the widget is enabled.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_debuggable android:debuggable}</code></td><td>Flag indicating whether the application can be debugged, even when
 * running on a device that is running in user mode.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_process android:process}</code></td><td>Specify a specific process that the associated code is to run in.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_taskAffinity android:taskAffinity}</code></td><td>Specify a task name that activities have an "affinity" to.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_description android:description}</code></td><td>Descriptive text for the associated data.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_allowTaskReparenting android:allowTaskReparenting}</code></td><td>Specify that an activity can be moved out of a task it is in to
 * the task it has an affinity for when appropriate.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_testOnly android:testOnly}</code></td><td>Option to indicate this application is only for testing purposes.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_backupAgent android:backupAgent}</code></td><td>The name of the class subclassing <code>BackupAgent</code> to manage
 * backup and restore of the application's data on external storage.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_allowBackup android:allowBackup}</code></td><td>Whether to allow the application to participate in the backup
 * and restore infrastructure.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_killAfterRestore android:killAfterRestore}</code></td><td>Whether the application in question should be terminated after its
 * settings have been restored during a full-system restore operation.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_restoreNeedsApplication android:restoreNeedsApplication}</code></td><td>@deprecated This attribute is not used by the Android operating system.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_vmSafeMode android:vmSafeMode}</code></td><td>Flag indicating whether the application requests the VM to operate in
 * the safe mode.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_restoreAnyVersion android:restoreAnyVersion}</code></td><td>Indicate that the application is prepared to attempt a restore of any
 * backed-up dataset, even if the backup is apparently from a newer version
 * of the application than is currently installed on the device.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_logo android:logo}</code></td><td>A Drawable resource providing an extended graphical logo for its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_hardwareAccelerated android:hardwareAccelerated}</code></td><td><p>Flag indicating whether the application's rendering should be hardware
 * accelerated if possible.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_largeHeap android:largeHeap}</code></td><td>Request that your application's processes be created with
 * a large Dalvik heap.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_uiOptions android:uiOptions}</code></td><td>Extra options for an activity's UI.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_supportsRtl android:supportsRtl}</code></td><td>Declare that your application will be able to deal with RTL (right to left) layouts.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_requiredForAllUsers android:requiredForAllUsers}</code></td><td>Flag to specify if this application needs to be present for all users.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_restrictedAccountType android:restrictedAccountType}</code></td><td>Declare that this application requires access to restricted accounts of a certain
 * type.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_requiredAccountType android:requiredAccountType}</code></td><td>Declare that this application requires an account of a certain
 * type.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_banner android:banner}</code></td><td>A Drawable resource providing an extended graphical banner for its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_isGame android:isGame}</code></td><td>A boolean flag used to indicate if an application is a Game or not.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_fullBackupOnly android:fullBackupOnly}</code></td><td>Indicates that even though the application provides a <code>BackupAgent</code>,
 * only full-data streaming backup operations are to be performed to save the app's
 * data.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_multiArch android:multiArch}</code></td><td>Declare that code from this application will need to be loaded into other
 * applications' processes.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_extractNativeLibs android:extractNativeLibs}</code></td><td>When set installer will extract native libraries.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_fullBackupContent android:fullBackupContent}</code></td><td>Applications will set this in their manifest to opt-in to or out of full app data back-up
 * and restore.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_usesCleartextTraffic android:usesCleartextTraffic}</code></td><td>Declare that this application may use cleartext traffic, such as HTTP rather than HTTPS;
 * WebSockets rather than WebSockets Secure; XMPP, IMAP, STMP without STARTTLS or TLS.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_resizeableActivity android:resizeableActivity}</code></td><td>Indicates that it is okay for this activity to be put in multi-window mode.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_defaultToDeviceProtectedStorage android:defaultToDeviceProtectedStorage}</code></td><td></td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_directBootAware android:directBootAware}</code></td><td>Indicate if this component is aware of direct boot lifecycle, and can be
 * safely run before the user has entered their credentials (such as a lock
 * pattern or PIN).</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_backupInForeground android:backupInForeground}</code></td><td>Indicates that full-data backup operations for this application may
 * be performed even if the application is in a foreground-equivalent
 * state.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_networkSecurityConfig android:networkSecurityConfig}</code></td><td>An XML resource with the application's Network Security Config.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_roundIcon android:roundIcon}</code></td><td>A Drawable resource providing a graphical representation of its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_appCategory android:appCategory}</code></td><td>Declare the category of this app.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_maxAspectRatio android:maxAspectRatio}</code></td><td>This value indicates the maximum aspect ratio the activity supports.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_persistentWhenFeatureAvailable android:persistentWhenFeatureAvailable}</code></td><td>If set, the "persistent" attribute will only be honored if the feature
 * specified here is present on the device.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_classLoader android:classLoader}</code></td><td>The classname of the classloader used to load the application's classes
 * from its APK.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_cantSaveState android:cantSaveState}</code></td><td>Declare that this application can't participate in the normal
 * state save/restore mechanism.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_appComponentFactory android:appComponentFactory}</code></td><td>The (optional) fully-qualified name for a subclass of
 * {@link android.app.AppComponentFactory} that the system uses to instantiate
 * every other manifest defined class.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_usesNonSdkApi android:usesNonSdkApi}</code></td><td></td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_hasFragileUserData android:hasFragileUserData}</code></td><td>If {@code true} the user is prompted to keep the app's data on uninstall</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_minAspectRatio android:minAspectRatio}</code></td><td>This value indicates the minimum aspect ratio the activity supports.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_zygotePreloadName android:zygotePreloadName}</code></td><td>Name of the class that gets invoked for preloading application code, when starting an
 * {@link android.R.attr#isolatedProcess} service that has
 * {@link android.R.attr#useAppZygote} set to <code>true</code>.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_useEmbeddedDex android:useEmbeddedDex}</code></td><td>Flag to specify if this app wants to run the dex within its APK but not extracted or
 * locally compiled variants.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_allowClearUserDataOnFailedRestore android:allowClearUserDataOnFailedRestore}</code></td><td>If {@code true} the system will clear app's data if a restore operation fails.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_allowAudioPlaybackCapture android:allowAudioPlaybackCapture}</code></td><td>If {@code true} the app's non sensitive audio can be captured by other apps with
 * {@link android.media.AudioPlaybackCaptureConfiguration} and a
 * {@link android.media.projection.MediaProjection}.</td></tr>
 * <tr><td><code>{@link #AndroidManifestApplication_requestLegacyExternalStorage android:requestLegacyExternalStorage}</code></td><td>If {@code true} this app would like to run under the legacy storage
 * model.</td></tr>
 * </table>
 * @see #AndroidManifestApplication_theme
 * @see #AndroidManifestApplication_label
 * @see #AndroidManifestApplication_icon
 * @see #AndroidManifestApplication_name
 * @see #AndroidManifestApplication_manageSpaceActivity
 * @see #AndroidManifestApplication_allowClearUserData
 * @see #AndroidManifestApplication_permission
 * @see #AndroidManifestApplication_hasCode
 * @see #AndroidManifestApplication_persistent
 * @see #AndroidManifestApplication_enabled
 * @see #AndroidManifestApplication_debuggable
 * @see #AndroidManifestApplication_process
 * @see #AndroidManifestApplication_taskAffinity
 * @see #AndroidManifestApplication_description
 * @see #AndroidManifestApplication_allowTaskReparenting
 * @see #AndroidManifestApplication_testOnly
 * @see #AndroidManifestApplication_backupAgent
 * @see #AndroidManifestApplication_allowBackup
 * @see #AndroidManifestApplication_killAfterRestore
 * @see #AndroidManifestApplication_restoreNeedsApplication
 * @see #AndroidManifestApplication_vmSafeMode
 * @see #AndroidManifestApplication_restoreAnyVersion
 * @see #AndroidManifestApplication_logo
 * @see #AndroidManifestApplication_hardwareAccelerated
 * @see #AndroidManifestApplication_largeHeap
 * @see #AndroidManifestApplication_uiOptions
 * @see #AndroidManifestApplication_supportsRtl
 * @see #AndroidManifestApplication_requiredForAllUsers
 * @see #AndroidManifestApplication_restrictedAccountType
 * @see #AndroidManifestApplication_requiredAccountType
 * @see #AndroidManifestApplication_banner
 * @see #AndroidManifestApplication_isGame
 * @see #AndroidManifestApplication_fullBackupOnly
 * @see #AndroidManifestApplication_multiArch
 * @see #AndroidManifestApplication_extractNativeLibs
 * @see #AndroidManifestApplication_fullBackupContent
 * @see #AndroidManifestApplication_usesCleartextTraffic
 * @see #AndroidManifestApplication_resizeableActivity
 * @see #AndroidManifestApplication_defaultToDeviceProtectedStorage
 * @see #AndroidManifestApplication_directBootAware
 * @see #AndroidManifestApplication_backupInForeground
 * @see #AndroidManifestApplication_networkSecurityConfig
 * @see #AndroidManifestApplication_roundIcon
 * @see #AndroidManifestApplication_appCategory
 * @see #AndroidManifestApplication_maxAspectRatio
 * @see #AndroidManifestApplication_persistentWhenFeatureAvailable
 * @see #AndroidManifestApplication_classLoader
 * @see #AndroidManifestApplication_cantSaveState
 * @see #AndroidManifestApplication_appComponentFactory
 * @see #AndroidManifestApplication_usesNonSdkApi
 * @see #AndroidManifestApplication_hasFragileUserData
 * @see #AndroidManifestApplication_minAspectRatio
 * @see #AndroidManifestApplication_zygotePreloadName
 * @see #AndroidManifestApplication_useEmbeddedDex
 * @see #AndroidManifestApplication_allowClearUserDataOnFailedRestore
 * @see #AndroidManifestApplication_allowAudioPlaybackCapture
 * @see #AndroidManifestApplication_requestLegacyExternalStorage
 */

@Deprecated public static final int[] AndroidManifestApplication;
static { AndroidManifestApplication = new int[0]; }

/**
 * <p>
 * @attr description
 * If {@code true} the app's non sensitive audio can be captured by other apps with
 * {@link android.media.AudioPlaybackCaptureConfiguration} and a
 * {@link android.media.projection.MediaProjection}.
 * If {@code false} the audio played by the application will never be captured by non
 * system apps. It is equivalent to limiting
 * {@link android.media.AudioManager#setAllowedCapturePolicy(int)} to
 * {@link android.media.AudioAttributes#ALLOW_CAPTURE_BY_SYSTEM}.
 * <p>
 * Non sensitive audio is defined as audio whose {@code AttributeUsage} is
 * {@code USAGE_UNKNOWN}), {@code USAGE_MEDIA}) or {@code USAGE_GAME}).
 * All other usages like {@code USAGE_VOICE_COMMUNICATION} will not be captured.
 * <p>
 * The default value is:
 * - {@code true} for apps with targetSdkVersion >= 29 (Q).
 * - {@code false} for apps with targetSdkVersion < 29.
 * <p>
 * See {@link android.media.AudioPlaybackCaptureConfiguration} for more detail.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:allowAudioPlaybackCapture
 */

public static final int AndroidManifestApplication_allowAudioPlaybackCapture = 55; // 0x37

/**
 * <p>
 * @attr description
 * Whether to allow the application to participate in the backup
 * and restore infrastructure.  If this attribute is set to <code>false</code>,
 * no backup or restore of the application will ever be performed, even by a
 * full-system backup that would otherwise cause all application data to be saved
 * via adb.  The default value of this attribute is <code>true</code>.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:allowBackup
 */

public static final int AndroidManifestApplication_allowBackup = 17; // 0x11

/**
 * <p>
 * @attr description
 * Option to let applications specify that user data can/cannot be
 * cleared. This flag is turned on by default.
 * <p>Starting from API level 29 this flag only controls if the user can
 * clear app data from Settings. To control clearing the data after a
 * failed restore use allowClearUserDataOnFailedRestore flag.
 * <p><em>This attribute is usable only by applications
 * included in the system image. Third-party apps cannot use it.</em>
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:allowClearUserData
 */

public static final int AndroidManifestApplication_allowClearUserData = 5; // 0x5

/**
 * <p>
 * @attr description
 * If {@code true} the system will clear app's data if a restore operation fails.
 * This flag is turned on by default. <em>This attribute is usable only by system apps.
 * </em>
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:allowClearUserDataOnFailedRestore
 */

public static final int AndroidManifestApplication_allowClearUserDataOnFailedRestore = 54; // 0x36

/**
 * <p>
 * @attr description
 * Specify that an activity can be moved out of a task it is in to
 * the task it has an affinity for when appropriate.  Use with the
 * application tag (to supply a default for all activities in the
 * application), or with an activity tag (to supply a specific
 * setting for that component).
 * <p>Normally when an application is started, it is associated with
 * the task of the activity that started it and stays there for its
 * entire lifetime.  You can use the allowTaskReparenting feature to force an
 * activity to be re-parented to a different task when the task it is
 * in goes to the background.  Typically this is used to cause the
 * activities of an application to move back to the main task associated
 * with that application.  The activity is re-parented to the task
 * with the same {@link android.R.attr#taskAffinity} as it has.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:allowTaskReparenting
 */

public static final int AndroidManifestApplication_allowTaskReparenting = 14; // 0xe

/**
 * <p>
 * @attr description
 * Declare the category of this app. Categories are used to cluster multiple apps
 * together into meaningful groups, such as when summarizing battery, network, or
 * disk usage. Apps should only define this value when they fit well into one of
 * the specific categories.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>audio</td><td>1</td><td>Apps which primarily work with audio or music, such as music players.</td></tr>
 * <tr><td>game</td><td>0</td><td>Apps which are primarily games.</td></tr>
 * <tr><td>image</td><td>3</td><td>Apps which primarily work with images or photos, such as camera or gallery apps.</td></tr>
 * <tr><td>maps</td><td>6</td><td>Apps which are primarily maps apps, such as navigation apps.</td></tr>
 * <tr><td>news</td><td>5</td><td>Apps which are primarily news apps, such as newspapers, magazines, or sports apps.</td></tr>
 * <tr><td>productivity</td><td>7</td><td>Apps which are primarily productivity apps, such as cloud storage or workplace apps.</td></tr>
 * <tr><td>social</td><td>4</td><td>Apps which are primarily social apps, such as messaging, communication, email, or social network apps.</td></tr>
 * <tr><td>video</td><td>2</td><td>Apps which primarily work with video or movies, such as streaming video apps.</td></tr>
 * </table>
 *
 * @attr name android:appCategory
 */

public static final int AndroidManifestApplication_appCategory = 43; // 0x2b

/**
 * <p>
 * @attr description
 * The (optional) fully-qualified name for a subclass of
 * {@link android.app.AppComponentFactory} that the system uses to instantiate
 * every other manifest defined class. Most applications
 * don't need this attribute. If it's not specified, the system
 * instantiates items without it.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:appComponentFactory
 */

public static final int AndroidManifestApplication_appComponentFactory = 48; // 0x30

/**
 * <p>
 * @attr description
 * The name of the class subclassing <code>BackupAgent</code> to manage
 * backup and restore of the application's data on external storage.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:backupAgent
 */

public static final int AndroidManifestApplication_backupAgent = 16; // 0x10

/**
 * <p>
 * @attr description
 * Indicates that full-data backup operations for this application may
 * be performed even if the application is in a foreground-equivalent
 * state.  <em>Use with caution!</em>  Setting this flag to <code>true</code>
 * can impact app behavior while the user is interacting with the device.
 * <p>If unspecified, the default value of this attribute is <code>false</code>,
 * which means that the OS will avoid backing up the application while it is
 * running in the foreground (such as a music app that is actively playing
 * music via a service in the startForeground() state).
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:backupInForeground
 */

public static final int AndroidManifestApplication_backupInForeground = 40; // 0x28

/**
 * <p>
 * @attr description
 * A Drawable resource providing an extended graphical banner for its
 * associated item. Use with the application tag (to supply a default
 * banner for all application activities), or with the activity, tag to
 * supply a banner for a specific activity.
 * <p>The given banner will be used to display to the user a graphical
 * representation of an activity in the Leanback application launcher.
 * Since banners are displayed only in the Leanback launcher, they should
 * only be used with activities (and applications) that support Leanback
 * mode. These are activities that handle Intents of category
 * {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
 * Intent.CATEGORY_LEANBACK_LAUNCHER}.
 * <p>This must be a reference to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:banner
 */

public static final int AndroidManifestApplication_banner = 30; // 0x1e

/**
 * <p>
 * @attr description
 * Declare that this application can't participate in the normal
 * state save/restore mechanism.  Since it is not able to save and
 * restore its state on demand,
 * it can not participate in the normal activity lifecycle.  It will
 * not be killed while in the background; the user must explicitly
 * quit it.  Only one such app can be running at a time; if the user
 * tries to launch a second such app, they will be prompted
 * to quit the first before doing so.  While the
 * application is running, the user will be informed of this.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:cantSaveState
 */

public static final int AndroidManifestApplication_cantSaveState = 47; // 0x2f

/**
 * <p>
 * @attr description
 * Declares the kind of classloader this application's classes must be loaded with
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:classLoader
 */

public static final int AndroidManifestApplication_classLoader = 46; // 0x2e

/**
 * <p>
 * @attr description
 * Flag indicating whether the application can be debugged, even when
 * running on a device that is running in user mode.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:debuggable
 */

public static final int AndroidManifestApplication_debuggable = 10; // 0xa

/**
 * <p>This symbol is the offset where the {@link android.R.attr#defaultToDeviceProtectedStorage}
 * attribute's value can be found in the {@link #AndroidManifestApplication} array.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:defaultToDeviceProtectedStorage
 */

public static final int AndroidManifestApplication_defaultToDeviceProtectedStorage = 38; // 0x26

/**
 * <p>
 * @attr description
 * Descriptive text for the associated data.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:description
 */

public static final int AndroidManifestApplication_description = 13; // 0xd

/**
 * <p>
 * @attr description
 * Indicate if this component is aware of direct boot lifecycle, and can be
 * safely run before the user has entered their credentials (such as a lock
 * pattern or PIN).
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:directBootAware
 */

public static final int AndroidManifestApplication_directBootAware = 39; // 0x27

/**
 * <p>
 * @attr description
 * Specify whether the components in this application are enabled or not (that is, can be
 * instantiated by the system).
 * If "false", it overrides any component specific values (a value of "true" will not
 * override the component specific values).
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:enabled
 */

public static final int AndroidManifestApplication_enabled = 9; // 0x9

/**
 * <p>
 * @attr description
 * When set installer will extract native libraries. If set to false
 * libraries in the apk must be stored and page-aligned.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:extractNativeLibs
 */

public static final int AndroidManifestApplication_extractNativeLibs = 34; // 0x22

/**
 * <p>
 * @attr description
 * Applications will set this in their manifest to opt-in to or out of full app data back-up
 * and restore. Alternatively they can set it to an xml resource within their app that will
 * be parsed by the BackupAgent to selectively backup files indicated within that xml.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:fullBackupContent
 */

public static final int AndroidManifestApplication_fullBackupContent = 35; // 0x23

/**
 * <p>
 * @attr description
 * Indicates that even though the application provides a <code>BackupAgent</code>,
 * only full-data streaming backup operations are to be performed to save the app's
 * data.  This lets the app rely on full-data backups while still participating in
 * the backup and restore process via the BackupAgent's full-data backup APIs.
 * When this attribute is <code>true</code> the app's BackupAgent overrides of
 * the onBackup() and onRestore() callbacks can be empty stubs.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:fullBackupOnly
 */

public static final int AndroidManifestApplication_fullBackupOnly = 32; // 0x20

/**
 * <p>
 * @attr description
 * <p>Flag indicating whether the application's rendering should be hardware
 * accelerated if possible. This flag is turned on by default for applications
 * that are targeting {@link android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH}
 * or later.</p>
 * <p>This flag can be set on the application and any activity declared
 * in the manifest. When enabled for the application, each activity is
 * automatically assumed to be hardware accelerated. This flag can be
 * overridden in the activity tags, either turning it off (if on for the
 * application) or on (if off for the application.)</p>
 * <p>When this flag is turned on for an activity (either directly or via
 * the application tag), every window created from the activity, including
 * the activity's own window, will be hardware accelerated, if possible.</p>
 * <p>Please refer to the documentation of
 * {@link android.view.WindowManager.LayoutParams#FLAG_HARDWARE_ACCELERATED}
 * for more information on how to control this flag programmatically.</p>
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:hardwareAccelerated
 */

public static final int AndroidManifestApplication_hardwareAccelerated = 23; // 0x17

/**
 * <p>
 * @attr description
 * Indicate whether this application contains code.  If set to false,
 * there is no code associated with it and thus the system will not
 * try to load its code when launching components.  The default is true
 * for normal behavior.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:hasCode
 */

public static final int AndroidManifestApplication_hasCode = 7; // 0x7

/**
 * <p>
 * @attr description
 * If {@code true} the user is prompted to keep the app's data on uninstall
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:hasFragileUserData
 */

public static final int AndroidManifestApplication_hasFragileUserData = 50; // 0x32

/**
 * <p>
 * @attr description
 * A Drawable resource providing a graphical representation of its
 * associated item.  Use with the
 * application tag (to supply a default icon for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific icon for that component).  It may also be
 * used with the intent-filter tag to supply an icon to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given icon will be used to display to the user a graphical
 * representation of its associated component; for example, as the icon
 * for main activity that is displayed in the launcher.  This must be
 * a reference to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:icon
 */

public static final int AndroidManifestApplication_icon = 2; // 0x2

/**
 * <p>
 * @attr description
 * @deprecated replaced by setting appCategory attribute to "game"
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:isGame
 */

@Deprecated public static final int AndroidManifestApplication_isGame = 31; // 0x1f

/**
 * <p>
 * @attr description
 * Whether the application in question should be terminated after its
 * settings have been restored during a full-system restore operation.
 * Single-package restore operations will never cause the application to
 * be shut down.  Full-system restore operations typically only occur once,
 * when the phone is first set up.  Third-party applications will not usually
 * need to use this attribute.
 * <p>The default is <code>true</code>, which means that after the application
 * has finished processing its data during a full-system restore, it will be
 * terminated.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:killAfterRestore
 */

public static final int AndroidManifestApplication_killAfterRestore = 18; // 0x12

/**
 * <p>
 * @attr description
 * A user-legible name for the given item.  Use with the
 * application tag (to supply a default label for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific label for that component).  It may also be
 * used with the intent-filter tag to supply a label to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given label will be used wherever the user sees information
 * about its associated component; for example, as the name of a
 * main activity that is displayed in the launcher.  You should
 * generally set this to a reference to a string resource, so that
 * it can be localized, however it is also allowed to supply a plain
 * string for quick and dirty programming.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:label
 */

public static final int AndroidManifestApplication_label = 1; // 0x1

/**
 * <p>
 * @attr description
 * Request that your application's processes be created with
 * a large Dalvik heap.  This applies to <em>all</em> processes
 * created for the application.  It only applies to the first
 * application loaded into a process; if using a sharedUserId
 * to allow multiple applications to use a process, they all must
 * use this option consistently or will get unpredictable results.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:largeHeap
 */

public static final int AndroidManifestApplication_largeHeap = 24; // 0x18

/**
 * <p>
 * @attr description
 * A Drawable resource providing an extended graphical logo for its
 * associated item. Use with the application tag (to supply a default
 * logo for all application components), or with the activity, receiver,
 * service, or instrumentation tag (to supply a specific logo for that
 * component). It may also be used with the intent-filter tag to supply
 * a logo to show to the user when an activity is being selected based
 * on a particular Intent.
 * <p>The given logo will be used to display to the user a graphical
 * representation of its associated component; for example as the
 * header in the Action Bar. The primary differences between an icon
 * and a logo are that logos are often wider and more detailed, and are
 * used without an accompanying text caption. This must be a reference
 * to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:logo
 */

public static final int AndroidManifestApplication_logo = 22; // 0x16

/**
 * <p>
 * @attr description
 * Name of activity to be launched for managing the application's space on the device.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:manageSpaceActivity
 */

public static final int AndroidManifestApplication_manageSpaceActivity = 4; // 0x4

/**
 * <p>
 * @attr description
 * This value indicates the maximum aspect ratio the activity supports. If the app runs on a
 * device with a wider aspect ratio, the system automatically letterboxes the app, leaving
 * portions of the screen unused so the app can run at its specified maximum aspect ratio.
 * <p>
 * Maximum aspect ratio, expressed as (longer dimension / shorter dimension) in decimal
 * form. For example, if the maximum aspect ratio is 7:3, set value to 2.33.
 * <p>
 * Value needs to be greater or equal to 1.0, otherwise it is ignored.
 * <p>
 * NOTE: This attribute is ignored if the activity has
 * {@link android.R.attr#resizeableActivity} set to true.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:maxAspectRatio
 */

public static final int AndroidManifestApplication_maxAspectRatio = 44; // 0x2c

/**
 * <p>
 * @attr description
 * This value indicates the minimum aspect ratio the activity supports. If the app runs on a
 * device with a narrower aspect ratio, the system automatically letterboxes the app, leaving
 * portions of the screen unused so the app can run at its specified minimum aspect ratio.
 * <p>
 * Minimum aspect ratio, expressed as (longer dimension / shorter dimension) in decimal
 * form. For example, if the minimum aspect ratio is 4:3, set value to 1.33.
 * <p>
 * Value needs to be greater or equal to 1.0, otherwise it is ignored.
 * <p>
 * NOTE: This attribute is ignored if the activity has
 * {@link android.R.attr#resizeableActivity} set to true.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:minAspectRatio
 */

public static final int AndroidManifestApplication_minAspectRatio = 51; // 0x33

/**
 * <p>
 * @attr description
 * Declare that code from this application will need to be loaded into other
 * applications' processes. On devices that support multiple instruction sets,
 * this implies the code might be loaded into a process that's using any of the devices
 * supported instruction sets.
 * <p> The system might treat such applications specially, for eg., by
 * extracting the application's native libraries for all supported instruction
 * sets or by compiling the application's dex code for all supported instruction
 * sets.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:multiArch
 */

public static final int AndroidManifestApplication_multiArch = 33; // 0x21

/**
 * <p>
 * @attr description
 * The (optional) fully-qualified name for a subclass of
 * {@link android.app.Application} that the system instantiates before
 * any other class when an app's process starts. Most applications
 * don't need this attribute. If it's not specified, the system
 * instantiates the base Application class instead.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int AndroidManifestApplication_name = 3; // 0x3

/**
 * <p>
 * @attr description
 * An XML resource with the application's Network Security Config.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:networkSecurityConfig
 */

public static final int AndroidManifestApplication_networkSecurityConfig = 41; // 0x29

/**
 * <p>
 * @attr description
 * Specify a permission that a client is required to have in order to
 * use the associated object.  If the client does not hold the named
 * permission, its request will fail.  See the
 * <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
 * document for more information on permissions.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:permission
 */

public static final int AndroidManifestApplication_permission = 6; // 0x6

/**
 * <p>
 * @attr description
 * Flag to control special persistent mode of an application.  This should
 * not normally be used by applications; it requires that the system keep
 * your application running at all times.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:persistent
 */

public static final int AndroidManifestApplication_persistent = 8; // 0x8

/**
 * <p>
 * @attr description
 * If set, the "persistent" attribute will only be honored if the feature
 * specified here is present on the device.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:persistentWhenFeatureAvailable
 */

public static final int AndroidManifestApplication_persistentWhenFeatureAvailable = 45; // 0x2d

/**
 * <p>
 * @attr description
 * Specify a specific process that the associated code is to run in.
 * Use with the application tag (to supply a default process for all
 * application components), or with the activity, receiver, service,
 * or provider tag (to supply a specific icon for that component).
 * <p>Application components are normally run in a single process that
 * is created for the entire application.  You can use this tag to modify
 * where they run.  If the process name begins with a ':' character,
 * a new process private to that application will be created when needed
 * to run that component (allowing you to spread your application across
 * multiple processes).  If the process name begins with a lower-case
 * character, the component will be run in a global process of that name,
 * provided that you have permission to do so, allowing multiple
 * applications to share one process to reduce resource usage.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:process
 */

public static final int AndroidManifestApplication_process = 11; // 0xb

/**
 * <p>
 * @attr description
 * If {@code true} this app would like to run under the legacy storage
 * model. Note that this may not always be respected due to policy or
 * backwards compatibility reasons.
 * <p>Apps not requesting legacy storage can continue to discover and
 * read media belonging to other apps via {@code MediaStore}.
 * <p>
 * The default value is:
 * - {@code false} for apps with targetSdkVersion >= 29 (Q).
 * - {@code true} for apps with targetSdkVersion < 29.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:requestLegacyExternalStorage
 */

public static final int AndroidManifestApplication_requestLegacyExternalStorage = 56; // 0x38

/**
 * <p>
 * @attr description
 * Declare that this application requires an account of a certain
 * type. The default value is null and indicates that the application can work without
 * any accounts. The type should correspond to the account authenticator type, such as
 * "com.google".
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:requiredAccountType
 */

public static final int AndroidManifestApplication_requiredAccountType = 29; // 0x1d

/**
 * <p>
 * @attr description
 * Flag to specify if this application needs to be present for all users. Only pre-installed
 * applications can request this feature. Default value is false.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:requiredForAllUsers
 */

public static final int AndroidManifestApplication_requiredForAllUsers = 27; // 0x1b

/**
 * <p>
 * @attr description
 * Indicates that it is okay for this activity to be put in multi-window mode. Intended for a
 * multi-window device where there can be multiple activities of various sizes on the screen
 * at the same time.
 * <p>The default value is <code>false</code> for applications with
 * <code>targetSdkVersion</code> lesser than {@link android.os.Build.VERSION_CODES#N} and
 * <code>true</code> otherwise.
 * <p>Setting this flag to <code>false</code> lets the system know that the app may not be
 * tested or optimized for multi-window environment. The system may still put such activity in
 * multi-window with compatibility mode applied. It also does not guarantee that there will be
 * no other apps in multi-window visible on screen (e.g. picture-in-picture) or on other
 * displays. Therefore, this flag cannot be used to assure an exclusive resource access.
 * <p>NOTE: A task's root activity value is applied to all additional activities launched in
 * the task. That is if the root activity of a task is resizeable then the system will treat
 * all other activities in the task as resizeable and will not if the root activity isn't
 * resizeable.
 * <p>NOTE: The value of {@link android.R.attr#screenOrientation} is ignored for
 * resizeable activities when in multi-window mode.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:resizeableActivity
 */

public static final int AndroidManifestApplication_resizeableActivity = 37; // 0x25

/**
 * <p>
 * @attr description
 * Indicate that the application is prepared to attempt a restore of any
 * backed-up dataset, even if the backup is apparently from a newer version
 * of the application than is currently installed on the device.  Setting
 * this attribute to <code>true</code> will permit the Backup Manager to
 * attempt restore even when a version mismatch suggests that the data are
 * incompatible.  <em>Use with caution!</em>
 * <p>The default value of this attribute is <code>false</code>.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:restoreAnyVersion
 */

public static final int AndroidManifestApplication_restoreAnyVersion = 21; // 0x15

/**
 * <p>
 * @attr description
 * @deprecated This attribute is not used by the Android operating system.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:restoreNeedsApplication
 */

@Deprecated public static final int AndroidManifestApplication_restoreNeedsApplication = 19; // 0x13

/**
 * <p>
 * @attr description
 * Declare that this application requires access to restricted accounts of a certain
 * type. The default value is null and restricted accounts won\'t be visible to this
 * application. The type should correspond to the account authenticator type, such as
 * "com.google".
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:restrictedAccountType
 */

public static final int AndroidManifestApplication_restrictedAccountType = 28; // 0x1c

/**
 * <p>
 * @attr description
 * A Drawable resource providing a graphical representation of its
 * associated item.  Use with the
 * application tag (to supply a default round icon for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific round icon for that component).  It may also be
 * used with the intent-filter tag to supply a round icon to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given round icon will be used to display to the user a graphical
 * representation of its associated component; for example, as the round icon
 * for main activity that is displayed in the launcher.  This must be
 * a reference to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:roundIcon
 */

public static final int AndroidManifestApplication_roundIcon = 42; // 0x2a

/**
 * <p>
 * @attr description
 * Declare that your application will be able to deal with RTL (right to left) layouts.
 * The default value is false.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:supportsRtl
 */

public static final int AndroidManifestApplication_supportsRtl = 26; // 0x1a

/**
 * <p>
 * @attr description
 * Specify a task name that activities have an "affinity" to.
 * Use with the application tag (to supply a default affinity for all
 * activities in the application), or with the activity tag (to supply
 * a specific affinity for that component).
 * <p>The default value for this attribute is the same as the package
 * name, indicating that all activities in the manifest should generally
 * be considered a single "application" to the user.  You can use this
 * attribute to modify that behavior: either giving them an affinity
 * for another task, if the activities are intended to be part of that
 * task from the user's perspective, or using an empty string for
 * activities that have no affinity to a task.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:taskAffinity
 */

public static final int AndroidManifestApplication_taskAffinity = 12; // 0xc

/**
 * <p>
 * @attr description
 * Option to indicate this application is only for testing purposes.
 * For example, it may expose functionality or data outside of itself
 * that would cause a security hole, but is useful for testing.  This
 * kind of application can not be installed without the
 * INSTALL_ALLOW_TEST flag, which means only through adb install.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:testOnly
 */

public static final int AndroidManifestApplication_testOnly = 15; // 0xf

/**
 * <p>
 * @attr description
 * The overall theme to use for an activity.  Use with either the
 * application tag (to supply a default theme for all activities) or
 * the activity tag (to supply a specific theme for that activity).
 * <p>This automatically sets
 * your activity's Context to use this theme, and may also be used
 * for "starting" animations prior to the activity being launched (to
 * better match what the activity actually looks like).  It is a reference
 * to a style resource defining the theme.  If not set, the default
 * system theme will be used.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:theme
 */

public static final int AndroidManifestApplication_theme = 0; // 0x0

/**
 * <p>
 * @attr description
 * Extra options for an activity's UI. Applies to either the {@code <activity>} or
 * {@code <application>} tag. If specified on the {@code <application>}
 * tag these will be considered defaults for all activities in the
 * application.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>none</td><td>0</td><td>No extra UI options. This is the default.</td></tr>
 * <tr><td>splitActionBarWhenNarrow</td><td>1</td><td>Split the options menu into a separate bar at the bottom of
 * the screen when severely constrained for horizontal space.
 * (e.g. portrait mode on a phone.) Instead of a small number
 * of action buttons appearing in the action bar at the top
 * of the screen, the action bar will split into the top navigation
 * section and the bottom menu section. Menu items will not be
 * split across the two bars; they will always appear together.</td></tr>
 * </table>
 *
 * @attr name android:uiOptions
 */

public static final int AndroidManifestApplication_uiOptions = 25; // 0x19

/**
 * <p>
 * @attr description
 * Flag to specify if this app wants to run the dex within its APK but not extracted or
 * locally compiled variants. This keeps the dex code protected by the APK signature. Such
 * apps will always run in JIT mode (same when they are first installed), and the system will
 * never generate ahead-of-time compiled code for them. Depending on the app's workload,
 * there may be some run time performance change, noteably the cold start time.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:useEmbeddedDex
 */

public static final int AndroidManifestApplication_useEmbeddedDex = 53; // 0x35

/**
 * <p>
 * @attr description
 * Declare that this application may use cleartext traffic, such as HTTP rather than
 * HTTPS; WebSockets rather than WebSockets Secure; XMPP, IMAP, STMP without STARTTLS or
 * TLS). Defaults to true. If set to false {@code false}, the application declares that it
 * does not intend to use cleartext network traffic, in which case platform components
 * (e.g. HTTP stacks, {@code DownloadManager}, {@code MediaPlayer}) will refuse
 * applications's requests to use cleartext traffic. Third-party libraries are encouraged
 * to honor this flag as well.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:usesCleartextTraffic
 */

public static final int AndroidManifestApplication_usesCleartextTraffic = 36; // 0x24

/**
 * <p>
 * @attr description
 * Declares that this application should be invoked without non-SDK API enforcement
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:usesNonSdkApi
 */

public static final int AndroidManifestApplication_usesNonSdkApi = 49; // 0x31

/**
 * <p>
 * @attr description
 * Flag indicating whether the application requests the VM to operate in
 * the safe mode.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:vmSafeMode
 */

public static final int AndroidManifestApplication_vmSafeMode = 20; // 0x14

/**
 * <p>
 * @attr description
 * Name of the class that gets invoked for preloading application code, when starting an
 * {@link android.R.attr#isolatedProcess} service that has
 * {@link android.R.attr#useAppZygote} set to <code>true</code>. This is a fully
 * qualified class name (for example, com.mycompany.myapp.MyZygotePreload); as a
 * short-hand if the first character of the class is a period then it is appended
 * to your package name. The class must implement the {@link android.app.ZygotePreload}
 * interface.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:zygotePreloadName
 */

public static final int AndroidManifestApplication_zygotePreloadName = 52; // 0x34

/**
 * Attributes that can be supplied in an AndroidManifest.xml
 * <code>category</code> tag, a child of the
 * {@link #AndroidManifestIntentFilter intent-filter} tag.
 * See {@link android.content.IntentFilter#addCategory} for
 * more information.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestCategory_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * </table>
 * @see #AndroidManifestCategory_name
 */

public static final int[] AndroidManifestCategory;
static { AndroidManifestCategory = new int[0]; }

/**
 * <p>
 * @attr description
 * The name of category that is handled, using the Java-style
 * naming convention.  For example, to support
 * {@link android.content.Intent#CATEGORY_LAUNCHER Intent.CATEGORY_LAUNCHER}
 * you would put <code>android.intent.category.LAUNCHER</code> here.
 * Custom actions should generally use a prefix matching the
 * package name.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int AndroidManifestCategory_name = 0; // 0x0

/**
 * Attributes that can be supplied in an AndroidManifest.xml
 * <code>screen</code> tag, a child of <code>compatible-screens</code>,
 * which is itself a child of the root
 * {@link #AndroidManifest manifest} tag.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestCompatibleScreensScreen_screenSize android:screenSize}</code></td><td>Specifies a compatible screen size, as per the device
 * configuration screen size bins.</td></tr>
 * <tr><td><code>{@link #AndroidManifestCompatibleScreensScreen_screenDensity android:screenDensity}</code></td><td>Specifies a compatible screen density, as per the device
 * configuration screen density bins.</td></tr>
 * </table>
 * @see #AndroidManifestCompatibleScreensScreen_screenSize
 * @see #AndroidManifestCompatibleScreensScreen_screenDensity
 */

public static final int[] AndroidManifestCompatibleScreensScreen;
static { AndroidManifestCompatibleScreensScreen = new int[0]; }

/**
 * <p>
 * @attr description
 * Specifies a compatible screen density, as per the device
 * configuration screen density bins.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>hdpi</td><td>f0</td><td>A high density screen, approximately 240dpi.</td></tr>
 * <tr><td>ldpi</td><td>78</td><td>A low density screen, approximately 120dpi.</td></tr>
 * <tr><td>mdpi</td><td>a0</td><td>A medium density screen, approximately 160dpi.</td></tr>
 * <tr><td>xhdpi</td><td>140</td><td>An extra high density screen, approximately 320dpi.</td></tr>
 * <tr><td>xxhdpi</td><td>1e0</td><td>An extra extra high density screen, approximately 480dpi.</td></tr>
 * <tr><td>xxxhdpi</td><td>280</td><td>An extra extra extra high density screen, approximately 640dpi.</td></tr>
 * </table>
 *
 * @attr name android:screenDensity
 */

public static final int AndroidManifestCompatibleScreensScreen_screenDensity = 1; // 0x1

/**
 * <p>
 * @attr description
 * Specifies a compatible screen size, as per the device
 * configuration screen size bins.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>large</td><td>190</td><td>A large screen configuration, at least 400x530dp.</td></tr>
 * <tr><td>normal</td><td>12c</td><td>A normal screen configuration, at least 320x480dp.</td></tr>
 * <tr><td>small</td><td>c8</td><td>A small screen configuration, at least 240x320dp.</td></tr>
 * <tr><td>xlarge</td><td>1f4</td><td>An extra large screen configuration, at least 600x800dp.</td></tr>
 * </table>
 *
 * @attr name android:screenSize
 */

public static final int AndroidManifestCompatibleScreensScreen_screenSize = 0; // 0x0

/**
 * Attributes that can be supplied in an AndroidManifest.xml
 * <code>data</code> tag, a child of the
 * {@link #AndroidManifestIntentFilter intent-filter} tag, describing
 * the types of data that match.  This tag can be specified multiple
 * times to supply multiple data options, as described in the
 * {@link android.content.IntentFilter} class.  Note that all such
 * tags are adding options to the same IntentFilter so that, for example,
 * <code>&lt;data android:scheme="myscheme" android:host="me.com" /&gt;</code>
 * is equivalent to <code>&lt;data android:scheme="myscheme" /&gt;
 * &lt;data android:host="me.com" /&gt;</code>.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestData_mimeType android:mimeType}</code></td><td>Specify a MIME type that is handled, as per
 * {@link android.content.IntentFilter#addDataType
 * IntentFilter.addDataType()}.</td></tr>
 * <tr><td><code>{@link #AndroidManifestData_scheme android:scheme}</code></td><td>Specify a URI scheme that is handled, as per
 * {@link android.content.IntentFilter#addDataScheme
 * IntentFilter.addDataScheme()}.</td></tr>
 * <tr><td><code>{@link #AndroidManifestData_host android:host}</code></td><td>Specify a URI authority host that is handled, as per
 * {@link android.content.IntentFilter#addDataAuthority
 * IntentFilter.addDataAuthority()}.</td></tr>
 * <tr><td><code>{@link #AndroidManifestData_port android:port}</code></td><td>Specify a URI authority port that is handled, as per
 * {@link android.content.IntentFilter#addDataAuthority
 * IntentFilter.addDataAuthority()}.</td></tr>
 * <tr><td><code>{@link #AndroidManifestData_path android:path}</code></td><td>Specify a URI path that must exactly match, as per
 * {@link android.os.PatternMatcher} with
 * {@link android.os.PatternMatcher#PATTERN_LITERAL}.</td></tr>
 * <tr><td><code>{@link #AndroidManifestData_pathPrefix android:pathPrefix}</code></td><td>Specify a URI path that must be a prefix to match, as per
 * {@link android.os.PatternMatcher} with
 * {@link android.os.PatternMatcher#PATTERN_PREFIX}.</td></tr>
 * <tr><td><code>{@link #AndroidManifestData_pathPattern android:pathPattern}</code></td><td>Specify a URI path that matches a simple pattern, as per
 * {@link android.os.PatternMatcher} with
 * {@link android.os.PatternMatcher#PATTERN_SIMPLE_GLOB}.</td></tr>
 * <tr><td><code>{@link #AndroidManifestData_ssp android:ssp}</code></td><td>Specify a URI scheme specific part that must exactly match, as per
 * {@link android.content.IntentFilter#addDataSchemeSpecificPart
 * IntentFilter.addDataSchemeSpecificPart()} with
 * {@link android.os.PatternMatcher#PATTERN_LITERAL}.</td></tr>
 * <tr><td><code>{@link #AndroidManifestData_sspPrefix android:sspPrefix}</code></td><td>Specify a URI scheme specific part that must be a prefix to match, as per
 * {@link android.content.IntentFilter#addDataSchemeSpecificPart
 * IntentFilter.addDataSchemeSpecificPart()} with
 * {@link android.os.PatternMatcher#PATTERN_PREFIX}.</td></tr>
 * <tr><td><code>{@link #AndroidManifestData_sspPattern android:sspPattern}</code></td><td>Specify a URI scheme specific part that matches a simple pattern, as per
 * {@link android.content.IntentFilter#addDataSchemeSpecificPart
 * IntentFilter.addDataSchemeSpecificPart()} with
 * {@link android.os.PatternMatcher#PATTERN_SIMPLE_GLOB}.</td></tr>
 * </table>
 * @see #AndroidManifestData_mimeType
 * @see #AndroidManifestData_scheme
 * @see #AndroidManifestData_host
 * @see #AndroidManifestData_port
 * @see #AndroidManifestData_path
 * @see #AndroidManifestData_pathPrefix
 * @see #AndroidManifestData_pathPattern
 * @see #AndroidManifestData_ssp
 * @see #AndroidManifestData_sspPrefix
 * @see #AndroidManifestData_sspPattern
 */

public static final int[] AndroidManifestData;
static { AndroidManifestData = new int[0]; }

/**
 * <p>
 * @attr description
 * Specify a URI authority host that is handled, as per
 * {@link android.content.IntentFilter#addDataAuthority
 * IntentFilter.addDataAuthority()}.
 * <p><em>Note: host name matching in the Android framework is
 * case-sensitive, unlike the formal RFC.  As a result,
 * host names here should always use lower case letters.</em></p>
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:host
 */

public static final int AndroidManifestData_host = 2; // 0x2

/**
 * <p>
 * @attr description
 * Specify a MIME type that is handled, as per
 * {@link android.content.IntentFilter#addDataType
 * IntentFilter.addDataType()}.
 * <p><em>Note: MIME type matching in the Android framework is
 * case-sensitive, unlike formal RFC MIME types.  As a result,
 * MIME types here should always use lower case letters.</em></p>
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:mimeType
 */

public static final int AndroidManifestData_mimeType = 0; // 0x0

/**
 * <p>
 * @attr description
 * Specify a URI path that must exactly match, as per
 * {@link android.content.IntentFilter#addDataPath
 * IntentFilter.addDataPath()} with
 * {@link android.os.PatternMatcher#PATTERN_LITERAL}.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:path
 */

public static final int AndroidManifestData_path = 4; // 0x4

/**
 * <p>
 * @attr description
 * Specify a URI path that matches a simple pattern, as per
 * {@link android.content.IntentFilter#addDataPath
 * IntentFilter.addDataPath()} with
 * {@link android.os.PatternMatcher#PATTERN_SIMPLE_GLOB}.
 * Note that because '\' is used as an escape character when
 * reading the string from XML (before it is parsed as a pattern),
 * you will need to double-escape: for example a literal "*" would
 * be written as "\\*" and a literal "\" would be written as
 * "\\\\".  This is basically the same as what you would need to
 * write if constructing the string in Java code.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:pathPattern
 */

public static final int AndroidManifestData_pathPattern = 6; // 0x6

/**
 * <p>
 * @attr description
 * Specify a URI path that must be a prefix to match, as per
 * {@link android.content.IntentFilter#addDataPath
 * IntentFilter.addDataPath()} with
 * {@link android.os.PatternMatcher#PATTERN_PREFIX}.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:pathPrefix
 */

public static final int AndroidManifestData_pathPrefix = 5; // 0x5

/**
 * <p>
 * @attr description
 * Specify a URI authority port that is handled, as per
 * {@link android.content.IntentFilter#addDataAuthority
 * IntentFilter.addDataAuthority()}.  If a host is supplied
 * but not a port, any port is matched.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:port
 */

public static final int AndroidManifestData_port = 3; // 0x3

/**
 * <p>
 * @attr description
 * Specify a URI scheme that is handled, as per
 * {@link android.content.IntentFilter#addDataScheme
 * IntentFilter.addDataScheme()}.
 * <p><em>Note: scheme matching in the Android framework is
 * case-sensitive, unlike the formal RFC.  As a result,
 * schemes here should always use lower case letters.</em></p>
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:scheme
 */

public static final int AndroidManifestData_scheme = 1; // 0x1

/**
 * <p>
 * @attr description
 * Specify a URI scheme specific part that must exactly match, as per
 * {@link android.content.IntentFilter#addDataSchemeSpecificPart
 * IntentFilter.addDataSchemeSpecificPart()} with
 * {@link android.os.PatternMatcher#PATTERN_LITERAL}.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:ssp
 */

public static final int AndroidManifestData_ssp = 7; // 0x7

/**
 * <p>
 * @attr description
 * Specify a URI scheme specific part that matches a simple pattern, as per
 * {@link android.content.IntentFilter#addDataSchemeSpecificPart
 * IntentFilter.addDataSchemeSpecificPart()} with
 * {@link android.os.PatternMatcher#PATTERN_SIMPLE_GLOB}.
 * Note that because '\' is used as an escape character when
 * reading the string from XML (before it is parsed as a pattern),
 * you will need to double-escape: for example a literal "*" would
 * be written as "\\*" and a literal "\" would be written as
 * "\\\\".  This is basically the same as what you would need to
 * write if constructing the string in Java code.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:sspPattern
 */

public static final int AndroidManifestData_sspPattern = 9; // 0x9

/**
 * <p>
 * @attr description
 * Specify a URI scheme specific part that must be a prefix to match, as per
 * {@link android.content.IntentFilter#addDataSchemeSpecificPart
 * IntentFilter.addDataSchemeSpecificPart()} with
 * {@link android.os.PatternMatcher#PATTERN_PREFIX}.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:sspPrefix
 */

public static final int AndroidManifestData_sspPrefix = 8; // 0x8

/**
 * The <code>feature-group</code> tag specifies
 * a set of one or more <code>uses-feature</code> elements that
 * the application can utilize. An application uses multiple
 * <code>feature-group</code> sets to indicate that it can support
 * different combinations of features.
 * <p>This appears as a child tag of the root
 * {@link #AndroidManifest manifest} tag.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestFeatureGroup_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
 * </table>
 * @see #AndroidManifestFeatureGroup_label
 */

public static final int[] AndroidManifestFeatureGroup;
static { AndroidManifestFeatureGroup = new int[0]; }

/**
 * <p>
 * @attr description
 * The human-readable name of the feature group.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:label
 */

public static final int AndroidManifestFeatureGroup_label = 0; // 0x0

/**
 * Attributes that can be supplied in an AndroidManifest.xml
 * <code>grant-uri-permission</code> tag, a child of the
 * {@link #AndroidManifestProvider provider} tag, describing a specific
 * URI path that can be granted as a permission.  This tag can be
 * specified multiple time to supply multiple paths.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestGrantUriPermission_path android:path}</code></td><td>Specify a URI path that must exactly match, as per
 * {@link android.os.PatternMatcher} with
 * {@link android.os.PatternMatcher#PATTERN_LITERAL}.</td></tr>
 * <tr><td><code>{@link #AndroidManifestGrantUriPermission_pathPrefix android:pathPrefix}</code></td><td>Specify a URI path that must be a prefix to match, as per
 * {@link android.os.PatternMatcher} with
 * {@link android.os.PatternMatcher#PATTERN_PREFIX}.</td></tr>
 * <tr><td><code>{@link #AndroidManifestGrantUriPermission_pathPattern android:pathPattern}</code></td><td>Specify a URI path that matches a simple pattern, as per
 * {@link android.os.PatternMatcher} with
 * {@link android.os.PatternMatcher#PATTERN_SIMPLE_GLOB}.</td></tr>
 * </table>
 * @see #AndroidManifestGrantUriPermission_path
 * @see #AndroidManifestGrantUriPermission_pathPrefix
 * @see #AndroidManifestGrantUriPermission_pathPattern
 */

public static final int[] AndroidManifestGrantUriPermission;
static { AndroidManifestGrantUriPermission = new int[0]; }

/**
 * <p>
 * @attr description
 * Specify a URI path that must exactly match, as per
 * {@link android.os.PatternMatcher} with
 * {@link android.os.PatternMatcher#PATTERN_LITERAL}.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:path
 */

public static final int AndroidManifestGrantUriPermission_path = 0; // 0x0

/**
 * <p>
 * @attr description
 * Specify a URI path that matches a simple pattern, as per
 * {@link android.os.PatternMatcher} with
 * {@link android.os.PatternMatcher#PATTERN_SIMPLE_GLOB}.
 * Note that because '\' is used as an escape character when
 * reading the string from XML (before it is parsed as a pattern),
 * you will need to double-escape: for example a literal "*" would
 * be written as "\\*" and a literal "\" would be written as
 * "\\\\".  This is basically the same as what you would need to
 * write if constructing the string in Java code.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:pathPattern
 */

public static final int AndroidManifestGrantUriPermission_pathPattern = 2; // 0x2

/**
 * <p>
 * @attr description
 * Specify a URI path that must be a prefix to match, as per
 * {@link android.os.PatternMatcher} with
 * {@link android.os.PatternMatcher#PATTERN_PREFIX}.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:pathPrefix
 */

public static final int AndroidManifestGrantUriPermission_pathPrefix = 1; // 0x1

/**
 * Attributes that can be supplied in an AndroidManifest.xml
 * <code>instrumentation</code> tag, a child of the root
 * {@link #AndroidManifest manifest} tag.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestInstrumentation_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestInstrumentation_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestInstrumentation_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestInstrumentation_targetPackage android:targetPackage}</code></td><td>The name of the application package that an Instrumentation object
 * will run against.</td></tr>
 * <tr><td><code>{@link #AndroidManifestInstrumentation_handleProfiling android:handleProfiling}</code></td><td>Flag indicating that an Instrumentation class wants to take care
 * of starting/stopping profiling itself, rather than relying on
 * the default behavior of profiling the complete time it is running.</td></tr>
 * <tr><td><code>{@link #AndroidManifestInstrumentation_functionalTest android:functionalTest}</code></td><td>Flag indicating that an Instrumentation class should be run as a
 * functional test.</td></tr>
 * <tr><td><code>{@link #AndroidManifestInstrumentation_logo android:logo}</code></td><td>A Drawable resource providing an extended graphical logo for its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestInstrumentation_banner android:banner}</code></td><td>A Drawable resource providing an extended graphical banner for its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestInstrumentation_roundIcon android:roundIcon}</code></td><td>A Drawable resource providing a graphical representation of its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestInstrumentation_targetProcesses android:targetProcesses}</code></td><td>The name of an application's processes that an Instrumentation object
 * will run against.</td></tr>
 * </table>
 * @see #AndroidManifestInstrumentation_label
 * @see #AndroidManifestInstrumentation_icon
 * @see #AndroidManifestInstrumentation_name
 * @see #AndroidManifestInstrumentation_targetPackage
 * @see #AndroidManifestInstrumentation_handleProfiling
 * @see #AndroidManifestInstrumentation_functionalTest
 * @see #AndroidManifestInstrumentation_logo
 * @see #AndroidManifestInstrumentation_banner
 * @see #AndroidManifestInstrumentation_roundIcon
 * @see #AndroidManifestInstrumentation_targetProcesses
 */

public static final int[] AndroidManifestInstrumentation;
static { AndroidManifestInstrumentation = new int[0]; }

/**
 * <p>
 * @attr description
 * A Drawable resource providing an extended graphical banner for its
 * associated item. Use with the application tag (to supply a default
 * banner for all application activities), or with the activity, tag to
 * supply a banner for a specific activity.
 * <p>The given banner will be used to display to the user a graphical
 * representation of an activity in the Leanback application launcher.
 * Since banners are displayed only in the Leanback launcher, they should
 * only be used with activities (and applications) that support Leanback
 * mode. These are activities that handle Intents of category
 * {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
 * Intent.CATEGORY_LEANBACK_LAUNCHER}.
 * <p>This must be a reference to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:banner
 */

public static final int AndroidManifestInstrumentation_banner = 7; // 0x7

/**
 * <p>
 * @attr description
 * Flag indicating that an Instrumentation class should be run as a
 * functional test.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:functionalTest
 */

public static final int AndroidManifestInstrumentation_functionalTest = 5; // 0x5

/**
 * <p>
 * @attr description
 * Flag indicating that an Instrumentation class wants to take care
 * of starting/stopping profiling itself, rather than relying on
 * the default behavior of profiling the complete time it is running.
 * This allows it to target profiling data at a specific set of
 * operations.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:handleProfiling
 */

public static final int AndroidManifestInstrumentation_handleProfiling = 4; // 0x4

/**
 * <p>
 * @attr description
 * A Drawable resource providing a graphical representation of its
 * associated item.  Use with the
 * application tag (to supply a default icon for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific icon for that component).  It may also be
 * used with the intent-filter tag to supply an icon to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given icon will be used to display to the user a graphical
 * representation of its associated component; for example, as the icon
 * for main activity that is displayed in the launcher.  This must be
 * a reference to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:icon
 */

public static final int AndroidManifestInstrumentation_icon = 1; // 0x1

/**
 * <p>
 * @attr description
 * A user-legible name for the given item.  Use with the
 * application tag (to supply a default label for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific label for that component).  It may also be
 * used with the intent-filter tag to supply a label to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given label will be used wherever the user sees information
 * about its associated component; for example, as the name of a
 * main activity that is displayed in the launcher.  You should
 * generally set this to a reference to a string resource, so that
 * it can be localized, however it is also allowed to supply a plain
 * string for quick and dirty programming.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:label
 */

public static final int AndroidManifestInstrumentation_label = 0; // 0x0

/**
 * <p>
 * @attr description
 * A Drawable resource providing an extended graphical logo for its
 * associated item. Use with the application tag (to supply a default
 * logo for all application components), or with the activity, receiver,
 * service, or instrumentation tag (to supply a specific logo for that
 * component). It may also be used with the intent-filter tag to supply
 * a logo to show to the user when an activity is being selected based
 * on a particular Intent.
 * <p>The given logo will be used to display to the user a graphical
 * representation of its associated component; for example as the
 * header in the Action Bar. The primary differences between an icon
 * and a logo are that logos are often wider and more detailed, and are
 * used without an accompanying text caption. This must be a reference
 * to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:logo
 */

public static final int AndroidManifestInstrumentation_logo = 6; // 0x6

/**
 * <p>
 * @attr description
 * Required name of the class implementing the instrumentation, deriving from
 * {@link android.app.Instrumentation}.  This is a fully
 * qualified class name (for example, com.mycompany.myapp.MyActivity); as a
 * short-hand if the first character of the class
 * is a period then it is appended to your package name.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int AndroidManifestInstrumentation_name = 2; // 0x2

/**
 * <p>
 * @attr description
 * A Drawable resource providing a graphical representation of its
 * associated item.  Use with the
 * application tag (to supply a default round icon for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific round icon for that component).  It may also be
 * used with the intent-filter tag to supply a round icon to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given round icon will be used to display to the user a graphical
 * representation of its associated component; for example, as the round icon
 * for main activity that is displayed in the launcher.  This must be
 * a reference to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:roundIcon
 */

public static final int AndroidManifestInstrumentation_roundIcon = 8; // 0x8

/**
 * <p>
 * @attr description
 * The name of the application package that an Instrumentation object
 * will run against.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:targetPackage
 */

public static final int AndroidManifestInstrumentation_targetPackage = 3; // 0x3

/**
 * <p>
 * @attr description
 * The name of an application's processes that an Instrumentation object
 * will run against.  If not specified, only runs in the main process of the targetPackage.
 * Can either be a comma-separated list of process names or '*' for any process that
 * launches to run targetPackage code.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:targetProcesses
 */

public static final int AndroidManifestInstrumentation_targetProcesses = 9; // 0x9

/**
 * The <code>intent-filter</code> tag is used to construct an
 * {@link android.content.IntentFilter} object that will be used
 * to determine which component can handle a particular
 * {@link android.content.Intent} that has been given to the system.
 * It can be used as a child of the
 * {@link #AndroidManifestActivity activity},
 * {@link #AndroidManifestReceiver receiver} and
 * {@link #AndroidManifestService service}
 * tags.
 * <p> Zero or more {@link #AndroidManifestAction action},
 * {@link #AndroidManifestCategory category}, and/or
 * {@link #AndroidManifestData data} tags should be
 * included inside to describe the contents of the filter.
 * <p> The optional label and icon attributes here are used with
 * an activity to supply an alternative description of that activity
 * when it is being started through an Intent matching this filter.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestIntentFilter_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestIntentFilter_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestIntentFilter_priority android:priority}</code></td><td>Specify the relative importance or ability in handling a particular
 * Intent.</td></tr>
 * <tr><td><code>{@link #AndroidManifestIntentFilter_order android:order}</code></td><td>The order for the Preference (lower values are to be ordered first).</td></tr>
 * <tr><td><code>{@link #AndroidManifestIntentFilter_logo android:logo}</code></td><td>A Drawable resource providing an extended graphical logo for its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestIntentFilter_banner android:banner}</code></td><td>A Drawable resource providing an extended graphical banner for its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestIntentFilter_autoVerify android:autoVerify}</code></td><td>Specify whether an activity intent filter will need to be verified thru its set
 * of data URIs.</td></tr>
 * <tr><td><code>{@link #AndroidManifestIntentFilter_roundIcon android:roundIcon}</code></td><td>A Drawable resource providing a graphical representation of its
 * associated item.</td></tr>
 * </table>
 * @see #AndroidManifestIntentFilter_label
 * @see #AndroidManifestIntentFilter_icon
 * @see #AndroidManifestIntentFilter_priority
 * @see #AndroidManifestIntentFilter_order
 * @see #AndroidManifestIntentFilter_logo
 * @see #AndroidManifestIntentFilter_banner
 * @see #AndroidManifestIntentFilter_autoVerify
 * @see #AndroidManifestIntentFilter_roundIcon
 */

public static final int[] AndroidManifestIntentFilter;
static { AndroidManifestIntentFilter = new int[0]; }

/**
 * <p>
 * @attr description
 * Specify whether an activity intent filter will need to be verified thru its set
 * of data URIs. This will only be used when the Intent's action is set to
 * {@link android.content.Intent#ACTION_VIEW Intent.ACTION_VIEW} and the Intent's category is
 * set to {@link android.content.Intent#CATEGORY_BROWSABLE Intent.CATEGORY_BROWSABLE} and the
 * intern filter data scheme is set to "http" or "https". When set to true, the intent filter
 * will need to use its data tag for getting the URIs to verify with.
 * For each URI, an HTTPS network request will be done to <code>/.well-known/statements.json</code>
 * host to verify that the web site is okay with the app intercepting the URI.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:autoVerify
 */

public static final int AndroidManifestIntentFilter_autoVerify = 6; // 0x6

/**
 * <p>
 * @attr description
 * A Drawable resource providing an extended graphical banner for its
 * associated item. Use with the application tag (to supply a default
 * banner for all application activities), or with the activity, tag to
 * supply a banner for a specific activity.
 * <p>The given banner will be used to display to the user a graphical
 * representation of an activity in the Leanback application launcher.
 * Since banners are displayed only in the Leanback launcher, they should
 * only be used with activities (and applications) that support Leanback
 * mode. These are activities that handle Intents of category
 * {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
 * Intent.CATEGORY_LEANBACK_LAUNCHER}.
 * <p>This must be a reference to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:banner
 */

public static final int AndroidManifestIntentFilter_banner = 5; // 0x5

/**
 * <p>
 * @attr description
 * A Drawable resource providing a graphical representation of its
 * associated item.  Use with the
 * application tag (to supply a default icon for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific icon for that component).  It may also be
 * used with the intent-filter tag to supply an icon to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given icon will be used to display to the user a graphical
 * representation of its associated component; for example, as the icon
 * for main activity that is displayed in the launcher.  This must be
 * a reference to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:icon
 */

public static final int AndroidManifestIntentFilter_icon = 1; // 0x1

/**
 * <p>
 * @attr description
 * A user-legible name for the given item.  Use with the
 * application tag (to supply a default label for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific label for that component).  It may also be
 * used with the intent-filter tag to supply a label to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given label will be used wherever the user sees information
 * about its associated component; for example, as the name of a
 * main activity that is displayed in the launcher.  You should
 * generally set this to a reference to a string resource, so that
 * it can be localized, however it is also allowed to supply a plain
 * string for quick and dirty programming.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:label
 */

public static final int AndroidManifestIntentFilter_label = 0; // 0x0

/**
 * <p>
 * @attr description
 * A Drawable resource providing an extended graphical logo for its
 * associated item. Use with the application tag (to supply a default
 * logo for all application components), or with the activity, receiver,
 * service, or instrumentation tag (to supply a specific logo for that
 * component). It may also be used with the intent-filter tag to supply
 * a logo to show to the user when an activity is being selected based
 * on a particular Intent.
 * <p>The given logo will be used to display to the user a graphical
 * representation of its associated component; for example as the
 * header in the Action Bar. The primary differences between an icon
 * and a logo are that logos are often wider and more detailed, and are
 * used without an accompanying text caption. This must be a reference
 * to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:logo
 */

public static final int AndroidManifestIntentFilter_logo = 4; // 0x4

/**
 * <p>
 * @attr description
 * Within an application, multiple intent filters may match a particular
 * intent. This allows the app author to specify the order filters should
 * be considered. We don't want to use priority because that is global
 * across applications.
 * <p>Only use if you really need to forcibly set the order in which
 * filters are evaluated. It is preferred to target an activity with a
 * directed intent instead.
 * <p>The value is a single integer, with higher numbers considered to
 * be better. If not specified, the default order is 0.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:order
 */

public static final int AndroidManifestIntentFilter_order = 3; // 0x3

/**
 * <p>
 * @attr description
 * Specify the relative importance or ability in handling a particular
 * Intent.  For receivers, this controls the order in which they are
 * executed to receive a broadcast (note that for
 * asynchronous broadcasts, this order is ignored).  For activities,
 * this provides information about how good an activity is handling an
 * Intent; when multiple activities match an intent and have different
 * priorities, only those with the higher priority value will be
 * considered a match.
 * <p>Only use if you really need to impose some specific
 * order in which the broadcasts are received, or want to forcibly
 * place an activity to always be preferred over others.  The value is a
 * single integer, with higher numbers considered to be better.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:priority
 */

public static final int AndroidManifestIntentFilter_priority = 2; // 0x2

/**
 * <p>
 * @attr description
 * A Drawable resource providing a graphical representation of its
 * associated item.  Use with the
 * application tag (to supply a default round icon for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific round icon for that component).  It may also be
 * used with the intent-filter tag to supply a round icon to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given round icon will be used to display to the user a graphical
 * representation of its associated component; for example, as the round icon
 * for main activity that is displayed in the launcher.  This must be
 * a reference to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:roundIcon
 */

public static final int AndroidManifestIntentFilter_roundIcon = 7; // 0x7

/**
 * Attributes that can be used with a AndroidManifestKeySet.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestKeySet_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * </table>
 * @see #AndroidManifestKeySet_name
 */

public static final int[] AndroidManifestKeySet;
static { AndroidManifestKeySet = new int[0]; }

/**
 * <p>
 * @attr description
 * A unique name for the given item.  This must use a Java-style naming
 * convention to ensure the name is unique, for example
 * "com.mycompany.MyName".
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int AndroidManifestKeySet_name = 0; // 0x0

/**
 * <code>layout</code> tag allows configuring the layout for the activity within multi-window
 * environment.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestLayout_gravity android:gravity}</code></td><td>Specifies how an object should position its content, on both the X and Y axes,
 * within its own bounds.</td></tr>
 * <tr><td><code>{@link #AndroidManifestLayout_minWidth android:minWidth}</code></td><td></td></tr>
 * <tr><td><code>{@link #AndroidManifestLayout_minHeight android:minHeight}</code></td><td></td></tr>
 * <tr><td><code>{@link #AndroidManifestLayout_defaultWidth android:defaultWidth}</code></td><td>Default width of the activity.</td></tr>
 * <tr><td><code>{@link #AndroidManifestLayout_defaultHeight android:defaultHeight}</code></td><td>Default height of the activity.</td></tr>
 * </table>
 * @see #AndroidManifestLayout_gravity
 * @see #AndroidManifestLayout_minWidth
 * @see #AndroidManifestLayout_minHeight
 * @see #AndroidManifestLayout_defaultWidth
 * @see #AndroidManifestLayout_defaultHeight
 */

public static final int[] AndroidManifestLayout;
static { AndroidManifestLayout = new int[0]; }

/**
 * <p>
 * @attr description
 * Default height of the activity. Can be either a fixed value or fraction, in which case
 * the height will be constructed as a fraction of the total available height.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:defaultHeight
 */

public static final int AndroidManifestLayout_defaultHeight = 4; // 0x4

/**
 * <p>
 * @attr description
 * Default width of the activity. Can be either a fixed value or fraction, in which case
 * the width will be constructed as a fraction of the total available width.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:defaultWidth
 */

public static final int AndroidManifestLayout_defaultWidth = 3; // 0x3

/**
 * <p>
 * @attr description
 * Where to initially position the activity inside the available space. Uses constants
 * defined in {@link android.view.Gravity}.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
 * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
 * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
 * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
 * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the horizontal gravity: a left gravity will clip the right
 * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
 * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the vertical gravity: a top gravity will clip the bottom
 * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
 * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
 * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
 * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
 * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
 * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
 * </table>
 *
 * @attr name android:gravity
 */

public static final int AndroidManifestLayout_gravity = 0; // 0x0

/**
 * <p>
 * @attr description
 * Minimal height of the activity.
 * <p><strong>NOTE:</strong> A task's root activity value is applied to all additional
 * activities launched in the task. That is if the root activity of a task set minimal height,
 * then the system will set the same minimal height on all other activities in the task. It
 * will also ignore any other minimal height attributes of non-root activities.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:minHeight
 */

public static final int AndroidManifestLayout_minHeight = 2; // 0x2

/**
 * <p>
 * @attr description
 * Minimal width of the activity.
 * <p><strong>NOTE:</strong> A task's root activity value is applied to all additional
 * activities launched in the task. That is if the root activity of a task set minimal width,
 * then the system will set the same minimal width on all other activities in the task. It
 * will also ignore any other minimal width attributes of non-root activities.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:minWidth
 */

public static final int AndroidManifestLayout_minWidth = 1; // 0x1

/**
 * The <code>library</code> tag declares that this apk is providing itself
 * as a shared library for other applications to use.  It can only be used
 * with apks that are built in to the system image.  Other apks can link to
 * it with the {@link #AndroidManifestUsesLibrary uses-library} tag.
 * <p>This appears as a child tag of the
 * {@link #AndroidManifestApplication application} tag.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestLibrary_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * </table>
 * @see #AndroidManifestLibrary_name
 */

public static final int[] AndroidManifestLibrary;
static { AndroidManifestLibrary = new int[0]; }

/**
 * <p>
 * @attr description
 * Required public name of the library, which other components and
 * packages will use when referring to this library.  This is a string using
 * Java-style scoping to ensure it is unique.  The name should typically
 * be the same as the apk's package name.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int AndroidManifestLibrary_name = 0; // 0x0

/**
 * The <code>meta-data</code> tag is used to attach additional
 * arbitrary data to an application component.  The data can later
 * be retrieved programmatically from the
 * {@link android.content.pm.ComponentInfo#metaData
 * ComponentInfo.metaData} field.  There is no meaning given to this
 * data by the system.  You may supply the data through either the
 * <code>value</code> or <code>resource</code> attribute; if both
 * are given, then <code>resource</code> will be used.
 * <p>It is highly recommended that you avoid supplying related data as
 * multiple separate meta-data entries.  Instead, if you have complex
 * data to associate with a component, then use the <code>resource</code>
 * attribute to assign an XML resource that the client can parse to
 * retrieve the complete data.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestMetaData_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestMetaData_value android:value}</code></td><td>Concrete value to assign to this piece of named meta-data.</td></tr>
 * <tr><td><code>{@link #AndroidManifestMetaData_resource android:resource}</code></td><td>Resource identifier to assign to this piece of named meta-data.</td></tr>
 * </table>
 * @see #AndroidManifestMetaData_name
 * @see #AndroidManifestMetaData_value
 * @see #AndroidManifestMetaData_resource
 */

public static final int[] AndroidManifestMetaData;
static { AndroidManifestMetaData = new int[0]; }

/**
 * <p>
 * @attr description
 * A unique name for the given item.  This must use a Java-style naming
 * convention to ensure the name is unique, for example
 * "com.mycompany.MyName".
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int AndroidManifestMetaData_name = 0; // 0x0

/**
 * <p>
 * @attr description
 * Resource identifier to assign to this piece of named meta-data.
 * The resource identifier can later be retrieved from the meta data
 * Bundle through {@link android.os.Bundle#getInt Bundle.getInt}.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:resource
 */

public static final int AndroidManifestMetaData_resource = 2; // 0x2

/**
 * <p>
 * @attr description
 * Concrete value to assign to this piece of named meta-data.
 * The data can later be retrieved from the meta data Bundle
 * through {@link android.os.Bundle#getString Bundle.getString},
 * {@link android.os.Bundle#getInt Bundle.getInt},
 * {@link android.os.Bundle#getBoolean Bundle.getBoolean},
 * or {@link android.os.Bundle#getFloat Bundle.getFloat} depending
 * on the type used here.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:value
 */

public static final int AndroidManifestMetaData_value = 1; // 0x1

/**
 * Private tag to declare the original package name that this package is
 * based on.  Only used for packages installed in the system image.  If
 * given, and different than the actual package name, and the given
 * original package was previously installed on the device but the new
 * one was not, then the data for the old one will be renamed to be
 * for the new package.
 * <p>This appears as a child tag of the root
 * {@link #AndroidManifest manifest} tag.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestOriginalPackage_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * </table>
 * @see #AndroidManifestOriginalPackage_name
 */

public static final int[] AndroidManifestOriginalPackage;
static { AndroidManifestOriginalPackage = new int[0]; }

/**
 * <p>
 * @attr description
 * A unique name for the given item.  This must use a Java-style naming
 * convention to ensure the name is unique, for example
 * "com.mycompany.MyName".
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int AndroidManifestOriginalPackage_name = 0; // 0x0

/**
 * Attributes relating to a package verifier.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestPackageVerifier_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestPackageVerifier_publicKey android:publicKey}</code></td><td>The attribute that holds a Base64-encoded public key.</td></tr>
 * </table>
 * @see #AndroidManifestPackageVerifier_name
 * @see #AndroidManifestPackageVerifier_publicKey
 */

public static final int[] AndroidManifestPackageVerifier;
static { AndroidManifestPackageVerifier = new int[0]; }

/**
 * <p>
 * @attr description
 * Specifies the Java-style package name that defines this
 * package verifier.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int AndroidManifestPackageVerifier_name = 0; // 0x0

/**
 * <p>
 * @attr description
 * The Base64 encoded public key of the package verifier's
 * signature.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:publicKey
 */

public static final int AndroidManifestPackageVerifier_publicKey = 1; // 0x1

/**
 * Attributes that can be supplied in an AndroidManifest.xml
 * <code>path-permission</code> tag, a child of the
 * {@link #AndroidManifestProvider provider} tag, describing a permission
 * that allows access to a specific path in the provider.  This tag can be
 * specified multiple time to supply multiple paths.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestPathPermission_permission android:permission}</code></td><td>Specify a permission that a client is required to have in order to
 * use the associated object.</td></tr>
 * <tr><td><code>{@link #AndroidManifestPathPermission_readPermission android:readPermission}</code></td><td>A specific {@link android.R.attr#permission} name for read-only
 * access to a {@link android.content.ContentProvider}.</td></tr>
 * <tr><td><code>{@link #AndroidManifestPathPermission_writePermission android:writePermission}</code></td><td>A specific {@link android.R.attr#permission} name for write
 * access to a {@link android.content.ContentProvider}.</td></tr>
 * <tr><td><code>{@link #AndroidManifestPathPermission_path android:path}</code></td><td>Specify a URI path that must exactly match, as per
 * {@link android.os.PatternMatcher} with
 * {@link android.os.PatternMatcher#PATTERN_LITERAL}.</td></tr>
 * <tr><td><code>{@link #AndroidManifestPathPermission_pathPrefix android:pathPrefix}</code></td><td>Specify a URI path that must be a prefix to match, as per
 * {@link android.os.PatternMatcher} with
 * {@link android.os.PatternMatcher#PATTERN_PREFIX}.</td></tr>
 * <tr><td><code>{@link #AndroidManifestPathPermission_pathPattern android:pathPattern}</code></td><td>Specify a URI path that matches a simple pattern, as per
 * {@link android.os.PatternMatcher} with
 * {@link android.os.PatternMatcher#PATTERN_SIMPLE_GLOB}.</td></tr>
 * </table>
 * @see #AndroidManifestPathPermission_permission
 * @see #AndroidManifestPathPermission_readPermission
 * @see #AndroidManifestPathPermission_writePermission
 * @see #AndroidManifestPathPermission_path
 * @see #AndroidManifestPathPermission_pathPrefix
 * @see #AndroidManifestPathPermission_pathPattern
 */

public static final int[] AndroidManifestPathPermission;
static { AndroidManifestPathPermission = new int[0]; }

/**
 * <p>
 * @attr description
 * Specify a URI path that must exactly match, as per
 * {@link android.os.PatternMatcher} with
 * {@link android.os.PatternMatcher#PATTERN_LITERAL}.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:path
 */

public static final int AndroidManifestPathPermission_path = 3; // 0x3

/**
 * <p>
 * @attr description
 * Specify a URI path that matches a simple pattern, as per
 * {@link android.os.PatternMatcher} with
 * {@link android.os.PatternMatcher#PATTERN_SIMPLE_GLOB}.
 * Note that because '\' is used as an escape character when
 * reading the string from XML (before it is parsed as a pattern),
 * you will need to double-escape: for example a literal "*" would
 * be written as "\\*" and a literal "\" would be written as
 * "\\\\".  This is basically the same as what you would need to
 * write if constructing the string in Java code.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:pathPattern
 */

public static final int AndroidManifestPathPermission_pathPattern = 5; // 0x5

/**
 * <p>
 * @attr description
 * Specify a URI path that must be a prefix to match, as per
 * {@link android.os.PatternMatcher} with
 * {@link android.os.PatternMatcher#PATTERN_PREFIX}.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:pathPrefix
 */

public static final int AndroidManifestPathPermission_pathPrefix = 4; // 0x4

/**
 * <p>
 * @attr description
 * Specify a permission that a client is required to have in order to
 * use the associated object.  If the client does not hold the named
 * permission, its request will fail.  See the
 * <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
 * document for more information on permissions.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:permission
 */

public static final int AndroidManifestPathPermission_permission = 0; // 0x0

/**
 * <p>
 * @attr description
 * A specific {@link android.R.attr#permission} name for read-only
 * access to a {@link android.content.ContentProvider}.  See the
 * <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
 * document for more information on permissions.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:readPermission
 */

public static final int AndroidManifestPathPermission_readPermission = 1; // 0x1

/**
 * <p>
 * @attr description
 * A specific {@link android.R.attr#permission} name for write
 * access to a {@link android.content.ContentProvider}.  See the
 * <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
 * document for more information on permissions.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:writePermission
 */

public static final int AndroidManifestPathPermission_writePermission = 2; // 0x2

/**
 * The <code>permission</code> tag declares a security permission that can be
 * used to control access from other packages to specific components or
 * features in your package (or other packages).  See the
 * <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
 * document for more information on permissions.
 * <p>This appears as a child tag of the root
 * {@link #AndroidManifest manifest} tag.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestPermission_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestPermission_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestPermission_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestPermission_protectionLevel android:protectionLevel}</code></td><td>Characterizes the potential risk implied in a permission and
 * indicates the procedure the system should follow when determining
 * whether to grant the permission to an application requesting it.</td></tr>
 * <tr><td><code>{@link #AndroidManifestPermission_permissionGroup android:permissionGroup}</code></td><td>Specified the name of a group that this permission is associated
 * with.</td></tr>
 * <tr><td><code>{@link #AndroidManifestPermission_description android:description}</code></td><td>Descriptive text for the associated data.</td></tr>
 * <tr><td><code>{@link #AndroidManifestPermission_logo android:logo}</code></td><td>A Drawable resource providing an extended graphical logo for its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestPermission_permissionFlags android:permissionFlags}</code></td><td>Flags indicating more context for a permission.</td></tr>
 * <tr><td><code>{@link #AndroidManifestPermission_banner android:banner}</code></td><td>A Drawable resource providing an extended graphical banner for its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestPermission_roundIcon android:roundIcon}</code></td><td>A Drawable resource providing a graphical representation of its
 * associated item.</td></tr>
 * </table>
 * @see #AndroidManifestPermission_label
 * @see #AndroidManifestPermission_icon
 * @see #AndroidManifestPermission_name
 * @see #AndroidManifestPermission_protectionLevel
 * @see #AndroidManifestPermission_permissionGroup
 * @see #AndroidManifestPermission_description
 * @see #AndroidManifestPermission_logo
 * @see #AndroidManifestPermission_permissionFlags
 * @see #AndroidManifestPermission_banner
 * @see #AndroidManifestPermission_roundIcon
 */

public static final int[] AndroidManifestPermission;
static { AndroidManifestPermission = new int[0]; }

/**
 * The <code>permission-group</code> tag declares a logical grouping of
 * related permissions.
 * <p>Note that this tag does not declare a permission itself, only
 * a namespace in which further permissions can be placed.  See
 * the {@link #AndroidManifestPermission &lt;permission&gt;} tag for
 * more information.
 * <p>This appears as a child tag of the root
 * {@link #AndroidManifest manifest} tag.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestPermissionGroup_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestPermissionGroup_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestPermissionGroup_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestPermissionGroup_priority android:priority}</code></td><td>Specify the relative importance or ability in handling a particular
 * Intent.</td></tr>
 * <tr><td><code>{@link #AndroidManifestPermissionGroup_description android:description}</code></td><td>Descriptive text for the associated data.</td></tr>
 * <tr><td><code>{@link #AndroidManifestPermissionGroup_logo android:logo}</code></td><td>A Drawable resource providing an extended graphical logo for its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestPermissionGroup_permissionGroupFlags android:permissionGroupFlags}</code></td><td>Flags indicating more context for a permission group.</td></tr>
 * <tr><td><code>{@link #AndroidManifestPermissionGroup_banner android:banner}</code></td><td>A Drawable resource providing an extended graphical banner for its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestPermissionGroup_roundIcon android:roundIcon}</code></td><td>A Drawable resource providing a graphical representation of its
 * associated item.</td></tr>
 * </table>
 * @see #AndroidManifestPermissionGroup_label
 * @see #AndroidManifestPermissionGroup_icon
 * @see #AndroidManifestPermissionGroup_name
 * @see #AndroidManifestPermissionGroup_priority
 * @see #AndroidManifestPermissionGroup_description
 * @see #AndroidManifestPermissionGroup_logo
 * @see #AndroidManifestPermissionGroup_permissionGroupFlags
 * @see #AndroidManifestPermissionGroup_banner
 * @see #AndroidManifestPermissionGroup_roundIcon
 */

public static final int[] AndroidManifestPermissionGroup;
static { AndroidManifestPermissionGroup = new int[0]; }

/**
 * <p>
 * @attr description
 * A Drawable resource providing an extended graphical banner for its
 * associated item. Use with the application tag (to supply a default
 * banner for all application activities), or with the activity, tag to
 * supply a banner for a specific activity.
 * <p>The given banner will be used to display to the user a graphical
 * representation of an activity in the Leanback application launcher.
 * Since banners are displayed only in the Leanback launcher, they should
 * only be used with activities (and applications) that support Leanback
 * mode. These are activities that handle Intents of category
 * {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
 * Intent.CATEGORY_LEANBACK_LAUNCHER}.
 * <p>This must be a reference to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:banner
 */

public static final int AndroidManifestPermissionGroup_banner = 7; // 0x7

/**
 * <p>
 * @attr description
 * Descriptive text for the associated data.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:description
 */

public static final int AndroidManifestPermissionGroup_description = 4; // 0x4

/**
 * <p>
 * @attr description
 * A Drawable resource providing a graphical representation of its
 * associated item.  Use with the
 * application tag (to supply a default icon for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific icon for that component).  It may also be
 * used with the intent-filter tag to supply an icon to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given icon will be used to display to the user a graphical
 * representation of its associated component; for example, as the icon
 * for main activity that is displayed in the launcher.  This must be
 * a reference to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:icon
 */

public static final int AndroidManifestPermissionGroup_icon = 1; // 0x1

/**
 * <p>
 * @attr description
 * A user-legible name for the given item.  Use with the
 * application tag (to supply a default label for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific label for that component).  It may also be
 * used with the intent-filter tag to supply a label to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given label will be used wherever the user sees information
 * about its associated component; for example, as the name of a
 * main activity that is displayed in the launcher.  You should
 * generally set this to a reference to a string resource, so that
 * it can be localized, however it is also allowed to supply a plain
 * string for quick and dirty programming.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:label
 */

public static final int AndroidManifestPermissionGroup_label = 0; // 0x0

/**
 * <p>
 * @attr description
 * A Drawable resource providing an extended graphical logo for its
 * associated item. Use with the application tag (to supply a default
 * logo for all application components), or with the activity, receiver,
 * service, or instrumentation tag (to supply a specific logo for that
 * component). It may also be used with the intent-filter tag to supply
 * a logo to show to the user when an activity is being selected based
 * on a particular Intent.
 * <p>The given logo will be used to display to the user a graphical
 * representation of its associated component; for example as the
 * header in the Action Bar. The primary differences between an icon
 * and a logo are that logos are often wider and more detailed, and are
 * used without an accompanying text caption. This must be a reference
 * to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:logo
 */

public static final int AndroidManifestPermissionGroup_logo = 5; // 0x5

/**
 * <p>
 * @attr description
 * Required public name of the permission group, permissions will use
 * to specify the group they are in.  This is a string using
 * Java-style scoping to ensure it is unique.  The prefix will often
 * be the same as our overall package name, for example
 * "com.mycompany.android.myapp.SomePermission".
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int AndroidManifestPermissionGroup_name = 2; // 0x2

/**
 * <p>
 * @attr description
 * Flags indicating more context for a permission group.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>personalInfo</td><td>1</td><td>Set to indicate that this permission group contains permissions
 * protecting access to some information that is considered
 * personal to the user (such as contacts, e-mails, etc).</td></tr>
 * </table>
 *
 * @attr name android:permissionGroupFlags
 */

public static final int AndroidManifestPermissionGroup_permissionGroupFlags = 6; // 0x6

/**
 * <p>
 * @attr description
 * Specify the relative importance or ability in handling a particular
 * Intent.  For receivers, this controls the order in which they are
 * executed to receive a broadcast (note that for
 * asynchronous broadcasts, this order is ignored).  For activities,
 * this provides information about how good an activity is handling an
 * Intent; when multiple activities match an intent and have different
 * priorities, only those with the higher priority value will be
 * considered a match.
 * <p>Only use if you really need to impose some specific
 * order in which the broadcasts are received, or want to forcibly
 * place an activity to always be preferred over others.  The value is a
 * single integer, with higher numbers considered to be better.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:priority
 */

public static final int AndroidManifestPermissionGroup_priority = 3; // 0x3

/**
 * <p>
 * @attr description
 * A Drawable resource providing a graphical representation of its
 * associated item.  Use with the
 * application tag (to supply a default round icon for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific round icon for that component).  It may also be
 * used with the intent-filter tag to supply a round icon to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given round icon will be used to display to the user a graphical
 * representation of its associated component; for example, as the round icon
 * for main activity that is displayed in the launcher.  This must be
 * a reference to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:roundIcon
 */

public static final int AndroidManifestPermissionGroup_roundIcon = 8; // 0x8

/**
 * The <code>permission-tree</code> tag declares the base of a tree of
 * permission values: it declares that this package has ownership of
 * the given permission name, as well as all names underneath it
 * (separated by '.').  This allows you to use the
 * {@link android.content.pm.PackageManager#addPermission
 * PackageManager.addPermission()} method to dynamically add new
 * permissions under this tree.
 * <p>Note that this tag does not declare a permission itself, only
 * a namespace in which further permissions can be placed.  See
 * the {@link #AndroidManifestPermission &lt;permission&gt;} tag for
 * more information.
 * <p>This appears as a child tag of the root
 * {@link #AndroidManifest manifest} tag.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestPermissionTree_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestPermissionTree_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestPermissionTree_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestPermissionTree_logo android:logo}</code></td><td>A Drawable resource providing an extended graphical logo for its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestPermissionTree_banner android:banner}</code></td><td>A Drawable resource providing an extended graphical banner for its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestPermissionTree_roundIcon android:roundIcon}</code></td><td>A Drawable resource providing a graphical representation of its
 * associated item.</td></tr>
 * </table>
 * @see #AndroidManifestPermissionTree_label
 * @see #AndroidManifestPermissionTree_icon
 * @see #AndroidManifestPermissionTree_name
 * @see #AndroidManifestPermissionTree_logo
 * @see #AndroidManifestPermissionTree_banner
 * @see #AndroidManifestPermissionTree_roundIcon
 */

public static final int[] AndroidManifestPermissionTree;
static { AndroidManifestPermissionTree = new int[0]; }

/**
 * <p>
 * @attr description
 * A Drawable resource providing an extended graphical banner for its
 * associated item. Use with the application tag (to supply a default
 * banner for all application activities), or with the activity, tag to
 * supply a banner for a specific activity.
 * <p>The given banner will be used to display to the user a graphical
 * representation of an activity in the Leanback application launcher.
 * Since banners are displayed only in the Leanback launcher, they should
 * only be used with activities (and applications) that support Leanback
 * mode. These are activities that handle Intents of category
 * {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
 * Intent.CATEGORY_LEANBACK_LAUNCHER}.
 * <p>This must be a reference to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:banner
 */

public static final int AndroidManifestPermissionTree_banner = 4; // 0x4

/**
 * <p>
 * @attr description
 * A Drawable resource providing a graphical representation of its
 * associated item.  Use with the
 * application tag (to supply a default icon for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific icon for that component).  It may also be
 * used with the intent-filter tag to supply an icon to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given icon will be used to display to the user a graphical
 * representation of its associated component; for example, as the icon
 * for main activity that is displayed in the launcher.  This must be
 * a reference to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:icon
 */

public static final int AndroidManifestPermissionTree_icon = 1; // 0x1

/**
 * <p>
 * @attr description
 * A user-legible name for the given item.  Use with the
 * application tag (to supply a default label for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific label for that component).  It may also be
 * used with the intent-filter tag to supply a label to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given label will be used wherever the user sees information
 * about its associated component; for example, as the name of a
 * main activity that is displayed in the launcher.  You should
 * generally set this to a reference to a string resource, so that
 * it can be localized, however it is also allowed to supply a plain
 * string for quick and dirty programming.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:label
 */

public static final int AndroidManifestPermissionTree_label = 0; // 0x0

/**
 * <p>
 * @attr description
 * A Drawable resource providing an extended graphical logo for its
 * associated item. Use with the application tag (to supply a default
 * logo for all application components), or with the activity, receiver,
 * service, or instrumentation tag (to supply a specific logo for that
 * component). It may also be used with the intent-filter tag to supply
 * a logo to show to the user when an activity is being selected based
 * on a particular Intent.
 * <p>The given logo will be used to display to the user a graphical
 * representation of its associated component; for example as the
 * header in the Action Bar. The primary differences between an icon
 * and a logo are that logos are often wider and more detailed, and are
 * used without an accompanying text caption. This must be a reference
 * to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:logo
 */

public static final int AndroidManifestPermissionTree_logo = 3; // 0x3

/**
 * <p>
 * @attr description
 * Required public name of the permission tree, which is the base name
 * of all permissions under it.  This is a string using
 * Java-style scoping to ensure it is unique.  The prefix will often
 * be the same as our overall package name, for example
 * "com.mycompany.android.myapp.SomePermission".  A permission tree name
 * must have more than two segments in its path; that is,
 * "com.me.foo" is okay, but not "com.me" or "com".
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int AndroidManifestPermissionTree_name = 2; // 0x2

/**
 * <p>
 * @attr description
 * A Drawable resource providing a graphical representation of its
 * associated item.  Use with the
 * application tag (to supply a default round icon for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific round icon for that component).  It may also be
 * used with the intent-filter tag to supply a round icon to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given round icon will be used to display to the user a graphical
 * representation of its associated component; for example, as the round icon
 * for main activity that is displayed in the launcher.  This must be
 * a reference to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:roundIcon
 */

public static final int AndroidManifestPermissionTree_roundIcon = 5; // 0x5

/**
 * <p>
 * @attr description
 * A Drawable resource providing an extended graphical banner for its
 * associated item. Use with the application tag (to supply a default
 * banner for all application activities), or with the activity, tag to
 * supply a banner for a specific activity.
 * <p>The given banner will be used to display to the user a graphical
 * representation of an activity in the Leanback application launcher.
 * Since banners are displayed only in the Leanback launcher, they should
 * only be used with activities (and applications) that support Leanback
 * mode. These are activities that handle Intents of category
 * {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
 * Intent.CATEGORY_LEANBACK_LAUNCHER}.
 * <p>This must be a reference to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:banner
 */

public static final int AndroidManifestPermission_banner = 8; // 0x8

/**
 * <p>
 * @attr description
 * Descriptive text for the associated data.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:description
 */

public static final int AndroidManifestPermission_description = 5; // 0x5

/**
 * <p>
 * @attr description
 * A Drawable resource providing a graphical representation of its
 * associated item.  Use with the
 * application tag (to supply a default icon for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific icon for that component).  It may also be
 * used with the intent-filter tag to supply an icon to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given icon will be used to display to the user a graphical
 * representation of its associated component; for example, as the icon
 * for main activity that is displayed in the launcher.  This must be
 * a reference to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:icon
 */

public static final int AndroidManifestPermission_icon = 1; // 0x1

/**
 * <p>
 * @attr description
 * A user-legible name for the given item.  Use with the
 * application tag (to supply a default label for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific label for that component).  It may also be
 * used with the intent-filter tag to supply a label to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given label will be used wherever the user sees information
 * about its associated component; for example, as the name of a
 * main activity that is displayed in the launcher.  You should
 * generally set this to a reference to a string resource, so that
 * it can be localized, however it is also allowed to supply a plain
 * string for quick and dirty programming.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:label
 */

public static final int AndroidManifestPermission_label = 0; // 0x0

/**
 * <p>
 * @attr description
 * A Drawable resource providing an extended graphical logo for its
 * associated item. Use with the application tag (to supply a default
 * logo for all application components), or with the activity, receiver,
 * service, or instrumentation tag (to supply a specific logo for that
 * component). It may also be used with the intent-filter tag to supply
 * a logo to show to the user when an activity is being selected based
 * on a particular Intent.
 * <p>The given logo will be used to display to the user a graphical
 * representation of its associated component; for example as the
 * header in the Action Bar. The primary differences between an icon
 * and a logo are that logos are often wider and more detailed, and are
 * used without an accompanying text caption. This must be a reference
 * to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:logo
 */

public static final int AndroidManifestPermission_logo = 6; // 0x6

/**
 * <p>
 * @attr description
 * Required public name of the permission, which other components and
 * packages will use when referring to this permission.  This is a string using
 * Java-style scoping to ensure it is unique.  The prefix will often
 * be the same as our overall package name, for example
 * "com.mycompany.android.myapp.SomePermission".
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int AndroidManifestPermission_name = 2; // 0x2

/**
 * <p>
 * @attr description
 * Flags indicating more context for a permission.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>costsMoney</td><td>1</td><td>Set to indicate that this permission allows an operation that
 * may cost the user money.  Such permissions may be highlighted
 * when shown to the user with this additional information.</td></tr>
 * <tr><td>hardRestricted</td><td>4</td><td>This permission is restricted by the platform and it would be
 * grantable only to apps that meet special criteria per platform
 * policy.</td></tr>
 * <tr><td>immutablyRestricted</td><td>10</td><td>This permission is restricted immutably which means that its
 * restriction state may be specified only on the first install of
 * the app and will stay in this initial whitelist state until
 * the app is uninstalled.</td></tr>
 * <tr><td>removed</td><td>2</td><td>Additional flag from base permission type: this permission has been
 * removed and it is no longer enforced. It shouldn't be shown in the
 * UI. Removed permissions are kept as normal permissions for backwards
 * compatibility as apps may be checking them before calling an API.</td></tr>
 * <tr><td>softRestricted</td><td>8</td><td>This permission is restricted by the platform and it would be
 * grantable in its full form to apps that meet special criteria
 * per platform policy. Otherwise, a weaker form of the permission
 * would be granted. The weak grant depends on the permission.
 * <p>What weak grant means is described in the documentation of
 * the permissions.</td></tr>
 * </table>
 *
 * @attr name android:permissionFlags
 */

public static final int AndroidManifestPermission_permissionFlags = 7; // 0x7

/**
 * <p>
 * @attr description
 * Specified the name of a group that this permission is associated
 * with.  The group must have been defined with the
 * {@link android.R.styleable#AndroidManifestPermissionGroup permission-group} tag.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:permissionGroup
 */

public static final int AndroidManifestPermission_permissionGroup = 4; // 0x4

/**
 * <p>
 * @attr description
 * Characterizes the potential risk implied in a permission and
 * indicates the procedure the system should follow when determining
 * whether to grant the permission to an application requesting it. {@link
 * android.Manifest.permission Standard permissions} have a predefined and
 * permanent protectionLevel. If you are creating a custom permission in an
 * application, you can define a protectionLevel attribute with one of the
 * values listed below. If no protectionLevel is defined for a custom
 * permission, the system assigns the default ("normal").
 * <p>Each protection level consists of a base permission type and zero or
 * more flags. Use the following functions to extract those.
 * <pre>
 * int basePermissionType = permissionInfo.getProtection();
 * int permissionFlags = permissionInfo.getProtectionFlags();
 * </pre>
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>appPredictor</td><td>200000</td><td>Additional flag from base permission type: this permission can be automatically
 * granted to the system app predictor</td></tr>
 * <tr><td>appop</td><td>40</td><td>Additional flag from base permission type: this permission is closely
 * associated with an app op for controlling access.</td></tr>
 * <tr><td>configurator</td><td>80000</td><td>Additional flag from base permission type: this permission automatically
 * granted to device configurator</td></tr>
 * <tr><td>dangerous</td><td>1</td><td><strong>Base permission type</strong>: a higher-risk permission that
 * would give a requesting application access to private user data or
 * control over the device that can negatively impact the user.  Because
 * this type of permission introduces potential risk, the system may
 * not automatically grant it to the requesting application.  For example,
 * any dangerous permissions requested by an application may be displayed
 * to the user and require confirmation before proceeding, or some other
 * approach may be taken to avoid the user automatically allowing
 * the use of such facilities.</td></tr>
 * <tr><td>development</td><td>20</td><td>Additional flag from base permission type: this permission can also
 * (optionally) be granted to development applications.</td></tr>
 * <tr><td>documenter</td><td>40000</td><td>Additional flag from base permission type: this permission can be automatically
 * granted to the document manager</td></tr>
 * <tr><td>incidentReportApprover</td><td>100000</td><td>Additional flag from base permission type: this permission designates the app
 * that will approve the sharing of incident reports.</td></tr>
 * <tr><td>installer</td><td>100</td><td>Additional flag from base permission type: this permission can be automatically
 * granted to system apps that install packages.</td></tr>
 * <tr><td>instant</td><td>1000</td><td>Additional flag from base permission type: this permission can be granted to instant
 * apps</td></tr>
 * <tr><td>normal</td><td>0</td><td><strong>Base permission type</strong>: a lower-risk permission that gives
 * an application access to isolated application-level features, with minimal
 * risk to other applications, the system, or the user. The system
 * automatically grants this type of permission to a requesting application at
 * installation, without asking for the user's explicit approval (though the
 * user always has the option to review these permissions before installing).</td></tr>
 * <tr><td>oem</td><td>4000</td><td>Additional flag from base permission type: this permission can be granted only
 * if its protection level is signature, the requesting app resides on the OEM partition,
 * and the OEM has white-listed the app to receive this permission by the OEM.</td></tr>
 * <tr><td>pre23</td><td>80</td><td>Additional flag from base permission type: this permission can be automatically
 * granted to apps that target API levels below
 * {@link android.os.Build.VERSION_CODES#M} (before runtime permissions
 * were introduced).</td></tr>
 * <tr><td>preinstalled</td><td>400</td><td>Additional flag from base permission type: this permission can be automatically
 * granted any application pre-installed on the system image (not just privileged
 * apps).</td></tr>
 * <tr><td>privileged</td><td>10</td><td>Additional flag from base permission type: this permission can also
 * be granted to any applications installed as privileged apps on the system image.
 * Please avoid using this option, as the
 * signature protection level should be sufficient for most needs and
 * works regardless of exactly where applications are installed.  This
 * permission flag is used for certain special situations where multiple
 * vendors have applications built in to a system image which need
 * to share specific features explicitly because they are being built
 * together.</td></tr>
 * <tr><td>runtime</td><td>2000</td><td>Additional flag from base permission type: this permission can only be granted to apps
 * that target runtime permissions ({@link android.os.Build.VERSION_CODES#M} and above)</td></tr>
 * <tr><td>setup</td><td>800</td><td>Additional flag from base permission type: this permission can be automatically
 * granted to the setup wizard app</td></tr>
 * <tr><td>signature</td><td>2</td><td><strong>Base permission type</strong>: a permission that the system is
 * to grant only if the requesting application is signed with the same
 * certificate as the application that declared the permission. If the
 * certificates match, the system automatically grants the permission
 * without notifying the user or asking for the user's explicit approval.</td></tr>
 * <tr><td>signatureOrSystem</td><td>3</td><td>Old synonym for "signature|privileged". Deprecated in API level 23.
 * Base permission type: a permission that the system is to grant only
 * to packages in the Android system image <em>or</em> that are signed
 * with the same certificates. Please avoid using this option, as the
 * signature protection level should be sufficient for most needs and
 * works regardless of exactly where applications are installed.  This
 * permission is used for certain special situations where multiple
 * vendors have applications built in to a system image which need
 * to share specific features explicitly because they are being built
 * together.</td></tr>
 * <tr><td>system</td><td>10</td><td>Old synonym for "privileged". Deprecated in API level 23.</td></tr>
 * <tr><td>telephony</td><td>400000</td><td>Additional flag from base permission type: this permission can be automatically
 * granted to the system telephony apps</td></tr>
 * <tr><td>textClassifier</td><td>10000</td><td>Additional flag from base permission type: this permission can be automatically
 * granted to the system default text classifier</td></tr>
 * <tr><td>vendorPrivileged</td><td>8000</td><td>Additional flag from base permission type: this permission can be granted to
 * privileged apps in vendor partition.</td></tr>
 * <tr><td>verifier</td><td>200</td><td>Additional flag from base permission type: this permission can be automatically
 * granted to system apps that verify packages.</td></tr>
 * <tr><td>wellbeing</td><td>20000</td><td>Additional flag from base permission type: this permission will be granted to the
 * wellbeing app, as defined by the OEM.</td></tr>
 * </table>
 *
 * @attr name android:protectionLevel
 */

public static final int AndroidManifestPermission_protectionLevel = 3; // 0x3

/**
 * <p>
 * @attr description
 * A Drawable resource providing a graphical representation of its
 * associated item.  Use with the
 * application tag (to supply a default round icon for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific round icon for that component).  It may also be
 * used with the intent-filter tag to supply a round icon to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given round icon will be used to display to the user a graphical
 * representation of its associated component; for example, as the round icon
 * for main activity that is displayed in the launcher.  This must be
 * a reference to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:roundIcon
 */

public static final int AndroidManifestPermission_roundIcon = 9; // 0x9

/**
 * Attributes that can be used with a AndroidManifestProfileable.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestProfileable_shell android:shell}</code></td><td>Flag indicating whether the application can be profiled by the shell user,
 * even when running on a device that is running in user mode.</td></tr>
 * </table>
 * @see #AndroidManifestProfileable_shell
 */

public static final int[] AndroidManifestProfileable;
static { AndroidManifestProfileable = new int[0]; }

/**
 * <p>
 * @attr description
 * Flag indicating whether the application can be profiled by the shell user,
 * even when running on a device that is running in user mode.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:shell
 */

public static final int AndroidManifestProfileable_shell = 0; // 0x0

/**
 * Private tag to declare system protected broadcast actions.
 * <p>This appears as a child tag of the root
 * {@link #AndroidManifest manifest} tag.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestProtectedBroadcast_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * </table>
 * @see #AndroidManifestProtectedBroadcast_name
 */

public static final int[] AndroidManifestProtectedBroadcast;
static { AndroidManifestProtectedBroadcast = new int[0]; }

/**
 * <p>
 * @attr description
 * A unique name for the given item.  This must use a Java-style naming
 * convention to ensure the name is unique, for example
 * "com.mycompany.MyName".
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int AndroidManifestProtectedBroadcast_name = 0; // 0x0

/**
 * The <code>provider</code> tag declares a
 * {@link android.content.ContentProvider} class that is available
 * as part of the package's application components, supplying structured
 * access to data managed by the application.
 * <p>This appears as a child tag of the
 * {@link #AndroidManifestApplication application} tag.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestProvider_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestProvider_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestProvider_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestProvider_permission android:permission}</code></td><td>Specify a permission that a client is required to have in order to
 * use the associated object.</td></tr>
 * <tr><td><code>{@link #AndroidManifestProvider_readPermission android:readPermission}</code></td><td>A specific {@link android.R.attr#permission} name for read-only
 * access to a {@link android.content.ContentProvider}.</td></tr>
 * <tr><td><code>{@link #AndroidManifestProvider_writePermission android:writePermission}</code></td><td>A specific {@link android.R.attr#permission} name for write
 * access to a {@link android.content.ContentProvider}.</td></tr>
 * <tr><td><code>{@link #AndroidManifestProvider_enabled android:enabled}</code></td><td>Specifies whether the widget is enabled.</td></tr>
 * <tr><td><code>{@link #AndroidManifestProvider_exported android:exported}</code></td><td>Flag indicating whether the given application component is available
 * to other applications.</td></tr>
 * <tr><td><code>{@link #AndroidManifestProvider_process android:process}</code></td><td>Specify a specific process that the associated code is to run in.</td></tr>
 * <tr><td><code>{@link #AndroidManifestProvider_multiprocess android:multiprocess}</code></td><td>Specify whether a component is allowed to have multiple instances
 * of itself running in different processes.</td></tr>
 * <tr><td><code>{@link #AndroidManifestProvider_authorities android:authorities}</code></td><td>Specify the authorities under which this content provider can be
 * found.</td></tr>
 * <tr><td><code>{@link #AndroidManifestProvider_syncable android:syncable}</code></td><td>Flag indicating whether this content provider would like to
 * participate in data synchronization.</td></tr>
 * <tr><td><code>{@link #AndroidManifestProvider_initOrder android:initOrder}</code></td><td>Specify the order in which content providers hosted by a process
 * are instantiated when that process is created.</td></tr>
 * <tr><td><code>{@link #AndroidManifestProvider_grantUriPermissions android:grantUriPermissions}</code></td><td>If true, the {@link android.content.Context#grantUriPermission
 * Context.grantUriPermission} or corresponding Intent flags can
 * be used to allow others to access specific URIs in the content
 * provider, even if they do not have an explicit read or write
 * permission.</td></tr>
 * <tr><td><code>{@link #AndroidManifestProvider_description android:description}</code></td><td>Descriptive text for the associated data.</td></tr>
 * <tr><td><code>{@link #AndroidManifestProvider_logo android:logo}</code></td><td>A Drawable resource providing an extended graphical logo for its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestProvider_singleUser android:singleUser}</code></td><td>If set to true, a single instance of this component will run for
 * all users.</td></tr>
 * <tr><td><code>{@link #AndroidManifestProvider_banner android:banner}</code></td><td>A Drawable resource providing an extended graphical banner for its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestProvider_directBootAware android:directBootAware}</code></td><td>Indicate if this component is aware of direct boot lifecycle, and can be
 * safely run before the user has entered their credentials (such as a lock
 * pattern or PIN).</td></tr>
 * <tr><td><code>{@link #AndroidManifestProvider_roundIcon android:roundIcon}</code></td><td>A Drawable resource providing a graphical representation of its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestProvider_visibleToInstantApps android:visibleToInstantApps}</code></td><td>Specify whether a component should be visible to instant apps.</td></tr>
 * <tr><td><code>{@link #AndroidManifestProvider_splitName android:splitName}</code></td><td>When an application is partitioned into splits, this is the name of the
 * split that contains the defined component.</td></tr>
 * <tr><td><code>{@link #AndroidManifestProvider_forceUriPermissions android:forceUriPermissions}</code></td><td>If true, the system will always create URI permission grants
 * in the cases where {@link android.content.Intent#FLAG_GRANT_READ_URI_PERMISSION}
 * or {@link android.content.Intent#FLAG_GRANT_WRITE_URI_PERMISSION} would apply.</td></tr>
 * </table>
 * @see #AndroidManifestProvider_label
 * @see #AndroidManifestProvider_icon
 * @see #AndroidManifestProvider_name
 * @see #AndroidManifestProvider_permission
 * @see #AndroidManifestProvider_readPermission
 * @see #AndroidManifestProvider_writePermission
 * @see #AndroidManifestProvider_enabled
 * @see #AndroidManifestProvider_exported
 * @see #AndroidManifestProvider_process
 * @see #AndroidManifestProvider_multiprocess
 * @see #AndroidManifestProvider_authorities
 * @see #AndroidManifestProvider_syncable
 * @see #AndroidManifestProvider_initOrder
 * @see #AndroidManifestProvider_grantUriPermissions
 * @see #AndroidManifestProvider_description
 * @see #AndroidManifestProvider_logo
 * @see #AndroidManifestProvider_singleUser
 * @see #AndroidManifestProvider_banner
 * @see #AndroidManifestProvider_directBootAware
 * @see #AndroidManifestProvider_roundIcon
 * @see #AndroidManifestProvider_visibleToInstantApps
 * @see #AndroidManifestProvider_splitName
 * @see #AndroidManifestProvider_forceUriPermissions
 */

public static final int[] AndroidManifestProvider;
static { AndroidManifestProvider = new int[0]; }

/**
 * <p>
 * @attr description
 * Specify the authorities under which this content provider can be
 * found.  Multiple authorities may be supplied by separating them
 * with a semicolon.  Authority names should use a Java-style naming
 * convention (such as <code>com.google.provider.MyProvider</code>)
 * in order to avoid conflicts.  Typically this name is the same
 * as the class implementation describing the provider's data structure.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:authorities
 */

public static final int AndroidManifestProvider_authorities = 10; // 0xa

/**
 * <p>
 * @attr description
 * A Drawable resource providing an extended graphical banner for its
 * associated item. Use with the application tag (to supply a default
 * banner for all application activities), or with the activity, tag to
 * supply a banner for a specific activity.
 * <p>The given banner will be used to display to the user a graphical
 * representation of an activity in the Leanback application launcher.
 * Since banners are displayed only in the Leanback launcher, they should
 * only be used with activities (and applications) that support Leanback
 * mode. These are activities that handle Intents of category
 * {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
 * Intent.CATEGORY_LEANBACK_LAUNCHER}.
 * <p>This must be a reference to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:banner
 */

public static final int AndroidManifestProvider_banner = 17; // 0x11

/**
 * <p>
 * @attr description
 * Descriptive text for the associated data.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:description
 */

public static final int AndroidManifestProvider_description = 14; // 0xe

/**
 * <p>
 * @attr description
 * Indicate if this component is aware of direct boot lifecycle, and can be
 * safely run before the user has entered their credentials (such as a lock
 * pattern or PIN).
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:directBootAware
 */

public static final int AndroidManifestProvider_directBootAware = 18; // 0x12

/**
 * <p>
 * @attr description
 * Specify whether this provider is enabled or not (that is, can be instantiated by the system).
 * It can also be specified for an application as a whole, in which case a value of "false"
 * will override any component specific values (a value of "true" will not override the
 * component specific values).
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:enabled
 */

public static final int AndroidManifestProvider_enabled = 6; // 0x6

/**
 * <p>
 * @attr description
 * Flag indicating whether the given application component is available
 * to other applications.  If false, it can only be accessed by
 * applications with its same user id (which usually means only by
 * code in its own package).  If true, it can be invoked by external
 * entities, though which ones can do so may be controlled through
 * permissions.  The default value is false for activity, receiver,
 * and service components that do not specify any intent filters; it
 * is true for activity, receiver, and service components that do
 * have intent filters (implying they expect to be invoked by others
 * who do not know their particular component name) and for all
 * content providers.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:exported
 */

public static final int AndroidManifestProvider_exported = 7; // 0x7

/**
 * <p>
 * @attr description
 * If true, the system will always create URI permission grants
 * in the cases where {@link android.content.Intent#FLAG_GRANT_READ_URI_PERMISSION}
 * or {@link android.content.Intent#FLAG_GRANT_WRITE_URI_PERMISSION} would apply.
 * This is useful for a content provider that dynamically enforces permissions
 * on calls in to the provider, instead of through the manifest: the system
 * needs to know that it should always apply permission grants, even if it
 * looks like the target of the grant would already have access to the URI.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:forceUriPermissions
 */

public static final int AndroidManifestProvider_forceUriPermissions = 22; // 0x16

/**
 * <p>
 * @attr description
 * If true, the {@link android.content.Context#grantUriPermission
 * Context.grantUriPermission} or corresponding Intent flags can
 * be used to allow others to access specific URIs in the content
 * provider, even if they do not have an explicit read or write
 * permission.  If you are supporting this feature, you must be
 * sure to call {@link android.content.Context#revokeUriPermission
 * Context.revokeUriPermission} when URIs are deleted from your
 * provider.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:grantUriPermissions
 */

public static final int AndroidManifestProvider_grantUriPermissions = 13; // 0xd

/**
 * <p>
 * @attr description
 * A Drawable resource providing a graphical representation of its
 * associated item.  Use with the
 * application tag (to supply a default icon for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific icon for that component).  It may also be
 * used with the intent-filter tag to supply an icon to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given icon will be used to display to the user a graphical
 * representation of its associated component; for example, as the icon
 * for main activity that is displayed in the launcher.  This must be
 * a reference to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:icon
 */

public static final int AndroidManifestProvider_icon = 1; // 0x1

/**
 * <p>
 * @attr description
 * Specify the order in which content providers hosted by a process
 * are instantiated when that process is created.  Not needed unless
 * you have providers with dependencies between each other, to make
 * sure that they are created in the order needed by those dependencies.
 * The value is a simple integer, with higher numbers being
 * initialized first.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:initOrder
 */

public static final int AndroidManifestProvider_initOrder = 12; // 0xc

/**
 * <p>
 * @attr description
 * A user-legible name for the given item.  Use with the
 * application tag (to supply a default label for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific label for that component).  It may also be
 * used with the intent-filter tag to supply a label to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given label will be used wherever the user sees information
 * about its associated component; for example, as the name of a
 * main activity that is displayed in the launcher.  You should
 * generally set this to a reference to a string resource, so that
 * it can be localized, however it is also allowed to supply a plain
 * string for quick and dirty programming.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:label
 */

public static final int AndroidManifestProvider_label = 0; // 0x0

/**
 * <p>
 * @attr description
 * A Drawable resource providing an extended graphical logo for its
 * associated item. Use with the application tag (to supply a default
 * logo for all application components), or with the activity, receiver,
 * service, or instrumentation tag (to supply a specific logo for that
 * component). It may also be used with the intent-filter tag to supply
 * a logo to show to the user when an activity is being selected based
 * on a particular Intent.
 * <p>The given logo will be used to display to the user a graphical
 * representation of its associated component; for example as the
 * header in the Action Bar. The primary differences between an icon
 * and a logo are that logos are often wider and more detailed, and are
 * used without an accompanying text caption. This must be a reference
 * to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:logo
 */

public static final int AndroidManifestProvider_logo = 15; // 0xf

/**
 * <p>
 * @attr description
 * Specify whether a component is allowed to have multiple instances
 * of itself running in different processes.  Use with the activity
 * and provider tags.
 * <p>Normally the system will ensure that all instances of a particular
 * component are only running in a single process.  You can use this
 * attribute to disable that behavior, allowing the system to create
 * instances wherever they are used (provided permissions allow it).
 * This is most often used with content providers, so that instances
 * of a provider can be created in each client process, allowing them
 * to be used without performing IPC.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:multiprocess
 */

public static final int AndroidManifestProvider_multiprocess = 9; // 0x9

/**
 * <p>
 * @attr description
 * Required name of the class implementing the provider, deriving from
 * {@link android.content.ContentProvider}.  This is a fully
 * qualified class name (for example, com.mycompany.myapp.MyProvider); as a
 * short-hand if the first character of the class
 * is a period then it is appended to your package name.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int AndroidManifestProvider_name = 2; // 0x2

/**
 * <p>
 * @attr description
 * Specify a permission that a client is required to have in order to
 * use the associated object.  If the client does not hold the named
 * permission, its request will fail.  See the
 * <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
 * document for more information on permissions.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:permission
 */

public static final int AndroidManifestProvider_permission = 3; // 0x3

/**
 * <p>
 * @attr description
 * Specify a specific process that the associated code is to run in.
 * Use with the application tag (to supply a default process for all
 * application components), or with the activity, receiver, service,
 * or provider tag (to supply a specific icon for that component).
 * <p>Application components are normally run in a single process that
 * is created for the entire application.  You can use this tag to modify
 * where they run.  If the process name begins with a ':' character,
 * a new process private to that application will be created when needed
 * to run that component (allowing you to spread your application across
 * multiple processes).  If the process name begins with a lower-case
 * character, the component will be run in a global process of that name,
 * provided that you have permission to do so, allowing multiple
 * applications to share one process to reduce resource usage.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:process
 */

public static final int AndroidManifestProvider_process = 8; // 0x8

/**
 * <p>
 * @attr description
 * A specific {@link android.R.attr#permission} name for read-only
 * access to a {@link android.content.ContentProvider}.  See the
 * <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
 * document for more information on permissions.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:readPermission
 */

public static final int AndroidManifestProvider_readPermission = 4; // 0x4

/**
 * <p>
 * @attr description
 * A Drawable resource providing a graphical representation of its
 * associated item.  Use with the
 * application tag (to supply a default round icon for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific round icon for that component).  It may also be
 * used with the intent-filter tag to supply a round icon to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given round icon will be used to display to the user a graphical
 * representation of its associated component; for example, as the round icon
 * for main activity that is displayed in the launcher.  This must be
 * a reference to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:roundIcon
 */

public static final int AndroidManifestProvider_roundIcon = 19; // 0x13

/**
 * <p>
 * @attr description
 * If set to true, a single instance of this component will run for
 * all users.  That instance will run as user 0, the default/primary
 * user.  When the app running is in processes for other users and interacts
 * with this component (by binding to a service for example) those processes will
 * always interact with the instance running for user 0.  Enabling
 * single user mode forces "exported" of the component to be false, to
 * help avoid introducing multi-user security bugs.  This feature is only
 * available to applications built in to the system image; you must hold the
 * permission INTERACT_ACROSS_USERS in order
 * to use this feature.  This flag can only be used with services,
 * receivers, and providers; it can not be used with activities.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:singleUser
 */

public static final int AndroidManifestProvider_singleUser = 16; // 0x10

/**
 * <p>
 * @attr description
 * The code for this component is located in the given split.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:splitName
 */

public static final int AndroidManifestProvider_splitName = 21; // 0x15

/**
 * <p>
 * @attr description
 * Flag indicating whether this content provider would like to
 * participate in data synchronization.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:syncable
 */

public static final int AndroidManifestProvider_syncable = 11; // 0xb

/**
 * <p>
 * @attr description
 * Specify whether a component should be visible to instant apps.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:visibleToInstantApps
 */

public static final int AndroidManifestProvider_visibleToInstantApps = 20; // 0x14

/**
 * <p>
 * @attr description
 * A specific {@link android.R.attr#permission} name for write
 * access to a {@link android.content.ContentProvider}.  See the
 * <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
 * document for more information on permissions.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:writePermission
 */

public static final int AndroidManifestProvider_writePermission = 5; // 0x5

/**
 * Attributes that can be used with a AndroidManifestPublicKey.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestPublicKey_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestPublicKey_value android:value}</code></td><td>Concrete value to assign to this piece of named meta-data.</td></tr>
 * </table>
 * @see #AndroidManifestPublicKey_name
 * @see #AndroidManifestPublicKey_value
 */

public static final int[] AndroidManifestPublicKey;
static { AndroidManifestPublicKey = new int[0]; }

/**
 * <p>
 * @attr description
 * A unique name for the given item.  This must use a Java-style naming
 * convention to ensure the name is unique, for example
 * "com.mycompany.MyName".
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int AndroidManifestPublicKey_name = 0; // 0x0

/**
 * <p>
 * @attr description
 * Concrete value to assign to this piece of named meta-data.
 * The data can later be retrieved from the meta data Bundle
 * through {@link android.os.Bundle#getString Bundle.getString},
 * {@link android.os.Bundle#getInt Bundle.getInt},
 * {@link android.os.Bundle#getBoolean Bundle.getBoolean},
 * or {@link android.os.Bundle#getFloat Bundle.getFloat} depending
 * on the type used here.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:value
 */

public static final int AndroidManifestPublicKey_value = 1; // 0x1

/**
 * The <code>receiver</code> tag declares an
 * {@link android.content.BroadcastReceiver} class that is available
 * as part of the package's application components, allowing the
 * application to receive actions or data broadcast by other
 * applications even if it is not currently running.
 * <p>Zero or more {@link #AndroidManifestIntentFilter intent-filter}
 * tags can be included inside of a receiver, to specify the Intents
 * it will receive.  If none are specified, the receiver will only
 * be run when an Intent is broadcast that is directed at its specific
 * class name.  The receiver tag appears as a child tag of the
 * {@link #AndroidManifestApplication application} tag.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestReceiver_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestReceiver_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestReceiver_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestReceiver_permission android:permission}</code></td><td>Specify a permission that a client is required to have in order to
 * use the associated object.</td></tr>
 * <tr><td><code>{@link #AndroidManifestReceiver_enabled android:enabled}</code></td><td>Specifies whether the widget is enabled.</td></tr>
 * <tr><td><code>{@link #AndroidManifestReceiver_exported android:exported}</code></td><td>Flag indicating whether the given application component is available
 * to other applications.</td></tr>
 * <tr><td><code>{@link #AndroidManifestReceiver_process android:process}</code></td><td>Specify a specific process that the associated code is to run in.</td></tr>
 * <tr><td><code>{@link #AndroidManifestReceiver_description android:description}</code></td><td>Descriptive text for the associated data.</td></tr>
 * <tr><td><code>{@link #AndroidManifestReceiver_logo android:logo}</code></td><td>A Drawable resource providing an extended graphical logo for its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestReceiver_singleUser android:singleUser}</code></td><td>If set to true, a single instance of this component will run for
 * all users.</td></tr>
 * <tr><td><code>{@link #AndroidManifestReceiver_banner android:banner}</code></td><td>A Drawable resource providing an extended graphical banner for its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestReceiver_directBootAware android:directBootAware}</code></td><td>Indicate if this component is aware of direct boot lifecycle, and can be
 * safely run before the user has entered their credentials (such as a lock
 * pattern or PIN).</td></tr>
 * <tr><td><code>{@link #AndroidManifestReceiver_roundIcon android:roundIcon}</code></td><td>A Drawable resource providing a graphical representation of its
 * associated item.</td></tr>
 * </table>
 * @see #AndroidManifestReceiver_label
 * @see #AndroidManifestReceiver_icon
 * @see #AndroidManifestReceiver_name
 * @see #AndroidManifestReceiver_permission
 * @see #AndroidManifestReceiver_enabled
 * @see #AndroidManifestReceiver_exported
 * @see #AndroidManifestReceiver_process
 * @see #AndroidManifestReceiver_description
 * @see #AndroidManifestReceiver_logo
 * @see #AndroidManifestReceiver_singleUser
 * @see #AndroidManifestReceiver_banner
 * @see #AndroidManifestReceiver_directBootAware
 * @see #AndroidManifestReceiver_roundIcon
 */

public static final int[] AndroidManifestReceiver;
static { AndroidManifestReceiver = new int[0]; }

/**
 * <p>
 * @attr description
 * A Drawable resource providing an extended graphical banner for its
 * associated item. Use with the application tag (to supply a default
 * banner for all application activities), or with the activity, tag to
 * supply a banner for a specific activity.
 * <p>The given banner will be used to display to the user a graphical
 * representation of an activity in the Leanback application launcher.
 * Since banners are displayed only in the Leanback launcher, they should
 * only be used with activities (and applications) that support Leanback
 * mode. These are activities that handle Intents of category
 * {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
 * Intent.CATEGORY_LEANBACK_LAUNCHER}.
 * <p>This must be a reference to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:banner
 */

public static final int AndroidManifestReceiver_banner = 10; // 0xa

/**
 * <p>
 * @attr description
 * Descriptive text for the associated data.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:description
 */

public static final int AndroidManifestReceiver_description = 7; // 0x7

/**
 * <p>
 * @attr description
 * Indicate if this component is aware of direct boot lifecycle, and can be
 * safely run before the user has entered their credentials (such as a lock
 * pattern or PIN).
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:directBootAware
 */

public static final int AndroidManifestReceiver_directBootAware = 11; // 0xb

/**
 * <p>
 * @attr description
 * Specify whether the receiver is enabled or not (that is, can be instantiated by the system).
 * It can also be specified for an application as a whole, in which case a value of "false"
 * will override any component specific values (a value of "true" will not override the
 * component specific values).
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:enabled
 */

public static final int AndroidManifestReceiver_enabled = 4; // 0x4

/**
 * <p>
 * @attr description
 * Flag indicating whether the given application component is available
 * to other applications.  If false, it can only be accessed by
 * applications with its same user id (which usually means only by
 * code in its own package).  If true, it can be invoked by external
 * entities, though which ones can do so may be controlled through
 * permissions.  The default value is false for activity, receiver,
 * and service components that do not specify any intent filters; it
 * is true for activity, receiver, and service components that do
 * have intent filters (implying they expect to be invoked by others
 * who do not know their particular component name) and for all
 * content providers.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:exported
 */

public static final int AndroidManifestReceiver_exported = 5; // 0x5

/**
 * <p>
 * @attr description
 * A Drawable resource providing a graphical representation of its
 * associated item.  Use with the
 * application tag (to supply a default icon for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific icon for that component).  It may also be
 * used with the intent-filter tag to supply an icon to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given icon will be used to display to the user a graphical
 * representation of its associated component; for example, as the icon
 * for main activity that is displayed in the launcher.  This must be
 * a reference to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:icon
 */

public static final int AndroidManifestReceiver_icon = 1; // 0x1

/**
 * <p>
 * @attr description
 * A user-legible name for the given item.  Use with the
 * application tag (to supply a default label for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific label for that component).  It may also be
 * used with the intent-filter tag to supply a label to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given label will be used wherever the user sees information
 * about its associated component; for example, as the name of a
 * main activity that is displayed in the launcher.  You should
 * generally set this to a reference to a string resource, so that
 * it can be localized, however it is also allowed to supply a plain
 * string for quick and dirty programming.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:label
 */

public static final int AndroidManifestReceiver_label = 0; // 0x0

/**
 * <p>
 * @attr description
 * A Drawable resource providing an extended graphical logo for its
 * associated item. Use with the application tag (to supply a default
 * logo for all application components), or with the activity, receiver,
 * service, or instrumentation tag (to supply a specific logo for that
 * component). It may also be used with the intent-filter tag to supply
 * a logo to show to the user when an activity is being selected based
 * on a particular Intent.
 * <p>The given logo will be used to display to the user a graphical
 * representation of its associated component; for example as the
 * header in the Action Bar. The primary differences between an icon
 * and a logo are that logos are often wider and more detailed, and are
 * used without an accompanying text caption. This must be a reference
 * to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:logo
 */

public static final int AndroidManifestReceiver_logo = 8; // 0x8

/**
 * <p>
 * @attr description
 * Required name of the class implementing the receiver, deriving from
 * {@link android.content.BroadcastReceiver}.  This is a fully
 * qualified class name (for example, com.mycompany.myapp.MyReceiver); as a
 * short-hand if the first character of the class
 * is a period then it is appended to your package name.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int AndroidManifestReceiver_name = 2; // 0x2

/**
 * <p>
 * @attr description
 * Specify a permission that a client is required to have in order to
 * use the associated object.  If the client does not hold the named
 * permission, its request will fail.  See the
 * <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
 * document for more information on permissions.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:permission
 */

public static final int AndroidManifestReceiver_permission = 3; // 0x3

/**
 * <p>
 * @attr description
 * Specify a specific process that the associated code is to run in.
 * Use with the application tag (to supply a default process for all
 * application components), or with the activity, receiver, service,
 * or provider tag (to supply a specific icon for that component).
 * <p>Application components are normally run in a single process that
 * is created for the entire application.  You can use this tag to modify
 * where they run.  If the process name begins with a ':' character,
 * a new process private to that application will be created when needed
 * to run that component (allowing you to spread your application across
 * multiple processes).  If the process name begins with a lower-case
 * character, the component will be run in a global process of that name,
 * provided that you have permission to do so, allowing multiple
 * applications to share one process to reduce resource usage.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:process
 */

public static final int AndroidManifestReceiver_process = 6; // 0x6

/**
 * <p>
 * @attr description
 * A Drawable resource providing a graphical representation of its
 * associated item.  Use with the
 * application tag (to supply a default round icon for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific round icon for that component).  It may also be
 * used with the intent-filter tag to supply a round icon to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given round icon will be used to display to the user a graphical
 * representation of its associated component; for example, as the round icon
 * for main activity that is displayed in the launcher.  This must be
 * a reference to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:roundIcon
 */

public static final int AndroidManifestReceiver_roundIcon = 12; // 0xc

/**
 * <p>
 * @attr description
 * If set to true, a single instance of this component will run for
 * all users.  That instance will run as user 0, the default/primary
 * user.  When the app running is in processes for other users and interacts
 * with this component (by binding to a service for example) those processes will
 * always interact with the instance running for user 0.  Enabling
 * single user mode forces "exported" of the component to be false, to
 * help avoid introducing multi-user security bugs.  This feature is only
 * available to applications built in to the system image; you must hold the
 * permission INTERACT_ACROSS_USERS in order
 * to use this feature.  This flag can only be used with services,
 * receivers, and providers; it can not be used with activities.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:singleUser
 */

public static final int AndroidManifestReceiver_singleUser = 9; // 0x9

/**
 * Attributes relating to resource overlay packages.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestResourceOverlay_priority android:priority}</code></td><td>Specify the relative importance or ability in handling a particular
 * Intent.</td></tr>
 * <tr><td><code>{@link #AndroidManifestResourceOverlay_targetPackage android:targetPackage}</code></td><td>The name of the application package that an Instrumentation object
 * will run against.</td></tr>
 * <tr><td><code>{@link #AndroidManifestResourceOverlay_category android:category}</code></td><td>Category of the resource overlay.</td></tr>
 * <tr><td><code>{@link #AndroidManifestResourceOverlay_targetName android:targetName}</code></td><td>The transitionName of the target on which this transition will animation changes.</td></tr>
 * <tr><td><code>{@link #AndroidManifestResourceOverlay_isStatic android:isStatic}</code></td><td>Whether the given RRO is static or not.</td></tr>
 * </table>
 * @see #AndroidManifestResourceOverlay_priority
 * @see #AndroidManifestResourceOverlay_targetPackage
 * @see #AndroidManifestResourceOverlay_category
 * @see #AndroidManifestResourceOverlay_targetName
 * @see #AndroidManifestResourceOverlay_isStatic
 */

public static final int[] AndroidManifestResourceOverlay;
static { AndroidManifestResourceOverlay = new int[0]; }

/**
 * <p>
 * @attr description
 * Category of the resource overlay.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:category
 */

public static final int AndroidManifestResourceOverlay_category = 2; // 0x2

/**
 * <p>
 * @attr description
 * Whether the given RRO is static or not.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:isStatic
 */

public static final int AndroidManifestResourceOverlay_isStatic = 4; // 0x4

/**
 * <p>
 * @attr description
 * Load order of overlay package.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:priority
 */

public static final int AndroidManifestResourceOverlay_priority = 0; // 0x0

/**
 * <p>
 * @attr description
 * The name of the overlayable whose resources will be overlaid.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:targetName
 */

public static final int AndroidManifestResourceOverlay_targetName = 3; // 0x3

/**
 * <p>
 * @attr description
 * Package name of base package whose resources will be overlaid.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:targetPackage
 */

public static final int AndroidManifestResourceOverlay_targetPackage = 1; // 0x1

/**
 * The <code>service</code> tag declares a
 * {@link android.app.Service} class that is available
 * as part of the package's application components, implementing
 * long-running background operations or a rich communication API
 * that can be called by other packages.
 * <p>Zero or more {@link #AndroidManifestIntentFilter intent-filter}
 * tags can be included inside of a service, to specify the Intents
 * that can connect with it.  If none are specified, the service can
 * only be accessed by direct specification of its class name.
 * The service tag appears as a child tag of the
 * {@link #AndroidManifestApplication application} tag.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestService_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestService_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestService_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestService_permission android:permission}</code></td><td>Specify a permission that a client is required to have in order to
 * use the associated object.</td></tr>
 * <tr><td><code>{@link #AndroidManifestService_enabled android:enabled}</code></td><td>Specifies whether the widget is enabled.</td></tr>
 * <tr><td><code>{@link #AndroidManifestService_exported android:exported}</code></td><td>Flag indicating whether the given application component is available
 * to other applications.</td></tr>
 * <tr><td><code>{@link #AndroidManifestService_process android:process}</code></td><td>Specify a specific process that the associated code is to run in.</td></tr>
 * <tr><td><code>{@link #AndroidManifestService_description android:description}</code></td><td>Descriptive text for the associated data.</td></tr>
 * <tr><td><code>{@link #AndroidManifestService_logo android:logo}</code></td><td>A Drawable resource providing an extended graphical logo for its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestService_stopWithTask android:stopWithTask}</code></td><td>If set to true, this service with be automatically stopped
 * when the user remove a task rooted in an activity owned by
 * the application.</td></tr>
 * <tr><td><code>{@link #AndroidManifestService_isolatedProcess android:isolatedProcess}</code></td><td>If set to true, this service will run under a special process
 * that is isolated from the rest of the system.</td></tr>
 * <tr><td><code>{@link #AndroidManifestService_singleUser android:singleUser}</code></td><td>If set to true, a single instance of this component will run for
 * all users.</td></tr>
 * <tr><td><code>{@link #AndroidManifestService_banner android:banner}</code></td><td>A Drawable resource providing an extended graphical banner for its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestService_directBootAware android:directBootAware}</code></td><td>Indicate if this component is aware of direct boot lifecycle, and can be
 * safely run before the user has entered their credentials (such as a lock
 * pattern or PIN).</td></tr>
 * <tr><td><code>{@link #AndroidManifestService_externalService android:externalService}</code></td><td>If the service is an {@link android.R.attr#isolatedProcess} service, this permits a
 * client to bind to the service as if it were running it its own package.</td></tr>
 * <tr><td><code>{@link #AndroidManifestService_roundIcon android:roundIcon}</code></td><td>A Drawable resource providing a graphical representation of its
 * associated item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestService_visibleToInstantApps android:visibleToInstantApps}</code></td><td>Specify whether a component should be visible to instant apps.</td></tr>
 * <tr><td><code>{@link #AndroidManifestService_splitName android:splitName}</code></td><td>When an application is partitioned into splits, this is the name of the
 * split that contains the defined component.</td></tr>
 * <tr><td><code>{@link #AndroidManifestService_useAppZygote android:useAppZygote}</code></td><td>If true, and this is an {@link android.R.attr#isolatedProcess} service, the service
 * will be spawned from an Application Zygote, instead of the regular Zygote.</td></tr>
 * <tr><td><code>{@link #AndroidManifestService_foregroundServiceType android:foregroundServiceType}</code></td><td>Specify the type of foreground service.</td></tr>
 * </table>
 * @see #AndroidManifestService_label
 * @see #AndroidManifestService_icon
 * @see #AndroidManifestService_name
 * @see #AndroidManifestService_permission
 * @see #AndroidManifestService_enabled
 * @see #AndroidManifestService_exported
 * @see #AndroidManifestService_process
 * @see #AndroidManifestService_description
 * @see #AndroidManifestService_logo
 * @see #AndroidManifestService_stopWithTask
 * @see #AndroidManifestService_isolatedProcess
 * @see #AndroidManifestService_singleUser
 * @see #AndroidManifestService_banner
 * @see #AndroidManifestService_directBootAware
 * @see #AndroidManifestService_externalService
 * @see #AndroidManifestService_roundIcon
 * @see #AndroidManifestService_visibleToInstantApps
 * @see #AndroidManifestService_splitName
 * @see #AndroidManifestService_useAppZygote
 * @see #AndroidManifestService_foregroundServiceType
 */

public static final int[] AndroidManifestService;
static { AndroidManifestService = new int[0]; }

/**
 * <p>
 * @attr description
 * A Drawable resource providing an extended graphical banner for its
 * associated item. Use with the application tag (to supply a default
 * banner for all application activities), or with the activity, tag to
 * supply a banner for a specific activity.
 * <p>The given banner will be used to display to the user a graphical
 * representation of an activity in the Leanback application launcher.
 * Since banners are displayed only in the Leanback launcher, they should
 * only be used with activities (and applications) that support Leanback
 * mode. These are activities that handle Intents of category
 * {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
 * Intent.CATEGORY_LEANBACK_LAUNCHER}.
 * <p>This must be a reference to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:banner
 */

public static final int AndroidManifestService_banner = 12; // 0xc

/**
 * <p>
 * @attr description
 * Descriptive text for the associated data.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:description
 */

public static final int AndroidManifestService_description = 7; // 0x7

/**
 * <p>
 * @attr description
 * Indicate if this component is aware of direct boot lifecycle, and can be
 * safely run before the user has entered their credentials (such as a lock
 * pattern or PIN).
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:directBootAware
 */

public static final int AndroidManifestService_directBootAware = 13; // 0xd

/**
 * <p>
 * @attr description
 * Specify whether the service is enabled or not (that is, can be instantiated by the system).
 * It can also be specified for an application as a whole, in which case a value of "false"
 * will override any component specific values (a value of "true" will not override the
 * component specific values).
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:enabled
 */

public static final int AndroidManifestService_enabled = 4; // 0x4

/**
 * <p>
 * @attr description
 * Flag indicating whether the given application component is available
 * to other applications.  If false, it can only be accessed by
 * applications with its same user id (which usually means only by
 * code in its own package).  If true, it can be invoked by external
 * entities, though which ones can do so may be controlled through
 * permissions.  The default value is false for activity, receiver,
 * and service components that do not specify any intent filters; it
 * is true for activity, receiver, and service components that do
 * have intent filters (implying they expect to be invoked by others
 * who do not know their particular component name) and for all
 * content providers.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:exported
 */

public static final int AndroidManifestService_exported = 5; // 0x5

/**
 * <p>
 * @attr description
 * If the service is an {@link android.R.attr#isolatedProcess} service, this permits a
 * client to bind to the service as if it were running it its own package.  The service
 * must also be {@link android.R.attr#exported} if this flag is set.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:externalService
 */

public static final int AndroidManifestService_externalService = 14; // 0xe

/**
 * <p>
 * @attr description
 * If this is a foreground service, specify its category.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>connectedDevice</td><td>10</td><td>Auto, bluetooth, TV or other devices connection, monitoring and interaction.</td></tr>
 * <tr><td>dataSync</td><td>1</td><td>Data (photo, file, account) upload/download, backup/restore, import/export, fetch,
 * transfer over network between device and cloud.</td></tr>
 * <tr><td>location</td><td>8</td><td>GPS, map, navigation location update.</td></tr>
 * <tr><td>mediaPlayback</td><td>2</td><td>Music, video, news or other media play.</td></tr>
 * <tr><td>mediaProjection</td><td>20</td><td>Managing a media projection session, e.g, for screen recording or taking
 * screenshots.</td></tr>
 * <tr><td>phoneCall</td><td>4</td><td>Ongoing phone call or video conference.</td></tr>
 * </table>
 *
 * @attr name android:foregroundServiceType
 */

public static final int AndroidManifestService_foregroundServiceType = 19; // 0x13

/**
 * <p>
 * @attr description
 * A Drawable resource providing a graphical representation of its
 * associated item.  Use with the
 * application tag (to supply a default icon for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific icon for that component).  It may also be
 * used with the intent-filter tag to supply an icon to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given icon will be used to display to the user a graphical
 * representation of its associated component; for example, as the icon
 * for main activity that is displayed in the launcher.  This must be
 * a reference to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:icon
 */

public static final int AndroidManifestService_icon = 1; // 0x1

/**
 * <p>
 * @attr description
 * If set to true, this service will run under a special process
 * that is isolated from the rest of the system.  The only communication
 * with it is through the Service API (binding and starting).
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:isolatedProcess
 */

public static final int AndroidManifestService_isolatedProcess = 10; // 0xa

/**
 * <p>
 * @attr description
 * A user-legible name for the given item.  Use with the
 * application tag (to supply a default label for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific label for that component).  It may also be
 * used with the intent-filter tag to supply a label to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given label will be used wherever the user sees information
 * about its associated component; for example, as the name of a
 * main activity that is displayed in the launcher.  You should
 * generally set this to a reference to a string resource, so that
 * it can be localized, however it is also allowed to supply a plain
 * string for quick and dirty programming.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:label
 */

public static final int AndroidManifestService_label = 0; // 0x0

/**
 * <p>
 * @attr description
 * A Drawable resource providing an extended graphical logo for its
 * associated item. Use with the application tag (to supply a default
 * logo for all application components), or with the activity, receiver,
 * service, or instrumentation tag (to supply a specific logo for that
 * component). It may also be used with the intent-filter tag to supply
 * a logo to show to the user when an activity is being selected based
 * on a particular Intent.
 * <p>The given logo will be used to display to the user a graphical
 * representation of its associated component; for example as the
 * header in the Action Bar. The primary differences between an icon
 * and a logo are that logos are often wider and more detailed, and are
 * used without an accompanying text caption. This must be a reference
 * to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:logo
 */

public static final int AndroidManifestService_logo = 8; // 0x8

/**
 * <p>
 * @attr description
 * Required name of the class implementing the service, deriving from
 * {@link android.app.Service}.  This is a fully
 * qualified class name (for example, com.mycompany.myapp.MyService); as a
 * short-hand if the first character of the class
 * is a period then it is appended to your package name.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int AndroidManifestService_name = 2; // 0x2

/**
 * <p>
 * @attr description
 * Specify a permission that a client is required to have in order to
 * use the associated object.  If the client does not hold the named
 * permission, its request will fail.  See the
 * <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
 * document for more information on permissions.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:permission
 */

public static final int AndroidManifestService_permission = 3; // 0x3

/**
 * <p>
 * @attr description
 * Specify a specific process that the associated code is to run in.
 * Use with the application tag (to supply a default process for all
 * application components), or with the activity, receiver, service,
 * or provider tag (to supply a specific icon for that component).
 * <p>Application components are normally run in a single process that
 * is created for the entire application.  You can use this tag to modify
 * where they run.  If the process name begins with a ':' character,
 * a new process private to that application will be created when needed
 * to run that component (allowing you to spread your application across
 * multiple processes).  If the process name begins with a lower-case
 * character, the component will be run in a global process of that name,
 * provided that you have permission to do so, allowing multiple
 * applications to share one process to reduce resource usage.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:process
 */

public static final int AndroidManifestService_process = 6; // 0x6

/**
 * <p>
 * @attr description
 * A Drawable resource providing a graphical representation of its
 * associated item.  Use with the
 * application tag (to supply a default round icon for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific round icon for that component).  It may also be
 * used with the intent-filter tag to supply a round icon to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given round icon will be used to display to the user a graphical
 * representation of its associated component; for example, as the round icon
 * for main activity that is displayed in the launcher.  This must be
 * a reference to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:roundIcon
 */

public static final int AndroidManifestService_roundIcon = 15; // 0xf

/**
 * <p>
 * @attr description
 * If set to true, a single instance of this component will run for
 * all users.  That instance will run as user 0, the default/primary
 * user.  When the app running is in processes for other users and interacts
 * with this component (by binding to a service for example) those processes will
 * always interact with the instance running for user 0.  Enabling
 * single user mode forces "exported" of the component to be false, to
 * help avoid introducing multi-user security bugs.  This feature is only
 * available to applications built in to the system image; you must hold the
 * permission INTERACT_ACROSS_USERS in order
 * to use this feature.  This flag can only be used with services,
 * receivers, and providers; it can not be used with activities.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:singleUser
 */

public static final int AndroidManifestService_singleUser = 11; // 0xb

/**
 * <p>
 * @attr description
 * The code for this component is located in the given split.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:splitName
 */

public static final int AndroidManifestService_splitName = 17; // 0x11

/**
 * <p>
 * @attr description
 * If set to true, this service with be automatically stopped
 * when the user remove a task rooted in an activity owned by
 * the application.  The default is false.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:stopWithTask
 */

public static final int AndroidManifestService_stopWithTask = 9; // 0x9

/**
 * <p>
 * @attr description
 * If true, and this is an {@link android.R.attr#isolatedProcess} service, the service
 * will be spawned from an Application Zygote, instead of the regular Zygote.
 * <p>
 * The Application Zygote will first pre-initialize the application's class loader. Then,
 * if the application has defined the {@link android.R.attr#zygotePreloadName} attribute,
 * the Application Zygote will call into that class to allow it to perform
 * application-specific preloads (such as loading a shared library). Therefore,
 * spawning from the Application Zygote will typically reduce the service
 * launch time and reduce its memory usage. The downside of using this flag
 * is that you will have an additional process (the app zygote itself) that
 * is taking up memory. Whether actual memory usage is improved therefore strongly
 * depends on the number of isolated services that an application starts,
 * and how much memory those services save by preloading and sharing memory with
 * the app zygote. Therefore, it is recommended to measure memory usage under
 * typical workloads to determine whether it makes sense to use this flag.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:useAppZygote
 */

public static final int AndroidManifestService_useAppZygote = 18; // 0x12

/**
 * <p>
 * @attr description
 * Specify whether a component should be visible to instant apps.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:visibleToInstantApps
 */

public static final int AndroidManifestService_visibleToInstantApps = 16; // 0x10

/**
 * The <code>static-library</code> tag declares that this apk is providing itself
 * as a static shared library for other applications to use. Any app can declare such
 * a library and there can be only one static shared library per package. These libraries
 * are updatable, multiple versions can be installed at the same time, and an app links
 * against a specific version simulating static linking while allowing code sharing.
 * Other apks can link to it with the {@link #AndroidManifestUsesLibrary uses-static-library}
 * tag.
 * <p>This appears as a child tag of the
 * {@link #AndroidManifestApplication application} tag.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestStaticLibrary_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestStaticLibrary_version android:version}</code></td><td>The version of the feature that is being used.</td></tr>
 * <tr><td><code>{@link #AndroidManifestStaticLibrary_versionMajor android:versionMajor}</code></td><td>Optional minimum major version of the package that satisfies the dependency.</td></tr>
 * </table>
 * @see #AndroidManifestStaticLibrary_name
 * @see #AndroidManifestStaticLibrary_version
 * @see #AndroidManifestStaticLibrary_versionMajor
 */

public static final int[] AndroidManifestStaticLibrary;
static { AndroidManifestStaticLibrary = new int[0]; }

/**
 * <p>
 * @attr description
 * Required public name of the library, which other components and
 * packages will use when referring to this library.  This is a string using
 * Java-style scoping to ensure it is unique.  The name should typically
 * be the same as the apk's package name.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int AndroidManifestStaticLibrary_name = 0; // 0x0

/**
 * <p>
 * @attr description
 * Required specific library version.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:version
 */

public static final int AndroidManifestStaticLibrary_version = 1; // 0x1

/**
 * <p>
 * @attr description
 * Required specific library version.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:versionMajor
 */

public static final int AndroidManifestStaticLibrary_versionMajor = 2; // 0x2

/**
 * The <code>input-type</code> tag is a child of the <code>supports-input</code> tag, which
 * is itself a child of the root {@link #AndroidManifest manifest} tag. Each
 * <code>input-type</code> tag specifices the name of a specific input device type. When
 * grouped with the other elements of the parent <code>supports-input</code> tag it defines
 * a collection of input devices, which when all used together, are considered a supported
 * input mechanism for the application. There may be multiple <code>supports-input</code>
 * tags defined, each containing a different combination of input device types.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestSupportsInputInputType_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * </table>
 * @see #AndroidManifestSupportsInputInputType_name
 */

public static final int[] AndroidManifestSupportsInputInputType;
static { AndroidManifestSupportsInputInputType = new int[0]; }

/**
 * <p>
 * @attr description
 * Specifices the name of the input device type
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int AndroidManifestSupportsInputInputType_name = 0; // 0x0

/**
 * The <code>supports-screens</code> specifies the screen dimensions an
 * application supports.  By default a modern application supports all
 * screen sizes and must explicitly disable certain screen sizes here;
 * older applications are assumed to only support the traditional normal
 * (HVGA) screen size.  Note that screen size is a separate axis from
 * density, and is determined as the available pixels to an application
 * after density scaling has been applied.
 * <p>This appears as a child tag of the
 * {@link #AndroidManifest manifest} tag.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestSupportsScreens_anyDensity android:anyDensity}</code></td><td>Indicates whether the application can accommodate any screen
 * density.</td></tr>
 * <tr><td><code>{@link #AndroidManifestSupportsScreens_smallScreens android:smallScreens}</code></td><td>Indicates whether the application supports smaller screen form-factors.</td></tr>
 * <tr><td><code>{@link #AndroidManifestSupportsScreens_normalScreens android:normalScreens}</code></td><td>Indicates whether an application supports the normal screen
 * form-factors.</td></tr>
 * <tr><td><code>{@link #AndroidManifestSupportsScreens_largeScreens android:largeScreens}</code></td><td>Indicates whether the application supports larger screen form-factors.</td></tr>
 * <tr><td><code>{@link #AndroidManifestSupportsScreens_resizeable android:resizeable}</code></td><td>Indicates whether the application can resize itself to newer
 * screen sizes.</td></tr>
 * <tr><td><code>{@link #AndroidManifestSupportsScreens_xlargeScreens android:xlargeScreens}</code></td><td>Indicates whether the application supports extra large screen form-factors.</td></tr>
 * <tr><td><code>{@link #AndroidManifestSupportsScreens_requiresSmallestWidthDp android:requiresSmallestWidthDp}</code></td><td>Starting with {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2},
 * this is the new way to specify the minimum screen size an application is
 * compatible with.</td></tr>
 * <tr><td><code>{@link #AndroidManifestSupportsScreens_compatibleWidthLimitDp android:compatibleWidthLimitDp}</code></td><td>Starting with {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2},
 * this is the new way to specify the largest screens an application is
 * compatible with.</td></tr>
 * <tr><td><code>{@link #AndroidManifestSupportsScreens_largestWidthLimitDp android:largestWidthLimitDp}</code></td><td>Starting with {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2},
 * this is the new way to specify the screens an application is
 * compatible with.</td></tr>
 * </table>
 * @see #AndroidManifestSupportsScreens_anyDensity
 * @see #AndroidManifestSupportsScreens_smallScreens
 * @see #AndroidManifestSupportsScreens_normalScreens
 * @see #AndroidManifestSupportsScreens_largeScreens
 * @see #AndroidManifestSupportsScreens_resizeable
 * @see #AndroidManifestSupportsScreens_xlargeScreens
 * @see #AndroidManifestSupportsScreens_requiresSmallestWidthDp
 * @see #AndroidManifestSupportsScreens_compatibleWidthLimitDp
 * @see #AndroidManifestSupportsScreens_largestWidthLimitDp
 */

public static final int[] AndroidManifestSupportsScreens;
static { AndroidManifestSupportsScreens = new int[0]; }

/**
 * <p>
 * @attr description
 * Indicates whether the application can accommodate any screen
 * density.  Older applications are assumed to not be able to,
 * new ones able to.  You can explicitly supply your abilities
 * here.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:anyDensity
 */

public static final int AndroidManifestSupportsScreens_anyDensity = 0; // 0x0

/**
 * <p>
 * @attr description
 * Starting with {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2},
 * this is the new way to specify the largest screens an application is
 * compatible with.  This attribute provides the maximum
 * "smallest screen width" (as per the -swNNNdp resource configuration)
 * that the application is designed for.  If this value is smaller than
 * the "smallest screen width" of the device it is running on, the user
 * is offered to run it in a compatibility mode that emulates a
 * smaller screen and zooms it to fit the screen. Currently the compatibility mode only
 * emulates phone screens with a 320dp width, so compatibility mode is not applied if the
 * value for compatibleWidthLimitDp is larger than 320.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:compatibleWidthLimitDp
 */

public static final int AndroidManifestSupportsScreens_compatibleWidthLimitDp = 7; // 0x7

/**
 * <p>
 * @attr description
 * Indicates whether the application supports larger screen form-factors.
 * A large screen is defined as a screen that is significantly larger
 * than a normal phone screen, and thus may require some special care
 * on the application's part to make good use of it.  An example would
 * be a VGA <em>normal density</em> screen, though even larger screens
 * are certainly possible.  An application that does not support
 * large screens will be placed as a postage stamp on such a
 * screen, so that it retains the dimensions it was originally
 * designed for.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:largeScreens
 */

public static final int AndroidManifestSupportsScreens_largeScreens = 3; // 0x3

/**
 * <p>
 * @attr description
 * Starting with {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2},
 * this is the new way to specify the screens an application is
 * compatible with.  This attribute provides the maximum
 * "smallest screen width" (as per the -swNNNdp resource configuration)
 * that the application can work well on.  If this value is smaller than
 * the "smallest screen width" of the device it is running on, the
 * application will be forced in to screen compatibility mode with
 * no way for the user to turn it off. Currently the compatibility mode only
 * emulates phone screens with a 320dp width, so compatibility mode is not applied if the
 * value for largestWidthLimitDp is larger than 320.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:largestWidthLimitDp
 */

public static final int AndroidManifestSupportsScreens_largestWidthLimitDp = 8; // 0x8

/**
 * <p>
 * @attr description
 * Indicates whether an application supports the normal screen
 * form-factors.  Traditionally this is an HVGA normal density
 * screen, but WQVGA low density and WVGA high density are also
 * considered to be normal.  This attribute is true by default,
 * and applications currently should leave it that way.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:normalScreens
 */

public static final int AndroidManifestSupportsScreens_normalScreens = 2; // 0x2

/**
 * <p>
 * @attr description
 * Starting with {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2},
 * this is the new way to specify the minimum screen size an application is
 * compatible with.  This attribute provides the required minimum
 * "smallest screen width" (as per the -swNNNdp resource configuration)
 * that the application can run on.  For example, a typical phone
 * screen is 320, a 7" tablet 600, and a 10" tablet 720.  If the
 * smallest screen width of the device is below the value supplied here,
 * then the application is considered incompatible with that device.
 * If not supplied, then any old smallScreens, normalScreens, largeScreens,
 * or xlargeScreens attributes will be used instead.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:requiresSmallestWidthDp
 */

public static final int AndroidManifestSupportsScreens_requiresSmallestWidthDp = 6; // 0x6

/**
 * <p>
 * @attr description
 * Indicates whether the application can resize itself to newer
 * screen sizes.  This is mostly used to distinguish between old
 * applications that may not be compatible with newly introduced
 * screen sizes and newer applications that should be; it will be
 * set for you automatically based on whether you are targeting
 * a newer platform that supports more screens.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:resizeable
 */

public static final int AndroidManifestSupportsScreens_resizeable = 4; // 0x4

/**
 * <p>
 * @attr description
 * Indicates whether the application supports smaller screen form-factors.
 * A small screen is defined as one with a smaller aspect ratio than
 * the traditional HVGA screen; that is, for a portrait screen, less
 * tall than an HVGA screen.  In practice, this means a QVGA low
 * density or VGA high density screen.  An application that does
 * not support small screens <em>will not be available</em> for
 * small screen devices, since there is little the platform can do
 * to make such an application work on a smaller screen.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:smallScreens
 */

public static final int AndroidManifestSupportsScreens_smallScreens = 1; // 0x1

/**
 * <p>
 * @attr description
 * Indicates whether the application supports extra large screen form-factors.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:xlargeScreens
 */

public static final int AndroidManifestSupportsScreens_xlargeScreens = 5; // 0x5

/**
 * Associate declared KeySets with upgrading capability.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestUpgradeKeySet_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * </table>
 * @see #AndroidManifestUpgradeKeySet_name
 */

public static final int[] AndroidManifestUpgradeKeySet;
static { AndroidManifestUpgradeKeySet = new int[0]; }

/**
 * <p>
 * @attr description
 * A unique name for the given item.  This must use a Java-style naming
 * convention to ensure the name is unique, for example
 * "com.mycompany.MyName".
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int AndroidManifestUpgradeKeySet_name = 0; // 0x0

/**
 * The <code>uses-configuration</code> tag specifies
 * a specific hardware configuration value used by the application.
 * For example an application might specify that it requires
 * a physical keyboard or a particular navigation method like
 * trackball. Multiple such attribute values can be specified by the
 * application.
 * <p>This appears as a child tag of the root
 * {@link #AndroidManifest manifest} tag.
 * @deprecated Use <code>feature-group</code> instead.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestUsesConfiguration_reqTouchScreen android:reqTouchScreen}</code></td><td>The touch screen type used by an application.</td></tr>
 * <tr><td><code>{@link #AndroidManifestUsesConfiguration_reqKeyboardType android:reqKeyboardType}</code></td><td>The input method preferred by an application.</td></tr>
 * <tr><td><code>{@link #AndroidManifestUsesConfiguration_reqHardKeyboard android:reqHardKeyboard}</code></td><td>Application's requirement for a hard keyboard</td></tr>
 * <tr><td><code>{@link #AndroidManifestUsesConfiguration_reqNavigation android:reqNavigation}</code></td><td>The navigation device preferred by an application.</td></tr>
 * <tr><td><code>{@link #AndroidManifestUsesConfiguration_reqFiveWayNav android:reqFiveWayNav}</code></td><td>Application's requirement for five way navigation</td></tr>
 * </table>
 * @see #AndroidManifestUsesConfiguration_reqTouchScreen
 * @see #AndroidManifestUsesConfiguration_reqKeyboardType
 * @see #AndroidManifestUsesConfiguration_reqHardKeyboard
 * @see #AndroidManifestUsesConfiguration_reqNavigation
 * @see #AndroidManifestUsesConfiguration_reqFiveWayNav
 */

@Deprecated public static final int[] AndroidManifestUsesConfiguration;
static { AndroidManifestUsesConfiguration = new int[0]; }

/**
 * <p>
 * @attr description
 * Application's requirement for five way navigation
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:reqFiveWayNav
 */

public static final int AndroidManifestUsesConfiguration_reqFiveWayNav = 4; // 0x4

/**
 * <p>
 * @attr description
 * Application's requirement for a hard keyboard
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:reqHardKeyboard
 */

public static final int AndroidManifestUsesConfiguration_reqHardKeyboard = 2; // 0x2

/**
 * <p>
 * @attr description
 * The input method preferred by an application.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>nokeys</td><td>1</td><td></td></tr>
 * <tr><td>qwerty</td><td>2</td><td></td></tr>
 * <tr><td>twelvekey</td><td>3</td><td></td></tr>
 * <tr><td>undefined</td><td>0</td><td></td></tr>
 * </table>
 *
 * @attr name android:reqKeyboardType
 */

public static final int AndroidManifestUsesConfiguration_reqKeyboardType = 1; // 0x1

/**
 * <p>
 * @attr description
 * The navigation device preferred by an application.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>dpad</td><td>2</td><td></td></tr>
 * <tr><td>nonav</td><td>1</td><td></td></tr>
 * <tr><td>trackball</td><td>3</td><td></td></tr>
 * <tr><td>undefined</td><td>0</td><td></td></tr>
 * <tr><td>wheel</td><td>4</td><td></td></tr>
 * </table>
 *
 * @attr name android:reqNavigation
 */

public static final int AndroidManifestUsesConfiguration_reqNavigation = 3; // 0x3

/**
 * <p>
 * @attr description
 * The type of touch screen used by an application.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>finger</td><td>3</td><td></td></tr>
 * <tr><td>notouch</td><td>1</td><td></td></tr>
 * <tr><td>stylus</td><td>2</td><td></td></tr>
 * <tr><td>undefined</td><td>0</td><td></td></tr>
 * </table>
 *
 * @attr name android:reqTouchScreen
 */

public static final int AndroidManifestUsesConfiguration_reqTouchScreen = 0; // 0x0

/**
 * The <code>uses-feature</code> tag specifies a specific device
 * hardware or software feature used by the application. For
 * example an application might specify that it requires
 * a camera. Multiple attribute values can be specified by the
 * application.
 * <p>This appears as a child tag of the root
 * {@link #AndroidManifest manifest} tag.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestUsesFeature_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestUsesFeature_glEsVersion android:glEsVersion}</code></td><td>The GLES driver version number needed by an application.</td></tr>
 * <tr><td><code>{@link #AndroidManifestUsesFeature_required android:required}</code></td><td>Specify whether this feature is required for the application.</td></tr>
 * <tr><td><code>{@link #AndroidManifestUsesFeature_version android:version}</code></td><td>The version of the feature that is being used.</td></tr>
 * </table>
 * @see #AndroidManifestUsesFeature_name
 * @see #AndroidManifestUsesFeature_glEsVersion
 * @see #AndroidManifestUsesFeature_required
 * @see #AndroidManifestUsesFeature_version
 */

public static final int[] AndroidManifestUsesFeature;
static { AndroidManifestUsesFeature = new int[0]; }

/**
 * <p>
 * @attr description
 * The GLES driver version number needed by an application.
 * The higher 16 bits represent the major number and the lower 16 bits
 * represent the minor number. For example for GL 1.2 referring to
 * 0x00000102, the actual value should be set as 0x00010002.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:glEsVersion
 */

public static final int AndroidManifestUsesFeature_glEsVersion = 1; // 0x1

/**
 * <p>
 * @attr description
 * The name of the feature that is being used.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int AndroidManifestUsesFeature_name = 0; // 0x0

/**
 * <p>
 * @attr description
 * Specify whether this feature is required for the application.
 * The default is true, meaning the application requires the
 * feature, and does not want to be installed on devices that
 * don't support it.  If you set this to false, then this will
 * not impose a restriction on where the application can be
 * installed.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:required
 */

public static final int AndroidManifestUsesFeature_required = 2; // 0x2

/**
 * <p>
 * @attr description
 * The version of the feature that is being used.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:version
 */

public static final int AndroidManifestUsesFeature_version = 3; // 0x3

/**
 * The <code>uses-libraries</code> specifies a shared library that this
 * package requires to be linked against.  Specifying this flag tells the
 * system to include this library's code in your class loader.
 * <p>This appears as a child tag of the
 * {@link #AndroidManifestApplication application} tag.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestUsesLibrary_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestUsesLibrary_required android:required}</code></td><td>Specify whether this feature is required for the application.</td></tr>
 * </table>
 * @see #AndroidManifestUsesLibrary_name
 * @see #AndroidManifestUsesLibrary_required
 */

public static final int[] AndroidManifestUsesLibrary;
static { AndroidManifestUsesLibrary = new int[0]; }

/**
 * <p>
 * @attr description
 * Required name of the library you use.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int AndroidManifestUsesLibrary_name = 0; // 0x0

/**
 * <p>
 * @attr description
 * Specify whether this library is required for the application.
 * The default is true, meaning the application requires the
 * library, and does not want to be installed on devices that
 * don't support it.  If you set this to false, then this will
 * allow the application to be installed even if the library
 * doesn't exist, and you will need to check for its presence
 * dynamically at runtime.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:required
 */

public static final int AndroidManifestUsesLibrary_required = 1; // 0x1

/**
 * The <code>uses-package</code> specifies some kind of dependency on another
 * package.  It does not have any impact on the app's execution on the device,
 * but provides information about dependencies it has on other packages that need
 * to  be satisfied for it to run correctly.  That is, this is primarily for
 * installers to know what other apps need to be installed along with this one.
 * <p>This appears as a child tag of the
 * {@link #AndroidManifestApplication application} tag.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestUsesPackage_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestUsesPackage_version android:version}</code></td><td>The version of the feature that is being used.</td></tr>
 * <tr><td><code>{@link #AndroidManifestUsesPackage_certDigest android:certDigest}</code></td><td>Optional SHA-256 digest of the package signing certificate.</td></tr>
 * <tr><td><code>{@link #AndroidManifestUsesPackage_versionMajor android:versionMajor}</code></td><td>Optional minimum major version of the package that satisfies the dependency.</td></tr>
 * <tr><td><code>{@link #AndroidManifestUsesPackage_packageType android:packageType}</code></td><td>Required type of association with the package, for example "android.package.ad_service"
 * if it provides an advertising service.</td></tr>
 * </table>
 * @see #AndroidManifestUsesPackage_name
 * @see #AndroidManifestUsesPackage_version
 * @see #AndroidManifestUsesPackage_certDigest
 * @see #AndroidManifestUsesPackage_versionMajor
 * @see #AndroidManifestUsesPackage_packageType
 */

public static final int[] AndroidManifestUsesPackage;
static { AndroidManifestUsesPackage = new int[0]; }

/**
 * <p>
 * @attr description
 * Optional SHA-256 digest of the package signing certificate.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:certDigest
 */

public static final int AndroidManifestUsesPackage_certDigest = 2; // 0x2

/**
 * <p>
 * @attr description
 * Required name of the package you use.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int AndroidManifestUsesPackage_name = 0; // 0x0

/**
 * <p>
 * @attr description
 * Required type of association with the package, for example "android.package.ad_service"
 * if it provides an advertising service.  This should use the standard scoped naming
 * convention as used for other things such as package names, based on the Java naming
 * convention.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:packageType
 */

public static final int AndroidManifestUsesPackage_packageType = 4; // 0x4

/**
 * <p>
 * @attr description
 * Optional minimum version of the package that satisfies the dependency.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:version
 */

public static final int AndroidManifestUsesPackage_version = 1; // 0x1

/**
 * <p>
 * @attr description
 * Optional minimum major version of the package that satisfies the dependency.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:versionMajor
 */

public static final int AndroidManifestUsesPackage_versionMajor = 3; // 0x3

/**
 * The <code>uses-permission</code> tag requests a
 * {@link #AndroidManifestPermission &lt;permission&gt;} that the containing
 * package must be granted in order for it to operate correctly. For runtime
 * permissions, i.e. ones with <code>dangerous</code> protection level, on a
 * platform that supports runtime permissions, the permission will not be
 * granted until the app explicitly requests it at runtime and the user approves
 * the grant. You cannot request at runtime permissions that are not declared
 * as used in the manifest. See the
 * <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
 * document for more information on permissions.  Also available is a
 * {@link android.Manifest.permission list of permissions} included
 * with the base platform.
 * <p>This appears as a child tag of the root
 * {@link #AndroidManifest manifest} tag.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestUsesPermission_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestUsesPermission_maxSdkVersion android:maxSdkVersion}</code></td><td>Optional: specify the maximum version of the Android OS for which the
 * application wishes to request the permission.</td></tr>
 * <tr><td><code>{@link #AndroidManifestUsesPermission_requiredFeature android:requiredFeature}</code></td><td>Optional: the system must support this feature for the permission to be
 * requested.</td></tr>
 * <tr><td><code>{@link #AndroidManifestUsesPermission_requiredNotFeature android:requiredNotFeature}</code></td><td>Optional: the system must NOT support this feature for the permission to be
 * requested.</td></tr>
 * </table>
 * @see #AndroidManifestUsesPermission_name
 * @see #AndroidManifestUsesPermission_maxSdkVersion
 * @see #AndroidManifestUsesPermission_requiredFeature
 * @see #AndroidManifestUsesPermission_requiredNotFeature
 */

public static final int[] AndroidManifestUsesPermission;
static { AndroidManifestUsesPermission = new int[0]; }

/**
 * <p>
 * @attr description
 * Optional: specify the maximum version of the Android OS for which the
 * application wishes to request the permission.  When running on a version
 * of Android higher than the number given here, the permission will not
 * be requested.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:maxSdkVersion
 */

public static final int AndroidManifestUsesPermission_maxSdkVersion = 1; // 0x1

/**
 * <p>
 * @attr description
 * Required name of the permission you use, as published with the
 * corresponding name attribute of a
 * {@link android.R.styleable#AndroidManifestPermission &lt;permission&gt;}
 * tag; often this is one of the {@link android.Manifest.permission standard
 * system permissions}.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int AndroidManifestUsesPermission_name = 0; // 0x0

/**
 * <p>
 * @attr description
 * Optional: the system must support this feature for the permission to be
 * requested.  If it doesn't support the feature, it will be as if the manifest didn't
 * request it at all.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:requiredFeature
 */

public static final int AndroidManifestUsesPermission_requiredFeature = 2; // 0x2

/**
 * <p>
 * @attr description
 * Optional: the system must NOT support this feature for the permission to be
 * requested.  If it does support the feature, it will be as if the manifest didn't
 * request it at all.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:requiredNotFeature
 */

public static final int AndroidManifestUsesPermission_requiredNotFeature = 3; // 0x3

/**
 * The <code>uses-sdk</code> tag describes the SDK features that the
 * containing package must be running on to operate correctly.
 * <p>This appears as a child tag of the root
 * {@link #AndroidManifest manifest} tag.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestUsesSdk_minSdkVersion android:minSdkVersion}</code></td><td>This is the minimum SDK version number that the application
 * requires.</td></tr>
 * <tr><td><code>{@link #AndroidManifestUsesSdk_targetSdkVersion android:targetSdkVersion}</code></td><td>This is the SDK version number that the application is targeting.</td></tr>
 * <tr><td><code>{@link #AndroidManifestUsesSdk_maxSdkVersion android:maxSdkVersion}</code></td><td>Optional: specify the maximum version of the Android OS for which the
 * application wishes to request the permission.</td></tr>
 * </table>
 * @see #AndroidManifestUsesSdk_minSdkVersion
 * @see #AndroidManifestUsesSdk_targetSdkVersion
 * @see #AndroidManifestUsesSdk_maxSdkVersion
 */

public static final int[] AndroidManifestUsesSdk;
static { AndroidManifestUsesSdk = new int[0]; }

/**
 * <p>
 * @attr description
 * This is the maximum SDK version number that an application works
 * on.  You can use this to ensure your application is filtered out
 * of later versions of the platform when you know you have
 * incompatibility with them.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:maxSdkVersion
 */

public static final int AndroidManifestUsesSdk_maxSdkVersion = 2; // 0x2

/**
 * <p>
 * @attr description
 * This is the minimum SDK version number that the application
 * requires.  This number is an abstract integer, from the list
 * in {@link android.os.Build.VERSION_CODES}  If
 * not supplied, the application will work on any SDK.  This
 * may also be string (such as "Donut") if the application was built
 * against a development branch, in which case it will only work against
 * the development builds.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:minSdkVersion
 */

public static final int AndroidManifestUsesSdk_minSdkVersion = 0; // 0x0

/**
 * <p>
 * @attr description
 * This is the SDK version number that the application is targeting.
 * It is able to run on older versions (down to minSdkVersion), but
 * was explicitly tested to work with the version specified here.
 * Specifying this version allows the platform to disable compatibility
 * code that are not required or enable newer features that are not
 * available to older applications.  This may also be a string
 * (such as "Donut") if this is built against a development
 * branch, in which case minSdkVersion is also forced to be that
 * string.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:targetSdkVersion
 */

public static final int AndroidManifestUsesSdk_targetSdkVersion = 1; // 0x1

/**
 * Attributes that can be used with a AndroidManifestUsesSplit.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestUsesSplit_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * </table>
 * @see #AndroidManifestUsesSplit_name
 */

public static final int[] AndroidManifestUsesSplit;
static { AndroidManifestUsesSplit = new int[0]; }

/**
 * <p>
 * @attr description
 * A unique name for the given item.  This must use a Java-style naming
 * convention to ensure the name is unique, for example
 * "com.mycompany.MyName".
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int AndroidManifestUsesSplit_name = 0; // 0x0

/**
 * The <code>uses-static-library</code> specifies a shared <strong>static</strong>
 * library that this package requires to be statically linked against. Specifying
 * this tag tells the system to include this library's code in your class loader.
 * Depending on a static shared library is equivalent to statically linking with
 * the library at build time while it offers apps to share code defined in such
 * libraries. Hence, static libraries are strictly required.
 * <p>On devices running O MR1 or higher, if the library is singed with multiple
 * signing certificates you must to specify the SHA-256 hashes of the additional
 * certificates via adding
 * {@link #AndroidManifestAdditionalCertificate additional-certificate} tags.
 * <p>This appears as a child tag of the
 * {@link #AndroidManifestApplication application} tag.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AndroidManifestUsesStaticLibrary_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * <tr><td><code>{@link #AndroidManifestUsesStaticLibrary_version android:version}</code></td><td>The version of the feature that is being used.</td></tr>
 * <tr><td><code>{@link #AndroidManifestUsesStaticLibrary_certDigest android:certDigest}</code></td><td>Optional SHA-256 digest of the package signing certificate.</td></tr>
 * </table>
 * @see #AndroidManifestUsesStaticLibrary_name
 * @see #AndroidManifestUsesStaticLibrary_version
 * @see #AndroidManifestUsesStaticLibrary_certDigest
 */

public static final int[] AndroidManifestUsesStaticLibrary;
static { AndroidManifestUsesStaticLibrary = new int[0]; }

/**
 * <p>
 * @attr description
 * The SHA-256 digest of the library signing certificate.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:certDigest
 */

public static final int AndroidManifestUsesStaticLibrary_certDigest = 2; // 0x2

/**
 * <p>
 * @attr description
 * Required name of the library you use.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int AndroidManifestUsesStaticLibrary_name = 0; // 0x0

/**
 * <p>
 * @attr description
 * Specify which version of the shared library should be statically linked.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:version
 */

public static final int AndroidManifestUsesStaticLibrary_version = 1; // 0x1

/**
 * <p>
 * @attr description
 * The user-visible SDK version (ex. 26) of the framework against which the application was
 * compiled. This attribute is automatically specified by the Android build tools and should
 * NOT be manually specified.
 * <p>
 * This attribute is the compile-time equivalent of
 * {@link android.os.Build.VERSION#SDK_INT Build.VERSION.SDK_INT}.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:compileSdkVersion
 */

public static final int AndroidManifest_compileSdkVersion = 9; // 0x9

/**
 * <p>
 * @attr description
 * The development codename (ex. "O") of the framework against which the application was
 * compiled, or "REL" if the application was compiled against a release build. This attribute
 * is automatically specified by the Android build tools and should NOT be manually
 * specified.
 * <p>
 * This attribute is the compile-time equivalent of
 * {@link android.os.Build.VERSION#CODENAME Build.VERSION.CODENAME}.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:compileSdkVersionCodename
 */

public static final int AndroidManifest_compileSdkVersionCodename = 10; // 0xa

/**
 * <p>
 * @attr description
 * The default install location defined by an application.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>auto</td><td>0</td><td>Let the system decide ideal install location</td></tr>
 * <tr><td>internalOnly</td><td>1</td><td>Explicitly request to be installed on internal phone storage
 * only.</td></tr>
 * <tr><td>preferExternal</td><td>2</td><td>Prefer to be installed on SD card. There is no guarantee that
 * the system will honor this request. The application might end
 * up being installed on internal storage if external media
 * is unavailable or too full.</td></tr>
 * </table>
 *
 * @attr name android:installLocation
 */

public static final int AndroidManifest_installLocation = 4; // 0x4

/**
 * <p>
 * @attr description
 * If set to <code>true</code>, indicates to the platform that this APK is
 * a 'feature' split and that it implicitly depends on the base APK. This distinguishes
 * this split APK from a 'configuration' split, which provides resource overrides
 * for a particular 'feature' split. Only useful when the base APK specifies
 * <code>android:isolatedSplits="true"</code>.
 * <p>The default value of this attribute is <code>false</code>.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:isFeatureSplit
 */

public static final int AndroidManifest_isFeatureSplit = 8; // 0x8

/**
 * <p>
 * @attr description
 * Flag to specify if this APK requires at least one split [either feature or
 * resource] to be present in order to function. Default value is false.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:isSplitRequired
 */

public static final int AndroidManifest_isSplitRequired = 12; // 0xc

/**
 * <p>
 * @attr description
 * If set to <code>true</code>, indicates to the platform that any split APKs
 * installed for this application should be loaded into their own Context
 * objects and not appear in the base application's Context.
 * <p>The default value of this attribute is <code>false</code>.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:isolatedSplits
 */

public static final int AndroidManifest_isolatedSplits = 6; // 0x6

/**
 * <p>
 * @attr description
 * Internal revision code.  This number is the number used to determine
 * whether one APK is more recent than another: it has no other meaning
 * than that higher numbers are more recent.  This value is only meaningful
 * when the two {@link android.R.attr#versionCode} values are already
 * identical.  When an app is delivered as multiple split APKs, each
 * APK may have a different revisionCode value.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:revisionCode
 */

public static final int AndroidManifest_revisionCode = 5; // 0x5

/**
 * <p>
 * @attr description
 * Specify the name of a user ID that will be shared between multiple
 * packages.  By default, each package gets its own unique user-id.
 * By setting this value on two or more packages, each of these packages
 * will be given a single shared user ID, so they can for example run
 * in the same process.  Note that for them to actually get the same
 * user ID, they must also be signed with the same signature.
 * @deprecated Shared user id's cause non-deterministic behaviour within the
 * package manager. As such, it's use is discouraged, deprecated, and will
 * be removed altogether in a future version of Android. Instead, proper
 * communication mechanisms such as services and providers should be used
 * to facilitate interoperability between shared components.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:sharedUserId
 */

@Deprecated public static final int AndroidManifest_sharedUserId = 0; // 0x0

/**
 * <p>
 * @attr description
 * Specify a label for the shared user UID of this package.  This is
 * only used if you have also used android:sharedUserId.  This must
 * be a reference to a string resource; it can not be an explicit
 * string.
 * @deprecated There is no replacement for this attribute.
 * {@link android.R.attr#sharedUserId} has been deprecated making
 * this attribute unnecessary.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:sharedUserLabel
 */

@Deprecated public static final int AndroidManifest_sharedUserLabel = 3; // 0x3

/**
 * <p>
 * @attr description
 * Specifies the target sandbox this app wants to use. Higher sandbox versions
 * will have increasing levels of security.
 * <p>The default value of this attribute is <code>1</code>.
 * <p>
 * @deprecated The security properties have been moved to
 * {@link android.os.Build.VERSION Build.VERSION} 27 and 28.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:targetSandboxVersion
 */

@Deprecated public static final int AndroidManifest_targetSandboxVersion = 7; // 0x7

/**
 * <p>
 * @attr description
 * Internal version code.  This is the number used to determine whether
 * one version is more recent than another: it has no other meaning than
 * that higher numbers are more recent.  You could use this number to
 * encode a "x.y" in the lower and upper 16 bits, make it a build
 * number, simply increase it by one each time a new version is
 * released, or define it however else you want, as long as each
 * successive version has a higher number.  This is not a version
 * number generally shown to the user, that is usually supplied
 * with {@link android.R.attr#versionName}.  When an app is delivered
 * as multiple split APKs, each APK must have the exact same versionCode.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:versionCode
 */

public static final int AndroidManifest_versionCode = 1; // 0x1

/**
 * <p>
 * @attr description
 * Internal major version code.  This is essentially additional high bits
 * for the base version code; it has no other meaning than
 * that higher numbers are more recent.  This is not a version
 * number generally shown to the user, that is usually supplied
 * with {@link android.R.attr#versionName}.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:versionCodeMajor
 */

public static final int AndroidManifest_versionCodeMajor = 11; // 0xb

/**
 * <p>
 * @attr description
 * The text shown to the user to indicate the version they have.  This
 * is used for no other purpose than display to the user; the actual
 * significant version number is given by {@link android.R.attr#versionCode}.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:versionName
 */

public static final int AndroidManifest_versionName = 2; // 0x2

/**
 * Drawable used to draw animated images (gif).
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AnimatedImageDrawable_src android:src}</code></td><td>Sets a drawable as the content of this ImageView.</td></tr>
 * <tr><td><code>{@link #AnimatedImageDrawable_repeatCount android:repeatCount}</code></td><td>Defines how many times the animation should repeat.</td></tr>
 * <tr><td><code>{@link #AnimatedImageDrawable_autoStart android:autoStart}</code></td><td>When true, automatically start animating.</td></tr>
 * <tr><td><code>{@link #AnimatedImageDrawable_autoMirrored android:autoMirrored}</code></td><td>Indicates if the drawable needs to be mirrored when its layout direction is
 * RTL (right-to-left).</td></tr>
 * </table>
 * @see #AnimatedImageDrawable_src
 * @see #AnimatedImageDrawable_repeatCount
 * @see #AnimatedImageDrawable_autoStart
 * @see #AnimatedImageDrawable_autoMirrored
 */

public static final int[] AnimatedImageDrawable;
static { AnimatedImageDrawable = new int[0]; }

/**
 * <p>
 * @attr description
 * Indicates if the drawable needs to be mirrored when its layout direction is
 * RTL (right-to-left).
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:autoMirrored
 */

public static final int AnimatedImageDrawable_autoMirrored = 3; // 0x3

/**
 * <p>
 * @attr description
 * When true, automatically start animating. The default is false, meaning
 * that the animation will not start until start() is called.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:autoStart
 */

public static final int AnimatedImageDrawable_autoStart = 2; // 0x2

/**
 * <p>
 * @attr description
 * Replace the loop count in the encoded data. A repeat count of 0 means that
 * the animation will play once, regardless of the number of times specified
 * in the encoded data. Setting this to infinite (-1) will result in the
 * animation repeating as long as it is displayed (once start() is called).
 *
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>infinite</td><td>ffffffff</td><td></td></tr>
 * </table>
 *
 * @attr name android:repeatCount
 */

public static final int AnimatedImageDrawable_repeatCount = 1; // 0x1

/**
 * <p>
 * @attr description
 * Identifier of the image file. This attribute is mandatory.
 * It must be an image file with multiple frames, e.g. gif or webp
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:src
 */

public static final int AnimatedImageDrawable_src = 0; // 0x0

/**
 * Attributes that can be used with a AnimatedRotateDrawable.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AnimatedRotateDrawable_visible android:visible}</code></td><td>Provides initial visibility state of the drawable; the default
 * value is false.</td></tr>
 * <tr><td><code>{@link #AnimatedRotateDrawable_drawable android:drawable}</code></td><td>Reference to a drawable resource to use for the frame.</td></tr>
 * <tr><td><code>{@link #AnimatedRotateDrawable_pivotX android:pivotX}</code></td><td></td></tr>
 * <tr><td><code>{@link #AnimatedRotateDrawable_pivotY android:pivotY}</code></td><td></td></tr>
 * </table>
 * @see #AnimatedRotateDrawable_visible
 * @see #AnimatedRotateDrawable_drawable
 * @see #AnimatedRotateDrawable_pivotX
 * @see #AnimatedRotateDrawable_pivotY
 */

public static final int[] AnimatedRotateDrawable;
static { AnimatedRotateDrawable = new int[0]; }

/**
 * <p>
 * @attr description
 * Reference to a drawable resource to use for the frame.  If not
 * given, the drawable must be defined by the first child tag.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:drawable
 */

public static final int AnimatedRotateDrawable_drawable = 1; // 0x1

/**
 * <p>This symbol is the offset where the {@link android.R.attr#pivotX}
 * attribute's value can be found in the {@link #AnimatedRotateDrawable} array.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:pivotX
 */

public static final int AnimatedRotateDrawable_pivotX = 2; // 0x2

/**
 * <p>This symbol is the offset where the {@link android.R.attr#pivotY}
 * attribute's value can be found in the {@link #AnimatedRotateDrawable} array.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:pivotY
 */

public static final int AnimatedRotateDrawable_pivotY = 3; // 0x3

/**
 * <p>
 * @attr description
 * Provides initial visibility state of the drawable; the default
 * value is false.  See
 * {@link android.graphics.drawable.Drawable#setVisible}.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:visible
 */

public static final int AnimatedRotateDrawable_visible = 0; // 0x0

/**
 * Drawable used to render several states with animated transitions. Each state
 * is represented by a child drawable with an optional keyframe ID.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AnimatedStateListDrawable_dither android:dither}</code></td><td>Enables or disables dithering of the bitmap if the bitmap does not have the
 * same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
 * an RGB 565 screen).</td></tr>
 * <tr><td><code>{@link #AnimatedStateListDrawable_visible android:visible}</code></td><td>Provides initial visibility state of the drawable; the default
 * value is false.</td></tr>
 * <tr><td><code>{@link #AnimatedStateListDrawable_variablePadding android:variablePadding}</code></td><td>If true, allows the drawable's padding to change based on the
 * current state that is selected.</td></tr>
 * <tr><td><code>{@link #AnimatedStateListDrawable_constantSize android:constantSize}</code></td><td>If true, the drawable's reported internal size will remain
 * constant as the state changes; the size is the maximum of all
 * of the states.</td></tr>
 * <tr><td><code>{@link #AnimatedStateListDrawable_enterFadeDuration android:enterFadeDuration}</code></td><td>Amount of time (in milliseconds) to fade in a new state drawable.</td></tr>
 * <tr><td><code>{@link #AnimatedStateListDrawable_exitFadeDuration android:exitFadeDuration}</code></td><td>Amount of time (in milliseconds) to fade out an old state drawable.</td></tr>
 * <tr><td><code>{@link #AnimatedStateListDrawable_autoMirrored android:autoMirrored}</code></td><td>Indicates if the drawable needs to be mirrored when its layout direction is
 * RTL (right-to-left).</td></tr>
 * </table>
 * @see #AnimatedStateListDrawable_dither
 * @see #AnimatedStateListDrawable_visible
 * @see #AnimatedStateListDrawable_variablePadding
 * @see #AnimatedStateListDrawable_constantSize
 * @see #AnimatedStateListDrawable_enterFadeDuration
 * @see #AnimatedStateListDrawable_exitFadeDuration
 * @see #AnimatedStateListDrawable_autoMirrored
 */

public static final int[] AnimatedStateListDrawable;
static { AnimatedStateListDrawable = new int[0]; }

/**
 * Transition used to animate between states with keyframe IDs.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AnimatedStateListDrawableItem_id android:id}</code></td><td>Supply an identifier name for this view, to later retrieve it
 * with {@link android.view.View#findViewById View.findViewById()} or
 * {@link android.app.Activity#findViewById Activity.findViewById()}.</td></tr>
 * <tr><td><code>{@link #AnimatedStateListDrawableItem_drawable android:drawable}</code></td><td>Reference to a drawable resource to use for the frame.</td></tr>
 * </table>
 * @see #AnimatedStateListDrawableItem_id
 * @see #AnimatedStateListDrawableItem_drawable
 */

public static final int[] AnimatedStateListDrawableItem;
static { AnimatedStateListDrawableItem = new int[0]; }

/**
 * <p>
 * @attr description
 * Reference to a drawable resource to use for the frame.  If not
 * given, the drawable must be defined by the first child tag.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:drawable
 */

public static final int AnimatedStateListDrawableItem_drawable = 1; // 0x1

/**
 * <p>
 * @attr description
 * Keyframe identifier for use in specifying transitions.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:id
 */

public static final int AnimatedStateListDrawableItem_id = 0; // 0x0

/**
 * Transition used to animate between states with keyframe IDs.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AnimatedStateListDrawableTransition_drawable android:drawable}</code></td><td>Reference to a drawable resource to use for the frame.</td></tr>
 * <tr><td><code>{@link #AnimatedStateListDrawableTransition_toId android:toId}</code></td><td>Keyframe identifier for the ending state.</td></tr>
 * <tr><td><code>{@link #AnimatedStateListDrawableTransition_fromId android:fromId}</code></td><td>Keyframe identifier for the starting state.</td></tr>
 * <tr><td><code>{@link #AnimatedStateListDrawableTransition_reversible android:reversible}</code></td><td>Whether this transition is reversible.</td></tr>
 * </table>
 * @see #AnimatedStateListDrawableTransition_drawable
 * @see #AnimatedStateListDrawableTransition_toId
 * @see #AnimatedStateListDrawableTransition_fromId
 * @see #AnimatedStateListDrawableTransition_reversible
 */

public static final int[] AnimatedStateListDrawableTransition;
static { AnimatedStateListDrawableTransition = new int[0]; }

/**
 * <p>
 * @attr description
 * Reference to a animation drawable resource to use for the frame.  If not
 * given, the animation drawable must be defined by the first child tag.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:drawable
 */

public static final int AnimatedStateListDrawableTransition_drawable = 0; // 0x0

/**
 * <p>
 * @attr description
 * Keyframe identifier for the starting state.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:fromId
 */

public static final int AnimatedStateListDrawableTransition_fromId = 2; // 0x2

/**
 * <p>
 * @attr description
 * Whether this transition is reversible.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:reversible
 */

public static final int AnimatedStateListDrawableTransition_reversible = 3; // 0x3

/**
 * <p>
 * @attr description
 * Keyframe identifier for the ending state.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:toId
 */

public static final int AnimatedStateListDrawableTransition_toId = 1; // 0x1

/**
 * <p>
 * @attr description
 * Indicates if the drawable needs to be mirrored when its layout direction is
 * RTL (right-to-left).
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:autoMirrored
 */

public static final int AnimatedStateListDrawable_autoMirrored = 6; // 0x6

/**
 * <p>
 * @attr description
 * If true, the drawable's reported internal size will remain
 * constant as the state changes; the size is the maximum of all
 * of the states.  If false, the size will vary based on the
 * current state.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:constantSize
 */

public static final int AnimatedStateListDrawable_constantSize = 3; // 0x3

/**
 * <p>
 * @attr description
 * Enables or disables dithering of the bitmap if the bitmap does not have the
 * same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
 * an RGB 565 screen).
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:dither
 */

public static final int AnimatedStateListDrawable_dither = 0; // 0x0

/**
 * <p>
 * @attr description
 * Amount of time (in milliseconds) to fade in a new state drawable.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:enterFadeDuration
 */

public static final int AnimatedStateListDrawable_enterFadeDuration = 4; // 0x4

/**
 * <p>
 * @attr description
 * Amount of time (in milliseconds) to fade out an old state drawable.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:exitFadeDuration
 */

public static final int AnimatedStateListDrawable_exitFadeDuration = 5; // 0x5

/**
 * <p>
 * @attr description
 * If true, allows the drawable's padding to change based on the
 * current state that is selected.  If false, the padding will
 * stay the same (based on the maximum padding of all the states).
 * Enabling this feature requires that the owner of the drawable
 * deal with performing layout when the state changes, which is
 * often not supported.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:variablePadding
 */

public static final int AnimatedStateListDrawable_variablePadding = 2; // 0x2

/**
 * <p>
 * @attr description
 * Indicates whether the drawable should be initially visible.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:visible
 */

public static final int AnimatedStateListDrawable_visible = 1; // 0x1

/**
 * Define the AnimatedVectorDrawable.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AnimatedVectorDrawable_drawable android:drawable}</code></td><td>Reference to a drawable resource to use for the frame.</td></tr>
 * </table>
 * @see #AnimatedVectorDrawable_drawable
 */

public static final int[] AnimatedVectorDrawable;
static { AnimatedVectorDrawable = new int[0]; }

/**
 * Defines the target used in the AnimatedVectorDrawable.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AnimatedVectorDrawableTarget_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * <tr><td><code>{@link #AnimatedVectorDrawableTarget_animation android:animation}</code></td><td>Animation to use on each child.</td></tr>
 * </table>
 * @see #AnimatedVectorDrawableTarget_name
 * @see #AnimatedVectorDrawableTarget_animation
 */

public static final int[] AnimatedVectorDrawableTarget;
static { AnimatedVectorDrawableTarget = new int[0]; }

/**
 * <p>
 * @attr description
 * The animation for the target path, group or vector drawable.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:animation
 */

public static final int AnimatedVectorDrawableTarget_animation = 1; // 0x1

/**
 * <p>
 * @attr description
 * The name of the target path, group or vector drawable.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int AnimatedVectorDrawableTarget_name = 0; // 0x0

/**
 * <p>
 * @attr description
 * The static vector drawable.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:drawable
 */

public static final int AnimatedVectorDrawable_drawable = 0; // 0x0

/**
 * Attributes that can be used with a Animation.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #Animation_background android:background}</code></td><td>A drawable to use as the background.</td></tr>
 * <tr><td><code>{@link #Animation_interpolator android:interpolator}</code></td><td>Sets the acceleration curve for the indeterminate animation.</td></tr>
 * <tr><td><code>{@link #Animation_duration android:duration}</code></td><td>Amount of time (in milliseconds) to display this frame.</td></tr>
 * <tr><td><code>{@link #Animation_fillBefore android:fillBefore}</code></td><td>When set to true or when fillEnabled is not set to true, the animation transformation
 * is applied before the animation has started.</td></tr>
 * <tr><td><code>{@link #Animation_fillAfter android:fillAfter}</code></td><td>When set to true, the animation transformation is applied after the animation is
 * over.</td></tr>
 * <tr><td><code>{@link #Animation_startOffset android:startOffset}</code></td><td>Delay in milliseconds before the animation runs, once start time is reached.</td></tr>
 * <tr><td><code>{@link #Animation_repeatCount android:repeatCount}</code></td><td>Defines how many times the animation should repeat.</td></tr>
 * <tr><td><code>{@link #Animation_repeatMode android:repeatMode}</code></td><td>Defines the animation behavior when it reaches the end and the repeat count is
 * greater than 0 or infinite.</td></tr>
 * <tr><td><code>{@link #Animation_zAdjustment android:zAdjustment}</code></td><td>Allows for an adjustment of the Z ordering of the content being
 * animated for the duration of the animation.</td></tr>
 * <tr><td><code>{@link #Animation_fillEnabled android:fillEnabled}</code></td><td>When set to true, the value of fillBefore is taken into account.</td></tr>
 * <tr><td><code>{@link #Animation_detachWallpaper android:detachWallpaper}</code></td><td>Special option for window animations: if this window is on top
 * of a wallpaper, don't animate the wallpaper with it.</td></tr>
 * </table>
 * @see #Animation_background
 * @see #Animation_interpolator
 * @see #Animation_duration
 * @see #Animation_fillBefore
 * @see #Animation_fillAfter
 * @see #Animation_startOffset
 * @see #Animation_repeatCount
 * @see #Animation_repeatMode
 * @see #Animation_zAdjustment
 * @see #Animation_fillEnabled
 * @see #Animation_detachWallpaper
 */

public static final int[] Animation;
static { Animation = new int[0]; }

/**
 * Drawable used to render several animated frames.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AnimationDrawable_visible android:visible}</code></td><td>Provides initial visibility state of the drawable; the default
 * value is false.</td></tr>
 * <tr><td><code>{@link #AnimationDrawable_variablePadding android:variablePadding}</code></td><td>If true, allows the drawable's padding to change based on the
 * current state that is selected.</td></tr>
 * <tr><td><code>{@link #AnimationDrawable_oneshot android:oneshot}</code></td><td>If true, the animation will only run a single time and then
 * stop.</td></tr>
 * </table>
 * @see #AnimationDrawable_visible
 * @see #AnimationDrawable_variablePadding
 * @see #AnimationDrawable_oneshot
 */

public static final int[] AnimationDrawable;
static { AnimationDrawable = new int[0]; }

/**
 * Represents a single frame inside an AnimationDrawable.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AnimationDrawableItem_duration android:duration}</code></td><td>Amount of time (in milliseconds) to display this frame.</td></tr>
 * <tr><td><code>{@link #AnimationDrawableItem_drawable android:drawable}</code></td><td>Reference to a drawable resource to use for the frame.</td></tr>
 * </table>
 * @see #AnimationDrawableItem_duration
 * @see #AnimationDrawableItem_drawable
 */

public static final int[] AnimationDrawableItem;
static { AnimationDrawableItem = new int[0]; }

/**
 * <p>
 * @attr description
 * Reference to a drawable resource to use for the frame.  If not
 * given, the drawable must be defined by the first child tag.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:drawable
 */

public static final int AnimationDrawableItem_drawable = 1; // 0x1

/**
 * <p>
 * @attr description
 * Amount of time (in milliseconds) to display this frame.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:duration
 */

public static final int AnimationDrawableItem_duration = 0; // 0x0

/**
 * <p>
 * @attr description
 * If true, the animation will only run a single time and then
 * stop.  If false (the default), it will continually run,
 * restarting at the first frame after the last has finished.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:oneshot
 */

public static final int AnimationDrawable_oneshot = 2; // 0x2

/**
 * <p>
 * @attr description
 * If true, allows the drawable's padding to change based on the
 * current state that is selected.  If false, the padding will
 * stay the same (based on the maximum padding of all the states).
 * Enabling this feature requires that the owner of the drawable
 * deal with performing layout when the state changes, which is
 * often not supported.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:variablePadding
 */

public static final int AnimationDrawable_variablePadding = 1; // 0x1

/**
 * <p>
 * @attr description
 * Provides initial visibility state of the drawable; the default
 * value is false.  See
 * {@link android.graphics.drawable.Drawable#setVisible}.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:visible
 */

public static final int AnimationDrawable_visible = 0; // 0x0

public static final int[] AnimationScaleListDrawable;
static { AnimationScaleListDrawable = new int[0]; }

/**
 * <p>
 * @attr description
 * Reference to a drawable resource to use for the state. If not
 * given, the drawable must be defined by the first child tag.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:drawable
 */

public static final int AnimationScaleListDrawableItem_drawable = 0; // 0x0

/**
 * Attributes that can be used with a AnimationSet.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AnimationSet_duration android:duration}</code></td><td>Amount of time (in milliseconds) to display this frame.</td></tr>
 * <tr><td><code>{@link #AnimationSet_shareInterpolator android:shareInterpolator}</code></td><td></td></tr>
 * <tr><td><code>{@link #AnimationSet_fillBefore android:fillBefore}</code></td><td>When set to true or when fillEnabled is not set to true, the animation transformation
 * is applied before the animation has started.</td></tr>
 * <tr><td><code>{@link #AnimationSet_fillAfter android:fillAfter}</code></td><td>When set to true, the animation transformation is applied after the animation is
 * over.</td></tr>
 * <tr><td><code>{@link #AnimationSet_startOffset android:startOffset}</code></td><td>Delay in milliseconds before the animation runs, once start time is reached.</td></tr>
 * <tr><td><code>{@link #AnimationSet_repeatMode android:repeatMode}</code></td><td>Defines the animation behavior when it reaches the end and the repeat count is
 * greater than 0 or infinite.</td></tr>
 * </table>
 * @see #AnimationSet_duration
 * @see #AnimationSet_shareInterpolator
 * @see #AnimationSet_fillBefore
 * @see #AnimationSet_fillAfter
 * @see #AnimationSet_startOffset
 * @see #AnimationSet_repeatMode
 */

public static final int[] AnimationSet;
static { AnimationSet = new int[0]; }

/**
 * <p>
 * @attr description
 * Amount of time (in milliseconds) to display this frame.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:duration
 */

public static final int AnimationSet_duration = 0; // 0x0

/**
 * <p>
 * @attr description
 * When set to true, the animation transformation is applied after the animation is
 * over. The default value is false. If fillEnabled is not set to true and the
 * animation is not set on a View, fillAfter is assumed to be true.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:fillAfter
 */

public static final int AnimationSet_fillAfter = 3; // 0x3

/**
 * <p>
 * @attr description
 * When set to true or when fillEnabled is not set to true, the animation transformation
 * is applied before the animation has started. The default value is true.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:fillBefore
 */

public static final int AnimationSet_fillBefore = 2; // 0x2

/**
 * <p>
 * @attr description
 * Defines the animation behavior when it reaches the end and the repeat count is
 * greater than 0 or infinite. The default value is restart.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>restart</td><td>1</td><td>The animation starts again from the beginning.</td></tr>
 * <tr><td>reverse</td><td>2</td><td>The animation plays backward.</td></tr>
 * </table>
 *
 * @attr name android:repeatMode
 */

public static final int AnimationSet_repeatMode = 5; // 0x5

/**
 * <p>This symbol is the offset where the {@link android.R.attr#shareInterpolator}
 * attribute's value can be found in the {@link #AnimationSet} array.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:shareInterpolator
 */

public static final int AnimationSet_shareInterpolator = 1; // 0x1

/**
 * <p>
 * @attr description
 * Delay in milliseconds before the animation runs, once start time is reached.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:startOffset
 */

public static final int AnimationSet_startOffset = 4; // 0x4

/**
 * <p>
 * @attr description
 * Special background behind animation.  Only for use with window
 * animations.  Can only be a color, and only black.  If 0, the
 * default, there is no background.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:background
 */

public static final int Animation_background = 0; // 0x0

/**
 * <p>
 * @attr description
 * Special option for window animations: if this window is on top
 * of a wallpaper, don't animate the wallpaper with it.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:detachWallpaper
 */

public static final int Animation_detachWallpaper = 10; // 0xa

/**
 * <p>
 * @attr description
 * Amount of time (in milliseconds) for the animation to run.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:duration
 */

public static final int Animation_duration = 2; // 0x2

/**
 * <p>
 * @attr description
 * When set to true, the animation transformation is applied after the animation is
 * over. The default value is false. If fillEnabled is not set to true and the
 * animation is not set on a View, fillAfter is assumed to be true.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:fillAfter
 */

public static final int Animation_fillAfter = 4; // 0x4

/**
 * <p>
 * @attr description
 * When set to true or when fillEnabled is not set to true, the animation transformation
 * is applied before the animation has started. The default value is true.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:fillBefore
 */

public static final int Animation_fillBefore = 3; // 0x3

/**
 * <p>
 * @attr description
 * When set to true, the value of fillBefore is taken into account.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:fillEnabled
 */

public static final int Animation_fillEnabled = 9; // 0x9

/**
 * <p>
 * @attr description
 * Defines the interpolator used to smooth the animation movement in time.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:interpolator
 */

public static final int Animation_interpolator = 1; // 0x1

/**
 * <p>
 * @attr description
 * Defines how many times the animation should repeat. The default value is 0.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>infinite</td><td>ffffffff</td><td></td></tr>
 * </table>
 *
 * @attr name android:repeatCount
 */

public static final int Animation_repeatCount = 6; // 0x6

/**
 * <p>
 * @attr description
 * Defines the animation behavior when it reaches the end and the repeat count is
 * greater than 0 or infinite. The default value is restart.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>restart</td><td>1</td><td>The animation starts again from the beginning.</td></tr>
 * <tr><td>reverse</td><td>2</td><td>The animation plays backward.</td></tr>
 * </table>
 *
 * @attr name android:repeatMode
 */

public static final int Animation_repeatMode = 7; // 0x7

/**
 * <p>
 * @attr description
 * Delay in milliseconds before the animation runs, once start time is reached.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:startOffset
 */

public static final int Animation_startOffset = 5; // 0x5

/**
 * <p>
 * @attr description
 * Allows for an adjustment of the Z ordering of the content being
 * animated for the duration of the animation.  The default value is normal.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>ffffffff</td><td>The content being animated is forced under all other
 * content for the duration of the animation.</td></tr>
 * <tr><td>normal</td><td>0</td><td>The content being animated be kept in its current Z order.</td></tr>
 * <tr><td>top</td><td>1</td><td>The content being animated is forced on top of all other
 * content for the duration of the animation.</td></tr>
 * </table>
 *
 * @attr name android:zAdjustment
 */

public static final int Animation_zAdjustment = 8; // 0x8

/**
 * Attributes that can be used with a Animator.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #Animator_interpolator android:interpolator}</code></td><td>Sets the acceleration curve for the indeterminate animation.</td></tr>
 * <tr><td><code>{@link #Animator_duration android:duration}</code></td><td>Amount of time (in milliseconds) to display this frame.</td></tr>
 * <tr><td><code>{@link #Animator_startOffset android:startOffset}</code></td><td>Delay in milliseconds before the animation runs, once start time is reached.</td></tr>
 * <tr><td><code>{@link #Animator_repeatCount android:repeatCount}</code></td><td>Defines how many times the animation should repeat.</td></tr>
 * <tr><td><code>{@link #Animator_repeatMode android:repeatMode}</code></td><td>Defines the animation behavior when it reaches the end and the repeat count is
 * greater than 0 or infinite.</td></tr>
 * <tr><td><code>{@link #Animator_valueFrom android:valueFrom}</code></td><td>Value the animation starts from.</td></tr>
 * <tr><td><code>{@link #Animator_valueTo android:valueTo}</code></td><td>Value the animation animates to.</td></tr>
 * <tr><td><code>{@link #Animator_valueType android:valueType}</code></td><td>The type of valueFrom and valueTo.</td></tr>
 * </table>
 * @see #Animator_interpolator
 * @see #Animator_duration
 * @see #Animator_startOffset
 * @see #Animator_repeatCount
 * @see #Animator_repeatMode
 * @see #Animator_valueFrom
 * @see #Animator_valueTo
 * @see #Animator_valueType
 */

public static final int[] Animator;
static { Animator = new int[0]; }

/**
 * Attributes that can be used with a AnimatorSet.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AnimatorSet_ordering android:ordering}</code></td><td>Name of the property being animated.</td></tr>
 * </table>
 * @see #AnimatorSet_ordering
 */

public static final int[] AnimatorSet;
static { AnimatorSet = new int[0]; }

/**
 * <p>
 * @attr description
 * Name of the property being animated.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>sequentially</td><td>1</td><td>child animations should be played sequentially, in the same order as the xml.</td></tr>
 * <tr><td>together</td><td>0</td><td>child animations should be played together.</td></tr>
 * </table>
 *
 * @attr name android:ordering
 */

public static final int AnimatorSet_ordering = 0; // 0x0

/**
 * <p>
 * @attr description
 * Amount of time (in milliseconds) for the animation to run.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:duration
 */

public static final int Animator_duration = 1; // 0x1

/**
 * <p>
 * @attr description
 * Defines the interpolator used to smooth the animation movement in time.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:interpolator
 */

public static final int Animator_interpolator = 0; // 0x0

/**
 * <p>
 * @attr description
 * Defines how many times the animation should repeat. The default value is 0.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>infinite</td><td>ffffffff</td><td></td></tr>
 * </table>
 *
 * @attr name android:repeatCount
 */

public static final int Animator_repeatCount = 3; // 0x3

/**
 * <p>
 * @attr description
 * Defines the animation behavior when it reaches the end and the repeat count is
 * greater than 0 or infinite. The default value is restart.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>restart</td><td>1</td><td>The animation starts again from the beginning.</td></tr>
 * <tr><td>reverse</td><td>2</td><td>The animation plays backward.</td></tr>
 * </table>
 *
 * @attr name android:repeatMode
 */

public static final int Animator_repeatMode = 4; // 0x4

/**
 * <p>
 * @attr description
 * Delay in milliseconds before the animation runs, once start time is reached.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:startOffset
 */

public static final int Animator_startOffset = 2; // 0x2

/**
 * <p>
 * @attr description
 * Value the animation starts from.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:valueFrom
 */

public static final int Animator_valueFrom = 5; // 0x5

/**
 * <p>
 * @attr description
 * Value the animation animates to.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:valueTo
 */

public static final int Animator_valueTo = 6; // 0x6

/**
 * <p>
 * @attr description
 * The type of valueFrom and valueTo.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>colorType</td><td>3</td><td>values are colors, which are integers starting with "#".</td></tr>
 * <tr><td>floatType</td><td>0</td><td>The given values are floats. This is the default value if valueType is
 * unspecified. Note that if any value attribute has a color value
 * (beginning with "#"), then this attribute is ignored and the color values are
 * interpreted as integers.</td></tr>
 * <tr><td>intType</td><td>1</td><td>values are integers.</td></tr>
 * <tr><td>pathType</td><td>2</td><td>values are paths defined as strings.
 * This type is used for path morphing in AnimatedVectorDrawable.</td></tr>
 * </table>
 *
 * @attr name android:valueType
 */

public static final int Animator_valueType = 7; // 0x7

/**
 * Attributes that can be used with a AnticipateInterpolator.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AnticipateInterpolator_tension android:tension}</code></td><td>This is the amount of tension.</td></tr>
 * </table>
 * @see #AnticipateInterpolator_tension
 */

public static final int[] AnticipateInterpolator;
static { AnticipateInterpolator = new int[0]; }

/**
 * <p>
 * @attr description
 * This is the amount of tension.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:tension
 */

public static final int AnticipateInterpolator_tension = 0; // 0x0

/**
 * Attributes that can be used with a AnticipateOvershootInterpolator.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AnticipateOvershootInterpolator_tension android:tension}</code></td><td>This is the amount of tension.</td></tr>
 * <tr><td><code>{@link #AnticipateOvershootInterpolator_extraTension android:extraTension}</code></td><td>This is the amount by which to multiply the tension.</td></tr>
 * </table>
 * @see #AnticipateOvershootInterpolator_tension
 * @see #AnticipateOvershootInterpolator_extraTension
 */

public static final int[] AnticipateOvershootInterpolator;
static { AnticipateOvershootInterpolator = new int[0]; }

/**
 * <p>
 * @attr description
 * This is the amount by which to multiply the tension.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:extraTension
 */

public static final int AnticipateOvershootInterpolator_extraTension = 1; // 0x1

/**
 * <p>
 * @attr description
 * This is the amount of tension.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:tension
 */

public static final int AnticipateOvershootInterpolator_tension = 0; // 0x0

/**
 * Use <code>appwidget-provider</code> as the root tag of the XML resource that
 * describes an AppWidget provider.  See {@link android.appwidget android.appwidget}
 * package for more info.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AppWidgetProviderInfo_minWidth android:minWidth}</code></td><td></td></tr>
 * <tr><td><code>{@link #AppWidgetProviderInfo_minHeight android:minHeight}</code></td><td></td></tr>
 * <tr><td><code>{@link #AppWidgetProviderInfo_updatePeriodMillis android:updatePeriodMillis}</code></td><td>Update period in milliseconds, or 0 if the AppWidget will update itself.</td></tr>
 * <tr><td><code>{@link #AppWidgetProviderInfo_initialLayout android:initialLayout}</code></td><td>A resource id of a layout.</td></tr>
 * <tr><td><code>{@link #AppWidgetProviderInfo_configure android:configure}</code></td><td>A class name in the AppWidget's package to be launched to configure.</td></tr>
 * <tr><td><code>{@link #AppWidgetProviderInfo_previewImage android:previewImage}</code></td><td>A preview of what the AppWidget will look like after it's configured.</td></tr>
 * <tr><td><code>{@link #AppWidgetProviderInfo_autoAdvanceViewId android:autoAdvanceViewId}</code></td><td>The view id of the AppWidget subview which should be auto-advanced.</td></tr>
 * <tr><td><code>{@link #AppWidgetProviderInfo_resizeMode android:resizeMode}</code></td><td>Optional parameter which indicates if and how this widget can be
 * resized.</td></tr>
 * <tr><td><code>{@link #AppWidgetProviderInfo_minResizeWidth android:minResizeWidth}</code></td><td>Minimum width that the AppWidget can be resized to.</td></tr>
 * <tr><td><code>{@link #AppWidgetProviderInfo_minResizeHeight android:minResizeHeight}</code></td><td>Minimum height that the AppWidget can be resized to.</td></tr>
 * <tr><td><code>{@link #AppWidgetProviderInfo_initialKeyguardLayout android:initialKeyguardLayout}</code></td><td>A resource id of a layout.</td></tr>
 * <tr><td><code>{@link #AppWidgetProviderInfo_widgetCategory android:widgetCategory}</code></td><td>Optional parameter which indicates where this widget can be shown,
 * ie.</td></tr>
 * <tr><td><code>{@link #AppWidgetProviderInfo_widgetFeatures android:widgetFeatures}</code></td><td>Flags indicating various features supported by the widget.</td></tr>
 * </table>
 * @see #AppWidgetProviderInfo_minWidth
 * @see #AppWidgetProviderInfo_minHeight
 * @see #AppWidgetProviderInfo_updatePeriodMillis
 * @see #AppWidgetProviderInfo_initialLayout
 * @see #AppWidgetProviderInfo_configure
 * @see #AppWidgetProviderInfo_previewImage
 * @see #AppWidgetProviderInfo_autoAdvanceViewId
 * @see #AppWidgetProviderInfo_resizeMode
 * @see #AppWidgetProviderInfo_minResizeWidth
 * @see #AppWidgetProviderInfo_minResizeHeight
 * @see #AppWidgetProviderInfo_initialKeyguardLayout
 * @see #AppWidgetProviderInfo_widgetCategory
 * @see #AppWidgetProviderInfo_widgetFeatures
 */

public static final int[] AppWidgetProviderInfo;
static { AppWidgetProviderInfo = new int[0]; }

/**
 * <p>
 * @attr description
 * The view id of the AppWidget subview which should be auto-advanced.
 * by the widget's host.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:autoAdvanceViewId
 */

public static final int AppWidgetProviderInfo_autoAdvanceViewId = 6; // 0x6

/**
 * <p>
 * @attr description
 * A class name in the AppWidget's package to be launched to configure.
 * If not supplied, then no activity will be launched.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:configure
 */

public static final int AppWidgetProviderInfo_configure = 4; // 0x4

/**
 * <p>
 * @attr description
 * A resource id of a layout.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:initialKeyguardLayout
 */

public static final int AppWidgetProviderInfo_initialKeyguardLayout = 10; // 0xa

/**
 * <p>
 * @attr description
 * A resource id of a layout.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:initialLayout
 */

public static final int AppWidgetProviderInfo_initialLayout = 3; // 0x3

/**
 * <p>
 * @attr description
 * Minimum height of the AppWidget.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:minHeight
 */

public static final int AppWidgetProviderInfo_minHeight = 1; // 0x1

/**
 * <p>
 * @attr description
 * Minimum height that the AppWidget can be resized to.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:minResizeHeight
 */

public static final int AppWidgetProviderInfo_minResizeHeight = 9; // 0x9

/**
 * <p>
 * @attr description
 * Minimum width that the AppWidget can be resized to.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:minResizeWidth
 */

public static final int AppWidgetProviderInfo_minResizeWidth = 8; // 0x8

/**
 * <p>
 * @attr description
 * Minimum width of the AppWidget.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:minWidth
 */

public static final int AppWidgetProviderInfo_minWidth = 0; // 0x0

/**
 * <p>
 * @attr description
 * A preview of what the AppWidget will look like after it's configured.
 * If not supplied, the AppWidget's icon will be used.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:previewImage
 */

public static final int AppWidgetProviderInfo_previewImage = 5; // 0x5

/**
 * <p>
 * @attr description
 * Optional parameter which indicates if and how this widget can be
 * resized. Supports combined values using | operator.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>horizontal</td><td>1</td><td></td></tr>
 * <tr><td>none</td><td>0</td><td></td></tr>
 * <tr><td>vertical</td><td>2</td><td></td></tr>
 * </table>
 *
 * @attr name android:resizeMode
 */

public static final int AppWidgetProviderInfo_resizeMode = 7; // 0x7

/**
 * <p>
 * @attr description
 * Update period in milliseconds, or 0 if the AppWidget will update itself.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:updatePeriodMillis
 */

public static final int AppWidgetProviderInfo_updatePeriodMillis = 2; // 0x2

/**
 * <p>
 * @attr description
 * Optional parameter which indicates where this widget can be shown,
 * ie. home screen, keyguard, search bar or any combination thereof.
 * Supports combined values using | operator.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>home_screen</td><td>1</td><td></td></tr>
 * <tr><td>keyguard</td><td>2</td><td></td></tr>
 * <tr><td>searchbox</td><td>4</td><td></td></tr>
 * </table>
 *
 * @attr name android:widgetCategory
 */

public static final int AppWidgetProviderInfo_widgetCategory = 11; // 0xb

/**
 * <p>
 * @attr description
 * Flags indicating various features supported by the widget. These are hints to the
 * widget host, and do not actually change the behavior of the widget.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>hide_from_picker</td><td>2</td><td>The widget is added directly by the app, and does not need to appear in
 * the global list of available widgets</td></tr>
 * <tr><td>reconfigurable</td><td>1</td><td>The widget can be reconfigured anytime after it is bound</td></tr>
 * </table>
 *
 * @attr name android:widgetFeatures
 */

public static final int AppWidgetProviderInfo_widgetFeatures = 12; // 0xc

/**
 * Use <code>arcMotion</code> as the root tag of the XML resource that
 * describes a {@link android.transition.ArcMotion}. This must be used
 * within a transition with which the PathMotion should be associated.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #ArcMotion_minimumHorizontalAngle android:minimumHorizontalAngle}</code></td><td>The minimum arc angle in degrees between the start and end points when
 * they are close to horizontal.</td></tr>
 * <tr><td><code>{@link #ArcMotion_minimumVerticalAngle android:minimumVerticalAngle}</code></td><td>The minimum arc angle in degrees between the start and end points when
 * they are close to vertical.</td></tr>
 * <tr><td><code>{@link #ArcMotion_maximumAngle android:maximumAngle}</code></td><td>The maximum arc angle in degrees between the start and end points.</td></tr>
 * </table>
 * @see #ArcMotion_minimumHorizontalAngle
 * @see #ArcMotion_minimumVerticalAngle
 * @see #ArcMotion_maximumAngle
 */

public static final int[] ArcMotion;
static { ArcMotion = new int[0]; }

/**
 * <p>
 * @attr description
 * The maximum arc angle in degrees between the start and end points.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:maximumAngle
 */

public static final int ArcMotion_maximumAngle = 2; // 0x2

/**
 * <p>
 * @attr description
 * The minimum arc angle in degrees between the start and end points when
 * they are close to horizontal.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:minimumHorizontalAngle
 */

public static final int ArcMotion_minimumHorizontalAngle = 0; // 0x0

/**
 * <p>
 * @attr description
 * The minimum arc angle in degrees between the start and end points when
 * they are close to vertical.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:minimumVerticalAngle
 */

public static final int ArcMotion_minimumVerticalAngle = 1; // 0x1

/**
 * Attributes that can be used with a AutoCompleteTextView.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AutoCompleteTextView_completionHint android:completionHint}</code></td><td>Defines the hint displayed in the drop down menu.</td></tr>
 * <tr><td><code>{@link #AutoCompleteTextView_completionHintView android:completionHintView}</code></td><td>Defines the hint view displayed in the drop down menu.</td></tr>
 * <tr><td><code>{@link #AutoCompleteTextView_completionThreshold android:completionThreshold}</code></td><td>Defines the number of characters that the user must type before
 * completion suggestions are displayed in a drop down menu.</td></tr>
 * <tr><td><code>{@link #AutoCompleteTextView_dropDownSelector android:dropDownSelector}</code></td><td>Selector in a drop down list.</td></tr>
 * <tr><td><code>{@link #AutoCompleteTextView_inputType android:inputType}</code></td><td>The type of data being placed in a text field, used to help an
 * input method decide how to let the user enter text.</td></tr>
 * <tr><td><code>{@link #AutoCompleteTextView_dropDownWidth android:dropDownWidth}</code></td><td>Specifies the basic width of the dropdown.</td></tr>
 * <tr><td><code>{@link #AutoCompleteTextView_dropDownAnchor android:dropDownAnchor}</code></td><td>View to anchor the auto-complete dropdown to.</td></tr>
 * <tr><td><code>{@link #AutoCompleteTextView_dropDownHeight android:dropDownHeight}</code></td><td>Specifies the basic height of the dropdown.</td></tr>
 * <tr><td><code>{@link #AutoCompleteTextView_popupTheme android:popupTheme}</code></td><td>Reference to a theme that should be used to inflate popups
 * shown by widgets in the toolbar.</td></tr>
 * </table>
 * @see #AutoCompleteTextView_completionHint
 * @see #AutoCompleteTextView_completionHintView
 * @see #AutoCompleteTextView_completionThreshold
 * @see #AutoCompleteTextView_dropDownSelector
 * @see #AutoCompleteTextView_inputType
 * @see #AutoCompleteTextView_dropDownWidth
 * @see #AutoCompleteTextView_dropDownAnchor
 * @see #AutoCompleteTextView_dropDownHeight
 * @see #AutoCompleteTextView_popupTheme
 */

public static final int[] AutoCompleteTextView;
static { AutoCompleteTextView = new int[0]; }

/**
 * <p>
 * @attr description
 * Defines the hint displayed in the drop down menu.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:completionHint
 */

public static final int AutoCompleteTextView_completionHint = 0; // 0x0

/**
 * <p>
 * @attr description
 * Defines the hint view displayed in the drop down menu.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:completionHintView
 */

public static final int AutoCompleteTextView_completionHintView = 1; // 0x1

/**
 * <p>
 * @attr description
 * Defines the number of characters that the user must type before
 * completion suggestions are displayed in a drop down menu.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:completionThreshold
 */

public static final int AutoCompleteTextView_completionThreshold = 2; // 0x2

/**
 * <p>
 * @attr description
 * View to anchor the auto-complete dropdown to. If not specified, the text view itself
 * is used.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:dropDownAnchor
 */

public static final int AutoCompleteTextView_dropDownAnchor = 6; // 0x6

/**
 * <p>
 * @attr description
 * Specifies the basic height of the dropdown. Its value may
 * be a dimension (such as "12dip") for a constant height,
 * fill_parent or match_parent to fill the height of the
 * screen, or wrap_content to match the height of
 * the content of the drop down.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>fill_parent</td><td>ffffffff</td><td>The dropdown should fit the height of the screen.
 * This constant is deprecated starting from API Level 8 and
 * is replaced by {@code match_parent}.</td></tr>
 * <tr><td>match_parent</td><td>ffffffff</td><td>The dropdown should fit the height of the screen.
 * Introduced in API Level 8.</td></tr>
 * <tr><td>wrap_content</td><td>fffffffe</td><td>The dropdown should fit the height of the content.</td></tr>
 * </table>
 *
 * @attr name android:dropDownHeight
 */

public static final int AutoCompleteTextView_dropDownHeight = 7; // 0x7

/**
 * <p>
 * @attr description
 * Selector in a drop down list.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:dropDownSelector
 */

public static final int AutoCompleteTextView_dropDownSelector = 3; // 0x3

/**
 * <p>
 * @attr description
 * Specifies the basic width of the dropdown. Its value may
 * be a dimension (such as "12dip") for a constant width,
 * fill_parent or match_parent to match the width of the
 * screen, or wrap_content to match the width of
 * the anchored view.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>fill_parent</td><td>ffffffff</td><td>The dropdown should fill the width of the screen.
 * This constant is deprecated starting from API Level 8 and
 * is replaced by {@code match_parent}.</td></tr>
 * <tr><td>match_parent</td><td>ffffffff</td><td>The dropdown should fit the width of the screen.
 * Introduced in API Level 8.</td></tr>
 * <tr><td>wrap_content</td><td>fffffffe</td><td>The dropdown should fit the width of its anchor.</td></tr>
 * </table>
 *
 * @attr name android:dropDownWidth
 */

public static final int AutoCompleteTextView_dropDownWidth = 5; // 0x5

/**
 * <p>
 * @attr description
 * The type of data being placed in a text field, used to help an
 * input method decide how to let the user enter text.  The constants
 * here correspond to those defined by
 * {@link android.text.InputType}.  Generally you can select
 * a single value, though some can be combined together as
 * indicated.  Setting this attribute to anything besides
 * <var>none</var> also implies that the text is editable.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>date</td><td>14</td><td>For entering a date.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_DATETIME} |
 * {@link android.text.InputType#TYPE_DATETIME_VARIATION_DATE}.</td></tr>
 * <tr><td>datetime</td><td>4</td><td>For entering a date and time.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_DATETIME} |
 * {@link android.text.InputType#TYPE_DATETIME_VARIATION_NORMAL}.</td></tr>
 * <tr><td>none</td><td>0</td><td>There is no content type.  The text is not editable.</td></tr>
 * <tr><td>number</td><td>2</td><td>A numeric only field.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
 * {@link android.text.InputType#TYPE_NUMBER_VARIATION_NORMAL}.</td></tr>
 * <tr><td>numberDecimal</td><td>2002</td><td>Can be combined with <var>number</var> and its other options to
 * allow a decimal (fractional) number.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
 * {@link android.text.InputType#TYPE_NUMBER_FLAG_DECIMAL}.</td></tr>
 * <tr><td>numberPassword</td><td>12</td><td>A numeric password field.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
 * {@link android.text.InputType#TYPE_NUMBER_VARIATION_PASSWORD}.</td></tr>
 * <tr><td>numberSigned</td><td>1002</td><td>Can be combined with <var>number</var> and its other options to
 * allow a signed number.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
 * {@link android.text.InputType#TYPE_NUMBER_FLAG_SIGNED}.</td></tr>
 * <tr><td>phone</td><td>3</td><td>For entering a phone number.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_PHONE}.</td></tr>
 * <tr><td>text</td><td>1</td><td>Just plain old text.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_NORMAL}.</td></tr>
 * <tr><td>textAutoComplete</td><td>10001</td><td>Can be combined with <var>text</var> and its variations to
 * specify that this field will be doing its own auto-completion and
 * talking with the input method appropriately.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_AUTO_COMPLETE}.</td></tr>
 * <tr><td>textAutoCorrect</td><td>8001</td><td>Can be combined with <var>text</var> and its variations to
 * request auto-correction of text being input.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_AUTO_CORRECT}.</td></tr>
 * <tr><td>textCapCharacters</td><td>1001</td><td>Can be combined with <var>text</var> and its variations to
 * request capitalization of all characters.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_CHARACTERS}.</td></tr>
 * <tr><td>textCapSentences</td><td>4001</td><td>Can be combined with <var>text</var> and its variations to
 * request capitalization of the first character of every sentence.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_SENTENCES}.</td></tr>
 * <tr><td>textCapWords</td><td>2001</td><td>Can be combined with <var>text</var> and its variations to
 * request capitalization of the first character of every word.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_WORDS}.</td></tr>
 * <tr><td>textEmailAddress</td><td>21</td><td>Text that will be used as an e-mail address.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_EMAIL_ADDRESS}.</td></tr>
 * <tr><td>textEmailSubject</td><td>31</td><td>Text that is being supplied as the subject of an e-mail.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_EMAIL_SUBJECT}.</td></tr>
 * <tr><td>textFilter</td><td>b1</td><td>Text that is filtering some other data.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_FILTER}.</td></tr>
 * <tr><td>textImeMultiLine</td><td>40001</td><td>Can be combined with <var>text</var> and its variations to
 * indicate that though the regular text view should not be multiple
 * lines, the IME should provide multiple lines if it can.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_IME_MULTI_LINE}.</td></tr>
 * <tr><td>textLongMessage</td><td>51</td><td>Text that is the content of a long message.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_LONG_MESSAGE}.</td></tr>
 * <tr><td>textMultiLine</td><td>20001</td><td>Can be combined with <var>text</var> and its variations to
 * allow multiple lines of text in the field.  If this flag is not set,
 * the text field will be constrained to a single line.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_MULTI_LINE}.</td></tr>
 * <tr><td>textNoSuggestions</td><td>80001</td><td>Can be combined with <var>text</var> and its variations to
 * indicate that the IME should not show any
 * dictionary-based word suggestions.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_NO_SUGGESTIONS}.</td></tr>
 * <tr><td>textPassword</td><td>81</td><td>Text that is a password.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_PASSWORD}.</td></tr>
 * <tr><td>textPersonName</td><td>61</td><td>Text that is the name of a person.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_PERSON_NAME}.</td></tr>
 * <tr><td>textPhonetic</td><td>c1</td><td>Text that is for phonetic pronunciation, such as a phonetic name
 * field in a contact entry.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_PHONETIC}.</td></tr>
 * <tr><td>textPostalAddress</td><td>71</td><td>Text that is being supplied as a postal mailing address.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_POSTAL_ADDRESS}.</td></tr>
 * <tr><td>textShortMessage</td><td>41</td><td>Text that is the content of a short message.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_SHORT_MESSAGE}.</td></tr>
 * <tr><td>textUri</td><td>11</td><td>Text that will be used as a URI.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_URI}.</td></tr>
 * <tr><td>textVisiblePassword</td><td>91</td><td>Text that is a password that should be visible.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_VISIBLE_PASSWORD}.</td></tr>
 * <tr><td>textWebEditText</td><td>a1</td><td>Text that is being supplied as text in a web form.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_EDIT_TEXT}.</td></tr>
 * <tr><td>textWebEmailAddress</td><td>d1</td><td>Text that will be used as an e-mail address on a web form.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS}.</td></tr>
 * <tr><td>textWebPassword</td><td>e1</td><td>Text that will be used as a password on a web form.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_PASSWORD}.</td></tr>
 * <tr><td>time</td><td>24</td><td>For entering a time.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_DATETIME} |
 * {@link android.text.InputType#TYPE_DATETIME_VARIATION_TIME}.</td></tr>
 * </table>
 *
 * @attr name android:inputType
 */

public static final int AutoCompleteTextView_inputType = 4; // 0x4

/**
 * <p>
 * @attr description
 * Theme to use for the completion popup window.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:popupTheme
 */

public static final int AutoCompleteTextView_popupTheme = 8; // 0x8

/**
 * Use <code>autofill-service</code> as the root tag of the XML resource that describes a
 * {@link android.service.autofill.AutofillService}, which is referenced from its
 * {@link android.service.autofill.AutofillService#SERVICE_META_DATA} meta-data entry.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AutofillService_settingsActivity android:settingsActivity}</code></td><td>Component name of an activity that allows the user to modify
 * the settings for this service.</td></tr>
 * </table>
 * @see #AutofillService_settingsActivity
 */

public static final int[] AutofillService;
static { AutofillService = new int[0]; }

/**
 * Use <code>compatibility-package</code> as a child tag of <code>autofill-service</code>
 * in the XML resource that describes an {@link android.service.autofill.AutofillService}
 * to specify a package and an optional max version code for which to request compatibility
 * mode. If no max version code is specified compatibility mode is requested for all package
 * versions. The max version code is useful to avoid requesting compatibility mode for newer
 * package versions that are known to natively support autofill.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #AutofillService_CompatibilityPackage_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * <tr><td><code>{@link #AutofillService_CompatibilityPackage_maxLongVersionCode android:maxLongVersionCode}</code></td><td>The max version code of the package for which compatibility mode is
 * requested.</td></tr>
 * </table>
 * @see #AutofillService_CompatibilityPackage_name
 * @see #AutofillService_CompatibilityPackage_maxLongVersionCode
 */

public static final int[] AutofillService_CompatibilityPackage;
static { AutofillService_CompatibilityPackage = new int[0]; }

/**
 * <p>
 * @attr description
 * The max version code of the package for which compatibility mode is
 * requested. This corresponds to the long value returned by {@link
 * android.content.pm.PackageInfo#getLongVersionCode()} for the target package.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:maxLongVersionCode
 */

public static final int AutofillService_CompatibilityPackage_maxLongVersionCode = 1; // 0x1

/**
 * <p>
 * @attr description
 * The package name for which compatibility mode is requested.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int AutofillService_CompatibilityPackage_name = 0; // 0x0

/**
 * <p>
 * @attr description
 * Fully qualified class name of an activity that allows the user to modify
 * the settings for this service.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:settingsActivity
 */

public static final int AutofillService_settingsActivity = 0; // 0x0

/**
 * Drawable used to draw bitmaps.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #BitmapDrawable_gravity android:gravity}</code></td><td>Specifies how an object should position its content, on both the X and Y axes,
 * within its own bounds.</td></tr>
 * <tr><td><code>{@link #BitmapDrawable_src android:src}</code></td><td>Sets a drawable as the content of this ImageView.</td></tr>
 * <tr><td><code>{@link #BitmapDrawable_antialias android:antialias}</code></td><td>Enables or disables antialiasing.</td></tr>
 * <tr><td><code>{@link #BitmapDrawable_filter android:filter}</code></td><td>Enables or disables bitmap filtering.</td></tr>
 * <tr><td><code>{@link #BitmapDrawable_dither android:dither}</code></td><td>Enables or disables dithering of the bitmap if the bitmap does not have the
 * same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
 * an RGB 565 screen).</td></tr>
 * <tr><td><code>{@link #BitmapDrawable_tint android:tint}</code></td><td>The tinting color for the image.</td></tr>
 * <tr><td><code>{@link #BitmapDrawable_tileMode android:tileMode}</code></td><td>Defines the tile mode.</td></tr>
 * <tr><td><code>{@link #BitmapDrawable_alpha android:alpha}</code></td><td>alpha property of the view, as a value between 0 (completely transparent) and 1
 * (completely opaque).</td></tr>
 * <tr><td><code>{@link #BitmapDrawable_mipMap android:mipMap}</code></td><td>Enables or disables the mipmap hint.</td></tr>
 * <tr><td><code>{@link #BitmapDrawable_autoMirrored android:autoMirrored}</code></td><td>Indicates if the drawable needs to be mirrored when its layout direction is
 * RTL (right-to-left).</td></tr>
 * <tr><td><code>{@link #BitmapDrawable_tintMode android:tintMode}</code></td><td>When a tint color is set, specifies its Porter-Duff blending mode.</td></tr>
 * <tr><td><code>{@link #BitmapDrawable_tileModeX android:tileModeX}</code></td><td>Defines the horizontal tile mode.</td></tr>
 * <tr><td><code>{@link #BitmapDrawable_tileModeY android:tileModeY}</code></td><td>Defines the vertical tile mode.</td></tr>
 * </table>
 * @see #BitmapDrawable_gravity
 * @see #BitmapDrawable_src
 * @see #BitmapDrawable_antialias
 * @see #BitmapDrawable_filter
 * @see #BitmapDrawable_dither
 * @see #BitmapDrawable_tint
 * @see #BitmapDrawable_tileMode
 * @see #BitmapDrawable_alpha
 * @see #BitmapDrawable_mipMap
 * @see #BitmapDrawable_autoMirrored
 * @see #BitmapDrawable_tintMode
 * @see #BitmapDrawable_tileModeX
 * @see #BitmapDrawable_tileModeY
 */

public static final int[] BitmapDrawable;
static { BitmapDrawable = new int[0]; }

/**
 * <p>
 * @attr description
 * Specifies the alpha multiplier to apply to the base drawable.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:alpha
 */

public static final int BitmapDrawable_alpha = 7; // 0x7

/**
 * <p>
 * @attr description
 * Enables or disables antialiasing. Antialiasing can be used to smooth the
 * edges of a bitmap when rotated. Default value is false.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:antialias
 */

public static final int BitmapDrawable_antialias = 2; // 0x2

/**
 * <p>
 * @attr description
 * Indicates if the drawable needs to be mirrored when its layout direction is
 * RTL (right-to-left).
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:autoMirrored
 */

public static final int BitmapDrawable_autoMirrored = 9; // 0x9

/**
 * <p>
 * @attr description
 * Enables or disables dithering of the bitmap if the bitmap does not have the
 * same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
 * an RGB 565 screen). Default value is true.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:dither
 */

public static final int BitmapDrawable_dither = 4; // 0x4

/**
 * <p>
 * @attr description
 * Enables or disables bitmap filtering. Filtering is used when the bitmap is
 * shrunk or stretched to smooth its apperance. Default value is true.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:filter
 */

public static final int BitmapDrawable_filter = 3; // 0x3

/**
 * <p>
 * @attr description
 * Defines the gravity for the bitmap. The gravity indicates where to position
 * the drawable in its container if the bitmap is smaller than the container.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
 * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
 * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
 * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
 * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the horizontal gravity: a left gravity will clip the right
 * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
 * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the vertical gravity: a top gravity will clip the bottom
 * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
 * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
 * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
 * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
 * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
 * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
 * </table>
 *
 * @attr name android:gravity
 */

public static final int BitmapDrawable_gravity = 0; // 0x0

/**
 * <p>
 * @attr description
 * Enables or disables the mipmap hint. See
 * {@link android.graphics.Bitmap#setHasMipMap(boolean)} for more information.
 * Default value is false.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:mipMap
 */

public static final int BitmapDrawable_mipMap = 8; // 0x8

/**
 * <p>
 * @attr description
 * Identifier of the bitmap file. This attribute is mandatory.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:src
 */

public static final int BitmapDrawable_src = 1; // 0x1

/**
 * <p>
 * @attr description
 * Defines the tile mode. When the tile mode is enabled, the bitmap is repeated.
 * Gravity is ignored when the tile mode is enabled. Default value is "disabled".
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>clamp</td><td>0</td><td>Replicates the edge color.</td></tr>
 * <tr><td>disabled</td><td>ffffffff</td><td>Do not tile the bitmap. This is the default value.</td></tr>
 * <tr><td>mirror</td><td>2</td><td>Repeats the shader's image horizontally and vertically, alternating
 * mirror images so that adjacent images always seam.</td></tr>
 * <tr><td>repeat</td><td>1</td><td>Repeats the bitmap in both direction.</td></tr>
 * </table>
 *
 * @attr name android:tileMode
 */

public static final int BitmapDrawable_tileMode = 6; // 0x6

/**
 * <p>
 * @attr description
 * Defines the horizontal tile mode. When the tile mode is enabled, the bitmap is repeated.
 * Gravity is ignored when the tile mode is enabled. Default value is "disabled".
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>clamp</td><td>0</td><td>Replicates the edge color.</td></tr>
 * <tr><td>disabled</td><td>ffffffff</td><td>Do not tile the bitmap. This is the default value.</td></tr>
 * <tr><td>mirror</td><td>2</td><td>Repeats the shader's image horizontally, alternating
 * mirror images so that adjacent images always seam.</td></tr>
 * <tr><td>repeat</td><td>1</td><td>Repeats the bitmap horizontally.</td></tr>
 * </table>
 *
 * @attr name android:tileModeX
 */

public static final int BitmapDrawable_tileModeX = 11; // 0xb

/**
 * <p>
 * @attr description
 * Defines the vertical tile mode. When the tile mode is enabled, the bitmap is repeated.
 * Gravity is ignored when the tile mode is enabled. Default value is "disabled".
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>clamp</td><td>0</td><td>Replicates the edge color.</td></tr>
 * <tr><td>disabled</td><td>ffffffff</td><td>Do not tile the bitmap. This is the default value.</td></tr>
 * <tr><td>mirror</td><td>2</td><td>Repeats the shader's image vertically, alternating
 * mirror images so that adjacent images always seam.</td></tr>
 * <tr><td>repeat</td><td>1</td><td>Repeats the bitmap vertically.</td></tr>
 * </table>
 *
 * @attr name android:tileModeY
 */

public static final int BitmapDrawable_tileModeY = 12; // 0xc

/**
 * <p>
 * @attr description
 * If set, specifies the color to apply to the drawable as a tint. By default,
 * no tint is applied. May be a color state list.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:tint
 */

public static final int BitmapDrawable_tint = 5; // 0x5

/**
 * <p>
 * @attr description
 * When a tint color is set, specifies its Porter-Duff blending mode. The
 * default value is src_in, which treats the drawable as an alpha mask.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 *
 * @attr name android:tintMode
 */

public static final int BitmapDrawable_tintMode = 10; // 0xa

public static final int[] Button;
static { Button = new int[0]; }

/**
 * Attributes that can be used with a CalendarView.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #CalendarView_firstDayOfWeek android:firstDayOfWeek}</code></td><td>The first day of week according to {@link java.util.Calendar}.</td></tr>
 * <tr><td><code>{@link #CalendarView_showWeekNumber android:showWeekNumber}</code></td><td>@deprecated Whether do show week numbers.</td></tr>
 * <tr><td><code>{@link #CalendarView_minDate android:minDate}</code></td><td>The minimal date shown by this calendar view in mm/dd/yyyy format.</td></tr>
 * <tr><td><code>{@link #CalendarView_maxDate android:maxDate}</code></td><td>The maximal date shown by this calendar view in mm/dd/yyyy format.</td></tr>
 * <tr><td><code>{@link #CalendarView_shownWeekCount android:shownWeekCount}</code></td><td>@deprecated The number of weeks to be shown.</td></tr>
 * <tr><td><code>{@link #CalendarView_selectedWeekBackgroundColor android:selectedWeekBackgroundColor}</code></td><td>@deprecated The background color for the selected week.</td></tr>
 * <tr><td><code>{@link #CalendarView_focusedMonthDateColor android:focusedMonthDateColor}</code></td><td>@deprecated The color for the dates of the focused month.</td></tr>
 * <tr><td><code>{@link #CalendarView_unfocusedMonthDateColor android:unfocusedMonthDateColor}</code></td><td>@deprecated The color for the dates of an unfocused month.</td></tr>
 * <tr><td><code>{@link #CalendarView_weekNumberColor android:weekNumberColor}</code></td><td>@deprecated The color for the week numbers.</td></tr>
 * <tr><td><code>{@link #CalendarView_weekSeparatorLineColor android:weekSeparatorLineColor}</code></td><td>@deprecated The color for the separator line between weeks.</td></tr>
 * <tr><td><code>{@link #CalendarView_selectedDateVerticalBar android:selectedDateVerticalBar}</code></td><td>@deprecated Drawable for the vertical bar shown at the beginning and at the end of the selected date.</td></tr>
 * <tr><td><code>{@link #CalendarView_weekDayTextAppearance android:weekDayTextAppearance}</code></td><td>The text appearance for the week day abbreviation in the calendar header.</td></tr>
 * <tr><td><code>{@link #CalendarView_dateTextAppearance android:dateTextAppearance}</code></td><td>The text appearance for the day numbers in the calendar grid.</td></tr>
 * </table>
 * @see #CalendarView_firstDayOfWeek
 * @see #CalendarView_showWeekNumber
 * @see #CalendarView_minDate
 * @see #CalendarView_maxDate
 * @see #CalendarView_shownWeekCount
 * @see #CalendarView_selectedWeekBackgroundColor
 * @see #CalendarView_focusedMonthDateColor
 * @see #CalendarView_unfocusedMonthDateColor
 * @see #CalendarView_weekNumberColor
 * @see #CalendarView_weekSeparatorLineColor
 * @see #CalendarView_selectedDateVerticalBar
 * @see #CalendarView_weekDayTextAppearance
 * @see #CalendarView_dateTextAppearance
 */

@Deprecated public static final int[] CalendarView;
static { CalendarView = new int[0]; }

/**
 * <p>
 * @attr description
 * The text appearance for the day numbers in the calendar grid.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:dateTextAppearance
 */

public static final int CalendarView_dateTextAppearance = 12; // 0xc

/**
 * <p>
 * @attr description
 * The first day of week according to {@link java.util.Calendar}.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:firstDayOfWeek
 */

public static final int CalendarView_firstDayOfWeek = 0; // 0x0

/**
 * <p>
 * @attr description
 * @deprecated The color for the dates of the focused month.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:focusedMonthDateColor
 */

@Deprecated public static final int CalendarView_focusedMonthDateColor = 6; // 0x6

/**
 * <p>
 * @attr description
 * The maximal date shown by this calendar view in mm/dd/yyyy format.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:maxDate
 */

public static final int CalendarView_maxDate = 3; // 0x3

/**
 * <p>
 * @attr description
 * The minimal date shown by this calendar view in mm/dd/yyyy format.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:minDate
 */

public static final int CalendarView_minDate = 2; // 0x2

/**
 * <p>
 * @attr description
 * @deprecated Drawable for the vertical bar shown at the beginning and at the end of the selected date.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:selectedDateVerticalBar
 */

@Deprecated public static final int CalendarView_selectedDateVerticalBar = 10; // 0xa

/**
 * <p>
 * @attr description
 * @deprecated The background color for the selected week.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:selectedWeekBackgroundColor
 */

@Deprecated public static final int CalendarView_selectedWeekBackgroundColor = 5; // 0x5

/**
 * <p>
 * @attr description
 * @deprecated Whether do show week numbers.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:showWeekNumber
 */

@Deprecated public static final int CalendarView_showWeekNumber = 1; // 0x1

/**
 * <p>
 * @attr description
 * @deprecated The number of weeks to be shown.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:shownWeekCount
 */

@Deprecated public static final int CalendarView_shownWeekCount = 4; // 0x4

/**
 * <p>
 * @attr description
 * @deprecated The color for the dates of an unfocused month.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:unfocusedMonthDateColor
 */

@Deprecated public static final int CalendarView_unfocusedMonthDateColor = 7; // 0x7

/**
 * <p>
 * @attr description
 * The text appearance for the week day abbreviation in the calendar header.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:weekDayTextAppearance
 */

public static final int CalendarView_weekDayTextAppearance = 11; // 0xb

/**
 * <p>
 * @attr description
 * @deprecated The color for the week numbers.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:weekNumberColor
 */

@Deprecated public static final int CalendarView_weekNumberColor = 8; // 0x8

/**
 * <p>
 * @attr description
 * @deprecated The color for the separator line between weeks.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:weekSeparatorLineColor
 */

@Deprecated public static final int CalendarView_weekSeparatorLineColor = 9; // 0x9

/**
 * Use <code>changeBounds</code>as the root tag of the XML resource that
 * describes a {@link android.transition.ChangeBounds} transition.
 * The attributes of the {@link android.R.styleable#Transition Transition}
 * resource are available in addition to the specific attributes of ChangeBounds
 * described here.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #ChangeBounds_resizeClip android:resizeClip}</code></td><td>Resize the view by adjusting the clipBounds rather than changing the
 * dimensions of the view itself.</td></tr>
 * </table>
 * @see #ChangeBounds_resizeClip
 */

public static final int[] ChangeBounds;
static { ChangeBounds = new int[0]; }

/**
 * <p>
 * @attr description
 * Resize the view by adjusting the clipBounds rather than changing the
 * dimensions of the view itself. The default value is false.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:resizeClip
 */

public static final int ChangeBounds_resizeClip = 0; // 0x0

/**
 * Use <code>changeTransform</code> as the root tag of the XML resource that
 * describes a {@link android.transition.ChangeTransform} transition.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #ChangeTransform_reparent android:reparent}</code></td><td>Tells ChangeTransform to track parent changes.</td></tr>
 * <tr><td><code>{@link #ChangeTransform_reparentWithOverlay android:reparentWithOverlay}</code></td><td>A parent change should use an overlay or affect the transform of the
 * transitionining View.</td></tr>
 * </table>
 * @see #ChangeTransform_reparent
 * @see #ChangeTransform_reparentWithOverlay
 */

public static final int[] ChangeTransform;
static { ChangeTransform = new int[0]; }

/**
 * <p>
 * @attr description
 * Tells ChangeTransform to track parent changes. Default is true. Corresponds to
 * {@link android.transition.ChangeTransform#setReparent(boolean)}.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:reparent
 */

public static final int ChangeTransform_reparent = 0; // 0x0

/**
 * <p>
 * @attr description
 * A parent change should use an overlay or affect the transform of the
 * transitionining View. Default is true. Corresponds to
 * {@link android.transition.ChangeTransform#setReparentWithOverlay(boolean)}.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:reparentWithOverlay
 */

public static final int ChangeTransform_reparentWithOverlay = 1; // 0x1

/**
 * Base attributes available to CheckBoxPreference.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #CheckBoxPreference_summaryOn android:summaryOn}</code></td><td>The summary for the Preference in a PreferenceActivity screen when the
 * CheckBoxPreference is checked.</td></tr>
 * <tr><td><code>{@link #CheckBoxPreference_summaryOff android:summaryOff}</code></td><td>The summary for the Preference in a PreferenceActivity screen when the
 * CheckBoxPreference is unchecked.</td></tr>
 * <tr><td><code>{@link #CheckBoxPreference_disableDependentsState android:disableDependentsState}</code></td><td>The state (true for on, or false for off) that causes dependents to be disabled.</td></tr>
 * </table>
 * @see #CheckBoxPreference_summaryOn
 * @see #CheckBoxPreference_summaryOff
 * @see #CheckBoxPreference_disableDependentsState
 */

public static final int[] CheckBoxPreference;
static { CheckBoxPreference = new int[0]; }

/**
 * <p>
 * @attr description
 * The state (true for on, or false for off) that causes dependents to be disabled. By default,
 * dependents will be disabled when this is unchecked, so the value of this preference is false.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:disableDependentsState
 */

public static final int CheckBoxPreference_disableDependentsState = 2; // 0x2

/**
 * <p>
 * @attr description
 * The summary for the Preference in a PreferenceActivity screen when the
 * CheckBoxPreference is unchecked. If separate on/off summaries are not
 * needed, the summary attribute can be used instead.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:summaryOff
 */

public static final int CheckBoxPreference_summaryOff = 1; // 0x1

/**
 * <p>
 * @attr description
 * The summary for the Preference in a PreferenceActivity screen when the
 * CheckBoxPreference is checked. If separate on/off summaries are not
 * needed, the summary attribute can be used instead.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:summaryOn
 */

public static final int CheckBoxPreference_summaryOn = 0; // 0x0

/**
 * Attributes that can be used with a CheckedTextView.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #CheckedTextView_checked android:checked}</code></td><td>Indicates the initial checked state of this button.</td></tr>
 * <tr><td><code>{@link #CheckedTextView_checkMark android:checkMark}</code></td><td>Drawable used for the check mark graphic.</td></tr>
 * <tr><td><code>{@link #CheckedTextView_checkMarkTint android:checkMarkTint}</code></td><td>Tint to apply to the check mark.</td></tr>
 * <tr><td><code>{@link #CheckedTextView_checkMarkTintMode android:checkMarkTintMode}</code></td><td>Blending mode used to apply the check mark tint.</td></tr>
 * </table>
 * @see #CheckedTextView_checked
 * @see #CheckedTextView_checkMark
 * @see #CheckedTextView_checkMarkTint
 * @see #CheckedTextView_checkMarkTintMode
 */

public static final int[] CheckedTextView;
static { CheckedTextView = new int[0]; }

/**
 * <p>
 * @attr description
 * Drawable used for the check mark graphic.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:checkMark
 */

public static final int CheckedTextView_checkMark = 1; // 0x1

/**
 * <p>
 * @attr description
 * Tint to apply to the check mark.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:checkMarkTint
 */

public static final int CheckedTextView_checkMarkTint = 2; // 0x2

/**
 * <p>
 * @attr description
 * Blending mode used to apply the check mark tint.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 *
 * @attr name android:checkMarkTintMode
 */

public static final int CheckedTextView_checkMarkTintMode = 3; // 0x3

/**
 * <p>
 * @attr description
 * Indicates the initial checked state of this text.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:checked
 */

public static final int CheckedTextView_checked = 0; // 0x0

/**
 * Attributes that can be used with a Chronometer.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #Chronometer_format android:format}</code></td><td>Format string: if specified, the Chronometer will display this
 * string, with the first "%s" replaced by the current timer value
 * in "MM:SS" or "H:MM:SS" form.</td></tr>
 * <tr><td><code>{@link #Chronometer_countDown android:countDown}</code></td><td>Specifies whether this Chronometer counts down or counts up from the base.</td></tr>
 * </table>
 * @see #Chronometer_format
 * @see #Chronometer_countDown
 */

public static final int[] Chronometer;
static { Chronometer = new int[0]; }

/**
 * <p>
 * @attr description
 * Specifies whether this Chronometer counts down or counts up from the base.
 * If not specified this is false and the Chronometer counts up.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:countDown
 */

public static final int Chronometer_countDown = 1; // 0x1

/**
 * <p>
 * @attr description
 * Format string: if specified, the Chronometer will display this
 * string, with the first "%s" replaced by the current timer value
 * in "MM:SS" or "H:MM:SS" form.
 * If no format string is specified, the Chronometer will simply display
 * "MM:SS" or "H:MM:SS".
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:format
 */

public static final int Chronometer_format = 0; // 0x0

/**
 * Attributes that can be used with a ClipDrawable.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #ClipDrawable_gravity android:gravity}</code></td><td>Specifies how an object should position its content, on both the X and Y axes,
 * within its own bounds.</td></tr>
 * <tr><td><code>{@link #ClipDrawable_drawable android:drawable}</code></td><td>Reference to a drawable resource to use for the frame.</td></tr>
 * <tr><td><code>{@link #ClipDrawable_clipOrientation android:clipOrientation}</code></td><td>The orientation for the clip.</td></tr>
 * </table>
 * @see #ClipDrawable_gravity
 * @see #ClipDrawable_drawable
 * @see #ClipDrawable_clipOrientation
 */

public static final int[] ClipDrawable;
static { ClipDrawable = new int[0]; }

/**
 * <p>
 * @attr description
 * The orientation for the clip.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>horizontal</td><td>1</td><td>Clip the drawable horizontally.</td></tr>
 * <tr><td>vertical</td><td>2</td><td>Clip the drawable vertically.</td></tr>
 * </table>
 *
 * @attr name android:clipOrientation
 */

public static final int ClipDrawable_clipOrientation = 2; // 0x2

/**
 * <p>
 * @attr description
 * Reference to a drawable resource to draw with the specified scale.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:drawable
 */

public static final int ClipDrawable_drawable = 1; // 0x1

/**
 * <p>
 * @attr description
 * Specifies where to clip within the drawable. The default value is
 * left.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
 * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
 * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
 * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
 * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the horizontal gravity: a left gravity will clip the right
 * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
 * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the vertical gravity: a top gravity will clip the bottom
 * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
 * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
 * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
 * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
 * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
 * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
 * </table>
 *
 * @attr name android:gravity
 */

public static final int ClipDrawable_gravity = 0; // 0x0

/**
 * Attributes that can be used with a ClipRectAnimation.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * </table>
 */

public static final int[] ClipRectAnimation;
static { ClipRectAnimation = new int[0]; }

/**
 * Drawable used to draw a single color.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #ColorDrawable_color android:color}</code></td><td>Solid color for the gradient shape.</td></tr>
 * </table>
 * @see #ColorDrawable_color
 */

public static final int[] ColorDrawable;
static { ColorDrawable = new int[0]; }

/**
 * <p>
 * @attr description
 * The color to use.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:color
 */

public static final int ColorDrawable_color = 0; // 0x0

/**
 * Attributes that can be assigned to a ColorStateList item.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #ColorStateListItem_color android:color}</code></td><td>Solid color for the gradient shape.</td></tr>
 * <tr><td><code>{@link #ColorStateListItem_alpha android:alpha}</code></td><td>alpha property of the view, as a value between 0 (completely transparent) and 1
 * (completely opaque).</td></tr>
 * </table>
 * @see #ColorStateListItem_color
 * @see #ColorStateListItem_alpha
 */

public static final int[] ColorStateListItem;
static { ColorStateListItem = new int[0]; }

/**
 * <p>
 * @attr description
 * Alpha multiplier applied to the base color.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:alpha
 */

public static final int ColorStateListItem_alpha = 1; // 0x1

/**
 * <p>
 * @attr description
 * Base color for this state.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:color
 */

public static final int ColorStateListItem_color = 0; // 0x0

/**
 * Attributes that can be used with a CompoundButton.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #CompoundButton_checked android:checked}</code></td><td>Indicates the initial checked state of this button.</td></tr>
 * <tr><td><code>{@link #CompoundButton_button android:button}</code></td><td>Drawable used for the button graphic (for example, checkbox and radio button).</td></tr>
 * <tr><td><code>{@link #CompoundButton_buttonTint android:buttonTint}</code></td><td>Tint to apply to the button graphic.</td></tr>
 * <tr><td><code>{@link #CompoundButton_buttonTintMode android:buttonTintMode}</code></td><td>Blending mode used to apply the button graphic tint.</td></tr>
 * </table>
 * @see #CompoundButton_checked
 * @see #CompoundButton_button
 * @see #CompoundButton_buttonTint
 * @see #CompoundButton_buttonTintMode
 */

public static final int[] CompoundButton;
static { CompoundButton = new int[0]; }

/**
 * <p>
 * @attr description
 * Drawable used for the button graphic (for example, checkbox and radio button).
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:button
 */

public static final int CompoundButton_button = 1; // 0x1

/**
 * <p>
 * @attr description
 * Tint to apply to the button graphic.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:buttonTint
 */

public static final int CompoundButton_buttonTint = 2; // 0x2

/**
 * <p>
 * @attr description
 * Blending mode used to apply the button graphic tint.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 *
 * @attr name android:buttonTintMode
 */

public static final int CompoundButton_buttonTintMode = 3; // 0x3

/**
 * <p>
 * @attr description
 * Indicates the initial checked state of this button.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:checked
 */

public static final int CompoundButton_checked = 0; // 0x0

/**
 * Maps a specific contact data MIME-type to styling information.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #ContactsDataKind_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
 * associated item.</td></tr>
 * <tr><td><code>{@link #ContactsDataKind_mimeType android:mimeType}</code></td><td>Specify a MIME type that is handled, as per
 * {@link android.content.IntentFilter#addDataType
 * IntentFilter.addDataType()}.</td></tr>
 * <tr><td><code>{@link #ContactsDataKind_summaryColumn android:summaryColumn}</code></td><td>Column in data table that summarizes this data.</td></tr>
 * <tr><td><code>{@link #ContactsDataKind_detailColumn android:detailColumn}</code></td><td>Column in data table that contains details for this data.</td></tr>
 * <tr><td><code>{@link #ContactsDataKind_detailSocialSummary android:detailSocialSummary}</code></td><td>Flag indicating that detail should be built from SocialProvider.</td></tr>
 * <tr><td><code>{@link #ContactsDataKind_allContactsName android:allContactsName}</code></td><td>Resource representing the term "All Contacts" (for example, "All Friends" or
 * "All connections").</td></tr>
 * </table>
 * @see #ContactsDataKind_icon
 * @see #ContactsDataKind_mimeType
 * @see #ContactsDataKind_summaryColumn
 * @see #ContactsDataKind_detailColumn
 * @see #ContactsDataKind_detailSocialSummary
 * @see #ContactsDataKind_allContactsName
 */

public static final int[] ContactsDataKind;
static { ContactsDataKind = new int[0]; }

/**
 * <p>
 * @attr description
 * Resource representing the term "All Contacts" (for example, "All Friends" or
 * "All connections"). Optional (Default is "All Contacts").
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:allContactsName
 */

public static final int ContactsDataKind_allContactsName = 5; // 0x5

/**
 * <p>
 * @attr description
 * Column in data table that contains details for this data.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:detailColumn
 */

public static final int ContactsDataKind_detailColumn = 3; // 0x3

/**
 * <p>
 * @attr description
 * Flag indicating that detail should be built from SocialProvider.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:detailSocialSummary
 */

public static final int ContactsDataKind_detailSocialSummary = 4; // 0x4

/**
 * <p>
 * @attr description
 * Icon used to represent data of this kind.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:icon
 */

public static final int ContactsDataKind_icon = 0; // 0x0

/**
 * <p>
 * @attr description
 * Mime-type handled by this mapping.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:mimeType
 */

public static final int ContactsDataKind_mimeType = 1; // 0x1

/**
 * <p>
 * @attr description
 * Column in data table that summarizes this data.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:summaryColumn
 */

public static final int ContactsDataKind_summaryColumn = 2; // 0x2

/**
 * <p>
 * @attr description
 * Fully qualified class name of an activity that allows the user to modify
 * the settings for this service.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:settingsActivity
 */

public static final int ContentCaptureService_settingsActivity = 0; // 0x0

/**
 * Attributes that can be used with a CycleInterpolator.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #CycleInterpolator_cycles android:cycles}</code></td><td></td></tr>
 * </table>
 * @see #CycleInterpolator_cycles
 */

public static final int[] CycleInterpolator;
static { CycleInterpolator = new int[0]; }

/**
 * <p>This symbol is the offset where the {@link android.R.attr#cycles}
 * attribute's value can be found in the {@link #CycleInterpolator} array.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:cycles
 */

public static final int CycleInterpolator_cycles = 0; // 0x0

/**
 * Attributes that can be used with a DatePicker.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #DatePicker_headerBackground android:headerBackground}</code></td><td>Default background for the menu header.</td></tr>
 * <tr><td><code>{@link #DatePicker_startYear android:startYear}</code></td><td>The first year (inclusive), for example "1940".</td></tr>
 * <tr><td><code>{@link #DatePicker_endYear android:endYear}</code></td><td>The last year (inclusive), for example "2010".</td></tr>
 * <tr><td><code>{@link #DatePicker_firstDayOfWeek android:firstDayOfWeek}</code></td><td>The first day of week according to {@link java.util.Calendar}.</td></tr>
 * <tr><td><code>{@link #DatePicker_minDate android:minDate}</code></td><td>The minimal date shown by this calendar view in mm/dd/yyyy format.</td></tr>
 * <tr><td><code>{@link #DatePicker_maxDate android:maxDate}</code></td><td>The maximal date shown by this calendar view in mm/dd/yyyy format.</td></tr>
 * <tr><td><code>{@link #DatePicker_spinnersShown android:spinnersShown}</code></td><td>Whether the spinners are shown.</td></tr>
 * <tr><td><code>{@link #DatePicker_calendarViewShown android:calendarViewShown}</code></td><td>Whether the calendar view is shown.</td></tr>
 * <tr><td><code>{@link #DatePicker_dayOfWeekBackground android:dayOfWeekBackground}</code></td><td>The background color for the header's day of week.</td></tr>
 * <tr><td><code>{@link #DatePicker_dayOfWeekTextAppearance android:dayOfWeekTextAppearance}</code></td><td>The text color for the header's day of week.</td></tr>
 * <tr><td><code>{@link #DatePicker_headerMonthTextAppearance android:headerMonthTextAppearance}</code></td><td>The text appearance for the month (ex.</td></tr>
 * <tr><td><code>{@link #DatePicker_headerDayOfMonthTextAppearance android:headerDayOfMonthTextAppearance}</code></td><td>The text appearance for the day of month (ex.</td></tr>
 * <tr><td><code>{@link #DatePicker_headerYearTextAppearance android:headerYearTextAppearance}</code></td><td>The text appearance for the year (ex.</td></tr>
 * <tr><td><code>{@link #DatePicker_yearListItemTextAppearance android:yearListItemTextAppearance}</code></td><td>The list year's text appearance in the list.</td></tr>
 * <tr><td><code>{@link #DatePicker_yearListSelectorColor android:yearListSelectorColor}</code></td><td>The list year's selected circle color in the list.</td></tr>
 * <tr><td><code>{@link #DatePicker_calendarTextColor android:calendarTextColor}</code></td><td>The text color list of the calendar.</td></tr>
 * <tr><td><code>{@link #DatePicker_datePickerMode android:datePickerMode}</code></td><td>Defines the look of the widget.</td></tr>
 * </table>
 * @see #DatePicker_headerBackground
 * @see #DatePicker_startYear
 * @see #DatePicker_endYear
 * @see #DatePicker_firstDayOfWeek
 * @see #DatePicker_minDate
 * @see #DatePicker_maxDate
 * @see #DatePicker_spinnersShown
 * @see #DatePicker_calendarViewShown
 * @see #DatePicker_dayOfWeekBackground
 * @see #DatePicker_dayOfWeekTextAppearance
 * @see #DatePicker_headerMonthTextAppearance
 * @see #DatePicker_headerDayOfMonthTextAppearance
 * @see #DatePicker_headerYearTextAppearance
 * @see #DatePicker_yearListItemTextAppearance
 * @see #DatePicker_yearListSelectorColor
 * @see #DatePicker_calendarTextColor
 * @see #DatePicker_datePickerMode
 */

public static final int[] DatePicker;
static { DatePicker = new int[0]; }

/**
 * <p>
 * @attr description
 * The text color list of the calendar.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:calendarTextColor
 */

public static final int DatePicker_calendarTextColor = 15; // 0xf

/**
 * <p>
 * @attr description
 * Whether the calendar view is shown. Only valid for "spinner" mode.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:calendarViewShown
 */

public static final int DatePicker_calendarViewShown = 7; // 0x7

/**
 * <p>
 * @attr description
 * Defines the look of the widget. Prior to the L release, the only choice was
 * spinner. As of L, with the Material theme selected, the default layout is calendar,
 * but this attribute can be used to force spinner to be used instead.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>calendar</td><td>2</td><td>Date picker with calendar to select the date.</td></tr>
 * <tr><td>spinner</td><td>1</td><td>Date picker with spinner controls to select the date.</td></tr>
 * </table>
 *
 * @attr name android:datePickerMode
 */

public static final int DatePicker_datePickerMode = 16; // 0x10

/**
 * <p>
 * @attr description
 * The background color for the header's day of week.
 * {@deprecated No longer displayed.}
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:dayOfWeekBackground
 */

@Deprecated public static final int DatePicker_dayOfWeekBackground = 8; // 0x8

/**
 * <p>
 * @attr description
 * The text color for the header's day of week.
 * {@deprecated No longer displayed.}
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:dayOfWeekTextAppearance
 */

@Deprecated public static final int DatePicker_dayOfWeekTextAppearance = 9; // 0x9

/**
 * <p>
 * @attr description
 * The last year (inclusive), for example "2010".
 * {@deprecated Use maxDate instead.}
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:endYear
 */

@Deprecated public static final int DatePicker_endYear = 2; // 0x2

/**
 * <p>
 * @attr description
 * The first day of week according to {@link java.util.Calendar}.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:firstDayOfWeek
 */

public static final int DatePicker_firstDayOfWeek = 3; // 0x3

/**
 * <p>
 * @attr description
 * The background for the selected date header.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:headerBackground
 */

public static final int DatePicker_headerBackground = 0; // 0x0

/**
 * <p>
 * @attr description
 * The text appearance for the day of month (ex. 28) in the selected date header.
 * {@deprecated Use headerTextColor instead.}
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:headerDayOfMonthTextAppearance
 */

@Deprecated public static final int DatePicker_headerDayOfMonthTextAppearance = 11; // 0xb

/**
 * <p>
 * @attr description
 * The text appearance for the month (ex. May) in the selected date header.
 * {@deprecated Use headerTextColor instead.}
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:headerMonthTextAppearance
 */

@Deprecated public static final int DatePicker_headerMonthTextAppearance = 10; // 0xa

/**
 * <p>
 * @attr description
 * The text appearance for the year (ex. 2014) in the selected date header.
 * {@deprecated Use headerTextColor instead.}
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:headerYearTextAppearance
 */

@Deprecated public static final int DatePicker_headerYearTextAppearance = 12; // 0xc

/**
 * <p>
 * @attr description
 * The maximal date shown by this calendar view in mm/dd/yyyy format.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:maxDate
 */

public static final int DatePicker_maxDate = 5; // 0x5

/**
 * <p>
 * @attr description
 * The minimal date shown by this calendar view in mm/dd/yyyy format.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:minDate
 */

public static final int DatePicker_minDate = 4; // 0x4

/**
 * <p>
 * @attr description
 * Whether the spinners are shown. Only valid for "spinner" mode.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:spinnersShown
 */

public static final int DatePicker_spinnersShown = 6; // 0x6

/**
 * <p>
 * @attr description
 * The first year (inclusive), for example "1940".
 * {@deprecated Use minDate instead.}
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:startYear
 */

@Deprecated public static final int DatePicker_startYear = 1; // 0x1

/**
 * <p>
 * @attr description
 * The list year's text appearance in the list.
 * {@deprecated Use yearListTextColor. }
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:yearListItemTextAppearance
 */

@Deprecated public static final int DatePicker_yearListItemTextAppearance = 13; // 0xd

/**
 * <p>
 * @attr description
 * The list year's selected circle color in the list.
 * {@deprecated No longer displayed.}
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:yearListSelectorColor
 */

@Deprecated public static final int DatePicker_yearListSelectorColor = 14; // 0xe

/**
 * Attributes that can be used with a DateTimeView.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * </table>
 */

public static final int[] DateTimeView;
static { DateTimeView = new int[0]; }

/**
 * Attributes that can be used with a DecelerateInterpolator.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #DecelerateInterpolator_factor android:factor}</code></td><td>This is the amount of deceleration to add when easing in.</td></tr>
 * </table>
 * @see #DecelerateInterpolator_factor
 */

public static final int[] DecelerateInterpolator;
static { DecelerateInterpolator = new int[0]; }

/**
 * <p>
 * @attr description
 * This is the amount of acceleration to add when easing out.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:factor
 */

public static final int DecelerateInterpolator_factor = 0; // 0x0

/**
 * Use <code>device-admin</code> as the root tag of the XML resource that
 * describes a
 * {@link android.app.admin.DeviceAdminReceiver}, which is
 * referenced from its
 * {@link android.app.admin.DeviceAdminReceiver#DEVICE_ADMIN_META_DATA}
 * meta-data entry.  Described here are the attributes that can be
 * included in that tag.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #DeviceAdmin_visible android:visible}</code></td><td>Provides initial visibility state of the drawable; the default
 * value is false.</td></tr>
 * </table>
 * @see #DeviceAdmin_visible
 */

public static final int[] DeviceAdmin;
static { DeviceAdmin = new int[0]; }

/**
 * <p>
 * @attr description
 * Control whether the admin is visible to the user, even when it
 * is not enabled.  This is true by default.  You may want to make
 * it false if your admin does not make sense to be turned on
 * unless some explicit action happens in your app.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:visible
 */

public static final int DeviceAdmin_visible = 0; // 0x0

/**
 * Base attributes available to DialogPreference.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #DialogPreference_dialogTitle android:dialogTitle}</code></td><td>The title in the dialog.</td></tr>
 * <tr><td><code>{@link #DialogPreference_dialogMessage android:dialogMessage}</code></td><td>The message in the dialog.</td></tr>
 * <tr><td><code>{@link #DialogPreference_dialogIcon android:dialogIcon}</code></td><td>The icon for the dialog.</td></tr>
 * <tr><td><code>{@link #DialogPreference_positiveButtonText android:positiveButtonText}</code></td><td>The positive button text for the dialog.</td></tr>
 * <tr><td><code>{@link #DialogPreference_negativeButtonText android:negativeButtonText}</code></td><td>The negative button text for the dialog.</td></tr>
 * <tr><td><code>{@link #DialogPreference_dialogLayout android:dialogLayout}</code></td><td>A layout to be used as the content View for the dialog.</td></tr>
 * </table>
 * @see #DialogPreference_dialogTitle
 * @see #DialogPreference_dialogMessage
 * @see #DialogPreference_dialogIcon
 * @see #DialogPreference_positiveButtonText
 * @see #DialogPreference_negativeButtonText
 * @see #DialogPreference_dialogLayout
 */

public static final int[] DialogPreference;
static { DialogPreference = new int[0]; }

/**
 * <p>
 * @attr description
 * The icon for the dialog.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:dialogIcon
 */

public static final int DialogPreference_dialogIcon = 2; // 0x2

/**
 * <p>
 * @attr description
 * A layout to be used as the content View for the dialog. By default, this shouldn't
 * be needed. If a custom DialogPreference is required, this should be set. For example,
 * the EditTextPreference uses a layout with an EditText as this attribute.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:dialogLayout
 */

public static final int DialogPreference_dialogLayout = 5; // 0x5

/**
 * <p>
 * @attr description
 * The message in the dialog. If a dialogLayout is provided and contains
 * a TextView with ID android:id/message, this message will be placed in there.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:dialogMessage
 */

public static final int DialogPreference_dialogMessage = 1; // 0x1

/**
 * <p>
 * @attr description
 * The title in the dialog.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:dialogTitle
 */

public static final int DialogPreference_dialogTitle = 0; // 0x0

/**
 * <p>
 * @attr description
 * The negative button text for the dialog. Set to @null to hide the negative button.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:negativeButtonText
 */

public static final int DialogPreference_negativeButtonText = 4; // 0x4

/**
 * <p>
 * @attr description
 * The positive button text for the dialog. Set to @null to hide the positive button.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:positiveButtonText
 */

public static final int DialogPreference_positiveButtonText = 3; // 0x3

/**
 * Base attributes that are available to all Drawable objects.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #Drawable_visible android:visible}</code></td><td>Provides initial visibility state of the drawable; the default
 * value is false.</td></tr>
 * <tr><td><code>{@link #Drawable_autoMirrored android:autoMirrored}</code></td><td>Indicates if the drawable needs to be mirrored when its layout direction is
 * RTL (right-to-left).</td></tr>
 * </table>
 * @see #Drawable_visible
 * @see #Drawable_autoMirrored
 */

public static final int[] Drawable;
static { Drawable = new int[0]; }

/**
 * Describes the corners for the rectangle shape of a GradientDrawable.
 * This can be used to render rounded corners.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #DrawableCorners_radius android:radius}</code></td><td>Defines the radius of the four corners.</td></tr>
 * <tr><td><code>{@link #DrawableCorners_topLeftRadius android:topLeftRadius}</code></td><td>Radius of the top left corner.</td></tr>
 * <tr><td><code>{@link #DrawableCorners_topRightRadius android:topRightRadius}</code></td><td>Radius of the top right corner.</td></tr>
 * <tr><td><code>{@link #DrawableCorners_bottomLeftRadius android:bottomLeftRadius}</code></td><td>Radius of the bottom left corner.</td></tr>
 * <tr><td><code>{@link #DrawableCorners_bottomRightRadius android:bottomRightRadius}</code></td><td>Radius of the bottom right corner.</td></tr>
 * </table>
 * @see #DrawableCorners_radius
 * @see #DrawableCorners_topLeftRadius
 * @see #DrawableCorners_topRightRadius
 * @see #DrawableCorners_bottomLeftRadius
 * @see #DrawableCorners_bottomRightRadius
 */

public static final int[] DrawableCorners;
static { DrawableCorners = new int[0]; }

/**
 * <p>
 * @attr description
 * Radius of the bottom left corner.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:bottomLeftRadius
 */

public static final int DrawableCorners_bottomLeftRadius = 3; // 0x3

/**
 * <p>
 * @attr description
 * Radius of the bottom right corner.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:bottomRightRadius
 */

public static final int DrawableCorners_bottomRightRadius = 4; // 0x4

/**
 * <p>
 * @attr description
 * Defines the radius of the four corners.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:radius
 */

public static final int DrawableCorners_radius = 0; // 0x0

/**
 * <p>
 * @attr description
 * Radius of the top left corner.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:topLeftRadius
 */

public static final int DrawableCorners_topLeftRadius = 1; // 0x1

/**
 * <p>
 * @attr description
 * Radius of the top right corner.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:topRightRadius
 */

public static final int DrawableCorners_topRightRadius = 2; // 0x2

/**
 * Set of framework-provided states that may be specified on a Drawable. Actual usage of
 * states may vary between view implementations, as documented on the individual state
 * attributes.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #DrawableStates_state_focused android:state_focused}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view has input focus.</td></tr>
 * <tr><td><code>{@link #DrawableStates_state_window_focused android:state_window_focused}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view's window has input focus.</td></tr>
 * <tr><td><code>{@link #DrawableStates_state_enabled android:state_enabled}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view is enabled.</td></tr>
 * <tr><td><code>{@link #DrawableStates_state_checkable android:state_checkable}</code></td><td>State identifier indicating that the object <var>may</var> display a check mark.</td></tr>
 * <tr><td><code>{@link #DrawableStates_state_checked android:state_checked}</code></td><td>State identifier indicating that the object is currently checked.</td></tr>
 * <tr><td><code>{@link #DrawableStates_state_selected android:state_selected}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view (or one of its parents) is currently selected.</td></tr>
 * <tr><td><code>{@link #DrawableStates_state_active android:state_active}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view or drawable is considered "active" by its host.</td></tr>
 * <tr><td><code>{@link #DrawableStates_state_single android:state_single}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view or drawable is considered "single" by its host.</td></tr>
 * <tr><td><code>{@link #DrawableStates_state_first android:state_first}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view or drawable is in the first position in an ordered set.</td></tr>
 * <tr><td><code>{@link #DrawableStates_state_middle android:state_middle}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view or drawable is in the middle position in an ordered set.</td></tr>
 * <tr><td><code>{@link #DrawableStates_state_last android:state_last}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view or drawable is in the last position in an ordered set.</td></tr>
 * <tr><td><code>{@link #DrawableStates_state_pressed android:state_pressed}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when the user is pressing down in a view.</td></tr>
 * <tr><td><code>{@link #DrawableStates_state_activated android:state_activated}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view or its parent has been "activated" meaning the user has currently
 * marked it as being of interest.</td></tr>
 * <tr><td><code>{@link #DrawableStates_state_accelerated android:state_accelerated}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * indicating that the Drawable is in a view that is hardware accelerated.</td></tr>
 * <tr><td><code>{@link #DrawableStates_state_hovered android:state_hovered}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a pointer is hovering over the view.</td></tr>
 * <tr><td><code>{@link #DrawableStates_state_drag_can_accept android:state_drag_can_accept}</code></td><td>State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
 * indicating that the Drawable is in a view that is capable of accepting a drop of
 * the content currently being manipulated in a drag-and-drop operation.</td></tr>
 * <tr><td><code>{@link #DrawableStates_state_drag_hovered android:state_drag_hovered}</code></td><td>State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
 * indicating that a drag operation (for which the Drawable's view is a valid recipient)
 * is currently positioned over the Drawable.</td></tr>
 * </table>
 * @see #DrawableStates_state_focused
 * @see #DrawableStates_state_window_focused
 * @see #DrawableStates_state_enabled
 * @see #DrawableStates_state_checkable
 * @see #DrawableStates_state_checked
 * @see #DrawableStates_state_selected
 * @see #DrawableStates_state_active
 * @see #DrawableStates_state_single
 * @see #DrawableStates_state_first
 * @see #DrawableStates_state_middle
 * @see #DrawableStates_state_last
 * @see #DrawableStates_state_pressed
 * @see #DrawableStates_state_activated
 * @see #DrawableStates_state_accelerated
 * @see #DrawableStates_state_hovered
 * @see #DrawableStates_state_drag_can_accept
 * @see #DrawableStates_state_drag_hovered
 */

public static final int[] DrawableStates;
static { DrawableStates = new int[0]; }

/**
 * <p>
 * @attr description
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * indicating that the Drawable is in a view that is hardware accelerated.
 * This means that the device can at least render a full-screen scaled
 * bitmap with one layer of text and bitmaps composited on top of it
 * at 60fps.  When this is set, the colorBackgroundCacheHint will be
 * ignored even if it specifies a solid color, since that optimization
 * is not needed.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_accelerated
 */

public static final int DrawableStates_state_accelerated = 13; // 0xd

/**
 * <p>
 * @attr description
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view or its parent has been "activated" meaning the user has currently
 * marked it as being of interest.  This is an alternative representation of
 * state_checked for when the state should be propagated down the view hierarchy.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_activated
 */

public static final int DrawableStates_state_activated = 12; // 0xc

/**
 * <p>
 * @attr description
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view or drawable is considered "active" by its host. Actual usage may vary
 * between views. Consult the host view documentation for details.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_active
 */

public static final int DrawableStates_state_active = 6; // 0x6

/**
 * <p>
 * @attr description
 * State identifier indicating that the object <var>may</var> display a check mark. See
 * {@link android.R.attr#state_checked} for the identifier that indicates whether it is
 * actually checked.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_checkable
 */

public static final int DrawableStates_state_checkable = 3; // 0x3

/**
 * <p>
 * @attr description
 * State identifier indicating that the object is currently checked.  See
 * {@link android.R.attr#state_checkable} for an additional identifier that can indicate
 * if any object may ever display a check, regardless of whether state_checked is
 * currently set.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_checked
 */

public static final int DrawableStates_state_checked = 4; // 0x4

/**
 * <p>
 * @attr description
 * State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
 * indicating that the Drawable is in a view that is capable of accepting a drop of
 * the content currently being manipulated in a drag-and-drop operation.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_drag_can_accept
 */

public static final int DrawableStates_state_drag_can_accept = 15; // 0xf

/**
 * <p>
 * @attr description
 * State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
 * indicating that a drag operation (for which the Drawable's view is a valid recipient)
 * is currently positioned over the Drawable.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_drag_hovered
 */

public static final int DrawableStates_state_drag_hovered = 16; // 0x10

/**
 * <p>
 * @attr description
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view is enabled.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_enabled
 */

public static final int DrawableStates_state_enabled = 2; // 0x2

/**
 * <p>
 * @attr description
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view or drawable is in the first position in an ordered set. Actual usage
 * may vary between views. Consult the host view documentation for details.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_first
 */

public static final int DrawableStates_state_first = 8; // 0x8

/**
 * <p>
 * @attr description
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view has input focus.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_focused
 */

public static final int DrawableStates_state_focused = 0; // 0x0

/**
 * <p>
 * @attr description
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a pointer is hovering over the view.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_hovered
 */

public static final int DrawableStates_state_hovered = 14; // 0xe

/**
 * <p>
 * @attr description
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view or drawable is in the last position in an ordered set. Actual usage
 * may vary between views. Consult the host view documentation for details.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_last
 */

public static final int DrawableStates_state_last = 10; // 0xa

/**
 * <p>
 * @attr description
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view or drawable is in the middle position in an ordered set. Actual usage
 * may vary between views. Consult the host view documentation for details.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_middle
 */

public static final int DrawableStates_state_middle = 9; // 0x9

/**
 * <p>
 * @attr description
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when the user is pressing down in a view.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_pressed
 */

public static final int DrawableStates_state_pressed = 11; // 0xb

/**
 * <p>
 * @attr description
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view (or one of its parents) is currently selected.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_selected
 */

public static final int DrawableStates_state_selected = 5; // 0x5

/**
 * <p>
 * @attr description
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view or drawable is considered "single" by its host. Actual usage may vary
 * between views. Consult the host view documentation for details.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_single
 */

public static final int DrawableStates_state_single = 7; // 0x7

/**
 * <p>
 * @attr description
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view's window has input focus.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_window_focused
 */

public static final int DrawableStates_state_window_focused = 1; // 0x1

/**
 * Drawable class used to wrap other drawables.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #DrawableWrapper_drawable android:drawable}</code></td><td>Reference to a drawable resource to use for the frame.</td></tr>
 * </table>
 * @see #DrawableWrapper_drawable
 */

public static final int[] DrawableWrapper;
static { DrawableWrapper = new int[0]; }

/**
 * <p>
 * @attr description
 * The wrapped drawable.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:drawable
 */

public static final int DrawableWrapper_drawable = 0; // 0x0

/**
 * <p>
 * @attr description
 * Indicates if the drawable needs to be mirrored when its layout direction is
 * RTL (right-to-left).  See
 * {@link android.graphics.drawable.Drawable#setAutoMirrored}.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:autoMirrored
 */

public static final int Drawable_autoMirrored = 1; // 0x1

/**
 * <p>
 * @attr description
 * Provides initial visibility state of the drawable; the default
 * value is false.  See
 * {@link android.graphics.drawable.Drawable#setVisible}.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:visible
 */

public static final int Drawable_visible = 0; // 0x0

/**
 * Use <code>dream</code> as the root tag of the XML resource that
 * describes an
 * {@link android.service.dreams.DreamService}, which is
 * referenced from its
 * {@link android.service.dreams.DreamService#DREAM_META_DATA}
 * meta-data entry.  Described here are the attributes that can be
 * included in that tag.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #Dream_settingsActivity android:settingsActivity}</code></td><td>Component name of an activity that allows the user to modify
 * the settings for this service.</td></tr>
 * </table>
 * @see #Dream_settingsActivity
 */

public static final int[] Dream;
static { Dream = new int[0]; }

/**
 * <p>
 * @attr description
 * Component name of an activity that allows the user to modify
 * the settings for this dream.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:settingsActivity
 */

public static final int Dream_settingsActivity = 0; // 0x0

/**
 * Used as a filter array on the theme to pull out only the EdgeEffect-relevant bits.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #EdgeEffect_colorEdgeEffect android:colorEdgeEffect}</code></td><td>The color applied to the edge effect on scrolling containers.</td></tr>
 * </table>
 * @see #EdgeEffect_colorEdgeEffect
 */

public static final int[] EdgeEffect;
static { EdgeEffect = new int[0]; }

/**
 * <p>
 * @attr description
 * The color applied to the edge effect on scrolling containers.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:colorEdgeEffect
 */

public static final int EdgeEffect_colorEdgeEffect = 0; // 0x0

public static final int[] EditText;
static { EditText = new int[0]; }

/**
 * State array representing an expandable list child's indicator.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #ExpandableListChildIndicatorState_state_last android:state_last}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view or drawable is in the last position in an ordered set.</td></tr>
 * </table>
 * @see #ExpandableListChildIndicatorState_state_last
 */

public static final int[] ExpandableListChildIndicatorState;
static { ExpandableListChildIndicatorState = new int[0]; }

/**
 * <p>
 * @attr description
 * State identifier indicating the child is the last child within its group.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_last
 */

public static final int ExpandableListChildIndicatorState_state_last = 0; // 0x0

/**
 * State array representing an expandable list group's indicator.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #ExpandableListGroupIndicatorState_state_expanded android:state_expanded}</code></td><td>State identifier indicating the group is expanded.</td></tr>
 * <tr><td><code>{@link #ExpandableListGroupIndicatorState_state_empty android:state_empty}</code></td><td>State identifier indicating the group is empty (has no children).</td></tr>
 * </table>
 * @see #ExpandableListGroupIndicatorState_state_expanded
 * @see #ExpandableListGroupIndicatorState_state_empty
 */

public static final int[] ExpandableListGroupIndicatorState;
static { ExpandableListGroupIndicatorState = new int[0]; }

/**
 * <p>
 * @attr description
 * State identifier indicating the group is empty (has no children).
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_empty
 */

public static final int ExpandableListGroupIndicatorState_state_empty = 1; // 0x1

/**
 * <p>
 * @attr description
 * State identifier indicating the group is expanded.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_expanded
 */

public static final int ExpandableListGroupIndicatorState_state_expanded = 0; // 0x0

/**
 * Attributes that can be used with a ExpandableListView.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #ExpandableListView_groupIndicator android:groupIndicator}</code></td><td>Indicator shown beside the group View.</td></tr>
 * <tr><td><code>{@link #ExpandableListView_childIndicator android:childIndicator}</code></td><td>Indicator shown beside the child View.</td></tr>
 * <tr><td><code>{@link #ExpandableListView_indicatorLeft android:indicatorLeft}</code></td><td>The left bound for an item's indicator.</td></tr>
 * <tr><td><code>{@link #ExpandableListView_indicatorRight android:indicatorRight}</code></td><td>The right bound for an item's indicator.</td></tr>
 * <tr><td><code>{@link #ExpandableListView_childIndicatorLeft android:childIndicatorLeft}</code></td><td>The left bound for a child's indicator.</td></tr>
 * <tr><td><code>{@link #ExpandableListView_childIndicatorRight android:childIndicatorRight}</code></td><td>The right bound for a child's indicator.</td></tr>
 * <tr><td><code>{@link #ExpandableListView_childDivider android:childDivider}</code></td><td>Drawable or color that is used as a divider for children.</td></tr>
 * <tr><td><code>{@link #ExpandableListView_indicatorStart android:indicatorStart}</code></td><td>The start bound for an item's indicator.</td></tr>
 * <tr><td><code>{@link #ExpandableListView_indicatorEnd android:indicatorEnd}</code></td><td>The end bound for an item's indicator.</td></tr>
 * <tr><td><code>{@link #ExpandableListView_childIndicatorStart android:childIndicatorStart}</code></td><td>The start bound for a child's indicator.</td></tr>
 * <tr><td><code>{@link #ExpandableListView_childIndicatorEnd android:childIndicatorEnd}</code></td><td>The end bound for a child's indicator.</td></tr>
 * </table>
 * @see #ExpandableListView_groupIndicator
 * @see #ExpandableListView_childIndicator
 * @see #ExpandableListView_indicatorLeft
 * @see #ExpandableListView_indicatorRight
 * @see #ExpandableListView_childIndicatorLeft
 * @see #ExpandableListView_childIndicatorRight
 * @see #ExpandableListView_childDivider
 * @see #ExpandableListView_indicatorStart
 * @see #ExpandableListView_indicatorEnd
 * @see #ExpandableListView_childIndicatorStart
 * @see #ExpandableListView_childIndicatorEnd
 */

public static final int[] ExpandableListView;
static { ExpandableListView = new int[0]; }

/**
 * <p>
 * @attr description
 * Drawable or color that is used as a divider for children. (It will drawn
 * below and above child items.) The height of this will be the same as
 * the height of the normal list item divider.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:childDivider
 */

public static final int ExpandableListView_childDivider = 6; // 0x6

/**
 * <p>
 * @attr description
 * Indicator shown beside the child View. This can be a stateful Drawable.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:childIndicator
 */

public static final int ExpandableListView_childIndicator = 1; // 0x1

/**
 * <p>
 * @attr description
 * The end bound for a child's indicator.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:childIndicatorEnd
 */

public static final int ExpandableListView_childIndicatorEnd = 10; // 0xa

/**
 * <p>
 * @attr description
 * The left bound for a child's indicator.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:childIndicatorLeft
 */

public static final int ExpandableListView_childIndicatorLeft = 4; // 0x4

/**
 * <p>
 * @attr description
 * The right bound for a child's indicator.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:childIndicatorRight
 */

public static final int ExpandableListView_childIndicatorRight = 5; // 0x5

/**
 * <p>
 * @attr description
 * The start bound for a child's indicator.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:childIndicatorStart
 */

public static final int ExpandableListView_childIndicatorStart = 9; // 0x9

/**
 * <p>
 * @attr description
 * Indicator shown beside the group View. This can be a stateful Drawable.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:groupIndicator
 */

public static final int ExpandableListView_groupIndicator = 0; // 0x0

/**
 * <p>
 * @attr description
 * The end bound for an item's indicator. To specify a right bound specific to children,
 * use childIndicatorEnd.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:indicatorEnd
 */

public static final int ExpandableListView_indicatorEnd = 8; // 0x8

/**
 * <p>
 * @attr description
 * The left bound for an item's indicator. To specify a left bound specific to children,
 * use childIndicatorLeft.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:indicatorLeft
 */

public static final int ExpandableListView_indicatorLeft = 2; // 0x2

/**
 * <p>
 * @attr description
 * The right bound for an item's indicator. To specify a right bound specific to children,
 * use childIndicatorRight.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:indicatorRight
 */

public static final int ExpandableListView_indicatorRight = 3; // 0x3

/**
 * <p>
 * @attr description
 * The start bound for an item's indicator. To specify a start bound specific to children,
 * use childIndicatorStart.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:indicatorStart
 */

public static final int ExpandableListView_indicatorStart = 7; // 0x7

/**
 * An extra data value to place into a an extra/name value pair held
 * in a Bundle, as per {@link android.os.Bundle}.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #Extra_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * <tr><td><code>{@link #Extra_value android:value}</code></td><td>Concrete value to assign to this piece of named meta-data.</td></tr>
 * </table>
 * @see #Extra_name
 * @see #Extra_value
 */

public static final int[] Extra;
static { Extra = new int[0]; }

/**
 * <p>
 * @attr description
 * Required name of the extra data.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int Extra_name = 0; // 0x0

/**
 * <p>
 * @attr description
 * Concrete value to put for this named extra data.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:value
 */

public static final int Extra_value = 1; // 0x1

/**
 * Use <code>fade</code>as the root tag of the XML resource that
 * describes a {@link android.transition.Fade Fade} transition.
 * The attributes of the {@link android.R.styleable#Transition Transition}
 * resource are available in addition to the specific attributes of Fade
 * described here.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #Fade_fadingMode android:fadingMode}</code></td><td>Equivalent to <code>transitionVisibilityMode</code>, fadingMode works only
 * with the Fade transition.</td></tr>
 * </table>
 * @see #Fade_fadingMode
 */

public static final int[] Fade;
static { Fade = new int[0]; }

/**
 * <p>
 * @attr description
 * Equivalent to <code>transitionVisibilityMode</code>, fadingMode works only
 * with the Fade transition.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>fade_in</td><td>1</td><td>Fade will only fade appearing items in.</td></tr>
 * <tr><td>fade_in_out</td><td>3</td><td>Fade will fade appearing items in and disappearing items out.</td></tr>
 * <tr><td>fade_out</td><td>2</td><td>Fade will only fade disappearing items out.</td></tr>
 * </table>
 *
 * @attr name android:fadingMode
 */

public static final int Fade_fadingMode = 0; // 0x0

/**
 * Attributes that can be used with a FastScroll.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #FastScroll_textAppearance android:textAppearance}</code></td><td>Default appearance of text: color, typeface, size, and style.</td></tr>
 * <tr><td><code>{@link #FastScroll_textSize android:textSize}</code></td><td>Size of text.</td></tr>
 * <tr><td><code>{@link #FastScroll_textColor android:textColor}</code></td><td>Color of text (usually same as colorForeground).</td></tr>
 * <tr><td><code>{@link #FastScroll_padding android:padding}</code></td><td>Sets the padding, in pixels, of all four edges.</td></tr>
 * <tr><td><code>{@link #FastScroll_minWidth android:minWidth}</code></td><td></td></tr>
 * <tr><td><code>{@link #FastScroll_minHeight android:minHeight}</code></td><td></td></tr>
 * <tr><td><code>{@link #FastScroll_thumbPosition android:thumbPosition}</code></td><td>Position of thumb in relation to the track.</td></tr>
 * </table>
 * @see #FastScroll_textAppearance
 * @see #FastScroll_textSize
 * @see #FastScroll_textColor
 * @see #FastScroll_padding
 * @see #FastScroll_minWidth
 * @see #FastScroll_minHeight
 * @see #FastScroll_thumbPosition
 */

public static final int[] FastScroll;
static { FastScroll = new int[0]; }

/**
 * <p>
 * @attr description
 * Minimum height of the section header preview.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:minHeight
 */

public static final int FastScroll_minHeight = 5; // 0x5

/**
 * <p>
 * @attr description
 * Minimum width of the section header preview.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:minWidth
 */

public static final int FastScroll_minWidth = 4; // 0x4

/**
 * <p>
 * @attr description
 * Padding for the section header preview.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:padding
 */

public static final int FastScroll_padding = 3; // 0x3

/**
 * <p>
 * @attr description
 * Default appearance of text: color, typeface, size, and style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textAppearance
 */

public static final int FastScroll_textAppearance = 0; // 0x0

/**
 * <p>
 * @attr description
 * Color of text (usually same as colorForeground).
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:textColor
 */

public static final int FastScroll_textColor = 2; // 0x2

/**
 * <p>
 * @attr description
 * Size of text. Recommended dimension type for text is "sp" for scaled-pixels (example: 15sp).
 * Supported values include the following:<p/>
 * <ul>
 * <li><b>px</b> Pixels</li>
 * <li><b>sp</b> Scaled pixels (scaled to relative pixel size on screen). See {@link android.util.DisplayMetrics} for more information.</li>
 * <li><b>pt</b> Points</li>
 * <li><b>dip</b> Device independent pixels. See {@link android.util.DisplayMetrics} for more information.</li>
 * </ul>
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:textSize
 */

public static final int FastScroll_textSize = 1; // 0x1

/**
 * <p>
 * @attr description
 * Position of thumb in relation to the track.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>inside</td><td>1</td><td>The thumb is entirely inside the track. At its extremes,
 * the thumb will be contained entirely within the track.</td></tr>
 * <tr><td>midpoint</td><td>0</td><td>The thumb's midpoint is anchored to the track. At its
 * extremes, the thumb will extend half-way outside the
 * track.</td></tr>
 * </table>
 *
 * @attr name android:thumbPosition
 */

public static final int FastScroll_thumbPosition = 6; // 0x6

/**
 * Attributes that are read when parsing a &lt;fontfamily&gt; tag.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #FontFamily_fontProviderAuthority android:fontProviderAuthority}</code></td><td>The authority of the Font Provider to be used for the request.</td></tr>
 * <tr><td><code>{@link #FontFamily_fontProviderQuery android:fontProviderQuery}</code></td><td>The query to be sent over to the provider.</td></tr>
 * <tr><td><code>{@link #FontFamily_fontProviderPackage android:fontProviderPackage}</code></td><td>The package for the Font Provider to be used for the request.</td></tr>
 * <tr><td><code>{@link #FontFamily_fontProviderCerts android:fontProviderCerts}</code></td><td>The sets of hashes for the certificates the provider should be signed with.</td></tr>
 * </table>
 * @see #FontFamily_fontProviderAuthority
 * @see #FontFamily_fontProviderQuery
 * @see #FontFamily_fontProviderPackage
 * @see #FontFamily_fontProviderCerts
 */

public static final int[] FontFamily;
static { FontFamily = new int[0]; }

/**
 * Attributes that are read when parsing a &lt;font&gt; tag, which is a child of
 * &lt;font-family&gt;. This represents an actual font file and its attributes.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #FontFamilyFont_font android:font}</code></td><td>The reference to the font file to be used.</td></tr>
 * <tr><td><code>{@link #FontFamilyFont_fontWeight android:fontWeight}</code></td><td>The weight of the given font file.</td></tr>
 * <tr><td><code>{@link #FontFamilyFont_fontStyle android:fontStyle}</code></td><td>The style of the given font file.</td></tr>
 * <tr><td><code>{@link #FontFamilyFont_ttcIndex android:ttcIndex}</code></td><td>The index of the font in the ttc (TrueType Collection) font file.</td></tr>
 * <tr><td><code>{@link #FontFamilyFont_fontVariationSettings android:fontVariationSettings}</code></td><td>The variation settings to be applied to the font.</td></tr>
 * </table>
 * @see #FontFamilyFont_font
 * @see #FontFamilyFont_fontWeight
 * @see #FontFamilyFont_fontStyle
 * @see #FontFamilyFont_ttcIndex
 * @see #FontFamilyFont_fontVariationSettings
 */

public static final int[] FontFamilyFont;
static { FontFamilyFont = new int[0]; }

/**
 * <p>
 * @attr description
 * The reference to the font file to be used. This should be a file in the res/font folder
 * and should therefore have an R reference value. E.g. @font/myfont
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:font
 */

public static final int FontFamilyFont_font = 0; // 0x0

/**
 * <p>
 * @attr description
 * The style of the given font file. This will be used when the font is being loaded into
 * the font stack and will override any style information in the font's header tables. If
 * unspecified, the value in the font's header tables will be used.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>italic</td><td>1</td><td></td></tr>
 * <tr><td>normal</td><td>0</td><td></td></tr>
 * </table>
 *
 * @attr name android:fontStyle
 */

public static final int FontFamilyFont_fontStyle = 2; // 0x2

/**
 * <p>
 * @attr description
 * The variation settings to be applied to the font. The string should be in the following
 * format: "'tag1' value1, 'tag2' value2, ...". If the default variation settings should be
 * used, or the font used does not support variation settings, this attribute needs not be
 * specified.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:fontVariationSettings
 */

public static final int FontFamilyFont_fontVariationSettings = 4; // 0x4

/**
 * <p>
 * @attr description
 * The weight of the given font file. This will be used when the font is being loaded into
 * the font stack and will override any weight information in the font's header tables. Must
 * be a positive number, a multiple of 100, and between 100 and 900, inclusive. The most
 * common values are 400 for regular weight and 700 for bold weight. If unspecified, the value
 * in the font's header tables will be used.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:fontWeight
 */

public static final int FontFamilyFont_fontWeight = 1; // 0x1

/**
 * <p>
 * @attr description
 * The index of the font in the ttc (TrueType Collection) font file. If the font file
 * referenced is not in the ttc format, this attribute needs not be specified.
 * {@link android.graphics.Typeface.Builder#setTtcIndex(int)}.
 * The default value is 0. More details about the TrueType Collection font format can be found
 * here: https://en.wikipedia.org/wiki/TrueType#TrueType_Collection.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:ttcIndex
 */

public static final int FontFamilyFont_ttcIndex = 3; // 0x3

/**
 * <p>
 * @attr description
 * The authority of the Font Provider to be used for the request.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:fontProviderAuthority
 */

public static final int FontFamily_fontProviderAuthority = 0; // 0x0

/**
 * <p>
 * @attr description
 * The sets of hashes for the certificates the provider should be signed with. This is
 * used to verify the identity of the provider, and is only required if the provider is not
 * part of the system image. This value may point to one list or a list of lists, where each
 * individual list represents one collection of signature hashes. Refer to your font provider's
 * documentation for these values.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:fontProviderCerts
 */

public static final int FontFamily_fontProviderCerts = 3; // 0x3

/**
 * <p>
 * @attr description
 * The package for the Font Provider to be used for the request. This is used to verify
 * the identity of the provider.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:fontProviderPackage
 */

public static final int FontFamily_fontProviderPackage = 2; // 0x2

/**
 * <p>
 * @attr description
 * The query to be sent over to the provider. Refer to your font provider's documentation
 * on the format of this string.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:fontProviderQuery
 */

public static final int FontFamily_fontProviderQuery = 1; // 0x1

/**
 * Attributes that can be used with <code>&lt;fragment&gt;</code>
 * tags inside of the layout of an Activity.  This instantiates
 * the given {@link android.app.Fragment} and inserts its content
 * view into the current location in the layout.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #Fragment_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * <tr><td><code>{@link #Fragment_id android:id}</code></td><td>Supply an identifier name for this view, to later retrieve it
 * with {@link android.view.View#findViewById View.findViewById()} or
 * {@link android.app.Activity#findViewById Activity.findViewById()}.</td></tr>
 * <tr><td><code>{@link #Fragment_tag android:tag}</code></td><td>Supply a tag for this view containing a String, to be retrieved
 * later with {@link android.view.View#getTag View.getTag()} or
 * searched for with {@link android.view.View#findViewWithTag
 * View.findViewWithTag()}.</td></tr>
 * <tr><td><code>{@link #Fragment_fragmentExitTransition android:fragmentExitTransition}</code></td><td>The Transition that will be used to move Views out of the scene when the
 * fragment is removed, hidden, or detached when not popping the back stack.</td></tr>
 * <tr><td><code>{@link #Fragment_fragmentEnterTransition android:fragmentEnterTransition}</code></td><td>The Transition that will be used to move Views into the initial scene.</td></tr>
 * <tr><td><code>{@link #Fragment_fragmentSharedElementEnterTransition android:fragmentSharedElementEnterTransition}</code></td><td>The Transition that will be used for shared elements transferred into the content
 * Scene.</td></tr>
 * <tr><td><code>{@link #Fragment_fragmentReturnTransition android:fragmentReturnTransition}</code></td><td>The Transition that will be used to move Views out of the scene when the Fragment is
 * preparing to be removed, hidden, or detached because of popping the back stack.</td></tr>
 * <tr><td><code>{@link #Fragment_fragmentSharedElementReturnTransition android:fragmentSharedElementReturnTransition}</code></td><td>The Transition that will be used for shared elements transferred back during a
 * pop of the back stack.</td></tr>
 * <tr><td><code>{@link #Fragment_fragmentReenterTransition android:fragmentReenterTransition}</code></td><td>The Transition that will be used to move Views in to the scene when returning due
 * to popping a back stack.</td></tr>
 * <tr><td><code>{@link #Fragment_fragmentAllowEnterTransitionOverlap android:fragmentAllowEnterTransitionOverlap}</code></td><td>Sets whether the enter and exit transitions should overlap when transitioning
 * forward.</td></tr>
 * <tr><td><code>{@link #Fragment_fragmentAllowReturnTransitionOverlap android:fragmentAllowReturnTransitionOverlap}</code></td><td>Sets whether the enter and exit transitions should overlap when transitioning
 * because of popping the back stack.</td></tr>
 * </table>
 * @see #Fragment_name
 * @see #Fragment_id
 * @see #Fragment_tag
 * @see #Fragment_fragmentExitTransition
 * @see #Fragment_fragmentEnterTransition
 * @see #Fragment_fragmentSharedElementEnterTransition
 * @see #Fragment_fragmentReturnTransition
 * @see #Fragment_fragmentSharedElementReturnTransition
 * @see #Fragment_fragmentReenterTransition
 * @see #Fragment_fragmentAllowEnterTransitionOverlap
 * @see #Fragment_fragmentAllowReturnTransitionOverlap
 */

public static final int[] Fragment;
static { Fragment = new int[0]; }

/**
 * Fragment animation class attributes.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #FragmentAnimation_fragmentOpenEnterAnimation android:fragmentOpenEnterAnimation}</code></td><td></td></tr>
 * <tr><td><code>{@link #FragmentAnimation_fragmentOpenExitAnimation android:fragmentOpenExitAnimation}</code></td><td></td></tr>
 * <tr><td><code>{@link #FragmentAnimation_fragmentCloseEnterAnimation android:fragmentCloseEnterAnimation}</code></td><td></td></tr>
 * <tr><td><code>{@link #FragmentAnimation_fragmentCloseExitAnimation android:fragmentCloseExitAnimation}</code></td><td></td></tr>
 * <tr><td><code>{@link #FragmentAnimation_fragmentFadeEnterAnimation android:fragmentFadeEnterAnimation}</code></td><td></td></tr>
 * <tr><td><code>{@link #FragmentAnimation_fragmentFadeExitAnimation android:fragmentFadeExitAnimation}</code></td><td></td></tr>
 * </table>
 * @see #FragmentAnimation_fragmentOpenEnterAnimation
 * @see #FragmentAnimation_fragmentOpenExitAnimation
 * @see #FragmentAnimation_fragmentCloseEnterAnimation
 * @see #FragmentAnimation_fragmentCloseExitAnimation
 * @see #FragmentAnimation_fragmentFadeEnterAnimation
 * @see #FragmentAnimation_fragmentFadeExitAnimation
 */

public static final int[] FragmentAnimation;
static { FragmentAnimation = new int[0]; }

/**
 * <p>This symbol is the offset where the {@link android.R.attr#fragmentCloseEnterAnimation}
 * attribute's value can be found in the {@link #FragmentAnimation} array.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:fragmentCloseEnterAnimation
 */

public static final int FragmentAnimation_fragmentCloseEnterAnimation = 2; // 0x2

/**
 * <p>This symbol is the offset where the {@link android.R.attr#fragmentCloseExitAnimation}
 * attribute's value can be found in the {@link #FragmentAnimation} array.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:fragmentCloseExitAnimation
 */

public static final int FragmentAnimation_fragmentCloseExitAnimation = 3; // 0x3

/**
 * <p>This symbol is the offset where the {@link android.R.attr#fragmentFadeEnterAnimation}
 * attribute's value can be found in the {@link #FragmentAnimation} array.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:fragmentFadeEnterAnimation
 */

public static final int FragmentAnimation_fragmentFadeEnterAnimation = 4; // 0x4

/**
 * <p>This symbol is the offset where the {@link android.R.attr#fragmentFadeExitAnimation}
 * attribute's value can be found in the {@link #FragmentAnimation} array.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:fragmentFadeExitAnimation
 */

public static final int FragmentAnimation_fragmentFadeExitAnimation = 5; // 0x5

/**
 * <p>This symbol is the offset where the {@link android.R.attr#fragmentOpenEnterAnimation}
 * attribute's value can be found in the {@link #FragmentAnimation} array.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:fragmentOpenEnterAnimation
 */

public static final int FragmentAnimation_fragmentOpenEnterAnimation = 0; // 0x0

/**
 * <p>This symbol is the offset where the {@link android.R.attr#fragmentOpenExitAnimation}
 * attribute's value can be found in the {@link #FragmentAnimation} array.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:fragmentOpenExitAnimation
 */

public static final int FragmentAnimation_fragmentOpenExitAnimation = 1; // 0x1

/**
 * Attributes that can be used with <code>&lt;FragmentBreadCrumbs&gt;</code>
 * tags.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #FragmentBreadCrumbs_gravity android:gravity}</code></td><td>Specifies how an object should position its content, on both the X and Y axes,
 * within its own bounds.</td></tr>
 * </table>
 * @see #FragmentBreadCrumbs_gravity
 */

public static final int[] FragmentBreadCrumbs;
static { FragmentBreadCrumbs = new int[0]; }

/**
 * <p>
 * @attr description
 * Specifies how an object should position its content, on both the X and Y axes,
 * within its own bounds.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
 * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
 * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
 * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
 * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the horizontal gravity: a left gravity will clip the right
 * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
 * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the vertical gravity: a top gravity will clip the bottom
 * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
 * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
 * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
 * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
 * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
 * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
 * </table>
 *
 * @attr name android:gravity
 */

public static final int FragmentBreadCrumbs_gravity = 0; // 0x0

/**
 * <p>
 * @attr description
 * Sets whether the enter and exit transitions should overlap when transitioning
 * forward.
 * Corresponds to {@link android.app.Fragment#setAllowEnterTransitionOverlap(
 * boolean)}
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:fragmentAllowEnterTransitionOverlap
 */

public static final int Fragment_fragmentAllowEnterTransitionOverlap = 9; // 0x9

/**
 * <p>
 * @attr description
 * Sets whether the enter and exit transitions should overlap when transitioning
 * because of popping the back stack.
 * Corresponds to {@link android.app.Fragment#setAllowReturnTransitionOverlap(
 * boolean)}
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:fragmentAllowReturnTransitionOverlap
 */

public static final int Fragment_fragmentAllowReturnTransitionOverlap = 10; // 0xa

/**
 * <p>
 * @attr description
 * The Transition that will be used to move Views into the initial scene.
 * Corresponds to {@link android.app.Fragment#setEnterTransition(
 * android.transition.Transition)}
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:fragmentEnterTransition
 */

public static final int Fragment_fragmentEnterTransition = 4; // 0x4

/**
 * <p>
 * @attr description
 * The Transition that will be used to move Views out of the scene when the
 * fragment is removed, hidden, or detached when not popping the back stack.
 * Corresponds to {@link android.app.Fragment#setExitTransition(
 * android.transition.Transition)}
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:fragmentExitTransition
 */

public static final int Fragment_fragmentExitTransition = 3; // 0x3

/**
 * <p>
 * @attr description
 * The Transition that will be used to move Views in to the scene when returning due
 * to popping a back stack.
 * Corresponds to {@link android.app.Fragment#setReenterTransition(
 * android.transition.Transition)}
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:fragmentReenterTransition
 */

public static final int Fragment_fragmentReenterTransition = 8; // 0x8

/**
 * <p>
 * @attr description
 * The Transition that will be used to move Views out of the scene when the Fragment is
 * preparing to be removed, hidden, or detached because of popping the back stack.
 * Corresponds to {@link android.app.Fragment#setReturnTransition(
 * android.transition.Transition)}
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:fragmentReturnTransition
 */

public static final int Fragment_fragmentReturnTransition = 6; // 0x6

/**
 * <p>
 * @attr description
 * The Transition that will be used for shared elements transferred into the content
 * Scene.
 * Corresponds to {@link android.app.Fragment#setSharedElementEnterTransition(
 * android.transition.Transition)}
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:fragmentSharedElementEnterTransition
 */

public static final int Fragment_fragmentSharedElementEnterTransition = 5; // 0x5

/**
 * <p>
 * @attr description
 * The Transition that will be used for shared elements transferred back during a
 * pop of the back stack. This Transition acts in the leaving Fragment.
 * Corresponds to {@link android.app.Fragment#setSharedElementReturnTransition(
 * android.transition.Transition)}
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:fragmentSharedElementReturnTransition
 */

public static final int Fragment_fragmentSharedElementReturnTransition = 7; // 0x7

/**
 * <p>
 * @attr description
 * Supply an identifier name for the top-level view, to later retrieve it
 * with {@link android.view.View#findViewById View.findViewById()} or
 * {@link android.app.Activity#findViewById Activity.findViewById()}.
 * This must be a
 * resource reference; typically you set this using the
 * <code>@+</code> syntax to create a new ID resources.
 * For example: <code>android:id="@+id/my_id"</code> which
 * allows you to later retrieve the view
 * with <code>findViewById(R.id.my_id)</code>.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:id
 */

public static final int Fragment_id = 1; // 0x1

/**
 * <p>
 * @attr description
 * Supply the name of the fragment class to instantiate.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int Fragment_name = 0; // 0x0

/**
 * <p>
 * @attr description
 * Supply a tag for the top-level view containing a String, to be retrieved
 * later with {@link android.view.View#getTag View.getTag()} or
 * searched for with {@link android.view.View#findViewWithTag
 * View.findViewWithTag()}.  It is generally preferable to use
 * IDs (through the android:id attribute) instead of tags because
 * they are faster and allow for compile-time type checking.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:tag
 */

public static final int Fragment_tag = 2; // 0x2

/**
 * Attributes that can be used with a FrameLayout.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #FrameLayout_measureAllChildren android:measureAllChildren}</code></td><td>Determines whether to measure all children or just those in
 * the VISIBLE or INVISIBLE state when measuring.</td></tr>
 * </table>
 * @see #FrameLayout_measureAllChildren
 */

public static final int[] FrameLayout;
static { FrameLayout = new int[0]; }

/**
 * Attributes that can be used with a FrameLayout_Layout.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #FrameLayout_Layout_layout_gravity android:layout_gravity}</code></td><td>Standard gravity constant that a child supplies to its parent.</td></tr>
 * </table>
 * @see #FrameLayout_Layout_layout_gravity
 */

public static final int[] FrameLayout_Layout;
static { FrameLayout_Layout = new int[0]; }

/**
 * <p>
 * @attr description
 * Standard gravity constant that a child supplies to its parent.
 * Defines how the child view should be positioned, on both the X and Y axes, within its enclosing layout.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
 * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
 * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
 * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
 * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the horizontal gravity: a left gravity will clip the right
 * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
 * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the vertical gravity: a top gravity will clip the bottom
 * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
 * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
 * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
 * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
 * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
 * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
 * </table>
 *
 * @attr name android:layout_gravity
 */

public static final int FrameLayout_Layout_layout_gravity = 0; // 0x0

/**
 * <p>
 * @attr description
 * Determines whether to measure all children or just those in
 * the VISIBLE or INVISIBLE state when measuring. Defaults to false.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:measureAllChildren
 */

public static final int FrameLayout_measureAllChildren = 0; // 0x0

/**
 * Attributes that can be used with a Gallery.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #Gallery_gravity android:gravity}</code></td><td>Specifies how an object should position its content, on both the X and Y axes,
 * within its own bounds.</td></tr>
 * <tr><td><code>{@link #Gallery_animationDuration android:animationDuration}</code></td><td>Sets how long a transition animation should run (in milliseconds)
 * when layout has changed.</td></tr>
 * <tr><td><code>{@link #Gallery_spacing android:spacing}</code></td><td></td></tr>
 * <tr><td><code>{@link #Gallery_unselectedAlpha android:unselectedAlpha}</code></td><td>Sets the alpha on the items that are not selected.</td></tr>
 * </table>
 * @see #Gallery_gravity
 * @see #Gallery_animationDuration
 * @see #Gallery_spacing
 * @see #Gallery_unselectedAlpha
 */

public static final int[] Gallery;
static { Gallery = new int[0]; }

/**
 * <p>
 * @attr description
 * Sets how long a transition animation should run (in milliseconds)
 * when layout has changed.  Only relevant if animation is turned on.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:animationDuration
 */

public static final int Gallery_animationDuration = 1; // 0x1

/**
 * <p>
 * @attr description
 * Specifies how an object should position its content, on both the X and Y axes,
 * within its own bounds.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
 * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
 * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
 * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
 * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the horizontal gravity: a left gravity will clip the right
 * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
 * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the vertical gravity: a top gravity will clip the bottom
 * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
 * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
 * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
 * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
 * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
 * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
 * </table>
 *
 * @attr name android:gravity
 */

public static final int Gallery_gravity = 0; // 0x0

/**
 * <p>This symbol is the offset where the {@link android.R.attr#spacing}
 * attribute's value can be found in the {@link #Gallery} array.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:spacing
 */

public static final int Gallery_spacing = 2; // 0x2

/**
 * <p>
 * @attr description
 * Sets the alpha on the items that are not selected.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:unselectedAlpha
 */

public static final int Gallery_unselectedAlpha = 3; // 0x3

/**
 * GestureOverlayView specific attributes. These attributes are used to configure
 * a GestureOverlayView from XML.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #GestureOverlayView_orientation android:orientation}</code></td><td>Standard orientation constant.</td></tr>
 * <tr><td><code>{@link #GestureOverlayView_gestureStrokeWidth android:gestureStrokeWidth}</code></td><td>Width of the stroke used to draw the gesture.</td></tr>
 * <tr><td><code>{@link #GestureOverlayView_gestureColor android:gestureColor}</code></td><td>Color used to draw a gesture.</td></tr>
 * <tr><td><code>{@link #GestureOverlayView_uncertainGestureColor android:uncertainGestureColor}</code></td><td>Color used to draw the user's strokes until we are sure it's a gesture.</td></tr>
 * <tr><td><code>{@link #GestureOverlayView_fadeOffset android:fadeOffset}</code></td><td>Time, in milliseconds, to wait before the gesture fades out after the user
 * is done drawing it.</td></tr>
 * <tr><td><code>{@link #GestureOverlayView_fadeDuration android:fadeDuration}</code></td><td>Duration, in milliseconds, of the fade out effect after the user is done
 * drawing a gesture.</td></tr>
 * <tr><td><code>{@link #GestureOverlayView_gestureStrokeType android:gestureStrokeType}</code></td><td>Defines the type of strokes that define a gesture.</td></tr>
 * <tr><td><code>{@link #GestureOverlayView_gestureStrokeLengthThreshold android:gestureStrokeLengthThreshold}</code></td><td>Minimum length of a stroke before it is recognized as a gesture.</td></tr>
 * <tr><td><code>{@link #GestureOverlayView_gestureStrokeSquarenessThreshold android:gestureStrokeSquarenessThreshold}</code></td><td>Squareness threshold of a stroke before it is recognized as a gesture.</td></tr>
 * <tr><td><code>{@link #GestureOverlayView_gestureStrokeAngleThreshold android:gestureStrokeAngleThreshold}</code></td><td>Minimum curve angle a stroke must contain before it is recognized as a gesture.</td></tr>
 * <tr><td><code>{@link #GestureOverlayView_eventsInterceptionEnabled android:eventsInterceptionEnabled}</code></td><td>Defines whether the overlay should intercept the motion events when a gesture
 * is recognized.</td></tr>
 * <tr><td><code>{@link #GestureOverlayView_fadeEnabled android:fadeEnabled}</code></td><td>Defines whether the gesture will automatically fade out after being recognized.</td></tr>
 * </table>
 * @see #GestureOverlayView_orientation
 * @see #GestureOverlayView_gestureStrokeWidth
 * @see #GestureOverlayView_gestureColor
 * @see #GestureOverlayView_uncertainGestureColor
 * @see #GestureOverlayView_fadeOffset
 * @see #GestureOverlayView_fadeDuration
 * @see #GestureOverlayView_gestureStrokeType
 * @see #GestureOverlayView_gestureStrokeLengthThreshold
 * @see #GestureOverlayView_gestureStrokeSquarenessThreshold
 * @see #GestureOverlayView_gestureStrokeAngleThreshold
 * @see #GestureOverlayView_eventsInterceptionEnabled
 * @see #GestureOverlayView_fadeEnabled
 */

public static final int[] GestureOverlayView;
static { GestureOverlayView = new int[0]; }

/**
 * <p>
 * @attr description
 * Defines whether the overlay should intercept the motion events when a gesture
 * is recognized.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:eventsInterceptionEnabled
 */

public static final int GestureOverlayView_eventsInterceptionEnabled = 10; // 0xa

/**
 * <p>
 * @attr description
 * Duration, in milliseconds, of the fade out effect after the user is done
 * drawing a gesture.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:fadeDuration
 */

public static final int GestureOverlayView_fadeDuration = 5; // 0x5

/**
 * <p>
 * @attr description
 * Defines whether the gesture will automatically fade out after being recognized.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:fadeEnabled
 */

public static final int GestureOverlayView_fadeEnabled = 11; // 0xb

/**
 * <p>
 * @attr description
 * Time, in milliseconds, to wait before the gesture fades out after the user
 * is done drawing it.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:fadeOffset
 */

public static final int GestureOverlayView_fadeOffset = 4; // 0x4

/**
 * <p>
 * @attr description
 * Color used to draw a gesture.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:gestureColor
 */

public static final int GestureOverlayView_gestureColor = 2; // 0x2

/**
 * <p>
 * @attr description
 * Minimum curve angle a stroke must contain before it is recognized as a gesture.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:gestureStrokeAngleThreshold
 */

public static final int GestureOverlayView_gestureStrokeAngleThreshold = 9; // 0x9

/**
 * <p>
 * @attr description
 * Minimum length of a stroke before it is recognized as a gesture.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:gestureStrokeLengthThreshold
 */

public static final int GestureOverlayView_gestureStrokeLengthThreshold = 7; // 0x7

/**
 * <p>
 * @attr description
 * Squareness threshold of a stroke before it is recognized as a gesture.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:gestureStrokeSquarenessThreshold
 */

public static final int GestureOverlayView_gestureStrokeSquarenessThreshold = 8; // 0x8

/**
 * <p>
 * @attr description
 * Defines the type of strokes that define a gesture.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>multiple</td><td>1</td><td>A gesture is made of multiple strokes.</td></tr>
 * <tr><td>single</td><td>0</td><td>A gesture is made of only one stroke.</td></tr>
 * </table>
 *
 * @attr name android:gestureStrokeType
 */

public static final int GestureOverlayView_gestureStrokeType = 6; // 0x6

/**
 * <p>
 * @attr description
 * Width of the stroke used to draw the gesture.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:gestureStrokeWidth
 */

public static final int GestureOverlayView_gestureStrokeWidth = 1; // 0x1

/**
 * <p>
 * @attr description
 * Indicates whether horizontal (when the orientation is vertical) or vertical
 * (when orientation is horizontal) strokes automatically define a gesture.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>horizontal</td><td>0</td><td>Defines an horizontal widget.</td></tr>
 * <tr><td>vertical</td><td>1</td><td>Defines a vertical widget.</td></tr>
 * </table>
 *
 * @attr name android:orientation
 */

public static final int GestureOverlayView_orientation = 0; // 0x0

/**
 * <p>
 * @attr description
 * Color used to draw the user's strokes until we are sure it's a gesture.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:uncertainGestureColor
 */

public static final int GestureOverlayView_uncertainGestureColor = 3; // 0x3

/**
 * Attributes that can be used with a GlowPadView.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #GlowPadView_targetDescriptions android:targetDescriptions}</code></td><td>Reference to an array resource that be used as description for the targets around the circle.</td></tr>
 * <tr><td><code>{@link #GlowPadView_directionDescriptions android:directionDescriptions}</code></td><td>Reference to an array resource that be used to announce the directions with targets around the circle.</td></tr>
 * </table>
 * @see #GlowPadView_targetDescriptions
 * @see #GlowPadView_directionDescriptions
 */

public static final int[] GlowPadView;
static { GlowPadView = new int[0]; }

/**
 * <p>
 * @attr description
 * Reference to an array resource that be used to announce the directions with targets around the circle.
 * {@deprecated Removed.}
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:directionDescriptions
 */

@Deprecated public static final int GlowPadView_directionDescriptions = 1; // 0x1

/**
 * <p>
 * @attr description
 * Reference to an array resource that be used as description for the targets around the circle.
 * {@deprecated Removed.}
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:targetDescriptions
 */

@Deprecated public static final int GlowPadView_targetDescriptions = 0; // 0x0

/**
 * Used to describe the gradient for fill or stroke in a path of VectorDrawable.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #GradientColor_startColor android:startColor}</code></td><td>Start color of the gradient.</td></tr>
 * <tr><td><code>{@link #GradientColor_endColor android:endColor}</code></td><td>End color of the gradient.</td></tr>
 * <tr><td><code>{@link #GradientColor_type android:type}</code></td><td>Type of gradient.</td></tr>
 * <tr><td><code>{@link #GradientColor_centerX android:centerX}</code></td><td>X-position of the center point of the gradient within the shape as a fraction of the
 * width.</td></tr>
 * <tr><td><code>{@link #GradientColor_centerY android:centerY}</code></td><td>Y-position of the center point of the gradient within the shape as a fraction of the
 * height.</td></tr>
 * <tr><td><code>{@link #GradientColor_gradientRadius android:gradientRadius}</code></td><td>Radius of the gradient, used only with radial gradient.</td></tr>
 * <tr><td><code>{@link #GradientColor_tileMode android:tileMode}</code></td><td>Defines the tile mode.</td></tr>
 * <tr><td><code>{@link #GradientColor_centerColor android:centerColor}</code></td><td>Optional center color.</td></tr>
 * <tr><td><code>{@link #GradientColor_startX android:startX}</code></td><td>X coordinate of the start point origin of the gradient.</td></tr>
 * <tr><td><code>{@link #GradientColor_startY android:startY}</code></td><td>Y coordinate of the start point of the gradient within the shape.</td></tr>
 * <tr><td><code>{@link #GradientColor_endX android:endX}</code></td><td>X coordinate of the end point origin of the gradient.</td></tr>
 * <tr><td><code>{@link #GradientColor_endY android:endY}</code></td><td>Y coordinate of the end point of the gradient within the shape.</td></tr>
 * </table>
 * @see #GradientColor_startColor
 * @see #GradientColor_endColor
 * @see #GradientColor_type
 * @see #GradientColor_centerX
 * @see #GradientColor_centerY
 * @see #GradientColor_gradientRadius
 * @see #GradientColor_tileMode
 * @see #GradientColor_centerColor
 * @see #GradientColor_startX
 * @see #GradientColor_startY
 * @see #GradientColor_endX
 * @see #GradientColor_endY
 */

public static final int[] GradientColor;
static { GradientColor = new int[0]; }

/**
 * Describes an item of a GradientColor. Minimally need 2 items to define the gradient
 * Colors defined in <item> override the simple color attributes such as
 * "startColor / centerColor / endColor" are ignored.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #GradientColorItem_color android:color}</code></td><td>Solid color for the gradient shape.</td></tr>
 * <tr><td><code>{@link #GradientColorItem_offset android:offset}</code></td><td>The offset (or ratio) of this current color item inside the gradient.</td></tr>
 * </table>
 * @see #GradientColorItem_color
 * @see #GradientColorItem_offset
 */

public static final int[] GradientColorItem;
static { GradientColorItem = new int[0]; }

/**
 * <p>
 * @attr description
 * The current color for the offset inside the gradient.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:color
 */

public static final int GradientColorItem_color = 0; // 0x0

/**
 * <p>
 * @attr description
 * The offset (or ratio) of this current color item inside the gradient.
 * The value is only meaningful when it is between 0 and 1.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:offset
 */

public static final int GradientColorItem_offset = 1; // 0x1

/**
 * <p>
 * @attr description
 * Optional center color.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:centerColor
 */

public static final int GradientColor_centerColor = 7; // 0x7

/**
 * <p>
 * @attr description
 * X coordinate of the center of the gradient within the path.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:centerX
 */

public static final int GradientColor_centerX = 3; // 0x3

/**
 * <p>
 * @attr description
 * Y coordinate of the center of the gradient within the path.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:centerY
 */

public static final int GradientColor_centerY = 4; // 0x4

/**
 * <p>
 * @attr description
 * End color of the gradient.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:endColor
 */

public static final int GradientColor_endColor = 1; // 0x1

/**
 * <p>
 * @attr description
 * X coordinate of the end point origin of the gradient.
 * Defined in same coordinates as the path itself
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:endX
 */

public static final int GradientColor_endX = 10; // 0xa

/**
 * <p>
 * @attr description
 * Y coordinate of the end point of the gradient within the shape.
 * Defined in same coordinates as the path itself
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:endY
 */

public static final int GradientColor_endY = 11; // 0xb

/**
 * <p>
 * @attr description
 * Radius of the gradient, used only with radial gradient.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:gradientRadius
 */

public static final int GradientColor_gradientRadius = 5; // 0x5

/**
 * <p>
 * @attr description
 * Start color of the gradient.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:startColor
 */

public static final int GradientColor_startColor = 0; // 0x0

/**
 * <p>
 * @attr description
 * X coordinate of the start point origin of the gradient.
 * Defined in same coordinates as the path itself
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:startX
 */

public static final int GradientColor_startX = 8; // 0x8

/**
 * <p>
 * @attr description
 * Y coordinate of the start point of the gradient within the shape.
 * Defined in same coordinates as the path itself
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:startY
 */

public static final int GradientColor_startY = 9; // 0x9

/**
 * <p>
 * @attr description
 * Defines the tile mode of the gradient. SweepGradient don't support tiling.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>clamp</td><td>0</td><td>Replicates the edge color.</td></tr>
 * <tr><td>disabled</td><td>ffffffff</td><td>Do not tile the bitmap. This is the default value.</td></tr>
 * <tr><td>mirror</td><td>2</td><td>Repeats the shader's image horizontally and vertically, alternating
 * mirror images so that adjacent images always seam.</td></tr>
 * <tr><td>repeat</td><td>1</td><td>Repeats the bitmap in both direction.</td></tr>
 * </table>
 *
 * @attr name android:tileMode
 */

public static final int GradientColor_tileMode = 6; // 0x6

/**
 * <p>
 * @attr description
 * Type of gradient. The default type is linear.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>linear</td><td>0</td><td>Linear gradient extending across the center point.</td></tr>
 * <tr><td>radial</td><td>1</td><td>Radial gradient extending from the center point outward.</td></tr>
 * <tr><td>sweep</td><td>2</td><td>Sweep (or angular) gradient sweeping counter-clockwise around the center point.</td></tr>
 * </table>
 *
 * @attr name android:type
 */

public static final int GradientColor_type = 2; // 0x2

/**
 * Drawable used to render a geometric shape, with a gradient or a solid color.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #GradientDrawable_dither android:dither}</code></td><td>Enables or disables dithering of the bitmap if the bitmap does not have the
 * same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
 * an RGB 565 screen).</td></tr>
 * <tr><td><code>{@link #GradientDrawable_tint android:tint}</code></td><td>The tinting color for the image.</td></tr>
 * <tr><td><code>{@link #GradientDrawable_visible android:visible}</code></td><td>Provides initial visibility state of the drawable; the default
 * value is false.</td></tr>
 * <tr><td><code>{@link #GradientDrawable_shape android:shape}</code></td><td>Indicates what shape to fill with a gradient.</td></tr>
 * <tr><td><code>{@link #GradientDrawable_innerRadiusRatio android:innerRadiusRatio}</code></td><td>Inner radius of the ring expressed as a ratio of the ring's width.</td></tr>
 * <tr><td><code>{@link #GradientDrawable_thicknessRatio android:thicknessRatio}</code></td><td>Thickness of the ring expressed as a ratio of the ring's width.</td></tr>
 * <tr><td><code>{@link #GradientDrawable_useLevel android:useLevel}</code></td><td>Whether the drawable level value (see
 * {@link android.graphics.drawable.Drawable#getLevel()}) is used to scale the gradient.</td></tr>
 * <tr><td><code>{@link #GradientDrawable_innerRadius android:innerRadius}</code></td><td>Inner radius of the ring.</td></tr>
 * <tr><td><code>{@link #GradientDrawable_thickness android:thickness}</code></td><td>Thickness of the ring.</td></tr>
 * <tr><td><code>{@link #GradientDrawable_tintMode android:tintMode}</code></td><td>When a tint color is set, specifies its Porter-Duff blending mode.</td></tr>
 * <tr><td><code>{@link #GradientDrawable_opticalInsetLeft android:opticalInsetLeft}</code></td><td>Left optical inset.</td></tr>
 * <tr><td><code>{@link #GradientDrawable_opticalInsetTop android:opticalInsetTop}</code></td><td>Top optical inset.</td></tr>
 * <tr><td><code>{@link #GradientDrawable_opticalInsetRight android:opticalInsetRight}</code></td><td>Right optical inset.</td></tr>
 * <tr><td><code>{@link #GradientDrawable_opticalInsetBottom android:opticalInsetBottom}</code></td><td>Bottom optical inset.</td></tr>
 * </table>
 * @see #GradientDrawable_dither
 * @see #GradientDrawable_tint
 * @see #GradientDrawable_visible
 * @see #GradientDrawable_shape
 * @see #GradientDrawable_innerRadiusRatio
 * @see #GradientDrawable_thicknessRatio
 * @see #GradientDrawable_useLevel
 * @see #GradientDrawable_innerRadius
 * @see #GradientDrawable_thickness
 * @see #GradientDrawable_tintMode
 * @see #GradientDrawable_opticalInsetLeft
 * @see #GradientDrawable_opticalInsetTop
 * @see #GradientDrawable_opticalInsetRight
 * @see #GradientDrawable_opticalInsetBottom
 */

public static final int[] GradientDrawable;
static { GradientDrawable = new int[0]; }

/**
 * Used to describe the gradient used to fill the shape of a GradientDrawable.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #GradientDrawableGradient_startColor android:startColor}</code></td><td>Start color of the gradient.</td></tr>
 * <tr><td><code>{@link #GradientDrawableGradient_endColor android:endColor}</code></td><td>End color of the gradient.</td></tr>
 * <tr><td><code>{@link #GradientDrawableGradient_useLevel android:useLevel}</code></td><td>Whether the drawable level value (see
 * {@link android.graphics.drawable.Drawable#getLevel()}) is used to scale the gradient.</td></tr>
 * <tr><td><code>{@link #GradientDrawableGradient_angle android:angle}</code></td><td>Angle of the gradient, used only with linear gradient.</td></tr>
 * <tr><td><code>{@link #GradientDrawableGradient_type android:type}</code></td><td>Type of gradient.</td></tr>
 * <tr><td><code>{@link #GradientDrawableGradient_centerX android:centerX}</code></td><td>X-position of the center point of the gradient within the shape as a fraction of the
 * width.</td></tr>
 * <tr><td><code>{@link #GradientDrawableGradient_centerY android:centerY}</code></td><td>Y-position of the center point of the gradient within the shape as a fraction of the
 * height.</td></tr>
 * <tr><td><code>{@link #GradientDrawableGradient_gradientRadius android:gradientRadius}</code></td><td>Radius of the gradient, used only with radial gradient.</td></tr>
 * <tr><td><code>{@link #GradientDrawableGradient_centerColor android:centerColor}</code></td><td>Optional center color.</td></tr>
 * </table>
 * @see #GradientDrawableGradient_startColor
 * @see #GradientDrawableGradient_endColor
 * @see #GradientDrawableGradient_useLevel
 * @see #GradientDrawableGradient_angle
 * @see #GradientDrawableGradient_type
 * @see #GradientDrawableGradient_centerX
 * @see #GradientDrawableGradient_centerY
 * @see #GradientDrawableGradient_gradientRadius
 * @see #GradientDrawableGradient_centerColor
 */

public static final int[] GradientDrawableGradient;
static { GradientDrawableGradient = new int[0]; }

/**
 * <p>
 * @attr description
 * Angle of the gradient, used only with linear gradient. Must be a multiple of 45 in the
 * range [0, 315].
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:angle
 */

public static final int GradientDrawableGradient_angle = 3; // 0x3

/**
 * <p>
 * @attr description
 * Optional center color. For linear gradients, use centerX or centerY to place the center
 * color.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:centerColor
 */

public static final int GradientDrawableGradient_centerColor = 8; // 0x8

/**
 * <p>
 * @attr description
 * X-position of the center point of the gradient within the shape as a fraction of the
 * width. The default value is 0.5.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:centerX
 */

public static final int GradientDrawableGradient_centerX = 5; // 0x5

/**
 * <p>
 * @attr description
 * Y-position of the center point of the gradient within the shape as a fraction of the
 * height. The default value is 0.5.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:centerY
 */

public static final int GradientDrawableGradient_centerY = 6; // 0x6

/**
 * <p>
 * @attr description
 * End color of the gradient.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:endColor
 */

public static final int GradientDrawableGradient_endColor = 1; // 0x1

/**
 * <p>
 * @attr description
 * Radius of the gradient, used only with radial gradient. May be an explicit dimension
 * or a fractional value relative to the shape's minimum dimension.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:gradientRadius
 */

public static final int GradientDrawableGradient_gradientRadius = 7; // 0x7

/**
 * <p>
 * @attr description
 * Start color of the gradient.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:startColor
 */

public static final int GradientDrawableGradient_startColor = 0; // 0x0

/**
 * <p>
 * @attr description
 * Type of gradient. The default type is linear.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>linear</td><td>0</td><td>Linear gradient extending across the center point.</td></tr>
 * <tr><td>radial</td><td>1</td><td>Radial gradient extending from the center point outward.</td></tr>
 * <tr><td>sweep</td><td>2</td><td>Sweep (or angular) gradient sweeping counter-clockwise around the center point.</td></tr>
 * </table>
 *
 * @attr name android:type
 */

public static final int GradientDrawableGradient_type = 4; // 0x4

/**
 * <p>
 * @attr description
 * Whether the drawable level value (see
 * {@link android.graphics.drawable.Drawable#getLevel()}) is used to scale the gradient.
 * Scaling behavior varies based on gradient type. For "linear", adjusts the ending
 * position along the gradient's axis of orientation. For "radial", adjusts the outer
 * radius. For "sweep", adjusts the ending angle. The default value is false.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:useLevel
 */

public static final int GradientDrawableGradient_useLevel = 2; // 0x2

/**
 * Used to specify the optional padding of a GradientDrawable.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #GradientDrawablePadding_left android:left}</code></td><td>Amount of left padding inside the gradient shape.</td></tr>
 * <tr><td><code>{@link #GradientDrawablePadding_top android:top}</code></td><td>Amount of top padding inside the gradient shape.</td></tr>
 * <tr><td><code>{@link #GradientDrawablePadding_right android:right}</code></td><td>Amount of right padding inside the gradient shape.</td></tr>
 * <tr><td><code>{@link #GradientDrawablePadding_bottom android:bottom}</code></td><td>Amount of bottom padding inside the gradient shape.</td></tr>
 * </table>
 * @see #GradientDrawablePadding_left
 * @see #GradientDrawablePadding_top
 * @see #GradientDrawablePadding_right
 * @see #GradientDrawablePadding_bottom
 */

public static final int[] GradientDrawablePadding;
static { GradientDrawablePadding = new int[0]; }

/**
 * <p>
 * @attr description
 * Amount of bottom padding inside the gradient shape.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:bottom
 */

public static final int GradientDrawablePadding_bottom = 3; // 0x3

/**
 * <p>
 * @attr description
 * Amount of left padding inside the gradient shape.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:left
 */

public static final int GradientDrawablePadding_left = 0; // 0x0

/**
 * <p>
 * @attr description
 * Amount of right padding inside the gradient shape.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:right
 */

public static final int GradientDrawablePadding_right = 2; // 0x2

/**
 * <p>
 * @attr description
 * Amount of top padding inside the gradient shape.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:top
 */

public static final int GradientDrawablePadding_top = 1; // 0x1

/**
 * Used to specify the size of the shape for GradientDrawable.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #GradientDrawableSize_height android:height}</code></td><td>Makes the TextView be exactly this tall.</td></tr>
 * <tr><td><code>{@link #GradientDrawableSize_width android:width}</code></td><td>Makes the TextView be exactly this wide.</td></tr>
 * </table>
 * @see #GradientDrawableSize_height
 * @see #GradientDrawableSize_width
 */

public static final int[] GradientDrawableSize;
static { GradientDrawableSize = new int[0]; }

/**
 * <p>
 * @attr description
 * Height of the gradient shape.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:height
 */

public static final int GradientDrawableSize_height = 0; // 0x0

/**
 * <p>
 * @attr description
 * Width of the gradient shape.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:width
 */

public static final int GradientDrawableSize_width = 1; // 0x1

/**
 * Used to fill the shape of GradientDrawable with a solid color.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #GradientDrawableSolid_color android:color}</code></td><td>Solid color for the gradient shape.</td></tr>
 * </table>
 * @see #GradientDrawableSolid_color
 */

public static final int[] GradientDrawableSolid;
static { GradientDrawableSolid = new int[0]; }

/**
 * <p>
 * @attr description
 * Solid color for the gradient shape.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:color
 */

public static final int GradientDrawableSolid_color = 0; // 0x0

/**
 * Used to describe the optional stroke of a GradientDrawable.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #GradientDrawableStroke_width android:width}</code></td><td>Makes the TextView be exactly this wide.</td></tr>
 * <tr><td><code>{@link #GradientDrawableStroke_color android:color}</code></td><td>Solid color for the gradient shape.</td></tr>
 * <tr><td><code>{@link #GradientDrawableStroke_dashWidth android:dashWidth}</code></td><td>Length of a dash in the stroke.</td></tr>
 * <tr><td><code>{@link #GradientDrawableStroke_dashGap android:dashGap}</code></td><td>Gap between dashes in the stroke.</td></tr>
 * </table>
 * @see #GradientDrawableStroke_width
 * @see #GradientDrawableStroke_color
 * @see #GradientDrawableStroke_dashWidth
 * @see #GradientDrawableStroke_dashGap
 */

public static final int[] GradientDrawableStroke;
static { GradientDrawableStroke = new int[0]; }

/**
 * <p>
 * @attr description
 * Color of the gradient shape's stroke.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:color
 */

public static final int GradientDrawableStroke_color = 1; // 0x1

/**
 * <p>
 * @attr description
 * Gap between dashes in the stroke.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:dashGap
 */

public static final int GradientDrawableStroke_dashGap = 3; // 0x3

/**
 * <p>
 * @attr description
 * Length of a dash in the stroke.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:dashWidth
 */

public static final int GradientDrawableStroke_dashWidth = 2; // 0x2

/**
 * <p>
 * @attr description
 * Width of the gradient shape's stroke.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:width
 */

public static final int GradientDrawableStroke_width = 0; // 0x0

/**
 * <p>
 * @attr description
 * Enables or disables dithering.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:dither
 */

public static final int GradientDrawable_dither = 0; // 0x0

/**
 * <p>
 * @attr description
 * Inner radius of the ring. When defined, innerRadiusRatio is ignored.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:innerRadius
 */

public static final int GradientDrawable_innerRadius = 7; // 0x7

/**
 * <p>
 * @attr description
 * Inner radius of the ring expressed as a ratio of the ring's width. For instance,
 * if innerRadiusRatio=9, then the inner radius equals the ring's width divided by 9.
 * This value is ignored if innerRadius is defined. Default value is 9.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:innerRadiusRatio
 */

public static final int GradientDrawable_innerRadiusRatio = 4; // 0x4

/**
 * <p>
 * @attr description
 * Bottom optical inset.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:opticalInsetBottom
 */

public static final int GradientDrawable_opticalInsetBottom = 13; // 0xd

/**
 * <p>
 * @attr description
 * Left optical inset.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:opticalInsetLeft
 */

public static final int GradientDrawable_opticalInsetLeft = 10; // 0xa

/**
 * <p>
 * @attr description
 * Right optical inset.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:opticalInsetRight
 */

public static final int GradientDrawable_opticalInsetRight = 12; // 0xc

/**
 * <p>
 * @attr description
 * Top optical inset.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:opticalInsetTop
 */

public static final int GradientDrawable_opticalInsetTop = 11; // 0xb

/**
 * <p>
 * @attr description
 * Indicates what shape to fill with a gradient.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>line</td><td>2</td><td>Line shape.</td></tr>
 * <tr><td>oval</td><td>1</td><td>Oval shape.</td></tr>
 * <tr><td>rectangle</td><td>0</td><td>Rectangle shape, with optional rounder corners.</td></tr>
 * <tr><td>ring</td><td>3</td><td>Ring shape.</td></tr>
 * </table>
 *
 * @attr name android:shape
 */

public static final int GradientDrawable_shape = 3; // 0x3

/**
 * <p>
 * @attr description
 * Thickness of the ring. When defined, thicknessRatio is ignored.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:thickness
 */

public static final int GradientDrawable_thickness = 8; // 0x8

/**
 * <p>
 * @attr description
 * Thickness of the ring expressed as a ratio of the ring's width. For instance,
 * if thicknessRatio=3, then the thickness equals the ring's width divided by 3.
 * This value is ignored if innerRadius is defined. Default value is 3.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:thicknessRatio
 */

public static final int GradientDrawable_thicknessRatio = 5; // 0x5

/**
 * <p>
 * @attr description
 * If set, specifies the color to apply to the drawable as a tint. By default,
 * no tint is applied. May be a color state list.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:tint
 */

public static final int GradientDrawable_tint = 1; // 0x1

/**
 * <p>
 * @attr description
 * When a tint color is set, specifies its Porter-Duff blending mode. The
 * default value is src_in, which treats the drawable as an alpha mask.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 *
 * @attr name android:tintMode
 */

public static final int GradientDrawable_tintMode = 9; // 0x9

/**
 * <p>
 * @attr description
 * Whether the drawable level value (see
 * {@link android.graphics.drawable.Drawable#getLevel()}) is used to scale the shape.
 * Scaling behavior depends on the shape type. For "ring", the angle is scaled from 0 to
 * 360. For all other types, there is no effect. The default value is true.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:useLevel
 */

public static final int GradientDrawable_useLevel = 6; // 0x6

/**
 * <p>
 * @attr description
 * Indicates whether the drawable should intially be visible.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:visible
 */

public static final int GradientDrawable_visible = 2; // 0x2

/**
 * Attributes that can be used with a GridLayout.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #GridLayout_orientation android:orientation}</code></td><td>Standard orientation constant.</td></tr>
 * <tr><td><code>{@link #GridLayout_rowCount android:rowCount}</code></td><td>The maximum number of rows to create when automatically positioning children.</td></tr>
 * <tr><td><code>{@link #GridLayout_rowOrderPreserved android:rowOrderPreserved}</code></td><td>When set to true, forces row boundaries to appear in the same order
 * as row indices.</td></tr>
 * <tr><td><code>{@link #GridLayout_columnCount android:columnCount}</code></td><td>The maximum number of columns to create when automatically positioning children.</td></tr>
 * <tr><td><code>{@link #GridLayout_columnOrderPreserved android:columnOrderPreserved}</code></td><td>When set to true, forces column boundaries to appear in the same order
 * as column indices.</td></tr>
 * <tr><td><code>{@link #GridLayout_useDefaultMargins android:useDefaultMargins}</code></td><td>When set to true, tells GridLayout to use default margins when none are specified
 * in a view's layout parameters.</td></tr>
 * <tr><td><code>{@link #GridLayout_alignmentMode android:alignmentMode}</code></td><td>Alignment constants.</td></tr>
 * </table>
 * @see #GridLayout_orientation
 * @see #GridLayout_rowCount
 * @see #GridLayout_rowOrderPreserved
 * @see #GridLayout_columnCount
 * @see #GridLayout_columnOrderPreserved
 * @see #GridLayout_useDefaultMargins
 * @see #GridLayout_alignmentMode
 */

public static final int[] GridLayout;
static { GridLayout = new int[0]; }

/**
 * Attributes that can be used with a GridLayoutAnimation.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #GridLayoutAnimation_columnDelay android:columnDelay}</code></td><td>Fraction of the animation duration used to delay the beginning of
 * the animation of each column.</td></tr>
 * <tr><td><code>{@link #GridLayoutAnimation_rowDelay android:rowDelay}</code></td><td>Fraction of the animation duration used to delay the beginning of
 * the animation of each row.</td></tr>
 * <tr><td><code>{@link #GridLayoutAnimation_direction android:direction}</code></td><td>Direction of the animation in the grid.</td></tr>
 * <tr><td><code>{@link #GridLayoutAnimation_directionPriority android:directionPriority}</code></td><td>Priority of the rows and columns.</td></tr>
 * </table>
 * @see #GridLayoutAnimation_columnDelay
 * @see #GridLayoutAnimation_rowDelay
 * @see #GridLayoutAnimation_direction
 * @see #GridLayoutAnimation_directionPriority
 */

public static final int[] GridLayoutAnimation;
static { GridLayoutAnimation = new int[0]; }

/**
 * <p>
 * @attr description
 * Fraction of the animation duration used to delay the beginning of
 * the animation of each column.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:columnDelay
 */

public static final int GridLayoutAnimation_columnDelay = 0; // 0x0

/**
 * <p>
 * @attr description
 * Direction of the animation in the grid.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom_to_top</td><td>2</td><td>Animates rows from bottom to top.</td></tr>
 * <tr><td>left_to_right</td><td>0</td><td>Animates columns from left to right.</td></tr>
 * <tr><td>right_to_left</td><td>1</td><td>Animates columns from right to left.</td></tr>
 * <tr><td>top_to_bottom</td><td>0</td><td>Animates rows from top to bottom.</td></tr>
 * </table>
 *
 * @attr name android:direction
 */

public static final int GridLayoutAnimation_direction = 2; // 0x2

/**
 * <p>
 * @attr description
 * Priority of the rows and columns. When the priority is none,
 * both rows and columns have the same priority. When the priority is
 * column, the animations will be applied on the columns first. The same
 * goes for rows.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>column</td><td>1</td><td>Columns are animated first.</td></tr>
 * <tr><td>none</td><td>0</td><td>Rows and columns are animated at the same time.</td></tr>
 * <tr><td>row</td><td>2</td><td>Rows are animated first.</td></tr>
 * </table>
 *
 * @attr name android:directionPriority
 */

public static final int GridLayoutAnimation_directionPriority = 3; // 0x3

/**
 * <p>
 * @attr description
 * Fraction of the animation duration used to delay the beginning of
 * the animation of each row.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:rowDelay
 */

public static final int GridLayoutAnimation_rowDelay = 1; // 0x1

/**
 * Attributes that can be used with a GridLayout_Layout.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #GridLayout_Layout_layout_gravity android:layout_gravity}</code></td><td>Standard gravity constant that a child supplies to its parent.</td></tr>
 * <tr><td><code>{@link #GridLayout_Layout_layout_column android:layout_column}</code></td><td>The index of the column in which this child should be.</td></tr>
 * <tr><td><code>{@link #GridLayout_Layout_layout_row android:layout_row}</code></td><td>The row boundary delimiting the top of the group of cells
 * occupied by this view.</td></tr>
 * <tr><td><code>{@link #GridLayout_Layout_layout_rowSpan android:layout_rowSpan}</code></td><td>The row span: the difference between the top and bottom
 * boundaries delimiting the group of cells occupied by this view.</td></tr>
 * <tr><td><code>{@link #GridLayout_Layout_layout_columnSpan android:layout_columnSpan}</code></td><td>The column span: the difference between the right and left
 * boundaries delimiting the group of cells occupied by this view.</td></tr>
 * <tr><td><code>{@link #GridLayout_Layout_layout_rowWeight android:layout_rowWeight}</code></td><td>The relative proportion of vertical space that should be allocated to this view
 * during excess space distribution.</td></tr>
 * <tr><td><code>{@link #GridLayout_Layout_layout_columnWeight android:layout_columnWeight}</code></td><td>The relative proportion of horizontal space that should be allocated to this view
 * during excess space distribution.</td></tr>
 * </table>
 * @see #GridLayout_Layout_layout_gravity
 * @see #GridLayout_Layout_layout_column
 * @see #GridLayout_Layout_layout_row
 * @see #GridLayout_Layout_layout_rowSpan
 * @see #GridLayout_Layout_layout_columnSpan
 * @see #GridLayout_Layout_layout_rowWeight
 * @see #GridLayout_Layout_layout_columnWeight
 */

public static final int[] GridLayout_Layout;
static { GridLayout_Layout = new int[0]; }

/**
 * <p>
 * @attr description
 * The column boundary delimiting the left of the group of cells
 * occupied by this view.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:layout_column
 */

public static final int GridLayout_Layout_layout_column = 1; // 0x1

/**
 * <p>
 * @attr description
 * The column span: the difference between the right and left
 * boundaries delimiting the group of cells occupied by this view.
 * The default is one.
 * See {@link android.widget.GridLayout.Spec}.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:layout_columnSpan
 */

public static final int GridLayout_Layout_layout_columnSpan = 4; // 0x4

/**
 * <p>
 * @attr description
 * The relative proportion of horizontal space that should be allocated to this view
 * during excess space distribution.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:layout_columnWeight
 */

public static final int GridLayout_Layout_layout_columnWeight = 6; // 0x6

/**
 * <p>
 * @attr description
 * Gravity specifies how a component should be placed in its group of cells.
 * The default is LEFT | BASELINE.
 * See {@link android.widget.GridLayout.LayoutParams#setGravity(int)}.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
 * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
 * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
 * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
 * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the horizontal gravity: a left gravity will clip the right
 * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
 * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the vertical gravity: a top gravity will clip the bottom
 * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
 * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
 * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
 * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
 * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
 * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
 * </table>
 *
 * @attr name android:layout_gravity
 */

public static final int GridLayout_Layout_layout_gravity = 0; // 0x0

/**
 * <p>
 * @attr description
 * The row boundary delimiting the top of the group of cells
 * occupied by this view.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:layout_row
 */

public static final int GridLayout_Layout_layout_row = 2; // 0x2

/**
 * <p>
 * @attr description
 * The row span: the difference between the top and bottom
 * boundaries delimiting the group of cells occupied by this view.
 * The default is one.
 * See {@link android.widget.GridLayout.Spec}.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:layout_rowSpan
 */

public static final int GridLayout_Layout_layout_rowSpan = 3; // 0x3

/**
 * <p>
 * @attr description
 * The relative proportion of vertical space that should be allocated to this view
 * during excess space distribution.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:layout_rowWeight
 */

public static final int GridLayout_Layout_layout_rowWeight = 5; // 0x5

/**
 * <p>
 * @attr description
 * When set to alignMargins, causes alignment to take place between the outer
 * boundary of a view, as defined by its margins. When set to alignBounds,
 * causes alignment to take place between the edges of the view.
 * The default is alignMargins.
 * See {@link android.widget.GridLayout#setAlignmentMode(int)}.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>alignBounds</td><td>0</td><td>Align the bounds of the children.
 * See {@link android.widget.GridLayout#ALIGN_BOUNDS}.</td></tr>
 * <tr><td>alignMargins</td><td>1</td><td>Align the margins of the children.
 * See {@link android.widget.GridLayout#ALIGN_MARGINS}.</td></tr>
 * </table>
 *
 * @attr name android:alignmentMode
 */

public static final int GridLayout_alignmentMode = 6; // 0x6

/**
 * <p>
 * @attr description
 * The maximum number of columns to create when automatically positioning children.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:columnCount
 */

public static final int GridLayout_columnCount = 3; // 0x3

/**
 * <p>
 * @attr description
 * When set to true, forces column boundaries to appear in the same order
 * as column indices.
 * The default is true.
 * See {@link android.widget.GridLayout#setColumnOrderPreserved(boolean)}.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:columnOrderPreserved
 */

public static final int GridLayout_columnOrderPreserved = 4; // 0x4

/**
 * <p>
 * @attr description
 * The orientation property is not used during layout. It is only used to
 * allocate row and column parameters when they are not specified by its children's
 * layout paramters. GridLayout works like LinearLayout in this case;
 * putting all the components either in a single row or in a single column -
 * depending on the value of this flag. In the horizontal case, a columnCount
 * property may be additionally supplied to force new rows to be created when a
 * row is full. The rowCount attribute may be used similarly in the vertical case.
 * The default is horizontal.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>horizontal</td><td>0</td><td>Defines an horizontal widget.</td></tr>
 * <tr><td>vertical</td><td>1</td><td>Defines a vertical widget.</td></tr>
 * </table>
 *
 * @attr name android:orientation
 */

public static final int GridLayout_orientation = 0; // 0x0

/**
 * <p>
 * @attr description
 * The maximum number of rows to create when automatically positioning children.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:rowCount
 */

public static final int GridLayout_rowCount = 1; // 0x1

/**
 * <p>
 * @attr description
 * When set to true, forces row boundaries to appear in the same order
 * as row indices.
 * The default is true.
 * See {@link android.widget.GridLayout#setRowOrderPreserved(boolean)}.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:rowOrderPreserved
 */

public static final int GridLayout_rowOrderPreserved = 2; // 0x2

/**
 * <p>
 * @attr description
 * When set to true, tells GridLayout to use default margins when none are specified
 * in a view's layout parameters.
 * The default value is false.
 * See {@link android.widget.GridLayout#setUseDefaultMargins(boolean)}.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:useDefaultMargins
 */

public static final int GridLayout_useDefaultMargins = 5; // 0x5

/**
 * Attributes that can be used with a GridView.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #GridView_gravity android:gravity}</code></td><td>Specifies how an object should position its content, on both the X and Y axes,
 * within its own bounds.</td></tr>
 * <tr><td><code>{@link #GridView_horizontalSpacing android:horizontalSpacing}</code></td><td>Defines the default horizontal spacing between columns.</td></tr>
 * <tr><td><code>{@link #GridView_verticalSpacing android:verticalSpacing}</code></td><td>Defines the default vertical spacing between rows.</td></tr>
 * <tr><td><code>{@link #GridView_stretchMode android:stretchMode}</code></td><td>Defines how columns should stretch to fill the available empty space, if any.</td></tr>
 * <tr><td><code>{@link #GridView_columnWidth android:columnWidth}</code></td><td>Specifies the fixed width for each column.</td></tr>
 * <tr><td><code>{@link #GridView_numColumns android:numColumns}</code></td><td>Defines how many columns to show.</td></tr>
 * </table>
 * @see #GridView_gravity
 * @see #GridView_horizontalSpacing
 * @see #GridView_verticalSpacing
 * @see #GridView_stretchMode
 * @see #GridView_columnWidth
 * @see #GridView_numColumns
 */

public static final int[] GridView;
static { GridView = new int[0]; }

/**
 * <p>
 * @attr description
 * Specifies the fixed width for each column.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:columnWidth
 */

public static final int GridView_columnWidth = 4; // 0x4

/**
 * <p>
 * @attr description
 * Specifies the gravity within each cell.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
 * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
 * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
 * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
 * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the horizontal gravity: a left gravity will clip the right
 * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
 * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the vertical gravity: a top gravity will clip the bottom
 * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
 * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
 * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
 * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
 * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
 * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
 * </table>
 *
 * @attr name android:gravity
 */

public static final int GridView_gravity = 0; // 0x0

/**
 * <p>
 * @attr description
 * Defines the default horizontal spacing between columns.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:horizontalSpacing
 */

public static final int GridView_horizontalSpacing = 1; // 0x1

/**
 * <p>
 * @attr description
 * Defines how many columns to show.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>auto_fit</td><td>ffffffff</td><td>Display as many columns as possible to fill the available space.</td></tr>
 * </table>
 *
 * @attr name android:numColumns
 */

public static final int GridView_numColumns = 5; // 0x5

/**
 * <p>
 * @attr description
 * Defines how columns should stretch to fill the available empty space, if any.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>columnWidth</td><td>2</td><td>Each column is stretched equally.</td></tr>
 * <tr><td>none</td><td>0</td><td>Stretching is disabled.</td></tr>
 * <tr><td>spacingWidth</td><td>1</td><td>The spacing between each column is stretched.</td></tr>
 * <tr><td>spacingWidthUniform</td><td>3</td><td>The spacing between each column is uniformly stretched..</td></tr>
 * </table>
 *
 * @attr name android:stretchMode
 */

public static final int GridView_stretchMode = 3; // 0x3

/**
 * <p>
 * @attr description
 * Defines the default vertical spacing between rows.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:verticalSpacing
 */

public static final int GridView_verticalSpacing = 2; // 0x2

/**
 * Attributes that can be used with a HorizontalScrollView.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #HorizontalScrollView_fillViewport android:fillViewport}</code></td><td>Defines whether the scrollview should stretch its content to fill the viewport.</td></tr>
 * </table>
 * @see #HorizontalScrollView_fillViewport
 */

public static final int[] HorizontalScrollView;
static { HorizontalScrollView = new int[0]; }

/**
 * <p>
 * @attr description
 * Defines whether the scrollview should stretch its content to fill the viewport.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:fillViewport
 */

public static final int HorizontalScrollView_fillViewport = 0; // 0x0

/**
 * Use <code>host-apdu-service</code> as the root tag of the XML resource that
 * describes an {@link android.nfc.cardemulation.HostApduService} service, which
 * is referenced from its {@link android.nfc.cardemulation.HostApduService#SERVICE_META_DATA}
 * entry.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #HostApduService_description android:description}</code></td><td>Descriptive text for the associated data.</td></tr>
 * <tr><td><code>{@link #HostApduService_settingsActivity android:settingsActivity}</code></td><td>Component name of an activity that allows the user to modify
 * the settings for this service.</td></tr>
 * <tr><td><code>{@link #HostApduService_requireDeviceUnlock android:requireDeviceUnlock}</code></td><td>Whether the device must be unlocked before routing data to this service.</td></tr>
 * <tr><td><code>{@link #HostApduService_apduServiceBanner android:apduServiceBanner}</code></td><td>A drawable that can be rendered in Android's system UI for representing
 * the service.</td></tr>
 * </table>
 * @see #HostApduService_description
 * @see #HostApduService_settingsActivity
 * @see #HostApduService_requireDeviceUnlock
 * @see #HostApduService_apduServiceBanner
 */

public static final int[] HostApduService;
static { HostApduService = new int[0]; }

/**
 * <p>
 * @attr description
 * A drawable that can be rendered in Android's system UI for representing
 * the service.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:apduServiceBanner
 */

public static final int HostApduService_apduServiceBanner = 3; // 0x3

/**
 * <p>
 * @attr description
 * Short description of the functionality the service implements. This attribute
 * is mandatory.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:description
 */

public static final int HostApduService_description = 0; // 0x0

/**
 * <p>
 * @attr description
 * Whether the device must be unlocked before routing data to this service.
 * The default is false.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:requireDeviceUnlock
 */

public static final int HostApduService_requireDeviceUnlock = 2; // 0x2

/**
 * <p>
 * @attr description
 * Component name of an activity that allows the user to modify
 * the settings for this service.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:settingsActivity
 */

public static final int HostApduService_settingsActivity = 1; // 0x1

/**
 * Use <code>host-nfcf-service</code> as the root tag of the XML resource that
 * describes an {@link android.nfc.cardemulation.HostNfcFService} service, which
 * is referenced from its {@link android.nfc.cardemulation.HostNfcFService#SERVICE_META_DATA}
 * entry.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #HostNfcFService_description android:description}</code></td><td>Descriptive text for the associated data.</td></tr>
 * </table>
 * @see #HostNfcFService_description
 */

public static final int[] HostNfcFService;
static { HostNfcFService = new int[0]; }

/**
 * <p>
 * @attr description
 * Short description of the functionality the service implements. This attribute
 * is mandatory.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:description
 */

public static final int HostNfcFService_description = 0; // 0x0

/**
 * Attributes that can be used with a Icon.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #Icon_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
 * associated item.</td></tr>
 * <tr><td><code>{@link #Icon_mimeType android:mimeType}</code></td><td>Specify a MIME type that is handled, as per
 * {@link android.content.IntentFilter#addDataType
 * IntentFilter.addDataType()}.</td></tr>
 * </table>
 * @see #Icon_icon
 * @see #Icon_mimeType
 */

public static final int[] Icon;
static { Icon = new int[0]; }

/**
 * Attributes that can be used with a IconDefault.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #IconDefault_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
 * associated item.</td></tr>
 * </table>
 * @see #IconDefault_icon
 */

public static final int[] IconDefault;
static { IconDefault = new int[0]; }

/**
 * <p>
 * @attr description
 * A Drawable resource providing a graphical representation of its
 * associated item.  Use with the
 * application tag (to supply a default icon for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific icon for that component).  It may also be
 * used with the intent-filter tag to supply an icon to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given icon will be used to display to the user a graphical
 * representation of its associated component; for example, as the icon
 * for main activity that is displayed in the launcher.  This must be
 * a reference to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:icon
 */

public static final int IconDefault_icon = 0; // 0x0

/**
 * Attributes that can be used with a IconMenuView.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #IconMenuView_rowHeight android:rowHeight}</code></td><td>Defines the height of each row.</td></tr>
 * <tr><td><code>{@link #IconMenuView_maxRows android:maxRows}</code></td><td>Defines the maximum number of rows displayed.</td></tr>
 * <tr><td><code>{@link #IconMenuView_maxItemsPerRow android:maxItemsPerRow}</code></td><td>Defines the maximum number of items per row.</td></tr>
 * <tr><td><code>{@link #IconMenuView_moreIcon android:moreIcon}</code></td><td>'More' icon.</td></tr>
 * </table>
 * @see #IconMenuView_rowHeight
 * @see #IconMenuView_maxRows
 * @see #IconMenuView_maxItemsPerRow
 * @see #IconMenuView_moreIcon
 */

public static final int[] IconMenuView;
static { IconMenuView = new int[0]; }

/**
 * <p>
 * @attr description
 * Defines the maximum number of items per row.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:maxItemsPerRow
 */

public static final int IconMenuView_maxItemsPerRow = 2; // 0x2

/**
 * <p>
 * @attr description
 * Defines the maximum number of rows displayed.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:maxRows
 */

public static final int IconMenuView_maxRows = 1; // 0x1

/**
 * <p>
 * @attr description
 * 'More' icon.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:moreIcon
 */

public static final int IconMenuView_moreIcon = 3; // 0x3

/**
 * <p>
 * @attr description
 * Defines the height of each row.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:rowHeight
 */

public static final int IconMenuView_rowHeight = 0; // 0x0

/**
 * <p>
 * @attr description
 * A Drawable resource providing a graphical representation of its
 * associated item.  Use with the
 * application tag (to supply a default icon for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific icon for that component).  It may also be
 * used with the intent-filter tag to supply an icon to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given icon will be used to display to the user a graphical
 * representation of its associated component; for example, as the icon
 * for main activity that is displayed in the launcher.  This must be
 * a reference to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:icon
 */

public static final int Icon_icon = 0; // 0x0

/**
 * <p>
 * @attr description
 * Specify a MIME type that is handled, as per
 * {@link android.content.IntentFilter#addDataType
 * IntentFilter.addDataType()}.
 * <p><em>Note: MIME type matching in the Android framework is
 * case-sensitive, unlike formal RFC MIME types.  As a result,
 * MIME types here should always use lower case letters.</em></p>
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:mimeType
 */

public static final int Icon_mimeType = 1; // 0x1

public static final int[] ImageSwitcher;
static { ImageSwitcher = new int[0]; }

/**
 * Attributes that can be used with a ImageView.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #ImageView_src android:src}</code></td><td>Sets a drawable as the content of this ImageView.</td></tr>
 * <tr><td><code>{@link #ImageView_scaleType android:scaleType}</code></td><td>Controls how the image should be resized or moved to match the size
 * of this ImageView.</td></tr>
 * <tr><td><code>{@link #ImageView_adjustViewBounds android:adjustViewBounds}</code></td><td>Set this to true if you want the ImageView to adjust its bounds
 * to preserve the aspect ratio of its drawable.</td></tr>
 * <tr><td><code>{@link #ImageView_maxWidth android:maxWidth}</code></td><td>An optional argument to supply a maximum width for this view.</td></tr>
 * <tr><td><code>{@link #ImageView_maxHeight android:maxHeight}</code></td><td>An optional argument to supply a maximum height for this view.</td></tr>
 * <tr><td><code>{@link #ImageView_tint android:tint}</code></td><td>The tinting color for the image.</td></tr>
 * <tr><td><code>{@link #ImageView_baselineAlignBottom android:baselineAlignBottom}</code></td><td>If true, the image view will be baseline aligned with based on its
 * bottom edge.</td></tr>
 * <tr><td><code>{@link #ImageView_cropToPadding android:cropToPadding}</code></td><td>If true, the image will be cropped to fit within its padding.</td></tr>
 * <tr><td><code>{@link #ImageView_baseline android:baseline}</code></td><td>The offset of the baseline within this view.</td></tr>
 * <tr><td><code>{@link #ImageView_tintMode android:tintMode}</code></td><td>When a tint color is set, specifies its Porter-Duff blending mode.</td></tr>
 * </table>
 * @see #ImageView_src
 * @see #ImageView_scaleType
 * @see #ImageView_adjustViewBounds
 * @see #ImageView_maxWidth
 * @see #ImageView_maxHeight
 * @see #ImageView_tint
 * @see #ImageView_baselineAlignBottom
 * @see #ImageView_cropToPadding
 * @see #ImageView_baseline
 * @see #ImageView_tintMode
 */

public static final int[] ImageView;
static { ImageView = new int[0]; }

/**
 * <p>
 * @attr description
 * Set this to true if you want the ImageView to adjust its bounds
 * to preserve the aspect ratio of its drawable.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:adjustViewBounds
 */

public static final int ImageView_adjustViewBounds = 2; // 0x2

/**
 * <p>
 * @attr description
 * The offset of the baseline within this view. See {see android.view.View#getBaseline}
 * for details
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:baseline
 */

public static final int ImageView_baseline = 8; // 0x8

/**
 * <p>
 * @attr description
 * If true, the image view will be baseline aligned with based on its
 * bottom edge.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:baselineAlignBottom
 */

public static final int ImageView_baselineAlignBottom = 6; // 0x6

/**
 * <p>
 * @attr description
 * If true, the image will be cropped to fit within its padding.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:cropToPadding
 */

public static final int ImageView_cropToPadding = 7; // 0x7

/**
 * <p>
 * @attr description
 * An optional argument to supply a maximum height for this view.
 * See {see android.widget.ImageView#setMaxHeight} for details.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:maxHeight
 */

public static final int ImageView_maxHeight = 4; // 0x4

/**
 * <p>
 * @attr description
 * An optional argument to supply a maximum width for this view.
 * See {see android.widget.ImageView#setMaxWidth} for details.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:maxWidth
 */

public static final int ImageView_maxWidth = 3; // 0x3

/**
 * <p>
 * @attr description
 * Controls how the image should be resized or moved to match the size
 * of this ImageView.  See {@link android.widget.ImageView.ScaleType}
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>center</td><td>5</td><td>Center the image in the view, but perform no scaling.</td></tr>
 * <tr><td>centerCrop</td><td>6</td><td>Scale the image uniformly (maintain the image's aspect ratio) so both dimensions
 * (width and height) of the image will be equal to or larger than the corresponding
 * dimension of the view (minus padding). The image is then centered in the view.</td></tr>
 * <tr><td>centerInside</td><td>7</td><td>Scale the image uniformly (maintain the image's aspect ratio) so that both
 * dimensions (width and height) of the image will be equal to or less than the
 * corresponding dimension of the view (minus padding). The image is then centered in
 * the view.</td></tr>
 * <tr><td>fitCenter</td><td>3</td><td>Scale the image using {@link android.graphics.Matrix.ScaleToFit#CENTER}.</td></tr>
 * <tr><td>fitEnd</td><td>4</td><td>Scale the image using {@link android.graphics.Matrix.ScaleToFit#END}.</td></tr>
 * <tr><td>fitStart</td><td>2</td><td>Scale the image using {@link android.graphics.Matrix.ScaleToFit#START}.</td></tr>
 * <tr><td>fitXY</td><td>1</td><td>Scale the image using {@link android.graphics.Matrix.ScaleToFit#FILL}.</td></tr>
 * <tr><td>matrix</td><td>0</td><td>Scale using the image matrix when drawing. See
 * {@link android.widget.ImageView#setImageMatrix(Matrix)}.</td></tr>
 * </table>
 *
 * @attr name android:scaleType
 */

public static final int ImageView_scaleType = 1; // 0x1

/**
 * <p>
 * @attr description
 * Sets a drawable as the content of this ImageView.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:src
 */

public static final int ImageView_src = 0; // 0x0

/**
 * <p>
 * @attr description
 * The tinting color for the image. By default, the tint will blend using SRC_ATOP mode.
 * Please note that for compatibility reasons, this is NOT consistent with the default
 * SRC_IN tint mode used by {@link android.widget.ImageView#setImageTintList} and by
 * similar tint attributes on other views.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:tint
 */

public static final int ImageView_tint = 5; // 0x5

/**
 * <p>
 * @attr description
 * Blending mode used to apply the image tint.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 *
 * @attr name android:tintMode
 */

public static final int ImageView_tintMode = 9; // 0x9

/**
 * <p>
 * @attr description
 * Supply an identifier name for this view, to later retrieve it
 * with {@link android.view.View#findViewById View.findViewById()} or
 * {@link android.app.Activity#findViewById Activity.findViewById()}.
 * This must be a
 * resource reference; typically you set this using the
 * <code>@+</code> syntax to create a new ID resources.
 * For example: <code>android:id="@+id/my_id"</code> which
 * allows you to later retrieve the view
 * with <code>findViewById(R.id.my_id)</code>.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:id
 */

public static final int Include_id = 0; // 0x0

/**
 * <p>
 * @attr description
 * Controls the initial visibility of the view.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>gone</td><td>2</td><td>Completely hidden, as if the view had not been added.</td></tr>
 * <tr><td>invisible</td><td>1</td><td>Not displayed, but taken into account during layout (space is left for it).</td></tr>
 * <tr><td>visible</td><td>0</td><td>Visible on screen; the default value.</td></tr>
 * </table>
 *
 * @attr name android:visibility
 */

public static final int Include_visibility = 1; // 0x1

public static final int[] InputExtras;
static { InputExtras = new int[0]; }

/**
 * Use <code>input-method</code> as the root tag of the XML resource that
 * describes an
 * {@link android.view.inputmethod.InputMethod} service, which is
 * referenced from its
 * {@link android.view.inputmethod.InputMethod#SERVICE_META_DATA}
 * meta-data entry.  Described here are the attributes that can be
 * included in that tag.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #InputMethod_isDefault android:isDefault}</code></td><td>Set to true in all of the configurations for which this input
 * method should be considered an option as the default.</td></tr>
 * <tr><td><code>{@link #InputMethod_settingsActivity android:settingsActivity}</code></td><td>Component name of an activity that allows the user to modify
 * the settings for this service.</td></tr>
 * <tr><td><code>{@link #InputMethod_supportsSwitchingToNextInputMethod android:supportsSwitchingToNextInputMethod}</code></td><td>Set to true if this input method supports ways to switch to
 * a next input method (for example, a globe key.).</td></tr>
 * <tr><td><code>{@link #InputMethod_isVrOnly android:isVrOnly}</code></td><td>Specifies if an IME can only be used while a device is in VR mode or on a dedicated
 * device</td></tr>
 * </table>
 * @see #InputMethod_isDefault
 * @see #InputMethod_settingsActivity
 * @see #InputMethod_supportsSwitchingToNextInputMethod
 * @see #InputMethod_isVrOnly
 */

public static final int[] InputMethod;
static { InputMethod = new int[0]; }

/**
 * Attributes that can be used with a InputMethodService.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #InputMethodService_imeFullscreenBackground android:imeFullscreenBackground}</code></td><td>Background to use for entire input method when it is being
 * shown in fullscreen mode with the extract view, to ensure
 * that it completely covers the application.</td></tr>
 * <tr><td><code>{@link #InputMethodService_imeExtractEnterAnimation android:imeExtractEnterAnimation}</code></td><td>Animation to use when showing the fullscreen extract UI after
 * it had previously been hidden.</td></tr>
 * <tr><td><code>{@link #InputMethodService_imeExtractExitAnimation android:imeExtractExitAnimation}</code></td><td>Animation to use when hiding the fullscreen extract UI after
 * it had previously been shown.</td></tr>
 * </table>
 * @see #InputMethodService_imeFullscreenBackground
 * @see #InputMethodService_imeExtractEnterAnimation
 * @see #InputMethodService_imeExtractExitAnimation
 */

public static final int[] InputMethodService;
static { InputMethodService = new int[0]; }

/**
 * <p>
 * @attr description
 * Animation to use when showing the fullscreen extract UI after
 * it had previously been hidden.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:imeExtractEnterAnimation
 */

public static final int InputMethodService_imeExtractEnterAnimation = 1; // 0x1

/**
 * <p>
 * @attr description
 * Animation to use when hiding the fullscreen extract UI after
 * it had previously been shown.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:imeExtractExitAnimation
 */

public static final int InputMethodService_imeExtractExitAnimation = 2; // 0x2

/**
 * <p>
 * @attr description
 * Background to use for entire input method when it is being
 * shown in fullscreen mode with the extract view, to ensure
 * that it completely covers the application.  This allows,
 * for example, the candidate view to be hidden
 * while in fullscreen mode without having the application show through
 * behind it.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:imeFullscreenBackground
 */

public static final int InputMethodService_imeFullscreenBackground = 0; // 0x0

/**
 * This is the subtype of InputMethod. Subtype can describe locales (for example, en_US and
 * fr_FR) and modes (for example, voice and keyboard), and is used for IME switch. This
 * subtype allows the system to call the specified subtype of the IME directly.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #InputMethod_Subtype_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
 * <tr><td><code>{@link #InputMethod_Subtype_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
 * associated item.</td></tr>
 * <tr><td><code>{@link #InputMethod_Subtype_imeSubtypeLocale android:imeSubtypeLocale}</code></td><td>The locale of the subtype.</td></tr>
 * <tr><td><code>{@link #InputMethod_Subtype_imeSubtypeMode android:imeSubtypeMode}</code></td><td>The mode of the subtype.</td></tr>
 * <tr><td><code>{@link #InputMethod_Subtype_imeSubtypeExtraValue android:imeSubtypeExtraValue}</code></td><td>The extra value of the subtype.</td></tr>
 * <tr><td><code>{@link #InputMethod_Subtype_isAuxiliary android:isAuxiliary}</code></td><td>Set true if the subtype is auxiliary.</td></tr>
 * <tr><td><code>{@link #InputMethod_Subtype_overridesImplicitlyEnabledSubtype android:overridesImplicitlyEnabledSubtype}</code></td><td>Set true when this subtype should be selected by default if no other subtypes are
 * selected explicitly.</td></tr>
 * <tr><td><code>{@link #InputMethod_Subtype_subtypeId android:subtypeId}</code></td><td>The unique id for the subtype.</td></tr>
 * <tr><td><code>{@link #InputMethod_Subtype_isAsciiCapable android:isAsciiCapable}</code></td><td>Set to {@code true} if this subtype is ASCII capable.</td></tr>
 * <tr><td><code>{@link #InputMethod_Subtype_languageTag android:languageTag}</code></td><td>The BCP-47 Language Tag of the subtype.</td></tr>
 * </table>
 * @see #InputMethod_Subtype_label
 * @see #InputMethod_Subtype_icon
 * @see #InputMethod_Subtype_imeSubtypeLocale
 * @see #InputMethod_Subtype_imeSubtypeMode
 * @see #InputMethod_Subtype_imeSubtypeExtraValue
 * @see #InputMethod_Subtype_isAuxiliary
 * @see #InputMethod_Subtype_overridesImplicitlyEnabledSubtype
 * @see #InputMethod_Subtype_subtypeId
 * @see #InputMethod_Subtype_isAsciiCapable
 * @see #InputMethod_Subtype_languageTag
 */

public static final int[] InputMethod_Subtype;
static { InputMethod_Subtype = new int[0]; }

/**
 * <p>
 * @attr description
 * The icon of the subtype.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:icon
 */

public static final int InputMethod_Subtype_icon = 1; // 0x1

/**
 * <p>
 * @attr description
 * The extra value of the subtype. This string can be any string and will be passed to
 * the IME when the framework calls the IME with the subtype.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:imeSubtypeExtraValue
 */

public static final int InputMethod_Subtype_imeSubtypeExtraValue = 4; // 0x4

/**
 * <p>
 * @attr description
 * The locale of the subtype. This string should be a locale (for example en_US and fr_FR)
 * and will be passed to the IME when the framework calls the IME
 * with the subtype. This is also used by the framework to know the supported locales
 * of the IME.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:imeSubtypeLocale
 */

public static final int InputMethod_Subtype_imeSubtypeLocale = 2; // 0x2

/**
 * <p>
 * @attr description
 * The mode of the subtype. This string can be a mode (for example, voice and keyboard)
 * and this string will be passed to the IME when the framework calls the IME with the
 * subtype.  {@link android.view.inputmethod.InputMethodSubtype#getLocale()} returns the
 * value specified in this attribute.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:imeSubtypeMode
 */

public static final int InputMethod_Subtype_imeSubtypeMode = 3; // 0x3

/**
 * <p>
 * @attr description
 * Set to {@code true} if this subtype is ASCII capable. If the subtype is ASCII
 * capable, it should guarantee that the user can input ASCII characters with
 * this subtype. This is important because many password fields only allow
 * ASCII-characters.
 * <p>Note: In order to avoid some known system issues on
 * {@link android.os.Build.VERSION_CODES#P} and prior OSes, you may want to include
 * {@code "AsciiCapable"} in
 * {@link android.R.styleable#InputMethod_Subtype_imeSubtypeExtraValue} when you specify
 * {@code true} to this attribute.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:isAsciiCapable
 */

public static final int InputMethod_Subtype_isAsciiCapable = 8; // 0x8

/**
 * <p>
 * @attr description
 * Set true if the subtype is auxiliary.  An auxiliary subtype won't be shown in the
 * input method selection list in the settings app.
 * InputMethodManager#switchToLastInputMethod will ignore auxiliary subtypes when it
 * chooses a target subtype.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:isAuxiliary
 */

public static final int InputMethod_Subtype_isAuxiliary = 5; // 0x5

/**
 * <p>
 * @attr description
 * The name of the subtype.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:label
 */

public static final int InputMethod_Subtype_label = 0; // 0x0

/**
 * <p>
 * @attr description
 * The BCP-47 Language Tag of the subtype.  This replaces
 * {@link android.R.styleable#InputMethod_Subtype_imeSubtypeLocale}.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:languageTag
 */

public static final int InputMethod_Subtype_languageTag = 9; // 0x9

/**
 * <p>
 * @attr description
 * Set true when this subtype should be selected by default if no other subtypes are
 * selected explicitly. Note that a subtype with this parameter being true will
 * not be shown in the subtypes list.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:overridesImplicitlyEnabledSubtype
 */

public static final int InputMethod_Subtype_overridesImplicitlyEnabledSubtype = 6; // 0x6

/**
 * <p>
 * @attr description
 * The unique id for the subtype. The input method framework keeps track of enabled
 * subtypes by ID. When the IME package gets upgraded, enabled IDs will stay enabled even
 * if other attributes are different. If the ID is unspecified (by calling the other
 * constructor or 0. Arrays.hashCode(new Object[] {locale, mode, extraValue,
 * isAuxiliary, overridesImplicitlyEnabledSubtype}) will be used instead.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:subtypeId
 */

public static final int InputMethod_Subtype_subtypeId = 7; // 0x7

/**
 * <p>
 * @attr description
 * Set to true in all of the configurations for which this input
 * method should be considered an option as the default.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:isDefault
 */

public static final int InputMethod_isDefault = 0; // 0x0

/**
 * <p>
 * @attr description
 * Specifies if an IME can only be used while a device is in VR mode or on a dedicated
 * device
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:isVrOnly
 */

public static final int InputMethod_isVrOnly = 3; // 0x3

/**
 * <p>
 * @attr description
 * Component name of an activity that allows the user to modify
 * the settings for this service.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:settingsActivity
 */

public static final int InputMethod_settingsActivity = 1; // 0x1

/**
 * <p>
 * @attr description
 * Set to true if this input method supports ways to switch to
 * a next input method (for example, a globe key.). When this is true and
 * InputMethodManager#shouldOfferSwitchingToNextInputMethod() returns true,
 * the IME has to offer ways to invoke InputMethodManager#switchToNextInputMethod()
 * accordingly.
 * <p> Note that the system determines the most appropriate next input method
 * and subtype in order to provide the consistent user experience in switching
 * between IMEs and subtypes.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:supportsSwitchingToNextInputMethod
 */

public static final int InputMethod_supportsSwitchingToNextInputMethod = 2; // 0x2

/**
 * Drawable used to wrap and inset another drawable.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #InsetDrawable_visible android:visible}</code></td><td>Provides initial visibility state of the drawable; the default
 * value is false.</td></tr>
 * <tr><td><code>{@link #InsetDrawable_drawable android:drawable}</code></td><td>Reference to a drawable resource to use for the frame.</td></tr>
 * <tr><td><code>{@link #InsetDrawable_insetLeft android:insetLeft}</code></td><td></td></tr>
 * <tr><td><code>{@link #InsetDrawable_insetRight android:insetRight}</code></td><td></td></tr>
 * <tr><td><code>{@link #InsetDrawable_insetTop android:insetTop}</code></td><td></td></tr>
 * <tr><td><code>{@link #InsetDrawable_insetBottom android:insetBottom}</code></td><td></td></tr>
 * <tr><td><code>{@link #InsetDrawable_inset android:inset}</code></td><td></td></tr>
 * </table>
 * @see #InsetDrawable_visible
 * @see #InsetDrawable_drawable
 * @see #InsetDrawable_insetLeft
 * @see #InsetDrawable_insetRight
 * @see #InsetDrawable_insetTop
 * @see #InsetDrawable_insetBottom
 * @see #InsetDrawable_inset
 */

public static final int[] InsetDrawable;
static { InsetDrawable = new int[0]; }

/**
 * <p>
 * @attr description
 * Reference to a drawable resource to use for the frame.  If not
 * given, the drawable must be defined by the first child tag.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:drawable
 */

public static final int InsetDrawable_drawable = 1; // 0x1

/**
 * <p>This symbol is the offset where the {@link android.R.attr#inset}
 * attribute's value can be found in the {@link #InsetDrawable} array.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:inset
 */

public static final int InsetDrawable_inset = 6; // 0x6

/**
 * <p>This symbol is the offset where the {@link android.R.attr#insetBottom}
 * attribute's value can be found in the {@link #InsetDrawable} array.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:insetBottom
 */

public static final int InsetDrawable_insetBottom = 5; // 0x5

/**
 * <p>This symbol is the offset where the {@link android.R.attr#insetLeft}
 * attribute's value can be found in the {@link #InsetDrawable} array.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:insetLeft
 */

public static final int InsetDrawable_insetLeft = 2; // 0x2

/**
 * <p>This symbol is the offset where the {@link android.R.attr#insetRight}
 * attribute's value can be found in the {@link #InsetDrawable} array.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:insetRight
 */

public static final int InsetDrawable_insetRight = 3; // 0x3

/**
 * <p>This symbol is the offset where the {@link android.R.attr#insetTop}
 * attribute's value can be found in the {@link #InsetDrawable} array.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:insetTop
 */

public static final int InsetDrawable_insetTop = 4; // 0x4

/**
 * <p>
 * @attr description
 * Provides initial visibility state of the drawable; the default
 * value is false.  See
 * {@link android.graphics.drawable.Drawable#setVisible}.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:visible
 */

public static final int InsetDrawable_visible = 0; // 0x0

/**
 * Declaration of an {@link android.content.Intent} object in XML.  May
 * also include zero or more {@link #IntentCategory <category>} and
 * {@link #Extra <extra>} tags.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #Intent_targetPackage android:targetPackage}</code></td><td>The name of the application package that an Instrumentation object
 * will run against.</td></tr>
 * <tr><td><code>{@link #Intent_mimeType android:mimeType}</code></td><td>Specify a MIME type that is handled, as per
 * {@link android.content.IntentFilter#addDataType
 * IntentFilter.addDataType()}.</td></tr>
 * <tr><td><code>{@link #Intent_action android:action}</code></td><td>The action name to assign to the Intent, as per
 * {@link android.content.Intent#setAction Intent.setAction()}.</td></tr>
 * <tr><td><code>{@link #Intent_data android:data}</code></td><td>The data URI to assign to the Intent, as per
 * {@link android.content.Intent#setData Intent.setData()}.</td></tr>
 * <tr><td><code>{@link #Intent_targetClass android:targetClass}</code></td><td>The class part of the ComponentName to assign to the Intent, as per
 * {@link android.content.Intent#setComponent Intent.setComponent()}.</td></tr>
 * <tr><td><code>{@link #Intent_identifier android:identifier}</code></td><td>The identifier to assign to the intent, as per
 * {@link android.content.Intent#setIdentifier Intent.setIdentifier()}.</td></tr>
 * </table>
 * @see #Intent_targetPackage
 * @see #Intent_mimeType
 * @see #Intent_action
 * @see #Intent_data
 * @see #Intent_targetClass
 * @see #Intent_identifier
 */

public static final int[] Intent;
static { Intent = new int[0]; }

/**
 * A category to add to an Intent, as per
 * {@link android.content.Intent#addCategory Intent.addCategory()}.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #IntentCategory_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * </table>
 * @see #IntentCategory_name
 */

public static final int[] IntentCategory;
static { IntentCategory = new int[0]; }

/**
 * <p>
 * @attr description
 * Required name of the category.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int IntentCategory_name = 0; // 0x0

/**
 * <p>
 * @attr description
 * The action name to assign to the Intent, as per
 * {@link android.content.Intent#setAction Intent.setAction()}.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:action
 */

public static final int Intent_action = 2; // 0x2

/**
 * <p>
 * @attr description
 * The data URI to assign to the Intent, as per
 * {@link android.content.Intent#setData Intent.setData()}.
 * <p><em>Note: scheme and host name matching in the Android framework is
 * case-sensitive, unlike the formal RFC.  As a result,
 * URIs here should always be normalized to use lower case letters
 * for these elements (as well as other proper Uri normalization).</em></p>
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:data
 */

public static final int Intent_data = 3; // 0x3

/**
 * <p>
 * @attr description
 * The identifier to assign to the intent, as per
 * {@link android.content.Intent#setIdentifier Intent.setIdentifier()}.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:identifier
 */

public static final int Intent_identifier = 5; // 0x5

/**
 * <p>
 * @attr description
 * The MIME type name to assign to the Intent, as per
 * {@link android.content.Intent#setType Intent.setType()}.
 * <p><em>Note: MIME type matching in the Android framework is
 * case-sensitive, unlike formal RFC MIME types.  As a result,
 * MIME types here should always use lower case letters.</em></p>
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:mimeType
 */

public static final int Intent_mimeType = 1; // 0x1

/**
 * <p>
 * @attr description
 * The class part of the ComponentName to assign to the Intent, as per
 * {@link android.content.Intent#setComponent Intent.setComponent()}.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:targetClass
 */

public static final int Intent_targetClass = 4; // 0x4

/**
 * <p>
 * @attr description
 * The package part of the ComponentName to assign to the Intent, as per
 * {@link android.content.Intent#setComponent Intent.setComponent()}.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:targetPackage
 */

public static final int Intent_targetPackage = 0; // 0x0

/**
 * {@deprecated Copy this definition into your own application project.}
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #Keyboard_keyWidth android:keyWidth}</code></td><td>Default width of a key, in pixels or percentage of display width.</td></tr>
 * <tr><td><code>{@link #Keyboard_keyHeight android:keyHeight}</code></td><td>Default height of a key, in pixels or percentage of display width.</td></tr>
 * <tr><td><code>{@link #Keyboard_horizontalGap android:horizontalGap}</code></td><td>Default horizontal gap between keys.</td></tr>
 * <tr><td><code>{@link #Keyboard_verticalGap android:verticalGap}</code></td><td>Default vertical gap between rows of keys.</td></tr>
 * </table>
 * @see #Keyboard_keyWidth
 * @see #Keyboard_keyHeight
 * @see #Keyboard_horizontalGap
 * @see #Keyboard_verticalGap
 */

@Deprecated public static final int[] Keyboard;
static { Keyboard = new int[0]; }

/**
 * Use <code>keyboard-layouts</code> as the root tag of the XML resource that
 * describes a collection of keyboard layouts provided by an application.
 * Each keyboard layout is declared by a <code>keyboard-layout</code> tag
 * with these attributes.
 * The XML resource that contains the keyboard layouts must be referenced from its
 * {@link android.hardware.input.InputManager#META_DATA_KEYBOARD_LAYOUTS}
 * meta-data entry used with broadcast receivers for
 * {@link android.hardware.input.InputManager#ACTION_QUERY_KEYBOARD_LAYOUTS}.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #KeyboardLayout_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
 * <tr><td><code>{@link #KeyboardLayout_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * <tr><td><code>{@link #KeyboardLayout_keyboardLayout android:keyboardLayout}</code></td><td>The key character map file resource.</td></tr>
 * </table>
 * @see #KeyboardLayout_label
 * @see #KeyboardLayout_name
 * @see #KeyboardLayout_keyboardLayout
 */

public static final int[] KeyboardLayout;
static { KeyboardLayout = new int[0]; }

/**
 * <p>
 * @attr description
 * The key character map file resource.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:keyboardLayout
 */

public static final int KeyboardLayout_keyboardLayout = 2; // 0x2

/**
 * <p>
 * @attr description
 * The display label of the keyboard layout.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:label
 */

public static final int KeyboardLayout_label = 0; // 0x0

/**
 * <p>
 * @attr description
 * The name of the keyboard layout, must be unique in the receiver.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int KeyboardLayout_name = 1; // 0x1

/**
 * {@deprecated Copy this definition into your own application project.}
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #KeyboardView_shadowColor android:shadowColor}</code></td><td>Place a blurred shadow of text underneath the text, drawn with the
 * specified color.</td></tr>
 * <tr><td><code>{@link #KeyboardView_shadowRadius android:shadowRadius}</code></td><td>Blur radius of the text shadow.</td></tr>
 * <tr><td><code>{@link #KeyboardView_keyBackground android:keyBackground}</code></td><td>Image for the key.</td></tr>
 * <tr><td><code>{@link #KeyboardView_keyTextSize android:keyTextSize}</code></td><td>Size of the text for character keys.</td></tr>
 * <tr><td><code>{@link #KeyboardView_labelTextSize android:labelTextSize}</code></td><td>Size of the text for custom keys with some text and no icon.</td></tr>
 * <tr><td><code>{@link #KeyboardView_keyTextColor android:keyTextColor}</code></td><td>Color to use for the label in a key.</td></tr>
 * <tr><td><code>{@link #KeyboardView_keyPreviewLayout android:keyPreviewLayout}</code></td><td>Layout resource for key press feedback.</td></tr>
 * <tr><td><code>{@link #KeyboardView_keyPreviewOffset android:keyPreviewOffset}</code></td><td>Vertical offset of the key press feedback from the key.</td></tr>
 * <tr><td><code>{@link #KeyboardView_keyPreviewHeight android:keyPreviewHeight}</code></td><td>Height of the key press feedback popup.</td></tr>
 * <tr><td><code>{@link #KeyboardView_verticalCorrection android:verticalCorrection}</code></td><td>Amount to offset the touch Y coordinate by, for bias correction.</td></tr>
 * <tr><td><code>{@link #KeyboardView_popupLayout android:popupLayout}</code></td><td>Layout resource for popup keyboards.</td></tr>
 * </table>
 * @see #KeyboardView_shadowColor
 * @see #KeyboardView_shadowRadius
 * @see #KeyboardView_keyBackground
 * @see #KeyboardView_keyTextSize
 * @see #KeyboardView_labelTextSize
 * @see #KeyboardView_keyTextColor
 * @see #KeyboardView_keyPreviewLayout
 * @see #KeyboardView_keyPreviewOffset
 * @see #KeyboardView_keyPreviewHeight
 * @see #KeyboardView_verticalCorrection
 * @see #KeyboardView_popupLayout
 */

@Deprecated public static final int[] KeyboardView;
static { KeyboardView = new int[0]; }

/**
 * {@deprecated Copy this definition into your own application project.}
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #KeyboardViewPreviewState_state_long_pressable android:state_long_pressable}</code></td><td>State for {@link android.inputmethodservice.KeyboardView KeyboardView}
 * key preview background.</td></tr>
 * </table>
 * @see #KeyboardViewPreviewState_state_long_pressable
 */

@Deprecated public static final int[] KeyboardViewPreviewState;
static { KeyboardViewPreviewState = new int[0]; }

/**
 * <p>
 * @attr description
 * State for {@link android.inputmethodservice.KeyboardView KeyboardView}
 * key preview background.
 * {@deprecated Copy this definition into your own application project.}
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_long_pressable
 */

@Deprecated public static final int KeyboardViewPreviewState_state_long_pressable = 0; // 0x0

/**
 * <p>
 * @attr description
 * Image for the key. This image needs to be a StateListDrawable, with the following
 * possible states: normal, pressed, checkable, checkable+pressed, checkable+checked,
 * checkable+checked+pressed.
 * {@deprecated Copy this definition into your own application project.}
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:keyBackground
 */

@Deprecated public static final int KeyboardView_keyBackground = 2; // 0x2

/**
 * <p>
 * @attr description
 * Height of the key press feedback popup.
 * {@deprecated Copy this definition into your own application project.}
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:keyPreviewHeight
 */

@Deprecated public static final int KeyboardView_keyPreviewHeight = 8; // 0x8

/**
 * <p>
 * @attr description
 * Layout resource for key press feedback.
 * {@deprecated Copy this definition into your own application project.}
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:keyPreviewLayout
 */

@Deprecated public static final int KeyboardView_keyPreviewLayout = 6; // 0x6

/**
 * <p>
 * @attr description
 * Vertical offset of the key press feedback from the key.
 * {@deprecated Copy this definition into your own application project.}
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:keyPreviewOffset
 */

@Deprecated public static final int KeyboardView_keyPreviewOffset = 7; // 0x7

/**
 * <p>
 * @attr description
 * Color to use for the label in a key.
 * {@deprecated Copy this definition into your own application project.}
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:keyTextColor
 */

@Deprecated public static final int KeyboardView_keyTextColor = 5; // 0x5

/**
 * <p>
 * @attr description
 * Size of the text for character keys.
 * {@deprecated Copy this definition into your own application project.}
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:keyTextSize
 */

@Deprecated public static final int KeyboardView_keyTextSize = 3; // 0x3

/**
 * <p>
 * @attr description
 * Size of the text for custom keys with some text and no icon.
 * {@deprecated Copy this definition into your own application project.}
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:labelTextSize
 */

@Deprecated public static final int KeyboardView_labelTextSize = 4; // 0x4

/**
 * <p>
 * @attr description
 * Layout resource for popup keyboards.
 * {@deprecated Copy this definition into your own application project.}
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:popupLayout
 */

@Deprecated public static final int KeyboardView_popupLayout = 10; // 0xa

/**
 * <p>
 * @attr description
 * {@deprecated Copy this definition into your own application project.}
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:shadowColor
 */

@Deprecated public static final int KeyboardView_shadowColor = 0; // 0x0

/**
 * <p>
 * @attr description
 * {@deprecated Copy this definition into your own application project.}
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:shadowRadius
 */

@Deprecated public static final int KeyboardView_shadowRadius = 1; // 0x1

/**
 * <p>
 * @attr description
 * Amount to offset the touch Y coordinate by, for bias correction.
 * {@deprecated Copy this definition into your own application project.}
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:verticalCorrection
 */

@Deprecated public static final int KeyboardView_verticalCorrection = 9; // 0x9

/**
 * {@deprecated Copy this definition into your own application project.}
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #Keyboard_Key_codes android:codes}</code></td><td>The unicode value or comma-separated values that this key outputs.</td></tr>
 * <tr><td><code>{@link #Keyboard_Key_popupKeyboard android:popupKeyboard}</code></td><td>The XML keyboard layout of any popup keyboard.</td></tr>
 * <tr><td><code>{@link #Keyboard_Key_popupCharacters android:popupCharacters}</code></td><td>The characters to display in the popup keyboard.</td></tr>
 * <tr><td><code>{@link #Keyboard_Key_keyEdgeFlags android:keyEdgeFlags}</code></td><td>Key edge flags.</td></tr>
 * <tr><td><code>{@link #Keyboard_Key_isModifier android:isModifier}</code></td><td>Whether this is a modifier key such as Alt or Shift.</td></tr>
 * <tr><td><code>{@link #Keyboard_Key_isSticky android:isSticky}</code></td><td>Whether this is a toggle key.</td></tr>
 * <tr><td><code>{@link #Keyboard_Key_isRepeatable android:isRepeatable}</code></td><td>Whether long-pressing on this key will make it repeat.</td></tr>
 * <tr><td><code>{@link #Keyboard_Key_iconPreview android:iconPreview}</code></td><td>The icon to show in the popup preview.</td></tr>
 * <tr><td><code>{@link #Keyboard_Key_keyOutputText android:keyOutputText}</code></td><td>The string of characters to output when this key is pressed.</td></tr>
 * <tr><td><code>{@link #Keyboard_Key_keyLabel android:keyLabel}</code></td><td>The label to display on the key.</td></tr>
 * <tr><td><code>{@link #Keyboard_Key_keyIcon android:keyIcon}</code></td><td>The icon to display on the key instead of the label.</td></tr>
 * <tr><td><code>{@link #Keyboard_Key_keyboardMode android:keyboardMode}</code></td><td>Mode of the keyboard.</td></tr>
 * </table>
 * @see #Keyboard_Key_codes
 * @see #Keyboard_Key_popupKeyboard
 * @see #Keyboard_Key_popupCharacters
 * @see #Keyboard_Key_keyEdgeFlags
 * @see #Keyboard_Key_isModifier
 * @see #Keyboard_Key_isSticky
 * @see #Keyboard_Key_isRepeatable
 * @see #Keyboard_Key_iconPreview
 * @see #Keyboard_Key_keyOutputText
 * @see #Keyboard_Key_keyLabel
 * @see #Keyboard_Key_keyIcon
 * @see #Keyboard_Key_keyboardMode
 */

@Deprecated public static final int[] Keyboard_Key;
static { Keyboard_Key = new int[0]; }

/**
 * <p>
 * @attr description
 * The unicode value or comma-separated values that this key outputs.
 * {@deprecated Copy this definition into your own application project.}
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:codes
 */

@Deprecated public static final int Keyboard_Key_codes = 0; // 0x0

/**
 * <p>
 * @attr description
 * The icon to show in the popup preview.
 * {@deprecated Copy this definition into your own application project.}
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:iconPreview
 */

@Deprecated public static final int Keyboard_Key_iconPreview = 7; // 0x7

/**
 * <p>
 * @attr description
 * Whether this is a modifier key such as Alt or Shift.
 * {@deprecated Copy this definition into your own application project.}
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:isModifier
 */

@Deprecated public static final int Keyboard_Key_isModifier = 4; // 0x4

/**
 * <p>
 * @attr description
 * Whether long-pressing on this key will make it repeat.
 * {@deprecated Copy this definition into your own application project.}
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:isRepeatable
 */

@Deprecated public static final int Keyboard_Key_isRepeatable = 6; // 0x6

/**
 * <p>
 * @attr description
 * Whether this is a toggle key.
 * {@deprecated Copy this definition into your own application project.}
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:isSticky
 */

@Deprecated public static final int Keyboard_Key_isSticky = 5; // 0x5

/**
 * <p>
 * @attr description
 * Key edge flags.
 * {@deprecated Copy this definition into your own application project.}
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>left</td><td>1</td><td>Key is anchored to the left of the keyboard.
 * {@deprecated Copy this definition into your own application project.}</td></tr>
 * <tr><td>right</td><td>2</td><td>Key is anchored to the right of the keyboard.
 * {@deprecated Copy this definition into your own application project.}</td></tr>
 * </table>
 *
 * @attr name android:keyEdgeFlags
 */

@Deprecated public static final int Keyboard_Key_keyEdgeFlags = 3; // 0x3

/**
 * <p>
 * @attr description
 * The icon to display on the key instead of the label.
 * {@deprecated Copy this definition into your own application project.}
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:keyIcon
 */

@Deprecated public static final int Keyboard_Key_keyIcon = 10; // 0xa

/**
 * <p>
 * @attr description
 * The label to display on the key.
 * {@deprecated Copy this definition into your own application project.}
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:keyLabel
 */

@Deprecated public static final int Keyboard_Key_keyLabel = 9; // 0x9

/**
 * <p>
 * @attr description
 * The string of characters to output when this key is pressed.
 * {@deprecated Copy this definition into your own application project.}
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:keyOutputText
 */

@Deprecated public static final int Keyboard_Key_keyOutputText = 8; // 0x8

/**
 * <p>
 * @attr description
 * Mode of the keyboard. If the mode doesn't match the
 * requested keyboard mode, the key will be skipped.
 * {@deprecated Copy this definition into your own application project.}
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:keyboardMode
 */

@Deprecated public static final int Keyboard_Key_keyboardMode = 11; // 0xb

/**
 * <p>
 * @attr description
 * The characters to display in the popup keyboard.
 * {@deprecated Copy this definition into your own application project.}
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:popupCharacters
 */

@Deprecated public static final int Keyboard_Key_popupCharacters = 2; // 0x2

/**
 * <p>
 * @attr description
 * The XML keyboard layout of any popup keyboard.
 * {@deprecated Copy this definition into your own application project.}
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:popupKeyboard
 */

@Deprecated public static final int Keyboard_Key_popupKeyboard = 1; // 0x1

/**
 * {@deprecated Copy this definition into your own application project.}
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #Keyboard_Row_rowEdgeFlags android:rowEdgeFlags}</code></td><td>Row edge flags.</td></tr>
 * <tr><td><code>{@link #Keyboard_Row_keyboardMode android:keyboardMode}</code></td><td>Mode of the keyboard.</td></tr>
 * </table>
 * @see #Keyboard_Row_rowEdgeFlags
 * @see #Keyboard_Row_keyboardMode
 */

@Deprecated public static final int[] Keyboard_Row;
static { Keyboard_Row = new int[0]; }

/**
 * <p>
 * @attr description
 * Mode of the keyboard. If the mode doesn't match the
 * requested keyboard mode, the row will be skipped.
 * {@deprecated Copy this definition into your own application project.}
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:keyboardMode
 */

@Deprecated public static final int Keyboard_Row_keyboardMode = 1; // 0x1

/**
 * <p>
 * @attr description
 * Row edge flags.
 * {@deprecated Copy this definition into your own application project.}
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>8</td><td>Row is anchored to the bottom of the keyboard.
 * {@deprecated Copy this definition into your own application project.}</td></tr>
 * <tr><td>top</td><td>4</td><td>Row is anchored to the top of the keyboard.
 * {@deprecated Copy this definition into your own application project.}</td></tr>
 * </table>
 *
 * @attr name android:rowEdgeFlags
 */

@Deprecated public static final int Keyboard_Row_rowEdgeFlags = 0; // 0x0

/**
 * <p>
 * @attr description
 * Default horizontal gap between keys.
 * {@deprecated Copy this definition into your own application project.}
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:horizontalGap
 */

@Deprecated public static final int Keyboard_horizontalGap = 2; // 0x2

/**
 * <p>
 * @attr description
 * Default height of a key, in pixels or percentage of display width.
 * {@deprecated Copy this definition into your own application project.}
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:keyHeight
 */

@Deprecated public static final int Keyboard_keyHeight = 1; // 0x1

/**
 * <p>
 * @attr description
 * Default width of a key, in pixels or percentage of display width.
 * {@deprecated Copy this definition into your own application project.}
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:keyWidth
 */

@Deprecated public static final int Keyboard_keyWidth = 0; // 0x0

/**
 * <p>
 * @attr description
 * Default vertical gap between rows of keys.
 * {@deprecated Copy this definition into your own application project.}
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:verticalGap
 */

@Deprecated public static final int Keyboard_verticalGap = 3; // 0x3

/**
 * Attributes that can be used with a Keyframe.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #Keyframe_value android:value}</code></td><td>Concrete value to assign to this piece of named meta-data.</td></tr>
 * <tr><td><code>{@link #Keyframe_interpolator android:interpolator}</code></td><td>Sets the acceleration curve for the indeterminate animation.</td></tr>
 * <tr><td><code>{@link #Keyframe_valueType android:valueType}</code></td><td>The type of valueFrom and valueTo.</td></tr>
 * <tr><td><code>{@link #Keyframe_fraction android:fraction}</code></td><td></td></tr>
 * </table>
 * @see #Keyframe_value
 * @see #Keyframe_interpolator
 * @see #Keyframe_valueType
 * @see #Keyframe_fraction
 */

public static final int[] Keyframe;
static { Keyframe = new int[0]; }

/**
 * <p>This symbol is the offset where the {@link android.R.attr#fraction}
 * attribute's value can be found in the {@link #Keyframe} array.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:fraction
 */

public static final int Keyframe_fraction = 3; // 0x3

/**
 * <p>
 * @attr description
 * Defines a per-interval interpolator for this keyframe. This interpolator will be used
 * to interpolate between this keyframe and the previous keyframe.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:interpolator
 */

public static final int Keyframe_interpolator = 1; // 0x1

/**
 * <p>
 * @attr description
 * Concrete value to assign to this piece of named meta-data.
 * The data can later be retrieved from the meta data Bundle
 * through {@link android.os.Bundle#getString Bundle.getString},
 * {@link android.os.Bundle#getInt Bundle.getInt},
 * {@link android.os.Bundle#getBoolean Bundle.getBoolean},
 * or {@link android.os.Bundle#getFloat Bundle.getFloat} depending
 * on the type used here.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:value
 */

public static final int Keyframe_value = 0; // 0x0

/**
 * <p>
 * @attr description
 * The type of valueFrom and valueTo.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>colorType</td><td>3</td><td>values are colors, which are integers starting with "#".</td></tr>
 * <tr><td>floatType</td><td>0</td><td>The given values are floats. This is the default value if valueType is
 * unspecified. Note that if any value attribute has a color value
 * (beginning with "#"), then this attribute is ignored and the color values are
 * interpreted as integers.</td></tr>
 * <tr><td>intType</td><td>1</td><td>values are integers.</td></tr>
 * <tr><td>pathType</td><td>2</td><td>values are paths defined as strings.
 * This type is used for path morphing in AnimatedVectorDrawable.</td></tr>
 * </table>
 *
 * @attr name android:valueType
 */

public static final int Keyframe_valueType = 2; // 0x2

/**
 * Attributes that can be used with a KeyguardGlowStripView.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * </table>
 */

public static final int[] KeyguardGlowStripView;
static { KeyguardGlowStripView = new int[0]; }

/**
 * Drawable used to render several drawables stacked on top of each other.
 * Each child drawable can be controlled individually.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #LayerDrawable_paddingLeft android:paddingLeft}</code></td><td>Sets the padding, in pixels, of the left edge; see {@link android.R.attr#padding}.</td></tr>
 * <tr><td><code>{@link #LayerDrawable_paddingTop android:paddingTop}</code></td><td>Sets the padding, in pixels, of the top edge; see {@link android.R.attr#padding}.</td></tr>
 * <tr><td><code>{@link #LayerDrawable_paddingRight android:paddingRight}</code></td><td>Sets the padding, in pixels, of the right edge; see {@link android.R.attr#padding}.</td></tr>
 * <tr><td><code>{@link #LayerDrawable_paddingBottom android:paddingBottom}</code></td><td>Sets the padding, in pixels, of the bottom edge; see {@link android.R.attr#padding}.</td></tr>
 * <tr><td><code>{@link #LayerDrawable_opacity android:opacity}</code></td><td>Indicates the opacity of the layer.</td></tr>
 * <tr><td><code>{@link #LayerDrawable_paddingStart android:paddingStart}</code></td><td>Sets the padding, in pixels, of the start edge; see {@link android.R.attr#padding}.</td></tr>
 * <tr><td><code>{@link #LayerDrawable_paddingEnd android:paddingEnd}</code></td><td>Sets the padding, in pixels, of the end edge; see {@link android.R.attr#padding}.</td></tr>
 * <tr><td><code>{@link #LayerDrawable_autoMirrored android:autoMirrored}</code></td><td>Indicates if the drawable needs to be mirrored when its layout direction is
 * RTL (right-to-left).</td></tr>
 * <tr><td><code>{@link #LayerDrawable_paddingMode android:paddingMode}</code></td><td>Indicates how layer padding should affect the bounds of subsequent layers.</td></tr>
 * </table>
 * @see #LayerDrawable_paddingLeft
 * @see #LayerDrawable_paddingTop
 * @see #LayerDrawable_paddingRight
 * @see #LayerDrawable_paddingBottom
 * @see #LayerDrawable_opacity
 * @see #LayerDrawable_paddingStart
 * @see #LayerDrawable_paddingEnd
 * @see #LayerDrawable_autoMirrored
 * @see #LayerDrawable_paddingMode
 */

public static final int[] LayerDrawable;
static { LayerDrawable = new int[0]; }

/**
 * Describes an item (or child) of a LayerDrawable.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #LayerDrawableItem_gravity android:gravity}</code></td><td>Specifies how an object should position its content, on both the X and Y axes,
 * within its own bounds.</td></tr>
 * <tr><td><code>{@link #LayerDrawableItem_id android:id}</code></td><td>Supply an identifier name for this view, to later retrieve it
 * with {@link android.view.View#findViewById View.findViewById()} or
 * {@link android.app.Activity#findViewById Activity.findViewById()}.</td></tr>
 * <tr><td><code>{@link #LayerDrawableItem_height android:height}</code></td><td>Makes the TextView be exactly this tall.</td></tr>
 * <tr><td><code>{@link #LayerDrawableItem_width android:width}</code></td><td>Makes the TextView be exactly this wide.</td></tr>
 * <tr><td><code>{@link #LayerDrawableItem_drawable android:drawable}</code></td><td>Reference to a drawable resource to use for the frame.</td></tr>
 * <tr><td><code>{@link #LayerDrawableItem_left android:left}</code></td><td>Amount of left padding inside the gradient shape.</td></tr>
 * <tr><td><code>{@link #LayerDrawableItem_top android:top}</code></td><td>Amount of top padding inside the gradient shape.</td></tr>
 * <tr><td><code>{@link #LayerDrawableItem_right android:right}</code></td><td>Amount of right padding inside the gradient shape.</td></tr>
 * <tr><td><code>{@link #LayerDrawableItem_bottom android:bottom}</code></td><td>Amount of bottom padding inside the gradient shape.</td></tr>
 * <tr><td><code>{@link #LayerDrawableItem_start android:start}</code></td><td>Start inset to apply to the layer.</td></tr>
 * <tr><td><code>{@link #LayerDrawableItem_end android:end}</code></td><td>End inset to apply to the layer.</td></tr>
 * </table>
 * @see #LayerDrawableItem_gravity
 * @see #LayerDrawableItem_id
 * @see #LayerDrawableItem_height
 * @see #LayerDrawableItem_width
 * @see #LayerDrawableItem_drawable
 * @see #LayerDrawableItem_left
 * @see #LayerDrawableItem_top
 * @see #LayerDrawableItem_right
 * @see #LayerDrawableItem_bottom
 * @see #LayerDrawableItem_start
 * @see #LayerDrawableItem_end
 */

public static final int[] LayerDrawableItem;
static { LayerDrawableItem = new int[0]; }

/**
 * <p>
 * @attr description
 * Bottom inset to apply to the layer.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:bottom
 */

public static final int LayerDrawableItem_bottom = 8; // 0x8

/**
 * <p>
 * @attr description
 * Drawable used to render the layer.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:drawable
 */

public static final int LayerDrawableItem_drawable = 4; // 0x4

/**
 * <p>
 * @attr description
 * End inset to apply to the layer. Overrides {@code left} or
 * {@code right} depending on layout direction.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:end
 */

public static final int LayerDrawableItem_end = 10; // 0xa

/**
 * <p>
 * @attr description
 * Gravity used to align the layer within its container. If no value
 * is specified, the default behavior depends on whether an explicit
 * width or height has been set, If no dimension is set, gravity in
 * that direction defaults to {@code fill_horizontal} or
 * {@code fill_vertical}; otherwise, it defaults to {@code left} or
 * {@code top}.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
 * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
 * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
 * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
 * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the horizontal gravity: a left gravity will clip the right
 * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
 * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the vertical gravity: a top gravity will clip the bottom
 * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
 * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
 * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
 * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
 * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
 * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
 * </table>
 *
 * @attr name android:gravity
 */

public static final int LayerDrawableItem_gravity = 0; // 0x0

/**
 * <p>
 * @attr description
 * Height of the layer. Defaults to the layer's intrinsic height.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:height
 */

public static final int LayerDrawableItem_height = 2; // 0x2

/**
 * <p>
 * @attr description
 * Identifier of the layer. This can be used to retrieve the layer
 * from a drawable container.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:id
 */

public static final int LayerDrawableItem_id = 1; // 0x1

/**
 * <p>
 * @attr description
 * Left inset to apply to the layer.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:left
 */

public static final int LayerDrawableItem_left = 5; // 0x5

/**
 * <p>
 * @attr description
 * Right inset to apply to the layer.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:right
 */

public static final int LayerDrawableItem_right = 7; // 0x7

/**
 * <p>
 * @attr description
 * Start inset to apply to the layer. Overrides {@code left} or
 * {@code right} depending on layout direction.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:start
 */

public static final int LayerDrawableItem_start = 9; // 0x9

/**
 * <p>
 * @attr description
 * Top inset to apply to the layer.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:top
 */

public static final int LayerDrawableItem_top = 6; // 0x6

/**
 * <p>
 * @attr description
 * Width of the layer. Defaults to the layer's intrinsic width.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:width
 */

public static final int LayerDrawableItem_width = 3; // 0x3

/**
 * <p>
 * @attr description
 * Indicates if the drawable needs to be mirrored when its layout direction is
 * RTL (right-to-left).
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:autoMirrored
 */

public static final int LayerDrawable_autoMirrored = 7; // 0x7

/**
 * <p>
 * @attr description
 * Indicates the opacity of the layer. This can be useful to allow the
 * system to enable drawing optimizations. The default value is
 * translucent.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>opaque</td><td>ffffffff</td><td>Indicates that the layer is opaque and contains no transparent
 * nor translucent pixels.</td></tr>
 * <tr><td>translucent</td><td>fffffffd</td><td>The layer has translucent pixels.</td></tr>
 * <tr><td>transparent</td><td>fffffffe</td><td>The layer is completely transparent (no pixel will be drawn).</td></tr>
 * </table>
 *
 * @attr name android:opacity
 */

public static final int LayerDrawable_opacity = 4; // 0x4

/**
 * <p>
 * @attr description
 * Explicit bottom padding. Overrides child padding.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:paddingBottom
 */

public static final int LayerDrawable_paddingBottom = 3; // 0x3

/**
 * <p>
 * @attr description
 * Explicit end padding. Overrides child padding. Takes precedence
 * over absolute padding (for example, right when layout direction is LTR).
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:paddingEnd
 */

public static final int LayerDrawable_paddingEnd = 6; // 0x6

/**
 * <p>
 * @attr description
 * Explicit left padding. Overrides child padding.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:paddingLeft
 */

public static final int LayerDrawable_paddingLeft = 0; // 0x0

/**
 * <p>
 * @attr description
 * Indicates how layer padding should affect the bounds of subsequent layers.
 * The default padding mode value is nest.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>nest</td><td>0</td><td>Nest each layer inside the padding of the previous layer.</td></tr>
 * <tr><td>stack</td><td>1</td><td>Stack each layer directly atop the previous layer.</td></tr>
 * </table>
 *
 * @attr name android:paddingMode
 */

public static final int LayerDrawable_paddingMode = 8; // 0x8

/**
 * <p>
 * @attr description
 * Explicit right padding. Overrides child padding.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:paddingRight
 */

public static final int LayerDrawable_paddingRight = 2; // 0x2

/**
 * <p>
 * @attr description
 * Explicit start padding. Overrides child padding. Takes precedence
 * over absolute padding (for example, left when layout direction is LTR).
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:paddingStart
 */

public static final int LayerDrawable_paddingStart = 5; // 0x5

/**
 * <p>
 * @attr description
 * Explicit top padding. Overrides child padding.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:paddingTop
 */

public static final int LayerDrawable_paddingTop = 1; // 0x1

/**
 * Attributes that can be used with a LayoutAnimation.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #LayoutAnimation_interpolator android:interpolator}</code></td><td>Sets the acceleration curve for the indeterminate animation.</td></tr>
 * <tr><td><code>{@link #LayoutAnimation_delay android:delay}</code></td><td>Fraction of the animation duration used to delay the beginning of
 * the animation of each child.</td></tr>
 * <tr><td><code>{@link #LayoutAnimation_animation android:animation}</code></td><td>Animation to use on each child.</td></tr>
 * <tr><td><code>{@link #LayoutAnimation_animationOrder android:animationOrder}</code></td><td>The order in which the animations will be started.</td></tr>
 * </table>
 * @see #LayoutAnimation_interpolator
 * @see #LayoutAnimation_delay
 * @see #LayoutAnimation_animation
 * @see #LayoutAnimation_animationOrder
 */

public static final int[] LayoutAnimation;
static { LayoutAnimation = new int[0]; }

/**
 * <p>
 * @attr description
 * Animation to use on each child.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:animation
 */

public static final int LayoutAnimation_animation = 2; // 0x2

/**
 * <p>
 * @attr description
 * The order in which the animations will be started.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>normal</td><td>0</td><td>Animations are started in the natural order.</td></tr>
 * <tr><td>random</td><td>2</td><td>Animations are started randomly.</td></tr>
 * <tr><td>reverse</td><td>1</td><td>Animations are started in the reverse order.</td></tr>
 * </table>
 *
 * @attr name android:animationOrder
 */

public static final int LayoutAnimation_animationOrder = 3; // 0x3

/**
 * <p>
 * @attr description
 * Fraction of the animation duration used to delay the beginning of
 * the animation of each child.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:delay
 */

public static final int LayoutAnimation_delay = 1; // 0x1

/**
 * <p>
 * @attr description
 * Interpolator used to interpolate the delay between the start of
 * each animation.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:interpolator
 */

public static final int LayoutAnimation_interpolator = 0; // 0x0

/**
 * Attributes that can be used with a LevelListDrawableItem.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #LevelListDrawableItem_drawable android:drawable}</code></td><td>Reference to a drawable resource to use for the frame.</td></tr>
 * <tr><td><code>{@link #LevelListDrawableItem_minLevel android:minLevel}</code></td><td>The minimum level allowed for this item.</td></tr>
 * <tr><td><code>{@link #LevelListDrawableItem_maxLevel android:maxLevel}</code></td><td>The maximum level allowed for this item.</td></tr>
 * </table>
 * @see #LevelListDrawableItem_drawable
 * @see #LevelListDrawableItem_minLevel
 * @see #LevelListDrawableItem_maxLevel
 */

public static final int[] LevelListDrawableItem;
static { LevelListDrawableItem = new int[0]; }

/**
 * <p>
 * @attr description
 * Reference to a drawable resource to use for the frame.  If not
 * given, the drawable must be defined by the first child tag.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:drawable
 */

public static final int LevelListDrawableItem_drawable = 0; // 0x0

/**
 * <p>
 * @attr description
 * The maximum level allowed for this item.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:maxLevel
 */

public static final int LevelListDrawableItem_maxLevel = 2; // 0x2

/**
 * <p>
 * @attr description
 * The minimum level allowed for this item.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:minLevel
 */

public static final int LevelListDrawableItem_minLevel = 1; // 0x1

/**
 * <p>
 * @attr description
 * Alpha value of the ambient shadow projected by elevated views, between 0 and 1.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:ambientShadowAlpha
 */

public static final int Lighting_ambientShadowAlpha = 0; // 0x0

/**
 * <p>
 * @attr description
 * Alpha value of the spot shadow projected by elevated views, between 0 and 1.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:spotShadowAlpha
 */

public static final int Lighting_spotShadowAlpha = 1; // 0x1

/**
 * Attributes that can be used with a LinearLayout.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #LinearLayout_gravity android:gravity}</code></td><td>Specifies how an object should position its content, on both the X and Y axes,
 * within its own bounds.</td></tr>
 * <tr><td><code>{@link #LinearLayout_orientation android:orientation}</code></td><td>Standard orientation constant.</td></tr>
 * <tr><td><code>{@link #LinearLayout_baselineAligned android:baselineAligned}</code></td><td>When set to false, prevents the layout from aligning its children's
 * baselines.</td></tr>
 * <tr><td><code>{@link #LinearLayout_baselineAlignedChildIndex android:baselineAlignedChildIndex}</code></td><td>When a linear layout is part of another layout that is baseline
 * aligned, it can specify which of its children to baseline align to
 * (that is, which child TextView).</td></tr>
 * <tr><td><code>{@link #LinearLayout_weightSum android:weightSum}</code></td><td>Defines the maximum weight sum.</td></tr>
 * <tr><td><code>{@link #LinearLayout_divider android:divider}</code></td><td>Drawable or color to draw between list items.</td></tr>
 * <tr><td><code>{@link #LinearLayout_measureWithLargestChild android:measureWithLargestChild}</code></td><td>When set to true, all children with a weight will be considered having
 * the minimum size of the largest child.</td></tr>
 * <tr><td><code>{@link #LinearLayout_showDividers android:showDividers}</code></td><td>Setting for which dividers to show.</td></tr>
 * <tr><td><code>{@link #LinearLayout_dividerPadding android:dividerPadding}</code></td><td>Size of padding on either end of a divider.</td></tr>
 * </table>
 * @see #LinearLayout_gravity
 * @see #LinearLayout_orientation
 * @see #LinearLayout_baselineAligned
 * @see #LinearLayout_baselineAlignedChildIndex
 * @see #LinearLayout_weightSum
 * @see #LinearLayout_divider
 * @see #LinearLayout_measureWithLargestChild
 * @see #LinearLayout_showDividers
 * @see #LinearLayout_dividerPadding
 */

public static final int[] LinearLayout;
static { LinearLayout = new int[0]; }

/**
 * Attributes that can be used with a LinearLayout_Layout.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #LinearLayout_Layout_layout_gravity android:layout_gravity}</code></td><td>Standard gravity constant that a child supplies to its parent.</td></tr>
 * <tr><td><code>{@link #LinearLayout_Layout_layout_width android:layout_width}</code></td><td>Specifies the basic width of the view.</td></tr>
 * <tr><td><code>{@link #LinearLayout_Layout_layout_height android:layout_height}</code></td><td>Specifies the basic height of the view.</td></tr>
 * <tr><td><code>{@link #LinearLayout_Layout_layout_weight android:layout_weight}</code></td><td>Indicates how much of the extra space in the LinearLayout is
 * allocated to the view associated with these LayoutParams.</td></tr>
 * </table>
 * @see #LinearLayout_Layout_layout_gravity
 * @see #LinearLayout_Layout_layout_width
 * @see #LinearLayout_Layout_layout_height
 * @see #LinearLayout_Layout_layout_weight
 */

public static final int[] LinearLayout_Layout;
static { LinearLayout_Layout = new int[0]; }

/**
 * <p>
 * @attr description
 * Gravity specifies how a component should be placed in its group of cells.
 * The default is {@link android.view.Gravity#TOP}.
 * See {@link android.widget.LinearLayout#setGravity(int)}.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
 * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
 * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
 * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
 * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the horizontal gravity: a left gravity will clip the right
 * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
 * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the vertical gravity: a top gravity will clip the bottom
 * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
 * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
 * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
 * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
 * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
 * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
 * </table>
 *
 * @attr name android:layout_gravity
 */

public static final int LinearLayout_Layout_layout_gravity = 0; // 0x0

/**
 * <p>
 * @attr description
 * Specifies the basic height of the view.  This is a required attribute
 * for any view inside of a containing layout manager.  Its value may
 * be a dimension (such as "12dip") for a constant height or one of
 * the special constants.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>fill_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
 * This constant is deprecated starting from API Level 8 and
 * is replaced by {@code match_parent}.</td></tr>
 * <tr><td>match_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
 * Introduced in API Level 8.</td></tr>
 * <tr><td>wrap_content</td><td>fffffffe</td><td>The view should be only big enough to enclose its content (plus padding).</td></tr>
 * </table>
 *
 * @attr name android:layout_height
 */

public static final int LinearLayout_Layout_layout_height = 2; // 0x2

/**
 * <p>
 * @attr description
 * Indicates how much of the extra space in the LinearLayout is
 * allocated to the view associated with these LayoutParams. Specify
 * 0 if the view should not be stretched. Otherwise the extra pixels
 * will be pro-rated among all views whose weight is greater than 0.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:layout_weight
 */

public static final int LinearLayout_Layout_layout_weight = 3; // 0x3

/**
 * <p>
 * @attr description
 * Specifies the basic width of the view.  This is a required attribute
 * for any view inside of a containing layout manager.  Its value may
 * be a dimension (such as "12dip") for a constant width or one of
 * the special constants.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>fill_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
 * This constant is deprecated starting from API Level 8 and
 * is replaced by {@code match_parent}.</td></tr>
 * <tr><td>match_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
 * Introduced in API Level 8.</td></tr>
 * <tr><td>wrap_content</td><td>fffffffe</td><td>The view should be only big enough to enclose its content (plus padding).</td></tr>
 * </table>
 *
 * @attr name android:layout_width
 */

public static final int LinearLayout_Layout_layout_width = 1; // 0x1

/**
 * <p>
 * @attr description
 * When set to false, prevents the layout from aligning its children's
 * baselines. This attribute is particularly useful when the children
 * use different values for gravity. The default value is true.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:baselineAligned
 */

public static final int LinearLayout_baselineAligned = 2; // 0x2

/**
 * <p>
 * @attr description
 * When a linear layout is part of another layout that is baseline
 * aligned, it can specify which of its children to baseline align to
 * (that is, which child TextView).
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:baselineAlignedChildIndex
 */

public static final int LinearLayout_baselineAlignedChildIndex = 3; // 0x3

/**
 * <p>
 * @attr description
 * Drawable to use as a vertical divider between buttons.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:divider
 */

public static final int LinearLayout_divider = 5; // 0x5

/**
 * <p>
 * @attr description
 * Size of padding on either end of a divider.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:dividerPadding
 */

public static final int LinearLayout_dividerPadding = 8; // 0x8

/**
 * <p>
 * @attr description
 * Specifies how an object should position its content, on both the X and Y axes,
 * within its own bounds.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
 * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
 * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
 * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
 * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the horizontal gravity: a left gravity will clip the right
 * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
 * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the vertical gravity: a top gravity will clip the bottom
 * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
 * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
 * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
 * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
 * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
 * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
 * </table>
 *
 * @attr name android:gravity
 */

public static final int LinearLayout_gravity = 0; // 0x0

/**
 * <p>
 * @attr description
 * When set to true, all children with a weight will be considered having
 * the minimum size of the largest child. If false, all children are
 * measured normally.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:measureWithLargestChild
 */

public static final int LinearLayout_measureWithLargestChild = 6; // 0x6

/**
 * <p>
 * @attr description
 * Should the layout be a column or a row?  Use "horizontal"
 * for a row, "vertical" for a column.  The default is
 * horizontal.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>horizontal</td><td>0</td><td>Defines an horizontal widget.</td></tr>
 * <tr><td>vertical</td><td>1</td><td>Defines a vertical widget.</td></tr>
 * </table>
 *
 * @attr name android:orientation
 */

public static final int LinearLayout_orientation = 1; // 0x1

/**
 * <p>
 * @attr description
 * Setting for which dividers to show.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>beginning</td><td>1</td><td></td></tr>
 * <tr><td>end</td><td>4</td><td></td></tr>
 * <tr><td>middle</td><td>2</td><td></td></tr>
 * <tr><td>none</td><td>0</td><td></td></tr>
 * </table>
 *
 * @attr name android:showDividers
 */

public static final int LinearLayout_showDividers = 7; // 0x7

/**
 * <p>
 * @attr description
 * Defines the maximum weight sum. If unspecified, the sum is computed
 * by adding the layout_weight of all of the children. This can be
 * used for instance to give a single child 50% of the total available
 * space by giving it a layout_weight of 0.5 and setting the weightSum
 * to 1.0.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:weightSum
 */

public static final int LinearLayout_weightSum = 4; // 0x4

/**
 * Attributes that can be used with a ListPopupWindow.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #ListPopupWindow_dropDownHorizontalOffset android:dropDownHorizontalOffset}</code></td><td>Amount of pixels by which the drop down should be offset horizontally.</td></tr>
 * <tr><td><code>{@link #ListPopupWindow_dropDownVerticalOffset android:dropDownVerticalOffset}</code></td><td>Amount of pixels by which the drop down should be offset vertically.</td></tr>
 * </table>
 * @see #ListPopupWindow_dropDownHorizontalOffset
 * @see #ListPopupWindow_dropDownVerticalOffset
 */

public static final int[] ListPopupWindow;
static { ListPopupWindow = new int[0]; }

/**
 * <p>
 * @attr description
 * Amount of pixels by which the drop down should be offset horizontally.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:dropDownHorizontalOffset
 */

public static final int ListPopupWindow_dropDownHorizontalOffset = 0; // 0x0

/**
 * <p>
 * @attr description
 * Amount of pixels by which the drop down should be offset vertically.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:dropDownVerticalOffset
 */

public static final int ListPopupWindow_dropDownVerticalOffset = 1; // 0x1

/**
 * Base attributes available to ListPreference.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #ListPreference_entries android:entries}</code></td><td>Reference to an array resource that will populate a list/adapter.</td></tr>
 * <tr><td><code>{@link #ListPreference_entryValues android:entryValues}</code></td><td>The array to find the value to save for a preference when an entry from
 * entries is selected.</td></tr>
 * </table>
 * @see #ListPreference_entries
 * @see #ListPreference_entryValues
 */

public static final int[] ListPreference;
static { ListPreference = new int[0]; }

/**
 * <p>
 * @attr description
 * The human-readable array to present as a list. Each entry must have a corresponding
 * index in entryValues.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:entries
 */

public static final int ListPreference_entries = 0; // 0x0

/**
 * <p>
 * @attr description
 * The array to find the value to save for a preference when an entry from
 * entries is selected. If a user clicks on the second item in entries, the
 * second item in this array will be saved to the preference.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:entryValues
 */

public static final int ListPreference_entryValues = 1; // 0x1

/**
 * Attributes that can be used with a ListView.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #ListView_entries android:entries}</code></td><td>Reference to an array resource that will populate a list/adapter.</td></tr>
 * <tr><td><code>{@link #ListView_divider android:divider}</code></td><td>Drawable or color to draw between list items.</td></tr>
 * <tr><td><code>{@link #ListView_dividerHeight android:dividerHeight}</code></td><td>Height of the divider.</td></tr>
 * <tr><td><code>{@link #ListView_headerDividersEnabled android:headerDividersEnabled}</code></td><td>When set to false, the ListView will not draw the divider after each header view.</td></tr>
 * <tr><td><code>{@link #ListView_footerDividersEnabled android:footerDividersEnabled}</code></td><td>When set to false, the ListView will not draw the divider before each footer view.</td></tr>
 * <tr><td><code>{@link #ListView_overScrollHeader android:overScrollHeader}</code></td><td>Drawable to draw above list content.</td></tr>
 * <tr><td><code>{@link #ListView_overScrollFooter android:overScrollFooter}</code></td><td>Drawable to draw below list content.</td></tr>
 * </table>
 * @see #ListView_entries
 * @see #ListView_divider
 * @see #ListView_dividerHeight
 * @see #ListView_headerDividersEnabled
 * @see #ListView_footerDividersEnabled
 * @see #ListView_overScrollHeader
 * @see #ListView_overScrollFooter
 */

public static final int[] ListView;
static { ListView = new int[0]; }

/**
 * <p>
 * @attr description
 * Drawable or color to draw between list items.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:divider
 */

public static final int ListView_divider = 1; // 0x1

/**
 * <p>
 * @attr description
 * Height of the divider. Will use the intrinsic height of the divider if this
 * is not specified.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:dividerHeight
 */

public static final int ListView_dividerHeight = 2; // 0x2

/**
 * <p>
 * @attr description
 * Reference to an array resource that will populate the ListView.  For static content,
 * this is simpler than populating the ListView programmatically.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:entries
 */

public static final int ListView_entries = 0; // 0x0

/**
 * <p>
 * @attr description
 * When set to false, the ListView will not draw the divider before each footer view.
 * The default value is true.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:footerDividersEnabled
 */

public static final int ListView_footerDividersEnabled = 4; // 0x4

/**
 * <p>
 * @attr description
 * When set to false, the ListView will not draw the divider after each header view.
 * The default value is true.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:headerDividersEnabled
 */

public static final int ListView_headerDividersEnabled = 3; // 0x3

/**
 * <p>
 * @attr description
 * Drawable to draw below list content.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:overScrollFooter
 */

public static final int ListView_overScrollFooter = 6; // 0x6

/**
 * <p>
 * @attr description
 * Drawable to draw above list content.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:overScrollHeader
 */

public static final int ListView_overScrollHeader = 5; // 0x5

/**
 * Attributes that can be used with a LockPatternView.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * </table>
 */

public static final int[] LockPatternView;
static { LockPatternView = new int[0]; }

/**
 * Attributes that can be used with a Magnifier.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * </table>
 */

public static final int[] Magnifier;
static { Magnifier = new int[0]; }

/**
 * The set of attributes for a MapView.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #MapView_apiKey android:apiKey}</code></td><td>Value is a string that specifies the Maps API Key to use.</td></tr>
 * </table>
 * @see #MapView_apiKey
 */

public static final int[] MapView;
static { MapView = new int[0]; }

/**
 * <p>
 * @attr description
 * Value is a string that specifies the Maps API Key to use.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:apiKey
 */

public static final int MapView_apiKey = 0; // 0x0

/**
 * Drawable used to render the Material progress indicator.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #MaterialProgressDrawable_height android:height}</code></td><td>Makes the TextView be exactly this tall.</td></tr>
 * <tr><td><code>{@link #MaterialProgressDrawable_width android:width}</code></td><td>Makes the TextView be exactly this wide.</td></tr>
 * <tr><td><code>{@link #MaterialProgressDrawable_visible android:visible}</code></td><td>Provides initial visibility state of the drawable; the default
 * value is false.</td></tr>
 * <tr><td><code>{@link #MaterialProgressDrawable_color android:color}</code></td><td>Solid color for the gradient shape.</td></tr>
 * <tr><td><code>{@link #MaterialProgressDrawable_innerRadius android:innerRadius}</code></td><td>Inner radius of the ring.</td></tr>
 * <tr><td><code>{@link #MaterialProgressDrawable_thickness android:thickness}</code></td><td>Thickness of the ring.</td></tr>
 * </table>
 * @see #MaterialProgressDrawable_height
 * @see #MaterialProgressDrawable_width
 * @see #MaterialProgressDrawable_visible
 * @see #MaterialProgressDrawable_color
 * @see #MaterialProgressDrawable_innerRadius
 * @see #MaterialProgressDrawable_thickness
 */

public static final int[] MaterialProgressDrawable;
static { MaterialProgressDrawable = new int[0]; }

/**
 * <p>
 * @attr description
 * Solid color for the gradient shape.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:color
 */

public static final int MaterialProgressDrawable_color = 3; // 0x3

/**
 * <p>
 * @attr description
 * Makes the TextView be exactly this tall.
 * You could get the same effect by specifying this number in the
 * layout parameters.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:height
 */

public static final int MaterialProgressDrawable_height = 0; // 0x0

/**
 * <p>
 * @attr description
 * Inner radius of the ring. When defined, innerRadiusRatio is ignored.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:innerRadius
 */

public static final int MaterialProgressDrawable_innerRadius = 4; // 0x4

/**
 * <p>
 * @attr description
 * Thickness of the ring. When defined, thicknessRatio is ignored.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:thickness
 */

public static final int MaterialProgressDrawable_thickness = 5; // 0x5

/**
 * <p>
 * @attr description
 * Provides initial visibility state of the drawable; the default
 * value is false.  See
 * {@link android.graphics.drawable.Drawable#setVisible}.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:visible
 */

public static final int MaterialProgressDrawable_visible = 2; // 0x2

/**
 * <p>
 * @attr description
 * Makes the TextView be exactly this wide.
 * You could get the same effect by specifying this number in the
 * layout parameters.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:width
 */

public static final int MaterialProgressDrawable_width = 1; // 0x1

/**
 * Attributes that can be used with a MediaRouteButton.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #MediaRouteButton_minWidth android:minWidth}</code></td><td></td></tr>
 * <tr><td><code>{@link #MediaRouteButton_minHeight android:minHeight}</code></td><td></td></tr>
 * <tr><td><code>{@link #MediaRouteButton_mediaRouteTypes android:mediaRouteTypes}</code></td><td>The types of media routes the button and its resulting
 * chooser will filter by.</td></tr>
 * </table>
 * @see #MediaRouteButton_minWidth
 * @see #MediaRouteButton_minHeight
 * @see #MediaRouteButton_mediaRouteTypes
 */

public static final int[] MediaRouteButton;
static { MediaRouteButton = new int[0]; }

/**
 * <p>
 * @attr description
 * The types of media routes the button and its resulting
 * chooser will filter by.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>liveAudio</td><td>1</td><td>Allow selection of live audio routes.</td></tr>
 * <tr><td>user</td><td>800000</td><td>Allow selection of user (app-specified) routes.</td></tr>
 * </table>
 *
 * @attr name android:mediaRouteTypes
 */

public static final int MediaRouteButton_mediaRouteTypes = 2; // 0x2

/**
 * <p>This symbol is the offset where the {@link android.R.attr#minHeight}
 * attribute's value can be found in the {@link #MediaRouteButton} array.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:minHeight
 */

public static final int MediaRouteButton_minHeight = 1; // 0x1

/**
 * <p>This symbol is the offset where the {@link android.R.attr#minWidth}
 * attribute's value can be found in the {@link #MediaRouteButton} array.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:minWidth
 */

public static final int MediaRouteButton_minWidth = 0; // 0x0

public static final int[] Menu;
static { Menu = new int[0]; }

/**
 * Base attributes that are available to all groups.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #MenuGroup_enabled android:enabled}</code></td><td>Specifies whether the widget is enabled.</td></tr>
 * <tr><td><code>{@link #MenuGroup_id android:id}</code></td><td>Supply an identifier name for this view, to later retrieve it
 * with {@link android.view.View#findViewById View.findViewById()} or
 * {@link android.app.Activity#findViewById Activity.findViewById()}.</td></tr>
 * <tr><td><code>{@link #MenuGroup_visible android:visible}</code></td><td>Provides initial visibility state of the drawable; the default
 * value is false.</td></tr>
 * <tr><td><code>{@link #MenuGroup_menuCategory android:menuCategory}</code></td><td>The category applied to all items within this group.</td></tr>
 * <tr><td><code>{@link #MenuGroup_orderInCategory android:orderInCategory}</code></td><td>The order within the category applied to all items within this group.</td></tr>
 * <tr><td><code>{@link #MenuGroup_checkableBehavior android:checkableBehavior}</code></td><td>Whether the items are capable of displaying a check mark.</td></tr>
 * </table>
 * @see #MenuGroup_enabled
 * @see #MenuGroup_id
 * @see #MenuGroup_visible
 * @see #MenuGroup_menuCategory
 * @see #MenuGroup_orderInCategory
 * @see #MenuGroup_checkableBehavior
 */

public static final int[] MenuGroup;
static { MenuGroup = new int[0]; }

/**
 * <p>
 * @attr description
 * Whether the items are capable of displaying a check mark.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>all</td><td>1</td><td>The items are all checkable.</td></tr>
 * <tr><td>none</td><td>0</td><td>The items are not checkable.</td></tr>
 * <tr><td>single</td><td>2</td><td>The items are checkable and there will only be a single checked item in
 * this group.</td></tr>
 * </table>
 *
 * @attr name android:checkableBehavior
 */

public static final int MenuGroup_checkableBehavior = 5; // 0x5

/**
 * <p>
 * @attr description
 * Whether the items are enabled.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:enabled
 */

public static final int MenuGroup_enabled = 0; // 0x0

/**
 * <p>
 * @attr description
 * The ID of the group.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:id
 */

public static final int MenuGroup_id = 1; // 0x1

/**
 * <p>
 * @attr description
 * The category applied to all items within this group.
 * (This will be or'ed with the orderInCategory attribute.)
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>alternative</td><td>40000</td><td>Items are alternative actions.</td></tr>
 * <tr><td>container</td><td>10000</td><td>Items are part of a container.</td></tr>
 * <tr><td>secondary</td><td>30000</td><td>Items are user-supplied secondary (infrequently used).</td></tr>
 * <tr><td>system</td><td>20000</td><td>Items are provided by the system.</td></tr>
 * </table>
 *
 * @attr name android:menuCategory
 */

public static final int MenuGroup_menuCategory = 3; // 0x3

/**
 * <p>
 * @attr description
 * The order within the category applied to all items within this group.
 * (This will be or'ed with the category attribute.)
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:orderInCategory
 */

public static final int MenuGroup_orderInCategory = 4; // 0x4

/**
 * <p>
 * @attr description
 * Whether the items are shown/visible.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:visible
 */

public static final int MenuGroup_visible = 2; // 0x2

/**
 * Base attributes that are available to all Item objects.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #MenuItem_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
 * associated item.</td></tr>
 * <tr><td><code>{@link #MenuItem_enabled android:enabled}</code></td><td>Specifies whether the widget is enabled.</td></tr>
 * <tr><td><code>{@link #MenuItem_id android:id}</code></td><td>Supply an identifier name for this view, to later retrieve it
 * with {@link android.view.View#findViewById View.findViewById()} or
 * {@link android.app.Activity#findViewById Activity.findViewById()}.</td></tr>
 * <tr><td><code>{@link #MenuItem_checked android:checked}</code></td><td>Indicates the initial checked state of this button.</td></tr>
 * <tr><td><code>{@link #MenuItem_visible android:visible}</code></td><td>Provides initial visibility state of the drawable; the default
 * value is false.</td></tr>
 * <tr><td><code>{@link #MenuItem_menuCategory android:menuCategory}</code></td><td>The category applied to all items within this group.</td></tr>
 * <tr><td><code>{@link #MenuItem_orderInCategory android:orderInCategory}</code></td><td>The order within the category applied to all items within this group.</td></tr>
 * <tr><td><code>{@link #MenuItem_title android:title}</code></td><td>The title associated with the item.</td></tr>
 * <tr><td><code>{@link #MenuItem_titleCondensed android:titleCondensed}</code></td><td>The condensed title associated with the item.</td></tr>
 * <tr><td><code>{@link #MenuItem_alphabeticShortcut android:alphabeticShortcut}</code></td><td>The alphabetic shortcut key.</td></tr>
 * <tr><td><code>{@link #MenuItem_numericShortcut android:numericShortcut}</code></td><td>The numeric shortcut key.</td></tr>
 * <tr><td><code>{@link #MenuItem_checkable android:checkable}</code></td><td>Whether the item is capable of displaying a check mark.</td></tr>
 * <tr><td><code>{@link #MenuItem_onClick android:onClick}</code></td><td>Name of the method in this View's context to invoke when the view is
 * clicked.</td></tr>
 * <tr><td><code>{@link #MenuItem_contentDescription android:contentDescription}</code></td><td>The content description associated with the item.</td></tr>
 * <tr><td><code>{@link #MenuItem_showAsAction android:showAsAction}</code></td><td>How this item should display in the Action Bar, if present.</td></tr>
 * <tr><td><code>{@link #MenuItem_actionLayout android:actionLayout}</code></td><td>An optional layout to be used as an action view.</td></tr>
 * <tr><td><code>{@link #MenuItem_actionViewClass android:actionViewClass}</code></td><td>The name of an optional View class to instantiate and use as an
 * action view.</td></tr>
 * <tr><td><code>{@link #MenuItem_actionProviderClass android:actionProviderClass}</code></td><td>The name of an optional ActionProvider class to instantiate an action view
 * and perform operations such as default action for that menu item.</td></tr>
 * <tr><td><code>{@link #MenuItem_tooltipText android:tooltipText}</code></td><td>The tooltip text associated with the item.</td></tr>
 * <tr><td><code>{@link #MenuItem_alphabeticModifiers android:alphabeticModifiers}</code></td><td>The alphabetic modifier key.</td></tr>
 * <tr><td><code>{@link #MenuItem_numericModifiers android:numericModifiers}</code></td><td>The numeric modifier key.</td></tr>
 * <tr><td><code>{@link #MenuItem_iconTint android:iconTint}</code></td><td>Tint to apply to the icon.</td></tr>
 * <tr><td><code>{@link #MenuItem_iconTintMode android:iconTintMode}</code></td><td>Blending mode used to apply the icon tint.</td></tr>
 * </table>
 * @see #MenuItem_icon
 * @see #MenuItem_enabled
 * @see #MenuItem_id
 * @see #MenuItem_checked
 * @see #MenuItem_visible
 * @see #MenuItem_menuCategory
 * @see #MenuItem_orderInCategory
 * @see #MenuItem_title
 * @see #MenuItem_titleCondensed
 * @see #MenuItem_alphabeticShortcut
 * @see #MenuItem_numericShortcut
 * @see #MenuItem_checkable
 * @see #MenuItem_onClick
 * @see #MenuItem_contentDescription
 * @see #MenuItem_showAsAction
 * @see #MenuItem_actionLayout
 * @see #MenuItem_actionViewClass
 * @see #MenuItem_actionProviderClass
 * @see #MenuItem_tooltipText
 * @see #MenuItem_alphabeticModifiers
 * @see #MenuItem_numericModifiers
 * @see #MenuItem_iconTint
 * @see #MenuItem_iconTintMode
 */

public static final int[] MenuItem;
static { MenuItem = new int[0]; }

/**
 * State array representing a menu item that is currently focused and checked.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #MenuItemCheckedFocusedState_state_focused android:state_focused}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view has input focus.</td></tr>
 * <tr><td><code>{@link #MenuItemCheckedFocusedState_state_checkable android:state_checkable}</code></td><td>State identifier indicating that the object <var>may</var> display a check mark.</td></tr>
 * <tr><td><code>{@link #MenuItemCheckedFocusedState_state_checked android:state_checked}</code></td><td>State identifier indicating that the object is currently checked.</td></tr>
 * </table>
 * @see #MenuItemCheckedFocusedState_state_focused
 * @see #MenuItemCheckedFocusedState_state_checkable
 * @see #MenuItemCheckedFocusedState_state_checked
 */

public static final int[] MenuItemCheckedFocusedState;
static { MenuItemCheckedFocusedState = new int[0]; }

/**
 * <p>
 * @attr description
 * State identifier indicating that the object <var>may</var> display a check mark. See
 * {@link android.R.attr#state_checked} for the identifier that indicates whether it is
 * actually checked.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_checkable
 */

public static final int MenuItemCheckedFocusedState_state_checkable = 1; // 0x1

/**
 * <p>
 * @attr description
 * State identifier indicating that the object is currently checked.  See
 * {@link android.R.attr#state_checkable} for an additional identifier that can indicate
 * if any object may ever display a check, regardless of whether state_checked is
 * currently set.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_checked
 */

public static final int MenuItemCheckedFocusedState_state_checked = 2; // 0x2

/**
 * <p>
 * @attr description
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view has input focus.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_focused
 */

public static final int MenuItemCheckedFocusedState_state_focused = 0; // 0x0

/**
 * State array representing a menu item that is currently checked.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #MenuItemCheckedState_state_checkable android:state_checkable}</code></td><td>State identifier indicating that the object <var>may</var> display a check mark.</td></tr>
 * <tr><td><code>{@link #MenuItemCheckedState_state_checked android:state_checked}</code></td><td>State identifier indicating that the object is currently checked.</td></tr>
 * </table>
 * @see #MenuItemCheckedState_state_checkable
 * @see #MenuItemCheckedState_state_checked
 */

public static final int[] MenuItemCheckedState;
static { MenuItemCheckedState = new int[0]; }

/**
 * <p>
 * @attr description
 * State identifier indicating that the object <var>may</var> display a check mark. See
 * {@link android.R.attr#state_checked} for the identifier that indicates whether it is
 * actually checked.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_checkable
 */

public static final int MenuItemCheckedState_state_checkable = 0; // 0x0

/**
 * <p>
 * @attr description
 * State identifier indicating that the object is currently checked.  See
 * {@link android.R.attr#state_checkable} for an additional identifier that can indicate
 * if any object may ever display a check, regardless of whether state_checked is
 * currently set.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_checked
 */

public static final int MenuItemCheckedState_state_checked = 1; // 0x1

/**
 * State array representing a menu item that is focused and checkable but is not currently checked.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #MenuItemUncheckedFocusedState_state_focused android:state_focused}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view has input focus.</td></tr>
 * <tr><td><code>{@link #MenuItemUncheckedFocusedState_state_checkable android:state_checkable}</code></td><td>State identifier indicating that the object <var>may</var> display a check mark.</td></tr>
 * </table>
 * @see #MenuItemUncheckedFocusedState_state_focused
 * @see #MenuItemUncheckedFocusedState_state_checkable
 */

public static final int[] MenuItemUncheckedFocusedState;
static { MenuItemUncheckedFocusedState = new int[0]; }

/**
 * <p>
 * @attr description
 * State identifier indicating that the object <var>may</var> display a check mark. See
 * {@link android.R.attr#state_checked} for the identifier that indicates whether it is
 * actually checked.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_checkable
 */

public static final int MenuItemUncheckedFocusedState_state_checkable = 1; // 0x1

/**
 * <p>
 * @attr description
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view has input focus.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_focused
 */

public static final int MenuItemUncheckedFocusedState_state_focused = 0; // 0x0

/**
 * State array representing a menu item that is checkable but is not currently checked.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #MenuItemUncheckedState_state_checkable android:state_checkable}</code></td><td>State identifier indicating that the object <var>may</var> display a check mark.</td></tr>
 * </table>
 * @see #MenuItemUncheckedState_state_checkable
 */

public static final int[] MenuItemUncheckedState;
static { MenuItemUncheckedState = new int[0]; }

/**
 * <p>
 * @attr description
 * State identifier indicating that the object <var>may</var> display a check mark. See
 * {@link android.R.attr#state_checked} for the identifier that indicates whether it is
 * actually checked.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_checkable
 */

public static final int MenuItemUncheckedState_state_checkable = 0; // 0x0

/**
 * <p>
 * @attr description
 * An optional layout to be used as an action view.
 * See {@link android.view.MenuItem#setActionView(android.view.View)}
 * for more info.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:actionLayout
 */

public static final int MenuItem_actionLayout = 15; // 0xf

/**
 * <p>
 * @attr description
 * The name of an optional ActionProvider class to instantiate an action view
 * and perform operations such as default action for that menu item.
 * See {@link android.view.MenuItem#setActionProvider(android.view.ActionProvider)}
 * for more info.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:actionProviderClass
 */

public static final int MenuItem_actionProviderClass = 17; // 0x11

/**
 * <p>
 * @attr description
 * The name of an optional View class to instantiate and use as an
 * action view. See {@link android.view.MenuItem#setActionView(android.view.View)}
 * for more info.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:actionViewClass
 */

public static final int MenuItem_actionViewClass = 16; // 0x10

/**
 * <p>
 * @attr description
 * The alphabetic modifier key. This is the modifier when using a keyboard
 * with alphabetic keys. The values should be kept in sync with KeyEvent
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>ALT</td><td>2</td><td></td></tr>
 * <tr><td>CTRL</td><td>1000</td><td></td></tr>
 * <tr><td>FUNCTION</td><td>8</td><td></td></tr>
 * <tr><td>META</td><td>10000</td><td></td></tr>
 * <tr><td>SHIFT</td><td>1</td><td></td></tr>
 * <tr><td>SYM</td><td>4</td><td></td></tr>
 * </table>
 *
 * @attr name android:alphabeticModifiers
 */

public static final int MenuItem_alphabeticModifiers = 19; // 0x13

/**
 * <p>
 * @attr description
 * The alphabetic shortcut key.  This is the shortcut when using a keyboard
 * with alphabetic keys.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:alphabeticShortcut
 */

public static final int MenuItem_alphabeticShortcut = 9; // 0x9

/**
 * <p>
 * @attr description
 * Whether the item is capable of displaying a check mark.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:checkable
 */

public static final int MenuItem_checkable = 11; // 0xb

/**
 * <p>
 * @attr description
 * Whether the item is checked.  Note that you must first have enabled checking with
 * the checkable attribute or else the check mark will not appear.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:checked
 */

public static final int MenuItem_checked = 3; // 0x3

/**
 * <p>
 * @attr description
 * The content description associated with the item.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:contentDescription
 */

public static final int MenuItem_contentDescription = 13; // 0xd

/**
 * <p>
 * @attr description
 * Whether the item is enabled.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:enabled
 */

public static final int MenuItem_enabled = 1; // 0x1

/**
 * <p>
 * @attr description
 * The icon associated with this item.  This icon will not always be shown, so
 * the title should be sufficient in describing this item.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:icon
 */

public static final int MenuItem_icon = 0; // 0x0

/**
 * <p>
 * @attr description
 * Tint to apply to the icon.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:iconTint
 */

public static final int MenuItem_iconTint = 21; // 0x15

/**
 * <p>
 * @attr description
 * Blending mode used to apply the icon tint.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and icon color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the icon with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the icon, but with the icon’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the icon. The icon’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the icon.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 *
 * @attr name android:iconTintMode
 */

public static final int MenuItem_iconTintMode = 22; // 0x16

/**
 * <p>
 * @attr description
 * The ID of the item.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:id
 */

public static final int MenuItem_id = 2; // 0x2

/**
 * <p>
 * @attr description
 * The category applied to the item.
 * (This will be or'ed with the orderInCategory attribute.)
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>alternative</td><td>40000</td><td>Items are alternative actions.</td></tr>
 * <tr><td>container</td><td>10000</td><td>Items are part of a container.</td></tr>
 * <tr><td>secondary</td><td>30000</td><td>Items are user-supplied secondary (infrequently used).</td></tr>
 * <tr><td>system</td><td>20000</td><td>Items are provided by the system.</td></tr>
 * </table>
 *
 * @attr name android:menuCategory
 */

public static final int MenuItem_menuCategory = 5; // 0x5

/**
 * <p>
 * @attr description
 * The numeric modifier key. This is the modifier when using a numeric (for example,
 * 12-key) keyboard. The values should be kept in sync with KeyEvent
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>ALT</td><td>2</td><td></td></tr>
 * <tr><td>CTRL</td><td>1000</td><td></td></tr>
 * <tr><td>FUNCTION</td><td>8</td><td></td></tr>
 * <tr><td>META</td><td>10000</td><td></td></tr>
 * <tr><td>SHIFT</td><td>1</td><td></td></tr>
 * <tr><td>SYM</td><td>4</td><td></td></tr>
 * </table>
 *
 * @attr name android:numericModifiers
 */

public static final int MenuItem_numericModifiers = 20; // 0x14

/**
 * <p>
 * @attr description
 * The numeric shortcut key.  This is the shortcut when using a numeric (for example,
 * 12-key) keyboard.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:numericShortcut
 */

public static final int MenuItem_numericShortcut = 10; // 0xa

/**
 * <p>
 * @attr description
 * Name of a method on the Context used to inflate the menu that will be
 * called when the item is clicked.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:onClick
 */

public static final int MenuItem_onClick = 12; // 0xc

/**
 * <p>
 * @attr description
 * The order within the category applied to the item.
 * (This will be or'ed with the category attribute.)
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:orderInCategory
 */

public static final int MenuItem_orderInCategory = 6; // 0x6

/**
 * <p>
 * @attr description
 * How this item should display in the Action Bar, if present.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>always</td><td>2</td><td>Always show this item in an actionbar, even if it would override
 * the system's limits of how much stuff to put there. This may make
 * your action bar look bad on some screens. In most cases you should
 * use "ifRoom" instead. Mutually exclusive with "ifRoom" and "never".</td></tr>
 * <tr><td>collapseActionView</td><td>8</td><td>This item's action view collapses to a normal menu
 * item. When expanded, the action view takes over a
 * larger segment of its container.</td></tr>
 * <tr><td>ifRoom</td><td>1</td><td>Show this item in an action bar if there is room for it as determined
 * by the system. Favor this option over "always" where possible.
 * Mutually exclusive with "never" and "always".</td></tr>
 * <tr><td>never</td><td>0</td><td>Never show this item in an action bar, show it in the overflow menu instead.
 * Mutually exclusive with "ifRoom" and "always".</td></tr>
 * <tr><td>withText</td><td>4</td><td>When this item is shown as an action in the action bar, show a text
 * label with it even if it has an icon representation.</td></tr>
 * </table>
 *
 * @attr name android:showAsAction
 */

public static final int MenuItem_showAsAction = 14; // 0xe

/**
 * <p>
 * @attr description
 * The title associated with the item.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:title
 */

public static final int MenuItem_title = 7; // 0x7

/**
 * <p>
 * @attr description
 * The condensed title associated with the item.  This is used in situations where the
 * normal title may be too long to be displayed.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:titleCondensed
 */

public static final int MenuItem_titleCondensed = 8; // 0x8

/**
 * <p>
 * @attr description
 * The tooltip text associated with the item.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:tooltipText
 */

public static final int MenuItem_tooltipText = 18; // 0x12

/**
 * <p>
 * @attr description
 * Whether the item is shown/visible.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:visible
 */

public static final int MenuItem_visible = 4; // 0x4

/**
 * Attributes that can be used with a MenuView.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #MenuView_windowAnimationStyle android:windowAnimationStyle}</code></td><td>Reference to a style resource holding
 * the set of window animations to use, which can be
 * any of the attributes defined by
 * {@link android.R.styleable#WindowAnimation}.</td></tr>
 * <tr><td><code>{@link #MenuView_itemTextAppearance android:itemTextAppearance}</code></td><td>Default appearance of menu item text.</td></tr>
 * <tr><td><code>{@link #MenuView_horizontalDivider android:horizontalDivider}</code></td><td>Default horizontal divider between rows of menu items.</td></tr>
 * <tr><td><code>{@link #MenuView_verticalDivider android:verticalDivider}</code></td><td>Default vertical divider between menu items.</td></tr>
 * <tr><td><code>{@link #MenuView_headerBackground android:headerBackground}</code></td><td>Default background for the menu header.</td></tr>
 * <tr><td><code>{@link #MenuView_itemBackground android:itemBackground}</code></td><td>Default background for each menu item.</td></tr>
 * <tr><td><code>{@link #MenuView_itemIconDisabledAlpha android:itemIconDisabledAlpha}</code></td><td>Default disabled icon alpha for each menu item that shows an icon.</td></tr>
 * <tr><td><code>{@link #MenuView_subMenuArrow android:subMenuArrow}</code></td><td>Drawable for the arrow icon indicating a particular item is a submenu.</td></tr>
 * </table>
 * @see #MenuView_windowAnimationStyle
 * @see #MenuView_itemTextAppearance
 * @see #MenuView_horizontalDivider
 * @see #MenuView_verticalDivider
 * @see #MenuView_headerBackground
 * @see #MenuView_itemBackground
 * @see #MenuView_itemIconDisabledAlpha
 * @see #MenuView_subMenuArrow
 */

public static final int[] MenuView;
static { MenuView = new int[0]; }

/**
 * <p>
 * @attr description
 * Default background for the menu header.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:headerBackground
 */

public static final int MenuView_headerBackground = 4; // 0x4

/**
 * <p>
 * @attr description
 * Default horizontal divider between rows of menu items.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:horizontalDivider
 */

public static final int MenuView_horizontalDivider = 2; // 0x2

/**
 * <p>
 * @attr description
 * Default background for each menu item.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:itemBackground
 */

public static final int MenuView_itemBackground = 5; // 0x5

/**
 * <p>
 * @attr description
 * Default disabled icon alpha for each menu item that shows an icon.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:itemIconDisabledAlpha
 */

public static final int MenuView_itemIconDisabledAlpha = 6; // 0x6

/**
 * <p>
 * @attr description
 * Default appearance of menu item text.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:itemTextAppearance
 */

public static final int MenuView_itemTextAppearance = 1; // 0x1

/**
 * <p>
 * @attr description
 * Drawable for the arrow icon indicating a particular item is a submenu.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:subMenuArrow
 */

public static final int MenuView_subMenuArrow = 7; // 0x7

/**
 * <p>
 * @attr description
 * Default vertical divider between menu items.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:verticalDivider
 */

public static final int MenuView_verticalDivider = 3; // 0x3

/**
 * <p>
 * @attr description
 * Default animations for the menu.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:windowAnimationStyle
 */

public static final int MenuView_windowAnimationStyle = 0; // 0x0

/**
 * Attributes that can be used with a MessagingLinearLayout.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #MessagingLinearLayout_spacing android:spacing}</code></td><td></td></tr>
 * </table>
 * @see #MessagingLinearLayout_spacing
 */

public static final int[] MessagingLinearLayout;
static { MessagingLinearLayout = new int[0]; }

/**
 * <p>This symbol is the offset where the {@link android.R.attr#spacing}
 * attribute's value can be found in the {@link #MessagingLinearLayout} array.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:spacing
 */

public static final int MessagingLinearLayout_spacing = 0; // 0x0

/**
 * Attributes that can be used with a MultiSelectListPreference.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #MultiSelectListPreference_entries android:entries}</code></td><td>Reference to an array resource that will populate a list/adapter.</td></tr>
 * <tr><td><code>{@link #MultiSelectListPreference_entryValues android:entryValues}</code></td><td>The array to find the value to save for a preference when an entry from
 * entries is selected.</td></tr>
 * </table>
 * @see #MultiSelectListPreference_entries
 * @see #MultiSelectListPreference_entryValues
 */

public static final int[] MultiSelectListPreference;
static { MultiSelectListPreference = new int[0]; }

/**
 * <p>
 * @attr description
 * The human-readable array to present as a list. Each entry must have a corresponding
 * index in entryValues.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:entries
 */

public static final int MultiSelectListPreference_entries = 0; // 0x0

/**
 * <p>
 * @attr description
 * The array to find the value to save for a preference when an entry from
 * entries is selected. If a user clicks the second item in entries, the
 * second item in this array will be saved to the preference.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:entryValues
 */

public static final int MultiSelectListPreference_entryValues = 1; // 0x1

/**
 * Specify one or more <code>nfcid2-filter</code> elements inside a
 * <code>host-nfcf-service</code> element to specify a NFCID2
 * your service can handle.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #Nfcid2Filter_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * </table>
 * @see #Nfcid2Filter_name
 */

public static final int[] Nfcid2Filter;
static { Nfcid2Filter = new int[0]; }

/**
 * <p>
 * @attr description
 * The NFCID2. This attribute is mandatory.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int Nfcid2Filter_name = 0; // 0x0

/**
 * Drawable used to draw 9-patches.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #NinePatchDrawable_src android:src}</code></td><td>Sets a drawable as the content of this ImageView.</td></tr>
 * <tr><td><code>{@link #NinePatchDrawable_dither android:dither}</code></td><td>Enables or disables dithering of the bitmap if the bitmap does not have the
 * same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
 * an RGB 565 screen).</td></tr>
 * <tr><td><code>{@link #NinePatchDrawable_tint android:tint}</code></td><td>The tinting color for the image.</td></tr>
 * <tr><td><code>{@link #NinePatchDrawable_alpha android:alpha}</code></td><td>alpha property of the view, as a value between 0 (completely transparent) and 1
 * (completely opaque).</td></tr>
 * <tr><td><code>{@link #NinePatchDrawable_autoMirrored android:autoMirrored}</code></td><td>Indicates if the drawable needs to be mirrored when its layout direction is
 * RTL (right-to-left).</td></tr>
 * <tr><td><code>{@link #NinePatchDrawable_tintMode android:tintMode}</code></td><td>When a tint color is set, specifies its Porter-Duff blending mode.</td></tr>
 * </table>
 * @see #NinePatchDrawable_src
 * @see #NinePatchDrawable_dither
 * @see #NinePatchDrawable_tint
 * @see #NinePatchDrawable_alpha
 * @see #NinePatchDrawable_autoMirrored
 * @see #NinePatchDrawable_tintMode
 */

public static final int[] NinePatchDrawable;
static { NinePatchDrawable = new int[0]; }

/**
 * <p>
 * @attr description
 * Specifies the alpha multiplier to apply to the base drawable.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:alpha
 */

public static final int NinePatchDrawable_alpha = 3; // 0x3

/**
 * <p>
 * @attr description
 * Indicates if the drawable needs to be mirrored when its layout direction is
 * RTL (right-to-left).
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:autoMirrored
 */

public static final int NinePatchDrawable_autoMirrored = 4; // 0x4

/**
 * <p>
 * @attr description
 * Enables or disables dithering of the bitmap if the bitmap does not have the
 * same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
 * an RGB 565 screen).
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:dither
 */

public static final int NinePatchDrawable_dither = 1; // 0x1

/**
 * <p>
 * @attr description
 * Identifier of the bitmap file. This attribute is mandatory.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:src
 */

public static final int NinePatchDrawable_src = 0; // 0x0

/**
 * <p>
 * @attr description
 * If set, specifies the color to apply to the drawable as a tint. By default,
 * no tint is applied. May be a color state list.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:tint
 */

public static final int NinePatchDrawable_tint = 2; // 0x2

/**
 * <p>
 * @attr description
 * When a tint color is set, specifies its Porter-Duff blending mode. The
 * default value is src_in, which treats the drawable as an alpha mask.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 *
 * @attr name android:tintMode
 */

public static final int NinePatchDrawable_tintMode = 5; // 0x5

/**
 * Attributes that can be used with a NumberPicker.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #NumberPicker_selectionDividerHeight android:selectionDividerHeight}</code></td><td>The height of the selection divider.</td></tr>
 * </table>
 * @see #NumberPicker_selectionDividerHeight
 */

public static final int[] NumberPicker;
static { NumberPicker = new int[0]; }

/**
 * <p>
 * @attr description
 * The height of the selection divider.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:selectionDividerHeight
 */

public static final int NumberPicker_selectionDividerHeight = 1; // 0x1

/**
 * Use <code>offhost-apdu-service</code> as the root tag of the XML resource that
 * describes an {@link android.nfc.cardemulation.OffHostApduService}
 * service, which is referenced from its
 * {@link android.nfc.cardemulation.OffHostApduService#SERVICE_META_DATA} entry.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #OffHostApduService_description android:description}</code></td><td>Descriptive text for the associated data.</td></tr>
 * <tr><td><code>{@link #OffHostApduService_settingsActivity android:settingsActivity}</code></td><td>Component name of an activity that allows the user to modify
 * the settings for this service.</td></tr>
 * <tr><td><code>{@link #OffHostApduService_apduServiceBanner android:apduServiceBanner}</code></td><td>A drawable that can be rendered in Android's system UI for representing
 * the service.</td></tr>
 * <tr><td><code>{@link #OffHostApduService_secureElementName android:secureElementName}</code></td><td>Secure Element which the AIDs should be routed to</td></tr>
 * </table>
 * @see #OffHostApduService_description
 * @see #OffHostApduService_settingsActivity
 * @see #OffHostApduService_apduServiceBanner
 * @see #OffHostApduService_secureElementName
 */

public static final int[] OffHostApduService;
static { OffHostApduService = new int[0]; }

/**
 * <p>
 * @attr description
 * A drawable that can be rendered in Android's system UI for representing
 * the service.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:apduServiceBanner
 */

public static final int OffHostApduService_apduServiceBanner = 2; // 0x2

/**
 * <p>
 * @attr description
 * Short description of the functionality the service implements. This attribute
 * is mandatory.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:description
 */

public static final int OffHostApduService_description = 0; // 0x0

/**
 * <p>
 * @attr description
 * Secure Element which the AIDs should be routed to
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:secureElementName
 */

public static final int OffHostApduService_secureElementName = 3; // 0x3

/**
 * <p>
 * @attr description
 * Component name of an activity that allows the user to modify
 * the settings for this service.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:settingsActivity
 */

public static final int OffHostApduService_settingsActivity = 1; // 0x1

/**
 * Attributes that can be used with a OvershootInterpolator.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #OvershootInterpolator_tension android:tension}</code></td><td>This is the amount of tension.</td></tr>
 * </table>
 * @see #OvershootInterpolator_tension
 */

public static final int[] OvershootInterpolator;
static { OvershootInterpolator = new int[0]; }

/**
 * <p>
 * @attr description
 * This is the amount of tension.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:tension
 */

public static final int OvershootInterpolator_tension = 0; // 0x0

/**
 * PagedView specific attributes. These attributes are used to customize
 * a PagedView view in XML files.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * </table>
 */

public static final int[] PagedView;
static { PagedView = new int[0]; }

/**
 * Attributes that can be used with a PathInterpolator.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #PathInterpolator_controlX1 android:controlX1}</code></td><td>The x coordinate of the first control point of the cubic Bezier.</td></tr>
 * <tr><td><code>{@link #PathInterpolator_controlY1 android:controlY1}</code></td><td>The y coordinate of the first control point of the cubic Bezier.</td></tr>
 * <tr><td><code>{@link #PathInterpolator_controlX2 android:controlX2}</code></td><td>The x coordinate of the second control point of the cubic Bezier.</td></tr>
 * <tr><td><code>{@link #PathInterpolator_controlY2 android:controlY2}</code></td><td>The y coordinate of the second control point of the cubic Bezier.</td></tr>
 * <tr><td><code>{@link #PathInterpolator_pathData android:pathData}</code></td><td>The specification of the operations that define the path.</td></tr>
 * </table>
 * @see #PathInterpolator_controlX1
 * @see #PathInterpolator_controlY1
 * @see #PathInterpolator_controlX2
 * @see #PathInterpolator_controlY2
 * @see #PathInterpolator_pathData
 */

public static final int[] PathInterpolator;
static { PathInterpolator = new int[0]; }

/**
 * <p>
 * @attr description
 * The x coordinate of the first control point of the cubic Bezier.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:controlX1
 */

public static final int PathInterpolator_controlX1 = 0; // 0x0

/**
 * <p>
 * @attr description
 * The x coordinate of the second control point of the cubic Bezier.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:controlX2
 */

public static final int PathInterpolator_controlX2 = 2; // 0x2

/**
 * <p>
 * @attr description
 * The y coordinate of the first control point of the cubic Bezier.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:controlY1
 */

public static final int PathInterpolator_controlY1 = 1; // 0x1

/**
 * <p>
 * @attr description
 * The y coordinate of the second control point of the cubic Bezier.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:controlY2
 */

public static final int PathInterpolator_controlY2 = 3; // 0x3

/**
 * <p>
 * @attr description
 * The control points defined as a path.
 * When pathData is defined, then both of the control points of the
 * cubic Bezier will be ignored.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:pathData
 */

public static final int PathInterpolator_pathData = 4; // 0x4

/**
 * Use <code>patternPathMotion</code> as the root tag of the XML resource that
 * describes a {@link android.transition.PatternPathMotion}. This must be used
 * within a transition with which the PathMotion should be associated.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #PatternPathMotion_patternPathData android:patternPathData}</code></td><td>The path string describing the pattern to use for the PathPathMotion.</td></tr>
 * </table>
 * @see #PatternPathMotion_patternPathData
 */

public static final int[] PatternPathMotion;
static { PatternPathMotion = new int[0]; }

/**
 * <p>
 * @attr description
 * The path string describing the pattern to use for the PathPathMotion.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:patternPathData
 */

public static final int PatternPathMotion_patternPathData = 0; // 0x0

/**
 * Attributes that can be used with a Pointer.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * </table>
 */

public static final int[] Pointer;
static { Pointer = new int[0]; }

/**
 * Attributes that can be used with a PointerIcon.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #PointerIcon_bitmap android:bitmap}</code></td><td>Drawable to use as the icon bitmap.</td></tr>
 * <tr><td><code>{@link #PointerIcon_hotSpotX android:hotSpotX}</code></td><td>X coordinate of the icon hot spot.</td></tr>
 * <tr><td><code>{@link #PointerIcon_hotSpotY android:hotSpotY}</code></td><td>Y coordinate of the icon hot spot.</td></tr>
 * </table>
 * @see #PointerIcon_bitmap
 * @see #PointerIcon_hotSpotX
 * @see #PointerIcon_hotSpotY
 */

public static final int[] PointerIcon;
static { PointerIcon = new int[0]; }

/**
 * <p>
 * @attr description
 * Drawable to use as the icon bitmap.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:bitmap
 */

public static final int PointerIcon_bitmap = 0; // 0x0

/**
 * <p>
 * @attr description
 * X coordinate of the icon hot spot.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:hotSpotX
 */

public static final int PointerIcon_hotSpotX = 1; // 0x1

/**
 * <p>
 * @attr description
 * Y coordinate of the icon hot spot.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:hotSpotY
 */

public static final int PointerIcon_hotSpotY = 2; // 0x2

/**
 * Attributes that can be used with a PopupWindow.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #PopupWindow_popupBackground android:popupBackground}</code></td><td>The background to use for the popup window.</td></tr>
 * <tr><td><code>{@link #PopupWindow_popupAnimationStyle android:popupAnimationStyle}</code></td><td>The animation style to use for the popup window.</td></tr>
 * <tr><td><code>{@link #PopupWindow_overlapAnchor android:overlapAnchor}</code></td><td>Whether the popup window should overlap its anchor view.</td></tr>
 * <tr><td><code>{@link #PopupWindow_popupElevation android:popupElevation}</code></td><td>Window elevation to use for the popup window.</td></tr>
 * <tr><td><code>{@link #PopupWindow_popupEnterTransition android:popupEnterTransition}</code></td><td>Transition used to move views into the popup window.</td></tr>
 * <tr><td><code>{@link #PopupWindow_popupExitTransition android:popupExitTransition}</code></td><td>Transition used to move views out of the popup window.</td></tr>
 * </table>
 * @see #PopupWindow_popupBackground
 * @see #PopupWindow_popupAnimationStyle
 * @see #PopupWindow_overlapAnchor
 * @see #PopupWindow_popupElevation
 * @see #PopupWindow_popupEnterTransition
 * @see #PopupWindow_popupExitTransition
 */

public static final int[] PopupWindow;
static { PopupWindow = new int[0]; }

/**
 * Attributes that can be used with a PopupWindowBackgroundState.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #PopupWindowBackgroundState_state_above_anchor android:state_above_anchor}</code></td><td>State identifier indicating the popup will be above the anchor.</td></tr>
 * </table>
 * @see #PopupWindowBackgroundState_state_above_anchor
 */

public static final int[] PopupWindowBackgroundState;
static { PopupWindowBackgroundState = new int[0]; }

/**
 * <p>
 * @attr description
 * State identifier indicating the popup will be above the anchor.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_above_anchor
 */

public static final int PopupWindowBackgroundState_state_above_anchor = 0; // 0x0

/**
 * <p>
 * @attr description
 * Whether the popup window should overlap its anchor view.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:overlapAnchor
 */

public static final int PopupWindow_overlapAnchor = 2; // 0x2

/**
 * <p>
 * @attr description
 * The animation style to use for the popup window.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:popupAnimationStyle
 */

public static final int PopupWindow_popupAnimationStyle = 1; // 0x1

/**
 * <p>
 * @attr description
 * The background to use for the popup window.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:popupBackground
 */

public static final int PopupWindow_popupBackground = 0; // 0x0

/**
 * <p>
 * @attr description
 * Window elevation to use for the popup window.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:popupElevation
 */

public static final int PopupWindow_popupElevation = 3; // 0x3

/**
 * <p>
 * @attr description
 * Transition used to move views into the popup window.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:popupEnterTransition
 */

public static final int PopupWindow_popupEnterTransition = 4; // 0x4

/**
 * <p>
 * @attr description
 * Transition used to move views out of the popup window.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:popupExitTransition
 */

public static final int PopupWindow_popupExitTransition = 5; // 0x5

/**
 * Base attributes available to Preference.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #Preference_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
 * associated item.</td></tr>
 * <tr><td><code>{@link #Preference_persistent android:persistent}</code></td><td>Flag to control special persistent mode of an application.</td></tr>
 * <tr><td><code>{@link #Preference_enabled android:enabled}</code></td><td>Specifies whether the widget is enabled.</td></tr>
 * <tr><td><code>{@link #Preference_layout android:layout}</code></td><td>Supply an identifier for the layout resource to inflate when the ViewStub
 * becomes visible or when forced to do so.</td></tr>
 * <tr><td><code>{@link #Preference_title android:title}</code></td><td>The title associated with the item.</td></tr>
 * <tr><td><code>{@link #Preference_selectable android:selectable}</code></td><td>Whether the Preference is selectable.</td></tr>
 * <tr><td><code>{@link #Preference_key android:key}</code></td><td>The key to store the Preference value.</td></tr>
 * <tr><td><code>{@link #Preference_summary android:summary}</code></td><td>The summary for the item.</td></tr>
 * <tr><td><code>{@link #Preference_order android:order}</code></td><td>The order for the Preference (lower values are to be ordered first).</td></tr>
 * <tr><td><code>{@link #Preference_widgetLayout android:widgetLayout}</code></td><td>The layout for the controllable widget portion of a Preference.</td></tr>
 * <tr><td><code>{@link #Preference_dependency android:dependency}</code></td><td>The key of another Preference that this Preference will depend on.</td></tr>
 * <tr><td><code>{@link #Preference_defaultValue android:defaultValue}</code></td><td>The default value for the preference, which will be set either if persistence
 * is off or persistence is on and the preference is not found in the persistent
 * storage.</td></tr>
 * <tr><td><code>{@link #Preference_shouldDisableView android:shouldDisableView}</code></td><td>Whether the view of this Preference should be disabled when
 * this Preference is disabled.</td></tr>
 * <tr><td><code>{@link #Preference_fragment android:fragment}</code></td><td>The fragment that is displayed when the user selects this item.</td></tr>
 * <tr><td><code>{@link #Preference_recycleEnabled android:recycleEnabled}</code></td><td>Whether the preference has enabled to have its view recycled when used in the list
 * view.</td></tr>
 * <tr><td><code>{@link #Preference_singleLineTitle android:singleLineTitle}</code></td><td>Whether to use single line for the preference title text.</td></tr>
 * <tr><td><code>{@link #Preference_iconSpaceReserved android:iconSpaceReserved}</code></td><td>Whether the space for the preference icon view will be reserved.</td></tr>
 * </table>
 * @see #Preference_icon
 * @see #Preference_persistent
 * @see #Preference_enabled
 * @see #Preference_layout
 * @see #Preference_title
 * @see #Preference_selectable
 * @see #Preference_key
 * @see #Preference_summary
 * @see #Preference_order
 * @see #Preference_widgetLayout
 * @see #Preference_dependency
 * @see #Preference_defaultValue
 * @see #Preference_shouldDisableView
 * @see #Preference_fragment
 * @see #Preference_recycleEnabled
 * @see #Preference_singleLineTitle
 * @see #Preference_iconSpaceReserved
 */

public static final int[] Preference;
static { Preference = new int[0]; }

/**
 * Base attributes available to PreferenceActivity.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #PreferenceActivity_layout android:layout}</code></td><td>Supply an identifier for the layout resource to inflate when the ViewStub
 * becomes visible or when forced to do so.</td></tr>
 * </table>
 * @see #PreferenceActivity_layout
 */

public static final int[] PreferenceActivity;
static { PreferenceActivity = new int[0]; }

/**
 * <p>
 * @attr description
 * The layout for the Preference Activity. This should rarely need to be changed.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:layout
 */

public static final int PreferenceActivity_layout = 0; // 0x0

/**
 * Base attributes available to PreferenceFragment.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #PreferenceFragment_layout android:layout}</code></td><td>Supply an identifier for the layout resource to inflate when the ViewStub
 * becomes visible or when forced to do so.</td></tr>
 * <tr><td><code>{@link #PreferenceFragment_divider android:divider}</code></td><td>Drawable or color to draw between list items.</td></tr>
 * </table>
 * @see #PreferenceFragment_layout
 * @see #PreferenceFragment_divider
 */

public static final int[] PreferenceFragment;
static { PreferenceFragment = new int[0]; }

/**
 * <p>
 * @attr description
 * Drawable or color to draw between list items.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:divider
 */

public static final int PreferenceFragment_divider = 1; // 0x1

/**
 * <p>
 * @attr description
 * The layout for the PreferenceFragment. This should rarely need to be changed.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:layout
 */

public static final int PreferenceFragment_layout = 0; // 0x0

/**
 * Attributes that can be used with a PreferenceFrameLayout.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * </table>
 */

public static final int[] PreferenceFrameLayout;
static { PreferenceFrameLayout = new int[0]; }

/**
 * Attributes that can be used with a PreferenceFrameLayout_Layout.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * </table>
 */

public static final int[] PreferenceFrameLayout_Layout;
static { PreferenceFrameLayout_Layout = new int[0]; }

/**
 * Base attributes available to PreferenceGroup.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #PreferenceGroup_orderingFromXml android:orderingFromXml}</code></td><td>Whether to order the Preference under this group as they appear in the XML file.</td></tr>
 * </table>
 * @see #PreferenceGroup_orderingFromXml
 */

public static final int[] PreferenceGroup;
static { PreferenceGroup = new int[0]; }

/**
 * <p>
 * @attr description
 * Whether to order the Preference under this group as they appear in the XML file.
 * If this is false, the ordering will follow the Preference order attribute and
 * default to alphabetic for those without the order attribute.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:orderingFromXml
 */

public static final int PreferenceGroup_orderingFromXml = 0; // 0x0

/**
 * Attribute for a header describing the item shown in the top-level list
 * from which the selects the set of preference to dig in to.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #PreferenceHeader_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
 * associated item.</td></tr>
 * <tr><td><code>{@link #PreferenceHeader_id android:id}</code></td><td>Supply an identifier name for this view, to later retrieve it
 * with {@link android.view.View#findViewById View.findViewById()} or
 * {@link android.app.Activity#findViewById Activity.findViewById()}.</td></tr>
 * <tr><td><code>{@link #PreferenceHeader_title android:title}</code></td><td>The title associated with the item.</td></tr>
 * <tr><td><code>{@link #PreferenceHeader_summary android:summary}</code></td><td>The summary for the item.</td></tr>
 * <tr><td><code>{@link #PreferenceHeader_fragment android:fragment}</code></td><td>The fragment that is displayed when the user selects this item.</td></tr>
 * <tr><td><code>{@link #PreferenceHeader_breadCrumbTitle android:breadCrumbTitle}</code></td><td>The title for the bread crumb of this item.</td></tr>
 * <tr><td><code>{@link #PreferenceHeader_breadCrumbShortTitle android:breadCrumbShortTitle}</code></td><td>The short title for the bread crumb of this item.</td></tr>
 * </table>
 * @see #PreferenceHeader_icon
 * @see #PreferenceHeader_id
 * @see #PreferenceHeader_title
 * @see #PreferenceHeader_summary
 * @see #PreferenceHeader_fragment
 * @see #PreferenceHeader_breadCrumbTitle
 * @see #PreferenceHeader_breadCrumbShortTitle
 */

public static final int[] PreferenceHeader;
static { PreferenceHeader = new int[0]; }

/**
 * <p>
 * @attr description
 * The short title for the bread crumb of this item.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:breadCrumbShortTitle
 */

public static final int PreferenceHeader_breadCrumbShortTitle = 6; // 0x6

/**
 * <p>
 * @attr description
 * The title for the bread crumb of this item.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:breadCrumbTitle
 */

public static final int PreferenceHeader_breadCrumbTitle = 5; // 0x5

/**
 * <p>
 * @attr description
 * The fragment that is displayed when the user selects this item.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:fragment
 */

public static final int PreferenceHeader_fragment = 4; // 0x4

/**
 * <p>
 * @attr description
 * An icon for the item.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:icon
 */

public static final int PreferenceHeader_icon = 0; // 0x0

/**
 * <p>
 * @attr description
 * Identifier value for the header.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:id
 */

public static final int PreferenceHeader_id = 1; // 0x1

/**
 * <p>
 * @attr description
 * The summary for the item.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:summary
 */

public static final int PreferenceHeader_summary = 3; // 0x3

/**
 * <p>
 * @attr description
 * The title of the item that is shown to the user.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:title
 */

public static final int PreferenceHeader_title = 2; // 0x2

/**
 * Base attributes available to PreferenceScreen.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #PreferenceScreen_divider android:divider}</code></td><td>Drawable or color to draw between list items.</td></tr>
 * </table>
 * @see #PreferenceScreen_divider
 */

public static final int[] PreferenceScreen;
static { PreferenceScreen = new int[0]; }

/**
 * <p>
 * @attr description
 * Drawable or color to draw between list items.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:divider
 */

public static final int PreferenceScreen_divider = 0; // 0x0

/**
 * <p>
 * @attr description
 * The default value for the preference, which will be set either if persistence
 * is off or persistence is on and the preference is not found in the persistent
 * storage.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:defaultValue
 */

public static final int Preference_defaultValue = 11; // 0xb

/**
 * <p>
 * @attr description
 * The key of another Preference that this Preference will depend on.  If the other
 * Preference is not set or is off, this Preference will be disabled.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:dependency
 */

public static final int Preference_dependency = 10; // 0xa

/**
 * <p>
 * @attr description
 * Whether the Preference is enabled.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:enabled
 */

public static final int Preference_enabled = 2; // 0x2

/**
 * <p>
 * @attr description
 * When used inside of a modern PreferenceActivity, this declares
 * a new PreferenceFragment to be shown when the user selects this item.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:fragment
 */

public static final int Preference_fragment = 13; // 0xd

/**
 * <p>
 * @attr description
 * The optional icon for the preference.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:icon
 */

public static final int Preference_icon = 0; // 0x0

/**
 * <p>
 * @attr description
 * Whether the space for the preference icon view will be reserved. By default, preference
 * icon view visibility will be set to GONE when there is no icon provided, so the default
 * value of this attribute is false.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:iconSpaceReserved
 */

public static final int Preference_iconSpaceReserved = 16; // 0x10

/**
 * <p>
 * @attr description
 * The key to store the Preference value.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:key
 */

public static final int Preference_key = 6; // 0x6

/**
 * <p>
 * @attr description
 * The layout for the Preference in a PreferenceActivity screen. This should
 * rarely need to be changed, look at widgetLayout instead.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:layout
 */

public static final int Preference_layout = 3; // 0x3

/**
 * <p>
 * @attr description
 * The order for the Preference (lower values are to be ordered first). If this is not
 * specified, the default ordering will be alphabetic.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:order
 */

public static final int Preference_order = 8; // 0x8

/**
 * <p>
 * @attr description
 * Whether the Preference stores its value to the storage.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:persistent
 */

public static final int Preference_persistent = 1; // 0x1

/**
 * <p>
 * @attr description
 * Whether the preference has enabled to have its view recycled when used in the list
 * view. This is true by default.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:recycleEnabled
 */

public static final int Preference_recycleEnabled = 14; // 0xe

/**
 * <p>
 * @attr description
 * Whether the Preference is selectable.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:selectable
 */

public static final int Preference_selectable = 5; // 0x5

/**
 * <p>
 * @attr description
 * Whether the view of this Preference should be disabled when
 * this Preference is disabled.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:shouldDisableView
 */

public static final int Preference_shouldDisableView = 12; // 0xc

/**
 * <p>
 * @attr description
 * Whether to use single line for the preference title text. By default, preference title
 * will be constrained to one line, so the default value of this attribute is true.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:singleLineTitle
 */

public static final int Preference_singleLineTitle = 15; // 0xf

/**
 * <p>
 * @attr description
 * The summary for the Preference. In API 25 and earlier, this value is read as a
 * plain string with styling information stripped.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:summary
 */

public static final int Preference_summary = 7; // 0x7

/**
 * <p>
 * @attr description
 * The title for the Preference. In API 25 and earlier, this value is read as a
 * plain string with styling information stripped.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:title
 */

public static final int Preference_title = 4; // 0x4

/**
 * <p>
 * @attr description
 * The layout for the controllable widget portion of a Preference. This is inflated
 * into the layout for a Preference and should be used more frequently than
 * the layout attribute. For example, a checkbox preference would specify
 * a custom layout (consisting of just the CheckBox) here.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:widgetLayout
 */

public static final int Preference_widgetLayout = 9; // 0x9

/**
 * Use <code>print-service</code> as the root tag of the XML resource that
 * describes an {@link android.printservice.PrintService} service, which is
 * referenced from its {@link android.printservice.PrintService#SERVICE_META_DATA}
 * meta-data entry.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #PrintService_settingsActivity android:settingsActivity}</code></td><td>Component name of an activity that allows the user to modify
 * the settings for this service.</td></tr>
 * <tr><td><code>{@link #PrintService_addPrintersActivity android:addPrintersActivity}</code></td><td>Fully qualified class name of an activity that allows the user to manually
 * add printers to this print service.</td></tr>
 * <tr><td><code>{@link #PrintService_vendor android:vendor}</code></td><td>The vendor name if this print service is vendor specific.</td></tr>
 * <tr><td><code>{@link #PrintService_advancedPrintOptionsActivity android:advancedPrintOptionsActivity}</code></td><td>Fully qualified class name of an activity with advanced print options
 * specific to this print service.</td></tr>
 * </table>
 * @see #PrintService_settingsActivity
 * @see #PrintService_addPrintersActivity
 * @see #PrintService_vendor
 * @see #PrintService_advancedPrintOptionsActivity
 */

public static final int[] PrintService;
static { PrintService = new int[0]; }

/**
 * <p>
 * @attr description
 * Fully qualified class name of an activity that allows the user to manually
 * add printers to this print service.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:addPrintersActivity
 */

public static final int PrintService_addPrintersActivity = 1; // 0x1

/**
 * <p>
 * @attr description
 * Fully qualified class name of an activity with advanced print options
 * specific to this print service.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:advancedPrintOptionsActivity
 */

public static final int PrintService_advancedPrintOptionsActivity = 3; // 0x3

/**
 * <p>
 * @attr description
 * Fully qualified class name of an activity that allows the user to modify
 * the settings for this service.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:settingsActivity
 */

public static final int PrintService_settingsActivity = 0; // 0x0

/**
 * <p>
 * @attr description
 * The vendor name if this print service is vendor specific.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:vendor
 */

public static final int PrintService_vendor = 2; // 0x2

/**
 * Attributes that can be used with a ProgressBar.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #ProgressBar_maxWidth android:maxWidth}</code></td><td>An optional argument to supply a maximum width for this view.</td></tr>
 * <tr><td><code>{@link #ProgressBar_maxHeight android:maxHeight}</code></td><td>An optional argument to supply a maximum height for this view.</td></tr>
 * <tr><td><code>{@link #ProgressBar_max android:max}</code></td><td>Defines the maximum value.</td></tr>
 * <tr><td><code>{@link #ProgressBar_progress android:progress}</code></td><td>Defines the default progress value, between 0 and max.</td></tr>
 * <tr><td><code>{@link #ProgressBar_secondaryProgress android:secondaryProgress}</code></td><td>Defines the secondary progress value, between 0 and max.</td></tr>
 * <tr><td><code>{@link #ProgressBar_indeterminate android:indeterminate}</code></td><td>Allows to enable the indeterminate mode.</td></tr>
 * <tr><td><code>{@link #ProgressBar_indeterminateOnly android:indeterminateOnly}</code></td><td>Restricts to ONLY indeterminate mode (state-keeping progress mode will not work).</td></tr>
 * <tr><td><code>{@link #ProgressBar_indeterminateDrawable android:indeterminateDrawable}</code></td><td>Drawable used for the indeterminate mode.</td></tr>
 * <tr><td><code>{@link #ProgressBar_progressDrawable android:progressDrawable}</code></td><td>Drawable used for the progress mode.</td></tr>
 * <tr><td><code>{@link #ProgressBar_indeterminateDuration android:indeterminateDuration}</code></td><td>Duration of the indeterminate animation.</td></tr>
 * <tr><td><code>{@link #ProgressBar_indeterminateBehavior android:indeterminateBehavior}</code></td><td>Defines how the indeterminate mode should behave when the progress reaches max.</td></tr>
 * <tr><td><code>{@link #ProgressBar_minWidth android:minWidth}</code></td><td></td></tr>
 * <tr><td><code>{@link #ProgressBar_minHeight android:minHeight}</code></td><td></td></tr>
 * <tr><td><code>{@link #ProgressBar_interpolator android:interpolator}</code></td><td>Sets the acceleration curve for the indeterminate animation.</td></tr>
 * <tr><td><code>{@link #ProgressBar_animationResolution android:animationResolution}</code></td><td>Timeout between frames of animation in milliseconds.</td></tr>
 * <tr><td><code>{@link #ProgressBar_mirrorForRtl android:mirrorForRtl}</code></td><td>Defines if the associated drawables need to be mirrored when in RTL mode.</td></tr>
 * <tr><td><code>{@link #ProgressBar_progressTint android:progressTint}</code></td><td>Tint to apply to the progress indicator.</td></tr>
 * <tr><td><code>{@link #ProgressBar_progressTintMode android:progressTintMode}</code></td><td>Blending mode used to apply the progress indicator tint.</td></tr>
 * <tr><td><code>{@link #ProgressBar_progressBackgroundTint android:progressBackgroundTint}</code></td><td>Tint to apply to the progress indicator background.</td></tr>
 * <tr><td><code>{@link #ProgressBar_progressBackgroundTintMode android:progressBackgroundTintMode}</code></td><td>Blending mode used to apply the progress indicator background tint.</td></tr>
 * <tr><td><code>{@link #ProgressBar_secondaryProgressTint android:secondaryProgressTint}</code></td><td>Tint to apply to the secondary progress indicator.</td></tr>
 * <tr><td><code>{@link #ProgressBar_secondaryProgressTintMode android:secondaryProgressTintMode}</code></td><td>Blending mode used to apply the secondary progress indicator tint.</td></tr>
 * <tr><td><code>{@link #ProgressBar_indeterminateTint android:indeterminateTint}</code></td><td>Tint to apply to the indeterminate progress indicator.</td></tr>
 * <tr><td><code>{@link #ProgressBar_indeterminateTintMode android:indeterminateTintMode}</code></td><td>Blending mode used to apply the indeterminate progress indicator tint.</td></tr>
 * <tr><td><code>{@link #ProgressBar_backgroundTint android:backgroundTint}</code></td><td>Tint to apply to the background.</td></tr>
 * <tr><td><code>{@link #ProgressBar_backgroundTintMode android:backgroundTintMode}</code></td><td>Blending mode used to apply the background tint.</td></tr>
 * <tr><td><code>{@link #ProgressBar_min android:min}</code></td><td>Defines the minimum value.</td></tr>
 * </table>
 * @see #ProgressBar_maxWidth
 * @see #ProgressBar_maxHeight
 * @see #ProgressBar_max
 * @see #ProgressBar_progress
 * @see #ProgressBar_secondaryProgress
 * @see #ProgressBar_indeterminate
 * @see #ProgressBar_indeterminateOnly
 * @see #ProgressBar_indeterminateDrawable
 * @see #ProgressBar_progressDrawable
 * @see #ProgressBar_indeterminateDuration
 * @see #ProgressBar_indeterminateBehavior
 * @see #ProgressBar_minWidth
 * @see #ProgressBar_minHeight
 * @see #ProgressBar_interpolator
 * @see #ProgressBar_animationResolution
 * @see #ProgressBar_mirrorForRtl
 * @see #ProgressBar_progressTint
 * @see #ProgressBar_progressTintMode
 * @see #ProgressBar_progressBackgroundTint
 * @see #ProgressBar_progressBackgroundTintMode
 * @see #ProgressBar_secondaryProgressTint
 * @see #ProgressBar_secondaryProgressTintMode
 * @see #ProgressBar_indeterminateTint
 * @see #ProgressBar_indeterminateTintMode
 * @see #ProgressBar_backgroundTint
 * @see #ProgressBar_backgroundTintMode
 * @see #ProgressBar_min
 */

public static final int[] ProgressBar;
static { ProgressBar = new int[0]; }

/**
 * <p>
 * @attr description
 * Timeout between frames of animation in milliseconds.
 * {@deprecated Not used by the framework}.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:animationResolution
 */

@Deprecated public static final int ProgressBar_animationResolution = 14; // 0xe

/**
 * <p>
 * @attr description
 * Tint to apply to the background.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:backgroundTint
 */

public static final int ProgressBar_backgroundTint = 24; // 0x18

/**
 * <p>
 * @attr description
 * Blending mode used to apply the background tint.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 *
 * @attr name android:backgroundTintMode
 */

public static final int ProgressBar_backgroundTintMode = 25; // 0x19

/**
 * <p>
 * @attr description
 * Allows to enable the indeterminate mode. In this mode the progress
 * bar plays an infinite looping animation.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:indeterminate
 */

public static final int ProgressBar_indeterminate = 5; // 0x5

/**
 * <p>
 * @attr description
 * Defines how the indeterminate mode should behave when the progress reaches max. Only
 * affects the indeterminate animation if the indeterminate Drawable does not implement
 * android.graphics.drawable.Animatable.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>cycle</td><td>2</td><td>Progress keeps the current value and goes back to 0.</td></tr>
 * <tr><td>repeat</td><td>1</td><td>Progress starts over from 0.</td></tr>
 * </table>
 *
 * @attr name android:indeterminateBehavior
 */

public static final int ProgressBar_indeterminateBehavior = 10; // 0xa

/**
 * <p>
 * @attr description
 * Drawable used for the indeterminate mode. One that implements Animatable offers more
 * control over the animation.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:indeterminateDrawable
 */

public static final int ProgressBar_indeterminateDrawable = 7; // 0x7

/**
 * <p>
 * @attr description
 * Duration of the indeterminate animation. Only affects the indeterminate animation
 * if the indeterminate Drawable does not implement
 * android.graphics.drawable.Animatable.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:indeterminateDuration
 */

public static final int ProgressBar_indeterminateDuration = 9; // 0x9

/**
 * <p>
 * @attr description
 * Restricts to ONLY indeterminate mode (state-keeping progress mode will not work).
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:indeterminateOnly
 */

public static final int ProgressBar_indeterminateOnly = 6; // 0x6

/**
 * <p>
 * @attr description
 * Tint to apply to the indeterminate progress indicator.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:indeterminateTint
 */

public static final int ProgressBar_indeterminateTint = 22; // 0x16

/**
 * <p>
 * @attr description
 * Blending mode used to apply the indeterminate progress indicator tint.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 *
 * @attr name android:indeterminateTintMode
 */

public static final int ProgressBar_indeterminateTintMode = 23; // 0x17

/**
 * <p>
 * @attr description
 * Sets the acceleration curve for the indeterminate animation. Defaults to a linear
 * interpolation. Only affects the indeterminate animation if the indeterminate Drawable
 * does not implement android.graphics.drawable.Animatable.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:interpolator
 */

public static final int ProgressBar_interpolator = 13; // 0xd

/**
 * <p>
 * @attr description
 * Defines the maximum value.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:max
 */

public static final int ProgressBar_max = 2; // 0x2

/**
 * <p>
 * @attr description
 * An optional argument to supply a maximum height for this view.
 * See {see android.widget.ImageView#setMaxHeight} for details.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:maxHeight
 */

public static final int ProgressBar_maxHeight = 1; // 0x1

/**
 * <p>
 * @attr description
 * An optional argument to supply a maximum width for this view.
 * See {see android.widget.ImageView#setMaxWidth} for details.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:maxWidth
 */

public static final int ProgressBar_maxWidth = 0; // 0x0

/**
 * <p>
 * @attr description
 * Defines the minimum value.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:min
 */

public static final int ProgressBar_min = 26; // 0x1a

/**
 * <p>This symbol is the offset where the {@link android.R.attr#minHeight}
 * attribute's value can be found in the {@link #ProgressBar} array.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:minHeight
 */

public static final int ProgressBar_minHeight = 12; // 0xc

/**
 * <p>This symbol is the offset where the {@link android.R.attr#minWidth}
 * attribute's value can be found in the {@link #ProgressBar} array.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:minWidth
 */

public static final int ProgressBar_minWidth = 11; // 0xb

/**
 * <p>
 * @attr description
 * Defines if the associated drawables need to be mirrored when in RTL mode.
 * Default is false.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:mirrorForRtl
 */

public static final int ProgressBar_mirrorForRtl = 15; // 0xf

/**
 * <p>
 * @attr description
 * Defines the default progress value, between 0 and max.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:progress
 */

public static final int ProgressBar_progress = 3; // 0x3

/**
 * <p>
 * @attr description
 * Tint to apply to the progress indicator background.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:progressBackgroundTint
 */

public static final int ProgressBar_progressBackgroundTint = 18; // 0x12

/**
 * <p>
 * @attr description
 * Blending mode used to apply the progress indicator background tint.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 *
 * @attr name android:progressBackgroundTintMode
 */

public static final int ProgressBar_progressBackgroundTintMode = 19; // 0x13

/**
 * <p>
 * @attr description
 * Drawable used for the progress mode.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:progressDrawable
 */

public static final int ProgressBar_progressDrawable = 8; // 0x8

/**
 * <p>
 * @attr description
 * Tint to apply to the progress indicator.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:progressTint
 */

public static final int ProgressBar_progressTint = 16; // 0x10

/**
 * <p>
 * @attr description
 * Blending mode used to apply the progress indicator tint.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 *
 * @attr name android:progressTintMode
 */

public static final int ProgressBar_progressTintMode = 17; // 0x11

/**
 * <p>
 * @attr description
 * Defines the secondary progress value, between 0 and max. This progress is drawn between
 * the primary progress and the background.  It can be ideal for media scenarios such as
 * showing the buffering progress while the default progress shows the play progress.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:secondaryProgress
 */

public static final int ProgressBar_secondaryProgress = 4; // 0x4

/**
 * <p>
 * @attr description
 * Tint to apply to the secondary progress indicator.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:secondaryProgressTint
 */

public static final int ProgressBar_secondaryProgressTint = 20; // 0x14

/**
 * <p>
 * @attr description
 * Blending mode used to apply the secondary progress indicator tint.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 *
 * @attr name android:secondaryProgressTintMode
 */

public static final int ProgressBar_secondaryProgressTintMode = 21; // 0x15

/**
 * Attributes that can be used with a PropertyAnimator.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #PropertyAnimator_propertyName android:propertyName}</code></td><td>Name of the property being animated.</td></tr>
 * <tr><td><code>{@link #PropertyAnimator_pathData android:pathData}</code></td><td>The specification of the operations that define the path.</td></tr>
 * <tr><td><code>{@link #PropertyAnimator_propertyXName android:propertyXName}</code></td><td>Name of the property being animated as the X coordinate of the pathData.</td></tr>
 * <tr><td><code>{@link #PropertyAnimator_propertyYName android:propertyYName}</code></td><td>Name of the property being animated as the Y coordinate of the pathData.</td></tr>
 * </table>
 * @see #PropertyAnimator_propertyName
 * @see #PropertyAnimator_pathData
 * @see #PropertyAnimator_propertyXName
 * @see #PropertyAnimator_propertyYName
 */

public static final int[] PropertyAnimator;
static { PropertyAnimator = new int[0]; }

/**
 * <p>
 * @attr description
 * The path used to animate the properties in the ObjectAnimator.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:pathData
 */

public static final int PropertyAnimator_pathData = 1; // 0x1

/**
 * <p>
 * @attr description
 * Name of the property being animated.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:propertyName
 */

public static final int PropertyAnimator_propertyName = 0; // 0x0

/**
 * <p>
 * @attr description
 * Name of the property being animated as the X coordinate of the pathData.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:propertyXName
 */

public static final int PropertyAnimator_propertyXName = 2; // 0x2

/**
 * <p>
 * @attr description
 * Name of the property being animated as the Y coordinate of the pathData.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:propertyYName
 */

public static final int PropertyAnimator_propertyYName = 3; // 0x3

/**
 * Attributes that can be used with a PropertyValuesHolder.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #PropertyValuesHolder_valueFrom android:valueFrom}</code></td><td>Value the animation starts from.</td></tr>
 * <tr><td><code>{@link #PropertyValuesHolder_valueTo android:valueTo}</code></td><td>Value the animation animates to.</td></tr>
 * <tr><td><code>{@link #PropertyValuesHolder_valueType android:valueType}</code></td><td>The type of valueFrom and valueTo.</td></tr>
 * <tr><td><code>{@link #PropertyValuesHolder_propertyName android:propertyName}</code></td><td>Name of the property being animated.</td></tr>
 * </table>
 * @see #PropertyValuesHolder_valueFrom
 * @see #PropertyValuesHolder_valueTo
 * @see #PropertyValuesHolder_valueType
 * @see #PropertyValuesHolder_propertyName
 */

public static final int[] PropertyValuesHolder;
static { PropertyValuesHolder = new int[0]; }

/**
 * <p>
 * @attr description
 * Name of the property being animated.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:propertyName
 */

public static final int PropertyValuesHolder_propertyName = 3; // 0x3

/**
 * <p>
 * @attr description
 * Value the animation starts from.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:valueFrom
 */

public static final int PropertyValuesHolder_valueFrom = 0; // 0x0

/**
 * <p>
 * @attr description
 * Value the animation animates to.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:valueTo
 */

public static final int PropertyValuesHolder_valueTo = 1; // 0x1

/**
 * <p>
 * @attr description
 * The type of valueFrom and valueTo.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>colorType</td><td>3</td><td>values are colors, which are integers starting with "#".</td></tr>
 * <tr><td>floatType</td><td>0</td><td>The given values are floats. This is the default value if valueType is
 * unspecified. Note that if any value attribute has a color value
 * (beginning with "#"), then this attribute is ignored and the color values are
 * interpreted as integers.</td></tr>
 * <tr><td>intType</td><td>1</td><td>values are integers.</td></tr>
 * <tr><td>pathType</td><td>2</td><td>values are paths defined as strings.
 * This type is used for path morphing in AnimatedVectorDrawable.</td></tr>
 * </table>
 *
 * @attr name android:valueType
 */

public static final int PropertyValuesHolder_valueType = 2; // 0x2

/**
 * Attributes that can be used with a QuickContactBadge.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * </table>
 */

public static final int[] QuickContactBadge;
static { QuickContactBadge = new int[0]; }

/**
 * Attributes that can be used with a RadioGroup.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #RadioGroup_orientation android:orientation}</code></td><td>Standard orientation constant.</td></tr>
 * <tr><td><code>{@link #RadioGroup_checkedButton android:checkedButton}</code></td><td>The id of the child radio button that should be checked by default
 * within this radio group.</td></tr>
 * </table>
 * @see #RadioGroup_orientation
 * @see #RadioGroup_checkedButton
 */

public static final int[] RadioGroup;
static { RadioGroup = new int[0]; }

/**
 * <p>
 * @attr description
 * The id of the child radio button that should be checked by default
 * within this radio group.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:checkedButton
 */

public static final int RadioGroup_checkedButton = 1; // 0x1

/**
 * <p>
 * @attr description
 * Should the radio group be a column or a row?  Use "horizontal"
 * for a row, "vertical" for a column.  The default is
 * vertical.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>horizontal</td><td>0</td><td>Defines an horizontal widget.</td></tr>
 * <tr><td>vertical</td><td>1</td><td>Defines a vertical widget.</td></tr>
 * </table>
 *
 * @attr name android:orientation
 */

public static final int RadioGroup_orientation = 0; // 0x0

/**
 * Attributes that can be used with a RatingBar.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #RatingBar_numStars android:numStars}</code></td><td>The number of stars (or rating items) to show.</td></tr>
 * <tr><td><code>{@link #RatingBar_rating android:rating}</code></td><td>The rating to set by default.</td></tr>
 * <tr><td><code>{@link #RatingBar_stepSize android:stepSize}</code></td><td>The step size of the rating.</td></tr>
 * <tr><td><code>{@link #RatingBar_isIndicator android:isIndicator}</code></td><td>Whether this rating bar is an indicator (and non-changeable by the user).</td></tr>
 * </table>
 * @see #RatingBar_numStars
 * @see #RatingBar_rating
 * @see #RatingBar_stepSize
 * @see #RatingBar_isIndicator
 */

public static final int[] RatingBar;
static { RatingBar = new int[0]; }

/**
 * <p>
 * @attr description
 * Whether this rating bar is an indicator (and non-changeable by the user).
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:isIndicator
 */

public static final int RatingBar_isIndicator = 3; // 0x3

/**
 * <p>
 * @attr description
 * The number of stars (or rating items) to show.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:numStars
 */

public static final int RatingBar_numStars = 0; // 0x0

/**
 * <p>
 * @attr description
 * The rating to set by default.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:rating
 */

public static final int RatingBar_rating = 1; // 0x1

/**
 * <p>
 * @attr description
 * The step size of the rating.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:stepSize
 */

public static final int RatingBar_stepSize = 2; // 0x2

/**
 * Attributes that can be used with <code>rating-definition</code> tags inside of the XML
 * resource that describes TV content rating of a {@link android.media.tv.TvInputService},
 * which is referenced from its
 * {@link android.media.tv.TvInputManager#META_DATA_CONTENT_RATING_SYSTEMS}.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #RatingDefinition_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * <tr><td><code>{@link #RatingDefinition_description android:description}</code></td><td>Descriptive text for the associated data.</td></tr>
 * <tr><td><code>{@link #RatingDefinition_title android:title}</code></td><td>The title associated with the item.</td></tr>
 * <tr><td><code>{@link #RatingDefinition_contentAgeHint android:contentAgeHint}</code></td><td>The age associated with the content rating.</td></tr>
 * </table>
 * @see #RatingDefinition_name
 * @see #RatingDefinition_description
 * @see #RatingDefinition_title
 * @see #RatingDefinition_contentAgeHint
 */

public static final int[] RatingDefinition;
static { RatingDefinition = new int[0]; }

/**
 * <p>
 * @attr description
 * The age associated with the content rating. The content of this rating is suitable for
 * people of this age or above.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:contentAgeHint
 */

public static final int RatingDefinition_contentAgeHint = 3; // 0x3

/**
 * <p>
 * @attr description
 * The short description of the content rating.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:description
 */

public static final int RatingDefinition_description = 1; // 0x1

/**
 * <p>
 * @attr description
 * The unique name of the content rating.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int RatingDefinition_name = 0; // 0x0

/**
 * <p>
 * @attr description
 * The title of the content rating which is shown to the user.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:title
 */

public static final int RatingDefinition_title = 2; // 0x2

/**
 * Attributes that can be used with <code>rating-system-definition</code> tags inside of the
 * XML resource that describes TV content rating of a {@link android.media.tv.TvInputService},
 * which is referenced from its
 * {@link android.media.tv.TvInputManager#META_DATA_CONTENT_RATING_SYSTEMS}.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #RatingSystemDefinition_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * <tr><td><code>{@link #RatingSystemDefinition_description android:description}</code></td><td>Descriptive text for the associated data.</td></tr>
 * <tr><td><code>{@link #RatingSystemDefinition_title android:title}</code></td><td>The title associated with the item.</td></tr>
 * <tr><td><code>{@link #RatingSystemDefinition_country android:country}</code></td><td>The country code associated with the content rating system, which consists of two
 * uppercase letters that conform to the ISO 3166 standard.</td></tr>
 * </table>
 * @see #RatingSystemDefinition_name
 * @see #RatingSystemDefinition_description
 * @see #RatingSystemDefinition_title
 * @see #RatingSystemDefinition_country
 */

public static final int[] RatingSystemDefinition;
static { RatingSystemDefinition = new int[0]; }

/**
 * <p>
 * @attr description
 * The country code associated with the content rating system, which consists of two
 * uppercase letters that conform to the ISO 3166 standard.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:country
 */

public static final int RatingSystemDefinition_country = 3; // 0x3

/**
 * <p>
 * @attr description
 * The short description of the content rating system.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:description
 */

public static final int RatingSystemDefinition_description = 1; // 0x1

/**
 * <p>
 * @attr description
 * The unique name of the content rating system.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int RatingSystemDefinition_name = 0; // 0x0

/**
 * <p>
 * @attr description
 * The title of the content rating system which is shown to the user.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:title
 */

public static final int RatingSystemDefinition_title = 2; // 0x2

/**
 * Use <code>recognition-service</code> as the root tag of the XML resource that
 * describes a {@link android.speech.RecognitionService}, which is referenced from
 * its {@link android.speech.RecognitionService#SERVICE_META_DATA} meta-data entry.
 * Described here are the attributes that can be included in that tag.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #RecognitionService_settingsActivity android:settingsActivity}</code></td><td>Component name of an activity that allows the user to modify
 * the settings for this service.</td></tr>
 * </table>
 * @see #RecognitionService_settingsActivity
 */

public static final int[] RecognitionService;
static { RecognitionService = new int[0]; }

/**
 * <p>
 * @attr description
 * Component name of an activity that allows the user to modify
 * the settings for this service.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:settingsActivity
 */

public static final int RecognitionService_settingsActivity = 0; // 0x0

/**
 * <p>
 * @attr description
 * Defines the relationship between the ViewGroup and its descendants
 * when looking for a View to take focus.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>afterDescendants</td><td>1</td><td>The ViewGroup will get focus only if none of its descendants want it.</td></tr>
 * <tr><td>beforeDescendants</td><td>0</td><td>The ViewGroup will get focus before any of its descendants.</td></tr>
 * <tr><td>blocksDescendants</td><td>2</td><td>The ViewGroup will block its descendants from receiving focus.</td></tr>
 * </table>
 *
 * @attr name android:descendantFocusability
 */

public static final int RecyclerView_descendantFocusability = 1; // 0x1

/**
 * <p>
 * @attr description
 * Standard orientation constant.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>horizontal</td><td>0</td><td>Defines an horizontal widget.</td></tr>
 * <tr><td>vertical</td><td>1</td><td>Defines a vertical widget.</td></tr>
 * </table>
 *
 * @attr name android:orientation
 */

public static final int RecyclerView_orientation = 0; // 0x0

/**
 * Attributes that can be used with a RelativeLayout.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #RelativeLayout_gravity android:gravity}</code></td><td>Specifies how an object should position its content, on both the X and Y axes,
 * within its own bounds.</td></tr>
 * <tr><td><code>{@link #RelativeLayout_ignoreGravity android:ignoreGravity}</code></td><td>Indicates what view should not be affected by gravity.</td></tr>
 * </table>
 * @see #RelativeLayout_gravity
 * @see #RelativeLayout_ignoreGravity
 */

public static final int[] RelativeLayout;
static { RelativeLayout = new int[0]; }

/**
 * Attributes that can be used with a RelativeLayout_Layout.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #RelativeLayout_Layout_layout_toLeftOf android:layout_toLeftOf}</code></td><td>Positions the right edge of this view to the left of the given anchor view ID.</td></tr>
 * <tr><td><code>{@link #RelativeLayout_Layout_layout_toRightOf android:layout_toRightOf}</code></td><td>Positions the left edge of this view to the right of the given anchor view ID.</td></tr>
 * <tr><td><code>{@link #RelativeLayout_Layout_layout_above android:layout_above}</code></td><td>Positions the bottom edge of this view above the given anchor view ID.</td></tr>
 * <tr><td><code>{@link #RelativeLayout_Layout_layout_below android:layout_below}</code></td><td>Positions the top edge of this view below the given anchor view ID.</td></tr>
 * <tr><td><code>{@link #RelativeLayout_Layout_layout_alignBaseline android:layout_alignBaseline}</code></td><td>Positions the baseline of this view on the baseline of the given anchor view ID.</td></tr>
 * <tr><td><code>{@link #RelativeLayout_Layout_layout_alignLeft android:layout_alignLeft}</code></td><td>Makes the left edge of this view match the left edge of the given anchor view ID.</td></tr>
 * <tr><td><code>{@link #RelativeLayout_Layout_layout_alignTop android:layout_alignTop}</code></td><td>Makes the top edge of this view match the top edge of the given anchor view ID.</td></tr>
 * <tr><td><code>{@link #RelativeLayout_Layout_layout_alignRight android:layout_alignRight}</code></td><td>Makes the right edge of this view match the right edge of the given anchor view ID.</td></tr>
 * <tr><td><code>{@link #RelativeLayout_Layout_layout_alignBottom android:layout_alignBottom}</code></td><td>Makes the bottom edge of this view match the bottom edge of the given anchor view ID.</td></tr>
 * <tr><td><code>{@link #RelativeLayout_Layout_layout_alignParentLeft android:layout_alignParentLeft}</code></td><td>If true, makes the left edge of this view match the left edge of the parent.</td></tr>
 * <tr><td><code>{@link #RelativeLayout_Layout_layout_alignParentTop android:layout_alignParentTop}</code></td><td>If true, makes the top edge of this view match the top edge of the parent.</td></tr>
 * <tr><td><code>{@link #RelativeLayout_Layout_layout_alignParentRight android:layout_alignParentRight}</code></td><td>If true, makes the right edge of this view match the right edge of the parent.</td></tr>
 * <tr><td><code>{@link #RelativeLayout_Layout_layout_alignParentBottom android:layout_alignParentBottom}</code></td><td>If true, makes the bottom edge of this view match the bottom edge of the parent.</td></tr>
 * <tr><td><code>{@link #RelativeLayout_Layout_layout_centerInParent android:layout_centerInParent}</code></td><td>If true, centers this child horizontally and vertically within its parent.</td></tr>
 * <tr><td><code>{@link #RelativeLayout_Layout_layout_centerHorizontal android:layout_centerHorizontal}</code></td><td>If true, centers this child horizontally within its parent.</td></tr>
 * <tr><td><code>{@link #RelativeLayout_Layout_layout_centerVertical android:layout_centerVertical}</code></td><td>If true, centers this child vertically within its parent.</td></tr>
 * <tr><td><code>{@link #RelativeLayout_Layout_layout_alignWithParentIfMissing android:layout_alignWithParentIfMissing}</code></td><td>If set to true, the parent will be used as the anchor when the anchor cannot be
 * be found for layout_toLeftOf, layout_toRightOf, etc.</td></tr>
 * <tr><td><code>{@link #RelativeLayout_Layout_layout_toStartOf android:layout_toStartOf}</code></td><td>Positions the end edge of this view to the start of the given anchor view ID.</td></tr>
 * <tr><td><code>{@link #RelativeLayout_Layout_layout_toEndOf android:layout_toEndOf}</code></td><td>Positions the start edge of this view to the end of the given anchor view ID.</td></tr>
 * <tr><td><code>{@link #RelativeLayout_Layout_layout_alignStart android:layout_alignStart}</code></td><td>Makes the start edge of this view match the start edge of the given anchor view ID.</td></tr>
 * <tr><td><code>{@link #RelativeLayout_Layout_layout_alignEnd android:layout_alignEnd}</code></td><td>Makes the end edge of this view match the end edge of the given anchor view ID.</td></tr>
 * <tr><td><code>{@link #RelativeLayout_Layout_layout_alignParentStart android:layout_alignParentStart}</code></td><td>If true, makes the start edge of this view match the start edge of the parent.</td></tr>
 * <tr><td><code>{@link #RelativeLayout_Layout_layout_alignParentEnd android:layout_alignParentEnd}</code></td><td>If true, makes the end edge of this view match the end edge of the parent.</td></tr>
 * </table>
 * @see #RelativeLayout_Layout_layout_toLeftOf
 * @see #RelativeLayout_Layout_layout_toRightOf
 * @see #RelativeLayout_Layout_layout_above
 * @see #RelativeLayout_Layout_layout_below
 * @see #RelativeLayout_Layout_layout_alignBaseline
 * @see #RelativeLayout_Layout_layout_alignLeft
 * @see #RelativeLayout_Layout_layout_alignTop
 * @see #RelativeLayout_Layout_layout_alignRight
 * @see #RelativeLayout_Layout_layout_alignBottom
 * @see #RelativeLayout_Layout_layout_alignParentLeft
 * @see #RelativeLayout_Layout_layout_alignParentTop
 * @see #RelativeLayout_Layout_layout_alignParentRight
 * @see #RelativeLayout_Layout_layout_alignParentBottom
 * @see #RelativeLayout_Layout_layout_centerInParent
 * @see #RelativeLayout_Layout_layout_centerHorizontal
 * @see #RelativeLayout_Layout_layout_centerVertical
 * @see #RelativeLayout_Layout_layout_alignWithParentIfMissing
 * @see #RelativeLayout_Layout_layout_toStartOf
 * @see #RelativeLayout_Layout_layout_toEndOf
 * @see #RelativeLayout_Layout_layout_alignStart
 * @see #RelativeLayout_Layout_layout_alignEnd
 * @see #RelativeLayout_Layout_layout_alignParentStart
 * @see #RelativeLayout_Layout_layout_alignParentEnd
 */

public static final int[] RelativeLayout_Layout;
static { RelativeLayout_Layout = new int[0]; }

/**
 * <p>
 * @attr description
 * Positions the bottom edge of this view above the given anchor view ID.
 * Accommodates bottom margin of this view and top margin of anchor view.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:layout_above
 */

public static final int RelativeLayout_Layout_layout_above = 2; // 0x2

/**
 * <p>
 * @attr description
 * Positions the baseline of this view on the baseline of the given anchor view ID.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:layout_alignBaseline
 */

public static final int RelativeLayout_Layout_layout_alignBaseline = 4; // 0x4

/**
 * <p>
 * @attr description
 * Makes the bottom edge of this view match the bottom edge of the given anchor view ID.
 * Accommodates bottom margin.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:layout_alignBottom
 */

public static final int RelativeLayout_Layout_layout_alignBottom = 8; // 0x8

/**
 * <p>
 * @attr description
 * Makes the end edge of this view match the end edge of the given anchor view ID.
 * Accommodates end margin.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:layout_alignEnd
 */

public static final int RelativeLayout_Layout_layout_alignEnd = 20; // 0x14

/**
 * <p>
 * @attr description
 * Makes the left edge of this view match the left edge of the given anchor view ID.
 * Accommodates left margin.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:layout_alignLeft
 */

public static final int RelativeLayout_Layout_layout_alignLeft = 5; // 0x5

/**
 * <p>
 * @attr description
 * If true, makes the bottom edge of this view match the bottom edge of the parent.
 * Accommodates bottom margin.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:layout_alignParentBottom
 */

public static final int RelativeLayout_Layout_layout_alignParentBottom = 12; // 0xc

/**
 * <p>
 * @attr description
 * If true, makes the end edge of this view match the end edge of the parent.
 * Accommodates end margin.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:layout_alignParentEnd
 */

public static final int RelativeLayout_Layout_layout_alignParentEnd = 22; // 0x16

/**
 * <p>
 * @attr description
 * If true, makes the left edge of this view match the left edge of the parent.
 * Accommodates left margin.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:layout_alignParentLeft
 */

public static final int RelativeLayout_Layout_layout_alignParentLeft = 9; // 0x9

/**
 * <p>
 * @attr description
 * If true, makes the right edge of this view match the right edge of the parent.
 * Accommodates right margin.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:layout_alignParentRight
 */

public static final int RelativeLayout_Layout_layout_alignParentRight = 11; // 0xb

/**
 * <p>
 * @attr description
 * If true, makes the start edge of this view match the start edge of the parent.
 * Accommodates start margin.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:layout_alignParentStart
 */

public static final int RelativeLayout_Layout_layout_alignParentStart = 21; // 0x15

/**
 * <p>
 * @attr description
 * If true, makes the top edge of this view match the top edge of the parent.
 * Accommodates top margin.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:layout_alignParentTop
 */

public static final int RelativeLayout_Layout_layout_alignParentTop = 10; // 0xa

/**
 * <p>
 * @attr description
 * Makes the right edge of this view match the right edge of the given anchor view ID.
 * Accommodates right margin.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:layout_alignRight
 */

public static final int RelativeLayout_Layout_layout_alignRight = 7; // 0x7

/**
 * <p>
 * @attr description
 * Makes the start edge of this view match the start edge of the given anchor view ID.
 * Accommodates start margin.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:layout_alignStart
 */

public static final int RelativeLayout_Layout_layout_alignStart = 19; // 0x13

/**
 * <p>
 * @attr description
 * Makes the top edge of this view match the top edge of the given anchor view ID.
 * Accommodates top margin.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:layout_alignTop
 */

public static final int RelativeLayout_Layout_layout_alignTop = 6; // 0x6

/**
 * <p>
 * @attr description
 * If set to true, the parent will be used as the anchor when the anchor cannot be
 * be found for layout_toLeftOf, layout_toRightOf, etc.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:layout_alignWithParentIfMissing
 */

public static final int RelativeLayout_Layout_layout_alignWithParentIfMissing = 16; // 0x10

/**
 * <p>
 * @attr description
 * Positions the top edge of this view below the given anchor view ID.
 * Accommodates top margin of this view and bottom margin of anchor view.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:layout_below
 */

public static final int RelativeLayout_Layout_layout_below = 3; // 0x3

/**
 * <p>
 * @attr description
 * If true, centers this child horizontally within its parent.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:layout_centerHorizontal
 */

public static final int RelativeLayout_Layout_layout_centerHorizontal = 14; // 0xe

/**
 * <p>
 * @attr description
 * If true, centers this child horizontally and vertically within its parent.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:layout_centerInParent
 */

public static final int RelativeLayout_Layout_layout_centerInParent = 13; // 0xd

/**
 * <p>
 * @attr description
 * If true, centers this child vertically within its parent.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:layout_centerVertical
 */

public static final int RelativeLayout_Layout_layout_centerVertical = 15; // 0xf

/**
 * <p>
 * @attr description
 * Positions the start edge of this view to the end of the given anchor view ID.
 * Accommodates start margin of this view and end margin of anchor view.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:layout_toEndOf
 */

public static final int RelativeLayout_Layout_layout_toEndOf = 18; // 0x12

/**
 * <p>
 * @attr description
 * Positions the right edge of this view to the left of the given anchor view ID.
 * Accommodates right margin of this view and left margin of anchor view.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:layout_toLeftOf
 */

public static final int RelativeLayout_Layout_layout_toLeftOf = 0; // 0x0

/**
 * <p>
 * @attr description
 * Positions the left edge of this view to the right of the given anchor view ID.
 * Accommodates left margin of this view and right margin of anchor view.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:layout_toRightOf
 */

public static final int RelativeLayout_Layout_layout_toRightOf = 1; // 0x1

/**
 * <p>
 * @attr description
 * Positions the end edge of this view to the start of the given anchor view ID.
 * Accommodates end margin of this view and start margin of anchor view.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:layout_toStartOf
 */

public static final int RelativeLayout_Layout_layout_toStartOf = 17; // 0x11

/**
 * <p>
 * @attr description
 * Specifies how an object should position its content, on both the X and Y axes,
 * within its own bounds.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
 * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
 * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
 * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
 * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the horizontal gravity: a left gravity will clip the right
 * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
 * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the vertical gravity: a top gravity will clip the bottom
 * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
 * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
 * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
 * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
 * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
 * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
 * </table>
 *
 * @attr name android:gravity
 */

public static final int RelativeLayout_gravity = 0; // 0x0

/**
 * <p>
 * @attr description
 * Indicates what view should not be affected by gravity.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:ignoreGravity
 */

public static final int RelativeLayout_ignoreGravity = 1; // 0x1

/**
 * Attributes that can be used with a ResolverDrawerLayout.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #ResolverDrawerLayout_maxWidth android:maxWidth}</code></td><td>An optional argument to supply a maximum width for this view.</td></tr>
 * </table>
 * @see #ResolverDrawerLayout_maxWidth
 */

public static final int[] ResolverDrawerLayout;
static { ResolverDrawerLayout = new int[0]; }

/**
 * Attributes that can be used with a ResolverDrawerLayout_LayoutParams.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #ResolverDrawerLayout_LayoutParams_layout_gravity android:layout_gravity}</code></td><td>Standard gravity constant that a child supplies to its parent.</td></tr>
 * </table>
 * @see #ResolverDrawerLayout_LayoutParams_layout_gravity
 */

public static final int[] ResolverDrawerLayout_LayoutParams;
static { ResolverDrawerLayout_LayoutParams = new int[0]; }

/**
 * <p>
 * @attr description
 * Standard gravity constant that a child supplies to its parent.
 * Defines how the child view should be positioned, on both the X and Y axes, within its enclosing layout.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
 * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
 * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
 * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
 * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the horizontal gravity: a left gravity will clip the right
 * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
 * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the vertical gravity: a top gravity will clip the bottom
 * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
 * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
 * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
 * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
 * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
 * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
 * </table>
 *
 * @attr name android:layout_gravity
 */

public static final int ResolverDrawerLayout_LayoutParams_layout_gravity = 0; // 0x0

/**
 * <p>
 * @attr description
 * An optional argument to supply a maximum width for this view.
 * See {see android.widget.ImageView#setMaxWidth} for details.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:maxWidth
 */

public static final int ResolverDrawerLayout_maxWidth = 0; // 0x0

/**
 * Attributes that can be used with a RestrictionEntry.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #RestrictionEntry_description android:description}</code></td><td>Descriptive text for the associated data.</td></tr>
 * <tr><td><code>{@link #RestrictionEntry_entries android:entries}</code></td><td>Reference to an array resource that will populate a list/adapter.</td></tr>
 * <tr><td><code>{@link #RestrictionEntry_title android:title}</code></td><td>The title associated with the item.</td></tr>
 * <tr><td><code>{@link #RestrictionEntry_key android:key}</code></td><td>The key to store the Preference value.</td></tr>
 * <tr><td><code>{@link #RestrictionEntry_defaultValue android:defaultValue}</code></td><td>The default value for the preference, which will be set either if persistence
 * is off or persistence is on and the preference is not found in the persistent
 * storage.</td></tr>
 * <tr><td><code>{@link #RestrictionEntry_entryValues android:entryValues}</code></td><td>The array to find the value to save for a preference when an entry from
 * entries is selected.</td></tr>
 * <tr><td><code>{@link #RestrictionEntry_restrictionType android:restrictionType}</code></td><td></td></tr>
 * </table>
 * @see #RestrictionEntry_description
 * @see #RestrictionEntry_entries
 * @see #RestrictionEntry_title
 * @see #RestrictionEntry_key
 * @see #RestrictionEntry_defaultValue
 * @see #RestrictionEntry_entryValues
 * @see #RestrictionEntry_restrictionType
 */

public static final int[] RestrictionEntry;
static { RestrictionEntry = new int[0]; }

/**
 * <p>
 * @attr description
 * The default value for the preference, which will be set either if persistence
 * is off or persistence is on and the preference is not found in the persistent
 * storage.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:defaultValue
 */

public static final int RestrictionEntry_defaultValue = 4; // 0x4

/**
 * <p>
 * @attr description
 * Descriptive text for the associated data.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:description
 */

public static final int RestrictionEntry_description = 0; // 0x0

/**
 * <p>
 * @attr description
 * Reference to an array resource that will populate a list/adapter.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:entries
 */

public static final int RestrictionEntry_entries = 1; // 0x1

/**
 * <p>
 * @attr description
 * The array to find the value to save for a preference when an entry from
 * entries is selected. If a user clicks on the second item in entries, the
 * second item in this array will be saved to the preference.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:entryValues
 */

public static final int RestrictionEntry_entryValues = 5; // 0x5

/**
 * <p>
 * @attr description
 * The key to store the Preference value.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:key
 */

public static final int RestrictionEntry_key = 3; // 0x3

/**
 * <p>This symbol is the offset where the {@link android.R.attr#restrictionType}
 * attribute's value can be found in the {@link #RestrictionEntry} array.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bool</td><td>1</td><td></td></tr>
 * <tr><td>bundle</td><td>7</td><td></td></tr>
 * <tr><td>bundle_array</td><td>8</td><td></td></tr>
 * <tr><td>choice</td><td>2</td><td></td></tr>
 * <tr><td>hidden</td><td>0</td><td></td></tr>
 * <tr><td>integer</td><td>5</td><td></td></tr>
 * <tr><td>multi-select</td><td>4</td><td></td></tr>
 * <tr><td>string</td><td>6</td><td></td></tr>
 * </table>
 *
 * @attr name android:restrictionType
 */

public static final int RestrictionEntry_restrictionType = 6; // 0x6

/**
 * <p>
 * @attr description
 * The title associated with the item.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:title
 */

public static final int RestrictionEntry_title = 2; // 0x2

/**
 * Base attributes available to RingtonePreference.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #RingtonePreference_ringtoneType android:ringtoneType}</code></td><td>Which ringtone type(s) to show in the picker.</td></tr>
 * <tr><td><code>{@link #RingtonePreference_showDefault android:showDefault}</code></td><td>Whether to show an item for a default sound.</td></tr>
 * <tr><td><code>{@link #RingtonePreference_showSilent android:showSilent}</code></td><td>Whether to show an item for 'Silent'.</td></tr>
 * </table>
 * @see #RingtonePreference_ringtoneType
 * @see #RingtonePreference_showDefault
 * @see #RingtonePreference_showSilent
 */

public static final int[] RingtonePreference;
static { RingtonePreference = new int[0]; }

/**
 * <p>
 * @attr description
 * Which ringtone type(s) to show in the picker.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>alarm</td><td>4</td><td>Alarm sounds.</td></tr>
 * <tr><td>all</td><td>7</td><td>All available ringtone sounds.</td></tr>
 * <tr><td>notification</td><td>2</td><td>Notification sounds.</td></tr>
 * <tr><td>ringtone</td><td>1</td><td>Ringtones.</td></tr>
 * </table>
 *
 * @attr name android:ringtoneType
 */

public static final int RingtonePreference_ringtoneType = 0; // 0x0

/**
 * <p>
 * @attr description
 * Whether to show an item for a default sound.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:showDefault
 */

public static final int RingtonePreference_showDefault = 1; // 0x1

/**
 * <p>
 * @attr description
 * Whether to show an item for 'Silent'.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:showSilent
 */

public static final int RingtonePreference_showSilent = 2; // 0x2

/**
 * Drawable used to show animated touch feedback.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #RippleDrawable_color android:color}</code></td><td>Solid color for the gradient shape.</td></tr>
 * <tr><td><code>{@link #RippleDrawable_radius android:radius}</code></td><td>Defines the radius of the four corners.</td></tr>
 * </table>
 * @see #RippleDrawable_color
 * @see #RippleDrawable_radius
 */

public static final int[] RippleDrawable;
static { RippleDrawable = new int[0]; }

/**
 * <p>
 * @attr description
 * The color to use for ripple effects. This attribute is required.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:color
 */

public static final int RippleDrawable_color = 0; // 0x0

/**
 * <p>
 * @attr description
 * The radius of the ripple when fully expanded. By default, the
 * radius is computed based on the size of the ripple's container.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:radius
 */

public static final int RippleDrawable_radius = 1; // 0x1

/**
 * Attributes that can be used with a RotateAnimation.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #RotateAnimation_fromDegrees android:fromDegrees}</code></td><td></td></tr>
 * <tr><td><code>{@link #RotateAnimation_toDegrees android:toDegrees}</code></td><td></td></tr>
 * <tr><td><code>{@link #RotateAnimation_pivotX android:pivotX}</code></td><td></td></tr>
 * <tr><td><code>{@link #RotateAnimation_pivotY android:pivotY}</code></td><td></td></tr>
 * </table>
 * @see #RotateAnimation_fromDegrees
 * @see #RotateAnimation_toDegrees
 * @see #RotateAnimation_pivotX
 * @see #RotateAnimation_pivotY
 */

public static final int[] RotateAnimation;
static { RotateAnimation = new int[0]; }

/**
 * <p>This symbol is the offset where the {@link android.R.attr#fromDegrees}
 * attribute's value can be found in the {@link #RotateAnimation} array.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:fromDegrees
 */

public static final int RotateAnimation_fromDegrees = 0; // 0x0

/**
 * <p>This symbol is the offset where the {@link android.R.attr#pivotX}
 * attribute's value can be found in the {@link #RotateAnimation} array.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:pivotX
 */

public static final int RotateAnimation_pivotX = 2; // 0x2

/**
 * <p>This symbol is the offset where the {@link android.R.attr#pivotY}
 * attribute's value can be found in the {@link #RotateAnimation} array.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:pivotY
 */

public static final int RotateAnimation_pivotY = 3; // 0x3

/**
 * <p>This symbol is the offset where the {@link android.R.attr#toDegrees}
 * attribute's value can be found in the {@link #RotateAnimation} array.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:toDegrees
 */

public static final int RotateAnimation_toDegrees = 1; // 0x1

/**
 * Drawable used to rotate another drawable.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #RotateDrawable_visible android:visible}</code></td><td>Provides initial visibility state of the drawable; the default
 * value is false.</td></tr>
 * <tr><td><code>{@link #RotateDrawable_drawable android:drawable}</code></td><td>Reference to a drawable resource to use for the frame.</td></tr>
 * <tr><td><code>{@link #RotateDrawable_fromDegrees android:fromDegrees}</code></td><td></td></tr>
 * <tr><td><code>{@link #RotateDrawable_toDegrees android:toDegrees}</code></td><td></td></tr>
 * <tr><td><code>{@link #RotateDrawable_pivotX android:pivotX}</code></td><td></td></tr>
 * <tr><td><code>{@link #RotateDrawable_pivotY android:pivotY}</code></td><td></td></tr>
 * </table>
 * @see #RotateDrawable_visible
 * @see #RotateDrawable_drawable
 * @see #RotateDrawable_fromDegrees
 * @see #RotateDrawable_toDegrees
 * @see #RotateDrawable_pivotX
 * @see #RotateDrawable_pivotY
 */

public static final int[] RotateDrawable;
static { RotateDrawable = new int[0]; }

/**
 * <p>
 * @attr description
 * Reference to a drawable resource to use for the frame.  If not
 * given, the drawable must be defined by the first child tag.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:drawable
 */

public static final int RotateDrawable_drawable = 1; // 0x1

/**
 * <p>This symbol is the offset where the {@link android.R.attr#fromDegrees}
 * attribute's value can be found in the {@link #RotateDrawable} array.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:fromDegrees
 */

public static final int RotateDrawable_fromDegrees = 2; // 0x2

/**
 * <p>This symbol is the offset where the {@link android.R.attr#pivotX}
 * attribute's value can be found in the {@link #RotateDrawable} array.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:pivotX
 */

public static final int RotateDrawable_pivotX = 4; // 0x4

/**
 * <p>This symbol is the offset where the {@link android.R.attr#pivotY}
 * attribute's value can be found in the {@link #RotateDrawable} array.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:pivotY
 */

public static final int RotateDrawable_pivotY = 5; // 0x5

/**
 * <p>This symbol is the offset where the {@link android.R.attr#toDegrees}
 * attribute's value can be found in the {@link #RotateDrawable} array.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:toDegrees
 */

public static final int RotateDrawable_toDegrees = 3; // 0x3

/**
 * <p>
 * @attr description
 * Provides initial visibility state of the drawable; the default
 * value is false.  See
 * {@link android.graphics.drawable.Drawable#setVisible}.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:visible
 */

public static final int RotateDrawable_visible = 0; // 0x0

/**
 * Attributes that can be used with a ScaleAnimation.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #ScaleAnimation_pivotX android:pivotX}</code></td><td></td></tr>
 * <tr><td><code>{@link #ScaleAnimation_pivotY android:pivotY}</code></td><td></td></tr>
 * <tr><td><code>{@link #ScaleAnimation_fromXScale android:fromXScale}</code></td><td></td></tr>
 * <tr><td><code>{@link #ScaleAnimation_toXScale android:toXScale}</code></td><td></td></tr>
 * <tr><td><code>{@link #ScaleAnimation_fromYScale android:fromYScale}</code></td><td></td></tr>
 * <tr><td><code>{@link #ScaleAnimation_toYScale android:toYScale}</code></td><td></td></tr>
 * </table>
 * @see #ScaleAnimation_pivotX
 * @see #ScaleAnimation_pivotY
 * @see #ScaleAnimation_fromXScale
 * @see #ScaleAnimation_toXScale
 * @see #ScaleAnimation_fromYScale
 * @see #ScaleAnimation_toYScale
 */

public static final int[] ScaleAnimation;
static { ScaleAnimation = new int[0]; }

/**
 * <p>This symbol is the offset where the {@link android.R.attr#fromXScale}
 * attribute's value can be found in the {@link #ScaleAnimation} array.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:fromXScale
 */

public static final int ScaleAnimation_fromXScale = 2; // 0x2

/**
 * <p>This symbol is the offset where the {@link android.R.attr#fromYScale}
 * attribute's value can be found in the {@link #ScaleAnimation} array.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:fromYScale
 */

public static final int ScaleAnimation_fromYScale = 4; // 0x4

/**
 * <p>This symbol is the offset where the {@link android.R.attr#pivotX}
 * attribute's value can be found in the {@link #ScaleAnimation} array.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:pivotX
 */

public static final int ScaleAnimation_pivotX = 0; // 0x0

/**
 * <p>This symbol is the offset where the {@link android.R.attr#pivotY}
 * attribute's value can be found in the {@link #ScaleAnimation} array.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:pivotY
 */

public static final int ScaleAnimation_pivotY = 1; // 0x1

/**
 * <p>This symbol is the offset where the {@link android.R.attr#toXScale}
 * attribute's value can be found in the {@link #ScaleAnimation} array.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:toXScale
 */

public static final int ScaleAnimation_toXScale = 3; // 0x3

/**
 * <p>This symbol is the offset where the {@link android.R.attr#toYScale}
 * attribute's value can be found in the {@link #ScaleAnimation} array.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:toYScale
 */

public static final int ScaleAnimation_toYScale = 5; // 0x5

/**
 * Attributes that can be used with a ScaleDrawable.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #ScaleDrawable_drawable android:drawable}</code></td><td>Reference to a drawable resource to use for the frame.</td></tr>
 * <tr><td><code>{@link #ScaleDrawable_scaleWidth android:scaleWidth}</code></td><td>Scale width, expressed as a percentage of the drawable's bound.</td></tr>
 * <tr><td><code>{@link #ScaleDrawable_scaleHeight android:scaleHeight}</code></td><td>Scale height, expressed as a percentage of the drawable's bound.</td></tr>
 * <tr><td><code>{@link #ScaleDrawable_scaleGravity android:scaleGravity}</code></td><td>Specifies where the drawable is positioned after scaling.</td></tr>
 * <tr><td><code>{@link #ScaleDrawable_useIntrinsicSizeAsMinimum android:useIntrinsicSizeAsMinimum}</code></td><td>Use the drawable's intrinsic width and height as minimum size values.</td></tr>
 * <tr><td><code>{@link #ScaleDrawable_level android:level}</code></td><td>Specifies the initial drawable level in the range 0 to 10000.</td></tr>
 * </table>
 * @see #ScaleDrawable_drawable
 * @see #ScaleDrawable_scaleWidth
 * @see #ScaleDrawable_scaleHeight
 * @see #ScaleDrawable_scaleGravity
 * @see #ScaleDrawable_useIntrinsicSizeAsMinimum
 * @see #ScaleDrawable_level
 */

public static final int[] ScaleDrawable;
static { ScaleDrawable = new int[0]; }

/**
 * <p>
 * @attr description
 * Reference to a drawable resource to draw with the specified scale.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:drawable
 */

public static final int ScaleDrawable_drawable = 0; // 0x0

/**
 * <p>
 * @attr description
 * Specifies the initial drawable level in the range 0 to 10000.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:level
 */

public static final int ScaleDrawable_level = 5; // 0x5

/**
 * <p>
 * @attr description
 * Specifies where the drawable is positioned after scaling. The default value is
 * left.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
 * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
 * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
 * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
 * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the horizontal gravity: a left gravity will clip the right
 * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
 * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the vertical gravity: a top gravity will clip the bottom
 * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
 * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
 * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
 * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
 * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
 * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
 * </table>
 *
 * @attr name android:scaleGravity
 */

public static final int ScaleDrawable_scaleGravity = 3; // 0x3

/**
 * <p>
 * @attr description
 * Scale height, expressed as a percentage of the drawable's bound. The value's
 * format is XX%. For instance: 100%, 12.5%, etc.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:scaleHeight
 */

public static final int ScaleDrawable_scaleHeight = 2; // 0x2

/**
 * <p>
 * @attr description
 * Scale width, expressed as a percentage of the drawable's bound. The value's
 * format is XX%. For instance: 100%, 12.5%, etc.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:scaleWidth
 */

public static final int ScaleDrawable_scaleWidth = 1; // 0x1

/**
 * <p>
 * @attr description
 * Use the drawable's intrinsic width and height as minimum size values.
 * Useful if the target drawable is a 9-patch or otherwise should not be scaled
 * down beyond a minimum size.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:useIntrinsicSizeAsMinimum
 */

public static final int ScaleDrawable_useIntrinsicSizeAsMinimum = 4; // 0x4

/**
 * Attributes that can be used with a ScrollView.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #ScrollView_fillViewport android:fillViewport}</code></td><td>Defines whether the scrollview should stretch its content to fill the viewport.</td></tr>
 * </table>
 * @see #ScrollView_fillViewport
 */

public static final int[] ScrollView;
static { ScrollView = new int[0]; }

/**
 * <p>
 * @attr description
 * Defines whether the scrollview should stretch its content to fill the viewport.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:fillViewport
 */

public static final int ScrollView_fillViewport = 0; // 0x0

/**
 * Attributes that can be used with a SearchView.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #SearchView_layout android:layout}</code></td><td>Supply an identifier for the layout resource to inflate when the ViewStub
 * becomes visible or when forced to do so.</td></tr>
 * <tr><td><code>{@link #SearchView_maxWidth android:maxWidth}</code></td><td>An optional argument to supply a maximum width for this view.</td></tr>
 * <tr><td><code>{@link #SearchView_inputType android:inputType}</code></td><td>The type of data being placed in a text field, used to help an
 * input method decide how to let the user enter text.</td></tr>
 * <tr><td><code>{@link #SearchView_imeOptions android:imeOptions}</code></td><td>Additional features you can enable in an IME associated with an editor
 * to improve the integration with your application.</td></tr>
 * <tr><td><code>{@link #SearchView_iconifiedByDefault android:iconifiedByDefault}</code></td><td>The default state of the SearchView.</td></tr>
 * <tr><td><code>{@link #SearchView_queryHint android:queryHint}</code></td><td>An optional query hint string to be displayed in the empty query field.</td></tr>
 * <tr><td><code>{@link #SearchView_closeIcon android:closeIcon}</code></td><td>Close button icon.</td></tr>
 * <tr><td><code>{@link #SearchView_goIcon android:goIcon}</code></td><td>Go button icon.</td></tr>
 * <tr><td><code>{@link #SearchView_searchIcon android:searchIcon}</code></td><td>Search icon.</td></tr>
 * <tr><td><code>{@link #SearchView_voiceIcon android:voiceIcon}</code></td><td>Voice button icon.</td></tr>
 * <tr><td><code>{@link #SearchView_commitIcon android:commitIcon}</code></td><td>Commit icon shown in the query suggestion row.</td></tr>
 * <tr><td><code>{@link #SearchView_suggestionRowLayout android:suggestionRowLayout}</code></td><td>Layout for query suggestion rows.</td></tr>
 * <tr><td><code>{@link #SearchView_queryBackground android:queryBackground}</code></td><td>Background for the section containing the search query.</td></tr>
 * <tr><td><code>{@link #SearchView_submitBackground android:submitBackground}</code></td><td>Background for the section containing the action (for example, voice search).</td></tr>
 * <tr><td><code>{@link #SearchView_searchHintIcon android:searchHintIcon}</code></td><td>Search icon displayed as a text field hint.</td></tr>
 * </table>
 * @see #SearchView_layout
 * @see #SearchView_maxWidth
 * @see #SearchView_inputType
 * @see #SearchView_imeOptions
 * @see #SearchView_iconifiedByDefault
 * @see #SearchView_queryHint
 * @see #SearchView_closeIcon
 * @see #SearchView_goIcon
 * @see #SearchView_searchIcon
 * @see #SearchView_voiceIcon
 * @see #SearchView_commitIcon
 * @see #SearchView_suggestionRowLayout
 * @see #SearchView_queryBackground
 * @see #SearchView_submitBackground
 * @see #SearchView_searchHintIcon
 */

public static final int[] SearchView;
static { SearchView = new int[0]; }

/**
 * <p>
 * @attr description
 * Close button icon.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:closeIcon
 */

public static final int SearchView_closeIcon = 6; // 0x6

/**
 * <p>
 * @attr description
 * Commit icon shown in the query suggestion row.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:commitIcon
 */

public static final int SearchView_commitIcon = 10; // 0xa

/**
 * <p>
 * @attr description
 * Go button icon.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:goIcon
 */

public static final int SearchView_goIcon = 7; // 0x7

/**
 * <p>
 * @attr description
 * The default state of the SearchView. If true, it will be iconified when not in
 * use and expanded when clicked.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:iconifiedByDefault
 */

public static final int SearchView_iconifiedByDefault = 4; // 0x4

/**
 * <p>
 * @attr description
 * The IME options to set on the query text field.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>actionDone</td><td>6</td><td>The action key performs a "done"
 * operation, closing the soft input method.
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_ACTION_DONE}.</td></tr>
 * <tr><td>actionGo</td><td>2</td><td>The action key performs a "go"
 * operation to take the user to the target of the text they typed.
 * Typically used, for example, when entering a URL.
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_ACTION_GO}.</td></tr>
 * <tr><td>actionNext</td><td>5</td><td>The action key performs a "next"
 * operation, taking the user to the next field that will accept text.
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_ACTION_NEXT}.</td></tr>
 * <tr><td>actionNone</td><td>1</td><td>This editor has no action associated with it.
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_ACTION_NONE}.</td></tr>
 * <tr><td>actionPrevious</td><td>7</td><td>The action key performs a "previous"
 * operation, taking the user to the previous field that will accept text.
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_ACTION_PREVIOUS}.</td></tr>
 * <tr><td>actionSearch</td><td>3</td><td>The action key performs a "search"
 * operation, taking the user to the results of searching for the text
 * the have typed (in whatever context is appropriate).
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_ACTION_SEARCH}.</td></tr>
 * <tr><td>actionSend</td><td>4</td><td>The action key performs a "send"
 * operation, delivering the text to its target.  This is typically used
 * when composing a message.
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_ACTION_SEND}.</td></tr>
 * <tr><td>actionUnspecified</td><td>0</td><td>There is no specific action associated with this editor, let the
 * editor come up with its own if it can.
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_NULL}.</td></tr>
 * <tr><td>flagForceAscii</td><td>80000000</td><td>Used to request that the IME should be capable of inputting ASCII
 * characters.  The intention of this flag is to ensure that the user
 * can type Roman alphabet characters in a {@link android.widget.TextView}
 * used for, typically, account ID or password input.  It is expected that IMEs
 * normally are able to input ASCII even without being told so (such IMEs
 * already respect this flag in a sense), but there could be some cases they
 * aren't when, for instance, only non-ASCII input languages like Arabic,
 * Greek, Hebrew, Russian are enabled in the IME.  Applications need to be
 * aware that the flag is not a guarantee, and not all IMEs will respect it.
 * However, it is strongly recommended for IME authors to respect this flag
 * especially when their IME could end up with a state that has only non-ASCII
 * input languages enabled.
 * <p>Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_FLAG_FORCE_ASCII}.</td></tr>
 * <tr><td>flagNavigateNext</td><td>8000000</td><td>Used to specify that there is something
 * interesting that a forward navigation can focus on. This is like using
 * actionNext, except allows the IME to be multiline (with
 * an enter key) as well as provide forward navigation.  Note that some
 * IMEs may not be able to do this, especially when running on a small
 * screen where there is little space.  In that case it does not need to
 * present a UI for this option.  Like actionNext, if the
 * user selects the IME's facility to forward navigate, this will show up
 * in the application at
 * {@link android.view.inputmethod.InputConnection#performEditorAction(int)
 * InputConnection.performEditorAction(int)}.
 * <p>Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NAVIGATE_NEXT}.</td></tr>
 * <tr><td>flagNavigatePrevious</td><td>4000000</td><td>Like flagNavigateNext, but
 * specifies there is something interesting that a backward navigation
 * can focus on.  If the user selects the IME's facility to backward
 * navigate, this will show up in the application as an actionPrevious
 * at {@link android.view.inputmethod.InputConnection#performEditorAction(int)
 * InputConnection.performEditorAction(int)}.
 * <p>Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NAVIGATE_PREVIOUS}.</td></tr>
 * <tr><td>flagNoAccessoryAction</td><td>20000000</td><td>Used in conjunction with a custom action, this indicates that the
 * action should not be available as an accessory button when the
 * input method is full-screen.
 * Note that by setting this flag, there can be cases where the action
 * is simply never available to the user.  Setting this generally means
 * that you think showing text being edited is more important than the
 * action you have supplied.
 * <p>Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_ACCESSORY_ACTION}.</td></tr>
 * <tr><td>flagNoEnterAction</td><td>40000000</td><td>Used in conjunction with a custom action,
 * this indicates that the action should not be available in-line as
 * a replacement for the "enter" key.  Typically this is
 * because the action has such a significant impact or is not recoverable
 * enough that accidentally hitting it should be avoided, such as sending
 * a message.    Note that {@link android.widget.TextView} will
 * automatically set this flag for you on multi-line text views.
 * <p>Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_ENTER_ACTION}.</td></tr>
 * <tr><td>flagNoExtractUi</td><td>10000000</td><td>Used to specify that the IME does not need
 * to show its extracted text UI.  For input methods that may be fullscreen,
 * often when in landscape mode, this allows them to be smaller and let part
 * of the application be shown behind.  Though there will likely be limited
 * access to the application available from the user, it can make the
 * experience of a (mostly) fullscreen IME less jarring.  Note that when
 * this flag is specified the IME may <em>not</em> be set up to be able
 * to display text, so it should only be used in situations where this is
 * not needed.
 * <p>Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_EXTRACT_UI}.</td></tr>
 * <tr><td>flagNoFullscreen</td><td>2000000</td><td>Used to request that the IME never go
 * into fullscreen mode.  Applications need to be aware that the flag is not
 * a guarantee, and not all IMEs will respect it.
 * <p>Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_FULLSCREEN}.</td></tr>
 * <tr><td>flagNoPersonalizedLearning</td><td>1000000</td><td>Used to request that the IME should not update any personalized data such as typing
 * history and personalized language model based on what the user typed on this text
 * editing object. Typical use cases are:
 * <ul>
 * <li>When the application is in a special mode, where user's activities are expected
 * to be not recorded in the application's history. Some web browsers and chat
 * applications may have this kind of modes.</li>
 * <li>When storing typing history does not make much sense.  Specifying this flag in
 * typing games may help to avoid typing history from being filled up with words that
 * the user is less likely to type in their daily life.  Another example is that when
 * the application already knows that the expected input is not a valid word (e.g. a
 * promotion code that is not a valid word in any natural language).</li>
 * </ul>
 * <p>Applications need to be aware that the flag is not a guarantee, and some IMEs may
 * not respect it.</p></td></tr>
 * <tr><td>normal</td><td>0</td><td>There are no special semantics associated with this editor.</td></tr>
 * </table>
 *
 * @attr name android:imeOptions
 */

public static final int SearchView_imeOptions = 3; // 0x3

/**
 * <p>
 * @attr description
 * The input type to set on the query text field.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>date</td><td>14</td><td>For entering a date.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_DATETIME} |
 * {@link android.text.InputType#TYPE_DATETIME_VARIATION_DATE}.</td></tr>
 * <tr><td>datetime</td><td>4</td><td>For entering a date and time.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_DATETIME} |
 * {@link android.text.InputType#TYPE_DATETIME_VARIATION_NORMAL}.</td></tr>
 * <tr><td>none</td><td>0</td><td>There is no content type.  The text is not editable.</td></tr>
 * <tr><td>number</td><td>2</td><td>A numeric only field.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
 * {@link android.text.InputType#TYPE_NUMBER_VARIATION_NORMAL}.</td></tr>
 * <tr><td>numberDecimal</td><td>2002</td><td>Can be combined with <var>number</var> and its other options to
 * allow a decimal (fractional) number.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
 * {@link android.text.InputType#TYPE_NUMBER_FLAG_DECIMAL}.</td></tr>
 * <tr><td>numberPassword</td><td>12</td><td>A numeric password field.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
 * {@link android.text.InputType#TYPE_NUMBER_VARIATION_PASSWORD}.</td></tr>
 * <tr><td>numberSigned</td><td>1002</td><td>Can be combined with <var>number</var> and its other options to
 * allow a signed number.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
 * {@link android.text.InputType#TYPE_NUMBER_FLAG_SIGNED}.</td></tr>
 * <tr><td>phone</td><td>3</td><td>For entering a phone number.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_PHONE}.</td></tr>
 * <tr><td>text</td><td>1</td><td>Just plain old text.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_NORMAL}.</td></tr>
 * <tr><td>textAutoComplete</td><td>10001</td><td>Can be combined with <var>text</var> and its variations to
 * specify that this field will be doing its own auto-completion and
 * talking with the input method appropriately.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_AUTO_COMPLETE}.</td></tr>
 * <tr><td>textAutoCorrect</td><td>8001</td><td>Can be combined with <var>text</var> and its variations to
 * request auto-correction of text being input.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_AUTO_CORRECT}.</td></tr>
 * <tr><td>textCapCharacters</td><td>1001</td><td>Can be combined with <var>text</var> and its variations to
 * request capitalization of all characters.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_CHARACTERS}.</td></tr>
 * <tr><td>textCapSentences</td><td>4001</td><td>Can be combined with <var>text</var> and its variations to
 * request capitalization of the first character of every sentence.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_SENTENCES}.</td></tr>
 * <tr><td>textCapWords</td><td>2001</td><td>Can be combined with <var>text</var> and its variations to
 * request capitalization of the first character of every word.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_WORDS}.</td></tr>
 * <tr><td>textEmailAddress</td><td>21</td><td>Text that will be used as an e-mail address.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_EMAIL_ADDRESS}.</td></tr>
 * <tr><td>textEmailSubject</td><td>31</td><td>Text that is being supplied as the subject of an e-mail.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_EMAIL_SUBJECT}.</td></tr>
 * <tr><td>textFilter</td><td>b1</td><td>Text that is filtering some other data.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_FILTER}.</td></tr>
 * <tr><td>textImeMultiLine</td><td>40001</td><td>Can be combined with <var>text</var> and its variations to
 * indicate that though the regular text view should not be multiple
 * lines, the IME should provide multiple lines if it can.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_IME_MULTI_LINE}.</td></tr>
 * <tr><td>textLongMessage</td><td>51</td><td>Text that is the content of a long message.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_LONG_MESSAGE}.</td></tr>
 * <tr><td>textMultiLine</td><td>20001</td><td>Can be combined with <var>text</var> and its variations to
 * allow multiple lines of text in the field.  If this flag is not set,
 * the text field will be constrained to a single line.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_MULTI_LINE}.</td></tr>
 * <tr><td>textNoSuggestions</td><td>80001</td><td>Can be combined with <var>text</var> and its variations to
 * indicate that the IME should not show any
 * dictionary-based word suggestions.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_NO_SUGGESTIONS}.</td></tr>
 * <tr><td>textPassword</td><td>81</td><td>Text that is a password.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_PASSWORD}.</td></tr>
 * <tr><td>textPersonName</td><td>61</td><td>Text that is the name of a person.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_PERSON_NAME}.</td></tr>
 * <tr><td>textPhonetic</td><td>c1</td><td>Text that is for phonetic pronunciation, such as a phonetic name
 * field in a contact entry.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_PHONETIC}.</td></tr>
 * <tr><td>textPostalAddress</td><td>71</td><td>Text that is being supplied as a postal mailing address.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_POSTAL_ADDRESS}.</td></tr>
 * <tr><td>textShortMessage</td><td>41</td><td>Text that is the content of a short message.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_SHORT_MESSAGE}.</td></tr>
 * <tr><td>textUri</td><td>11</td><td>Text that will be used as a URI.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_URI}.</td></tr>
 * <tr><td>textVisiblePassword</td><td>91</td><td>Text that is a password that should be visible.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_VISIBLE_PASSWORD}.</td></tr>
 * <tr><td>textWebEditText</td><td>a1</td><td>Text that is being supplied as text in a web form.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_EDIT_TEXT}.</td></tr>
 * <tr><td>textWebEmailAddress</td><td>d1</td><td>Text that will be used as an e-mail address on a web form.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS}.</td></tr>
 * <tr><td>textWebPassword</td><td>e1</td><td>Text that will be used as a password on a web form.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_PASSWORD}.</td></tr>
 * <tr><td>time</td><td>24</td><td>For entering a time.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_DATETIME} |
 * {@link android.text.InputType#TYPE_DATETIME_VARIATION_TIME}.</td></tr>
 * </table>
 *
 * @attr name android:inputType
 */

public static final int SearchView_inputType = 2; // 0x2

/**
 * <p>
 * @attr description
 * The layout to use for the search view.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:layout
 */

public static final int SearchView_layout = 0; // 0x0

/**
 * <p>
 * @attr description
 * An optional maximum width of the SearchView.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:maxWidth
 */

public static final int SearchView_maxWidth = 1; // 0x1

/**
 * <p>
 * @attr description
 * Background for the section containing the search query.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:queryBackground
 */

public static final int SearchView_queryBackground = 12; // 0xc

/**
 * <p>
 * @attr description
 * An optional query hint string to be displayed in the empty query field.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:queryHint
 */

public static final int SearchView_queryHint = 5; // 0x5

/**
 * <p>
 * @attr description
 * Search icon displayed as a text field hint.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:searchHintIcon
 */

public static final int SearchView_searchHintIcon = 14; // 0xe

/**
 * <p>
 * @attr description
 * Search icon.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:searchIcon
 */

public static final int SearchView_searchIcon = 8; // 0x8

/**
 * <p>
 * @attr description
 * Background for the section containing the action (for example, voice search).
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:submitBackground
 */

public static final int SearchView_submitBackground = 13; // 0xd

/**
 * <p>
 * @attr description
 * Layout for query suggestion rows.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:suggestionRowLayout
 */

public static final int SearchView_suggestionRowLayout = 11; // 0xb

/**
 * <p>
 * @attr description
 * Voice button icon.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:voiceIcon
 */

public static final int SearchView_voiceIcon = 9; // 0x9

/**
 * Searchable activities and applications must provide search configuration information
 * in an XML file, typically called searchable.xml.  This file is referenced in your manifest.
 * For a more in-depth discussion of search configuration, please refer to
 * {@link android.app.SearchManager}.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #Searchable_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
 * <tr><td><code>{@link #Searchable_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
 * associated item.</td></tr>
 * <tr><td><code>{@link #Searchable_hint android:hint}</code></td><td>Hint text to display when the text is empty.</td></tr>
 * <tr><td><code>{@link #Searchable_searchMode android:searchMode}</code></td><td>Additional features are controlled by mode bits in this field.</td></tr>
 * <tr><td><code>{@link #Searchable_searchSuggestAuthority android:searchSuggestAuthority}</code></td><td>If provided, this is the trigger indicating that the searchable activity
 * provides suggestions as well.</td></tr>
 * <tr><td><code>{@link #Searchable_searchSuggestPath android:searchSuggestPath}</code></td><td>If provided, this will be inserted in the suggestions query Uri, after the authority
 * you have provide but before the standard suggestions path.</td></tr>
 * <tr><td><code>{@link #Searchable_searchSuggestSelection android:searchSuggestSelection}</code></td><td>If provided, suggestion queries will be passed into your query function
 * as the <i>selection</i> parameter.</td></tr>
 * <tr><td><code>{@link #Searchable_searchSuggestIntentAction android:searchSuggestIntentAction}</code></td><td>If provided, and not overridden by an action in the selected suggestion, this
 * string will be placed in the action field of the {@link android.content.Intent Intent}
 * when the user clicks a suggestion.</td></tr>
 * <tr><td><code>{@link #Searchable_searchSuggestIntentData android:searchSuggestIntentData}</code></td><td>If provided, and not overridden by an action in the selected suggestion, this
 * string will be placed in the data field of the {@link android.content.Intent Intent}
 * when the user clicks a suggestion.</td></tr>
 * <tr><td><code>{@link #Searchable_searchButtonText android:searchButtonText}</code></td><td>If supplied, this string will be displayed as the text of the "Search" button.</td></tr>
 * <tr><td><code>{@link #Searchable_inputType android:inputType}</code></td><td>The type of data being placed in a text field, used to help an
 * input method decide how to let the user enter text.</td></tr>
 * <tr><td><code>{@link #Searchable_voiceSearchMode android:voiceSearchMode}</code></td><td>Voice search features are controlled by mode bits in this field.</td></tr>
 * <tr><td><code>{@link #Searchable_voiceLanguageModel android:voiceLanguageModel}</code></td><td>If provided, this specifies the language model that should be used by the
 * voice recognition system.</td></tr>
 * <tr><td><code>{@link #Searchable_voicePromptText android:voicePromptText}</code></td><td>If provided, this specifies a prompt that will be displayed during voice input.</td></tr>
 * <tr><td><code>{@link #Searchable_voiceLanguage android:voiceLanguage}</code></td><td>If provided, this specifies the spoken language to be expected, and that it will be
 * different than the one set in the {@link java.util.Locale#getDefault()}.</td></tr>
 * <tr><td><code>{@link #Searchable_voiceMaxResults android:voiceMaxResults}</code></td><td>If provided, enforces the maximum number of results to return, including the "best"
 * result which will always be provided as the SEARCH intent's primary query.</td></tr>
 * <tr><td><code>{@link #Searchable_imeOptions android:imeOptions}</code></td><td>Additional features you can enable in an IME associated with an editor
 * to improve the integration with your application.</td></tr>
 * <tr><td><code>{@link #Searchable_searchSuggestThreshold android:searchSuggestThreshold}</code></td><td>If provided, this is the minimum number of characters needed to trigger
 * search suggestions.</td></tr>
 * <tr><td><code>{@link #Searchable_includeInGlobalSearch android:includeInGlobalSearch}</code></td><td>If provided and <code>true</code>, this searchable activity will be
 * included in any global lists of search targets.</td></tr>
 * <tr><td><code>{@link #Searchable_queryAfterZeroResults android:queryAfterZeroResults}</code></td><td>If provided and <code>true</code>, this searchable activity will be invoked for all
 * queries in a particular session.</td></tr>
 * <tr><td><code>{@link #Searchable_searchSettingsDescription android:searchSettingsDescription}</code></td><td>If provided, this string will be used to describe the searchable item in the
 * searchable items settings within system search settings.</td></tr>
 * <tr><td><code>{@link #Searchable_autoUrlDetect android:autoUrlDetect}</code></td><td>If provided and <code>true</code>, URLs entered in the search dialog while searching
 * within this activity would be detected and treated as URLs (show a 'go' button in the
 * keyboard and invoke the browser directly when user launches the URL instead of passing
 * the URL to the activity).</td></tr>
 * </table>
 * @see #Searchable_label
 * @see #Searchable_icon
 * @see #Searchable_hint
 * @see #Searchable_searchMode
 * @see #Searchable_searchSuggestAuthority
 * @see #Searchable_searchSuggestPath
 * @see #Searchable_searchSuggestSelection
 * @see #Searchable_searchSuggestIntentAction
 * @see #Searchable_searchSuggestIntentData
 * @see #Searchable_searchButtonText
 * @see #Searchable_inputType
 * @see #Searchable_voiceSearchMode
 * @see #Searchable_voiceLanguageModel
 * @see #Searchable_voicePromptText
 * @see #Searchable_voiceLanguage
 * @see #Searchable_voiceMaxResults
 * @see #Searchable_imeOptions
 * @see #Searchable_searchSuggestThreshold
 * @see #Searchable_includeInGlobalSearch
 * @see #Searchable_queryAfterZeroResults
 * @see #Searchable_searchSettingsDescription
 * @see #Searchable_autoUrlDetect
 */

public static final int[] Searchable;
static { Searchable = new int[0]; }

/**
 * In order to process special action keys during search, you must define them using
 * one or more "ActionKey" elements in your Searchable metadata.  For a more in-depth
 * discussion of action code handling, please refer to {@link android.app.SearchManager}.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #SearchableActionKey_keycode android:keycode}</code></td><td>This enum provides the same keycode values as can be found in
 * {@link android.view.KeyEvent}.</td></tr>
 * <tr><td><code>{@link #SearchableActionKey_queryActionMsg android:queryActionMsg}</code></td><td>If you wish to handle an action key during normal search query entry, you
 * must define an action string here.</td></tr>
 * <tr><td><code>{@link #SearchableActionKey_suggestActionMsg android:suggestActionMsg}</code></td><td>If you wish to handle an action key while a suggestion is being displayed <i>and
 * selected</i>, there are two ways to handle this.</td></tr>
 * <tr><td><code>{@link #SearchableActionKey_suggestActionMsgColumn android:suggestActionMsgColumn}</code></td><td>If you wish to handle an action key while a suggestion is being displayed <i>and
 * selected</i>, but you do not wish to enable this action key for every suggestion,
 * then you can use this attribute to control it on a suggestion-by-suggestion basis.</td></tr>
 * </table>
 * @see #SearchableActionKey_keycode
 * @see #SearchableActionKey_queryActionMsg
 * @see #SearchableActionKey_suggestActionMsg
 * @see #SearchableActionKey_suggestActionMsgColumn
 */

public static final int[] SearchableActionKey;
static { SearchableActionKey = new int[0]; }

/**
 * <p>
 * @attr description
 * This attribute denotes the action key you wish to respond to.  Note that not
 * all action keys are actually supported using this mechanism, as many of them are
 * used for typing, navigation, or system functions.  This will be added to the
 * {@link android.content.Intent#ACTION_SEARCH ACTION_SEARCH} intent that is passed to your
 * searchable activity.  To examine the key code, use
 * {@link android.content.Intent#getIntExtra getIntExtra(SearchManager.ACTION_KEY)}.
 * <p>Note, in addition to the keycode, you must also provide one or more of the action
 * specifier attributes.  <i>Required attribute.</i>
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>KEYCODE_0</td><td>7</td><td></td></tr>
 * <tr><td>KEYCODE_1</td><td>8</td><td></td></tr>
 * <tr><td>KEYCODE_11</td><td>e3</td><td></td></tr>
 * <tr><td>KEYCODE_12</td><td>e4</td><td></td></tr>
 * <tr><td>KEYCODE_2</td><td>9</td><td></td></tr>
 * <tr><td>KEYCODE_3</td><td>a</td><td></td></tr>
 * <tr><td>KEYCODE_3D_MODE</td><td>ce</td><td></td></tr>
 * <tr><td>KEYCODE_4</td><td>b</td><td></td></tr>
 * <tr><td>KEYCODE_5</td><td>c</td><td></td></tr>
 * <tr><td>KEYCODE_6</td><td>d</td><td></td></tr>
 * <tr><td>KEYCODE_7</td><td>e</td><td></td></tr>
 * <tr><td>KEYCODE_8</td><td>f</td><td></td></tr>
 * <tr><td>KEYCODE_9</td><td>10</td><td></td></tr>
 * <tr><td>KEYCODE_A</td><td>1d</td><td></td></tr>
 * <tr><td>KEYCODE_ALL_APPS</td><td>11c</td><td></td></tr>
 * <tr><td>KEYCODE_ALT_LEFT</td><td>39</td><td></td></tr>
 * <tr><td>KEYCODE_ALT_RIGHT</td><td>3a</td><td></td></tr>
 * <tr><td>KEYCODE_APOSTROPHE</td><td>4b</td><td></td></tr>
 * <tr><td>KEYCODE_APP_SWITCH</td><td>bb</td><td></td></tr>
 * <tr><td>KEYCODE_ASSIST</td><td>db</td><td></td></tr>
 * <tr><td>KEYCODE_AT</td><td>4d</td><td></td></tr>
 * <tr><td>KEYCODE_AVR_INPUT</td><td>b6</td><td></td></tr>
 * <tr><td>KEYCODE_AVR_POWER</td><td>b5</td><td></td></tr>
 * <tr><td>KEYCODE_B</td><td>1e</td><td></td></tr>
 * <tr><td>KEYCODE_BACK</td><td>4</td><td></td></tr>
 * <tr><td>KEYCODE_BACKSLASH</td><td>49</td><td></td></tr>
 * <tr><td>KEYCODE_BOOKMARK</td><td>ae</td><td></td></tr>
 * <tr><td>KEYCODE_BREAK</td><td>79</td><td></td></tr>
 * <tr><td>KEYCODE_BRIGHTNESS_DOWN</td><td>dc</td><td></td></tr>
 * <tr><td>KEYCODE_BRIGHTNESS_UP</td><td>dd</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_1</td><td>bc</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_10</td><td>c5</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_11</td><td>c6</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_12</td><td>c7</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_13</td><td>c8</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_14</td><td>c9</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_15</td><td>ca</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_16</td><td>cb</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_2</td><td>bd</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_3</td><td>be</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_4</td><td>bf</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_5</td><td>c0</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_6</td><td>c1</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_7</td><td>c2</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_8</td><td>c3</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_9</td><td>c4</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_A</td><td>60</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_B</td><td>61</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_C</td><td>62</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_L1</td><td>66</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_L2</td><td>68</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_MODE</td><td>6e</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_R1</td><td>67</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_R2</td><td>69</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_SELECT</td><td>6d</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_START</td><td>6c</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_THUMBL</td><td>6a</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_THUMBR</td><td>6b</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_X</td><td>63</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_Y</td><td>64</td><td></td></tr>
 * <tr><td>KEYCODE_BUTTON_Z</td><td>65</td><td></td></tr>
 * <tr><td>KEYCODE_C</td><td>1f</td><td></td></tr>
 * <tr><td>KEYCODE_CALCULATOR</td><td>d2</td><td></td></tr>
 * <tr><td>KEYCODE_CALENDAR</td><td>d0</td><td></td></tr>
 * <tr><td>KEYCODE_CALL</td><td>5</td><td></td></tr>
 * <tr><td>KEYCODE_CAMERA</td><td>1b</td><td></td></tr>
 * <tr><td>KEYCODE_CAPS_LOCK</td><td>73</td><td></td></tr>
 * <tr><td>KEYCODE_CAPTIONS</td><td>af</td><td></td></tr>
 * <tr><td>KEYCODE_CHANNEL_DOWN</td><td>a7</td><td></td></tr>
 * <tr><td>KEYCODE_CHANNEL_UP</td><td>a6</td><td></td></tr>
 * <tr><td>KEYCODE_CLEAR</td><td>1c</td><td></td></tr>
 * <tr><td>KEYCODE_COMMA</td><td>37</td><td></td></tr>
 * <tr><td>KEYCODE_CONTACTS</td><td>cf</td><td></td></tr>
 * <tr><td>KEYCODE_COPY</td><td>116</td><td></td></tr>
 * <tr><td>KEYCODE_CTRL_LEFT</td><td>71</td><td></td></tr>
 * <tr><td>KEYCODE_CTRL_RIGHT</td><td>72</td><td></td></tr>
 * <tr><td>KEYCODE_CUT</td><td>115</td><td></td></tr>
 * <tr><td>KEYCODE_D</td><td>20</td><td></td></tr>
 * <tr><td>KEYCODE_DEL</td><td>43</td><td></td></tr>
 * <tr><td>KEYCODE_DPAD_CENTER</td><td>17</td><td></td></tr>
 * <tr><td>KEYCODE_DPAD_DOWN</td><td>14</td><td></td></tr>
 * <tr><td>KEYCODE_DPAD_DOWN_LEFT</td><td>10d</td><td></td></tr>
 * <tr><td>KEYCODE_DPAD_DOWN_RIGHT</td><td>10f</td><td></td></tr>
 * <tr><td>KEYCODE_DPAD_LEFT</td><td>15</td><td></td></tr>
 * <tr><td>KEYCODE_DPAD_RIGHT</td><td>16</td><td></td></tr>
 * <tr><td>KEYCODE_DPAD_UP</td><td>13</td><td></td></tr>
 * <tr><td>KEYCODE_DPAD_UP_LEFT</td><td>10c</td><td></td></tr>
 * <tr><td>KEYCODE_DPAD_UP_RIGHT</td><td>10e</td><td></td></tr>
 * <tr><td>KEYCODE_DVR</td><td>ad</td><td></td></tr>
 * <tr><td>KEYCODE_E</td><td>21</td><td></td></tr>
 * <tr><td>KEYCODE_EISU</td><td>d4</td><td></td></tr>
 * <tr><td>KEYCODE_ENDCALL</td><td>6</td><td></td></tr>
 * <tr><td>KEYCODE_ENTER</td><td>42</td><td></td></tr>
 * <tr><td>KEYCODE_ENVELOPE</td><td>41</td><td></td></tr>
 * <tr><td>KEYCODE_EQUALS</td><td>46</td><td></td></tr>
 * <tr><td>KEYCODE_ESCAPE</td><td>6f</td><td></td></tr>
 * <tr><td>KEYCODE_EXPLORER</td><td>40</td><td></td></tr>
 * <tr><td>KEYCODE_F</td><td>22</td><td></td></tr>
 * <tr><td>KEYCODE_F1</td><td>83</td><td></td></tr>
 * <tr><td>KEYCODE_F10</td><td>8c</td><td></td></tr>
 * <tr><td>KEYCODE_F11</td><td>8d</td><td></td></tr>
 * <tr><td>KEYCODE_F12</td><td>8e</td><td></td></tr>
 * <tr><td>KEYCODE_F2</td><td>84</td><td></td></tr>
 * <tr><td>KEYCODE_F3</td><td>85</td><td></td></tr>
 * <tr><td>KEYCODE_F4</td><td>86</td><td></td></tr>
 * <tr><td>KEYCODE_F5</td><td>87</td><td></td></tr>
 * <tr><td>KEYCODE_F6</td><td>88</td><td></td></tr>
 * <tr><td>KEYCODE_F7</td><td>89</td><td></td></tr>
 * <tr><td>KEYCODE_F8</td><td>8a</td><td></td></tr>
 * <tr><td>KEYCODE_F9</td><td>8b</td><td></td></tr>
 * <tr><td>KEYCODE_FOCUS</td><td>50</td><td></td></tr>
 * <tr><td>KEYCODE_FORWARD</td><td>7d</td><td></td></tr>
 * <tr><td>KEYCODE_FORWARD_DEL</td><td>70</td><td></td></tr>
 * <tr><td>KEYCODE_FUNCTION</td><td>77</td><td></td></tr>
 * <tr><td>KEYCODE_G</td><td>23</td><td></td></tr>
 * <tr><td>KEYCODE_GRAVE</td><td>44</td><td></td></tr>
 * <tr><td>KEYCODE_GUIDE</td><td>ac</td><td></td></tr>
 * <tr><td>KEYCODE_H</td><td>24</td><td></td></tr>
 * <tr><td>KEYCODE_HEADSETHOOK</td><td>4f</td><td></td></tr>
 * <tr><td>KEYCODE_HELP</td><td>103</td><td></td></tr>
 * <tr><td>KEYCODE_HENKAN</td><td>d6</td><td></td></tr>
 * <tr><td>KEYCODE_HOME</td><td>3</td><td></td></tr>
 * <tr><td>KEYCODE_I</td><td>25</td><td></td></tr>
 * <tr><td>KEYCODE_INFO</td><td>a5</td><td></td></tr>
 * <tr><td>KEYCODE_INSERT</td><td>7c</td><td></td></tr>
 * <tr><td>KEYCODE_J</td><td>26</td><td></td></tr>
 * <tr><td>KEYCODE_K</td><td>27</td><td></td></tr>
 * <tr><td>KEYCODE_KANA</td><td>da</td><td></td></tr>
 * <tr><td>KEYCODE_KATAKANA_HIRAGANA</td><td>d7</td><td></td></tr>
 * <tr><td>KEYCODE_L</td><td>28</td><td></td></tr>
 * <tr><td>KEYCODE_LANGUAGE_SWITCH</td><td>cc</td><td></td></tr>
 * <tr><td>KEYCODE_LAST_CHANNEL</td><td>e5</td><td></td></tr>
 * <tr><td>KEYCODE_LEFT_BRACKET</td><td>47</td><td></td></tr>
 * <tr><td>KEYCODE_M</td><td>29</td><td></td></tr>
 * <tr><td>KEYCODE_MANNER_MODE</td><td>cd</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_AUDIO_TRACK</td><td>de</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_CLOSE</td><td>80</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_EJECT</td><td>81</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_FAST_FORWARD</td><td>5a</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_NEXT</td><td>57</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_PAUSE</td><td>7f</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_PLAY</td><td>7e</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_PLAY_PAUSE</td><td>55</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_PREVIOUS</td><td>58</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_RECORD</td><td>82</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_REWIND</td><td>59</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_SKIP_BACKWARD</td><td>111</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_SKIP_FORWARD</td><td>110</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_SLEEP</td><td>df</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_STEP_BACKWARD</td><td>113</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_STEP_FORWARD</td><td>112</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_STOP</td><td>56</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_TOP_MENU</td><td>e2</td><td></td></tr>
 * <tr><td>KEYCODE_MEDIA_WAKEUP</td><td>e0</td><td></td></tr>
 * <tr><td>KEYCODE_MENU</td><td>52</td><td></td></tr>
 * <tr><td>KEYCODE_META_LEFT</td><td>75</td><td></td></tr>
 * <tr><td>KEYCODE_META_RIGHT</td><td>76</td><td></td></tr>
 * <tr><td>KEYCODE_MINUS</td><td>45</td><td></td></tr>
 * <tr><td>KEYCODE_MOVE_END</td><td>7b</td><td></td></tr>
 * <tr><td>KEYCODE_MOVE_HOME</td><td>7a</td><td></td></tr>
 * <tr><td>KEYCODE_MUHENKAN</td><td>d5</td><td></td></tr>
 * <tr><td>KEYCODE_MUSIC</td><td>d1</td><td></td></tr>
 * <tr><td>KEYCODE_MUTE</td><td>5b</td><td></td></tr>
 * <tr><td>KEYCODE_N</td><td>2a</td><td></td></tr>
 * <tr><td>KEYCODE_NAVIGATE_IN</td><td>106</td><td></td></tr>
 * <tr><td>KEYCODE_NAVIGATE_NEXT</td><td>105</td><td></td></tr>
 * <tr><td>KEYCODE_NAVIGATE_OUT</td><td>107</td><td></td></tr>
 * <tr><td>KEYCODE_NAVIGATE_PREVIOUS</td><td>104</td><td></td></tr>
 * <tr><td>KEYCODE_NOTIFICATION</td><td>53</td><td></td></tr>
 * <tr><td>KEYCODE_NUM</td><td>4e</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_0</td><td>90</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_1</td><td>91</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_2</td><td>92</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_3</td><td>93</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_4</td><td>94</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_5</td><td>95</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_6</td><td>96</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_7</td><td>97</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_8</td><td>98</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_9</td><td>99</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_ADD</td><td>9d</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_COMMA</td><td>9f</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_DIVIDE</td><td>9a</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_DOT</td><td>9e</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_ENTER</td><td>a0</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_EQUALS</td><td>a1</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_LEFT_PAREN</td><td>a2</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_MULTIPLY</td><td>9b</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_RIGHT_PAREN</td><td>a3</td><td></td></tr>
 * <tr><td>KEYCODE_NUMPAD_SUBTRACT</td><td>9c</td><td></td></tr>
 * <tr><td>KEYCODE_NUM_LOCK</td><td>8f</td><td></td></tr>
 * <tr><td>KEYCODE_O</td><td>2b</td><td></td></tr>
 * <tr><td>KEYCODE_P</td><td>2c</td><td></td></tr>
 * <tr><td>KEYCODE_PAGE_DOWN</td><td>5d</td><td></td></tr>
 * <tr><td>KEYCODE_PAGE_UP</td><td>5c</td><td></td></tr>
 * <tr><td>KEYCODE_PAIRING</td><td>e1</td><td></td></tr>
 * <tr><td>KEYCODE_PASTE</td><td>117</td><td></td></tr>
 * <tr><td>KEYCODE_PERIOD</td><td>38</td><td></td></tr>
 * <tr><td>KEYCODE_PICTSYMBOLS</td><td>5e</td><td></td></tr>
 * <tr><td>KEYCODE_PLUS</td><td>51</td><td></td></tr>
 * <tr><td>KEYCODE_POUND</td><td>12</td><td></td></tr>
 * <tr><td>KEYCODE_POWER</td><td>1a</td><td></td></tr>
 * <tr><td>KEYCODE_PROFILE_SWITCH</td><td>120</td><td></td></tr>
 * <tr><td>KEYCODE_PROG_BLUE</td><td>ba</td><td></td></tr>
 * <tr><td>KEYCODE_PROG_GRED</td><td>b7</td><td></td></tr>
 * <tr><td>KEYCODE_PROG_GREEN</td><td>b8</td><td></td></tr>
 * <tr><td>KEYCODE_PROG_YELLOW</td><td>b9</td><td></td></tr>
 * <tr><td>KEYCODE_Q</td><td>2d</td><td></td></tr>
 * <tr><td>KEYCODE_R</td><td>2e</td><td></td></tr>
 * <tr><td>KEYCODE_REFRESH</td><td>11d</td><td></td></tr>
 * <tr><td>KEYCODE_RIGHT_BRACKET</td><td>48</td><td></td></tr>
 * <tr><td>KEYCODE_RO</td><td>d9</td><td></td></tr>
 * <tr><td>KEYCODE_S</td><td>2f</td><td></td></tr>
 * <tr><td>KEYCODE_SCROLL_LOCK</td><td>74</td><td></td></tr>
 * <tr><td>KEYCODE_SEARCH</td><td>54</td><td></td></tr>
 * <tr><td>KEYCODE_SEMICOLON</td><td>4a</td><td></td></tr>
 * <tr><td>KEYCODE_SETTINGS</td><td>b0</td><td></td></tr>
 * <tr><td>KEYCODE_SHIFT_LEFT</td><td>3b</td><td></td></tr>
 * <tr><td>KEYCODE_SHIFT_RIGHT</td><td>3c</td><td></td></tr>
 * <tr><td>KEYCODE_SLASH</td><td>4c</td><td></td></tr>
 * <tr><td>KEYCODE_SOFT_LEFT</td><td>1</td><td></td></tr>
 * <tr><td>KEYCODE_SOFT_RIGHT</td><td>2</td><td></td></tr>
 * <tr><td>KEYCODE_SOFT_SLEEP</td><td>114</td><td></td></tr>
 * <tr><td>KEYCODE_SPACE</td><td>3e</td><td></td></tr>
 * <tr><td>KEYCODE_STAR</td><td>11</td><td></td></tr>
 * <tr><td>KEYCODE_STB_INPUT</td><td>b4</td><td></td></tr>
 * <tr><td>KEYCODE_STB_POWER</td><td>b3</td><td></td></tr>
 * <tr><td>KEYCODE_STEM_1</td><td>109</td><td></td></tr>
 * <tr><td>KEYCODE_STEM_2</td><td>10a</td><td></td></tr>
 * <tr><td>KEYCODE_STEM_3</td><td>10b</td><td></td></tr>
 * <tr><td>KEYCODE_STEM_PRIMARY</td><td>108</td><td></td></tr>
 * <tr><td>KEYCODE_SWITCH_CHARSET</td><td>5f</td><td></td></tr>
 * <tr><td>KEYCODE_SYM</td><td>3f</td><td></td></tr>
 * <tr><td>KEYCODE_SYSRQ</td><td>78</td><td></td></tr>
 * <tr><td>KEYCODE_SYSTEM_NAVIGATION_DOWN</td><td>119</td><td></td></tr>
 * <tr><td>KEYCODE_SYSTEM_NAVIGATION_LEFT</td><td>11a</td><td></td></tr>
 * <tr><td>KEYCODE_SYSTEM_NAVIGATION_RIGHT</td><td>11b</td><td></td></tr>
 * <tr><td>KEYCODE_SYSTEM_NAVIGATION_UP</td><td>118</td><td></td></tr>
 * <tr><td>KEYCODE_T</td><td>30</td><td></td></tr>
 * <tr><td>KEYCODE_TAB</td><td>3d</td><td></td></tr>
 * <tr><td>KEYCODE_THUMBS_DOWN</td><td>11f</td><td></td></tr>
 * <tr><td>KEYCODE_THUMBS_UP</td><td>11e</td><td></td></tr>
 * <tr><td>KEYCODE_TV</td><td>aa</td><td></td></tr>
 * <tr><td>KEYCODE_TV_ANTENNA_CABLE</td><td>f2</td><td></td></tr>
 * <tr><td>KEYCODE_TV_AUDIO_DESCRIPTION</td><td>fc</td><td></td></tr>
 * <tr><td>KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN</td><td>fe</td><td></td></tr>
 * <tr><td>KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP</td><td>fd</td><td></td></tr>
 * <tr><td>KEYCODE_TV_CONTENTS_MENU</td><td>100</td><td></td></tr>
 * <tr><td>KEYCODE_TV_DATA_SERVICE</td><td>e6</td><td></td></tr>
 * <tr><td>KEYCODE_TV_INPUT</td><td>b2</td><td></td></tr>
 * <tr><td>KEYCODE_TV_INPUT_COMPONENT_1</td><td>f9</td><td></td></tr>
 * <tr><td>KEYCODE_TV_INPUT_COMPONENT_2</td><td>fa</td><td></td></tr>
 * <tr><td>KEYCODE_TV_INPUT_COMPOSITE_1</td><td>f7</td><td></td></tr>
 * <tr><td>KEYCODE_TV_INPUT_COMPOSITE_2</td><td>f8</td><td></td></tr>
 * <tr><td>KEYCODE_TV_INPUT_HDMI_1</td><td>f3</td><td></td></tr>
 * <tr><td>KEYCODE_TV_INPUT_HDMI_2</td><td>f4</td><td></td></tr>
 * <tr><td>KEYCODE_TV_INPUT_HDMI_3</td><td>f5</td><td></td></tr>
 * <tr><td>KEYCODE_TV_INPUT_HDMI_4</td><td>f6</td><td></td></tr>
 * <tr><td>KEYCODE_TV_INPUT_VGA_1</td><td>fb</td><td></td></tr>
 * <tr><td>KEYCODE_TV_MEDIA_CONTEXT_MENU</td><td>101</td><td></td></tr>
 * <tr><td>KEYCODE_TV_NETWORK</td><td>f1</td><td></td></tr>
 * <tr><td>KEYCODE_TV_NUMBER_ENTRY</td><td>ea</td><td></td></tr>
 * <tr><td>KEYCODE_TV_POWER</td><td>b1</td><td></td></tr>
 * <tr><td>KEYCODE_TV_RADIO_SERVICE</td><td>e8</td><td></td></tr>
 * <tr><td>KEYCODE_TV_SATELLITE</td><td>ed</td><td></td></tr>
 * <tr><td>KEYCODE_TV_SATELLITE_BS</td><td>ee</td><td></td></tr>
 * <tr><td>KEYCODE_TV_SATELLITE_CS</td><td>ef</td><td></td></tr>
 * <tr><td>KEYCODE_TV_SATELLITE_SERVICE</td><td>f0</td><td></td></tr>
 * <tr><td>KEYCODE_TV_TELETEXT</td><td>e9</td><td></td></tr>
 * <tr><td>KEYCODE_TV_TERRESTRIAL_ANALOG</td><td>eb</td><td></td></tr>
 * <tr><td>KEYCODE_TV_TERRESTRIAL_DIGITAL</td><td>ec</td><td></td></tr>
 * <tr><td>KEYCODE_TV_TIMER_PROGRAMMING</td><td>102</td><td></td></tr>
 * <tr><td>KEYCODE_TV_ZOOM_MODE</td><td>ff</td><td></td></tr>
 * <tr><td>KEYCODE_U</td><td>31</td><td></td></tr>
 * <tr><td>KEYCODE_UNKNOWN</td><td>0</td><td></td></tr>
 * <tr><td>KEYCODE_V</td><td>32</td><td></td></tr>
 * <tr><td>KEYCODE_VOICE_ASSIST</td><td>e7</td><td></td></tr>
 * <tr><td>KEYCODE_VOLUME_DOWN</td><td>19</td><td></td></tr>
 * <tr><td>KEYCODE_VOLUME_MUTE</td><td>a4</td><td></td></tr>
 * <tr><td>KEYCODE_VOLUME_UP</td><td>18</td><td></td></tr>
 * <tr><td>KEYCODE_W</td><td>33</td><td></td></tr>
 * <tr><td>KEYCODE_WINDOW</td><td>ab</td><td></td></tr>
 * <tr><td>KEYCODE_X</td><td>34</td><td></td></tr>
 * <tr><td>KEYCODE_Y</td><td>35</td><td></td></tr>
 * <tr><td>KEYCODE_YEN</td><td>d8</td><td></td></tr>
 * <tr><td>KEYCODE_Z</td><td>36</td><td></td></tr>
 * <tr><td>KEYCODE_ZENKAKU_HANKAKU</td><td>d3</td><td></td></tr>
 * <tr><td>KEYCODE_ZOOM_IN</td><td>a8</td><td></td></tr>
 * <tr><td>KEYCODE_ZOOM_OUT</td><td>a9</td><td></td></tr>
 * </table>
 *
 * @attr name android:keycode
 */

public static final int SearchableActionKey_keycode = 0; // 0x0

/**
 * <p>
 * @attr description
 * If you wish to handle an action key during normal search query entry, you
 * must define an action string here.  This will be added to the
 * {@link android.content.Intent#ACTION_SEARCH ACTION_SEARCH} intent that is passed to your
 * searchable activity.  To examine the string, use
 * {@link android.content.Intent#getStringExtra getStringExtra(SearchManager.ACTION_MSG)}.
 * <i>Optional attribute.</i>
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:queryActionMsg
 */

public static final int SearchableActionKey_queryActionMsg = 1; // 0x1

/**
 * <p>
 * @attr description
 * If you wish to handle an action key while a suggestion is being displayed <i>and
 * selected</i>, there are two ways to handle this.  If <i>all</i> of your suggestions
 * can handle the action key, you can simply define the action message using this
 * attribute.  This will be added to the
 * {@link android.content.Intent#ACTION_SEARCH ACTION_SEARCH} intent that is passed to your
 * searchable activity.  To examine the string, use
 * {@link android.content.Intent#getStringExtra getStringExtra(SearchManager.ACTION_MSG)}.
 * <i>Optional attribute.</i>
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:suggestActionMsg
 */

public static final int SearchableActionKey_suggestActionMsg = 2; // 0x2

/**
 * <p>
 * @attr description
 * If you wish to handle an action key while a suggestion is being displayed <i>and
 * selected</i>, but you do not wish to enable this action key for every suggestion,
 * then you can use this attribute to control it on a suggestion-by-suggestion basis.
 * First, you must define a column (and name it here) where your suggestions will include
 * the action string.  Then, in your content provider, you must provide this column, and
 * when desired, provide data in this column.
 * The search manager will look at your suggestion cursor, using the string
 * provided here in order to select a column, and will use that to select a string from
 * the cursor.  That string will be added to the
 * {@link android.content.Intent#ACTION_SEARCH ACTION_SEARCH} intent that is passed to
 * your searchable activity.  To examine the string, use
 * {@link android.content.Intent#getStringExtra
 * getStringExtra(SearchManager.ACTION_MSG)}.  <i>If the data does not exist for the
 * selection suggestion, the action key will be ignored.</i><i>Optional attribute.</i>
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:suggestActionMsgColumn
 */

public static final int SearchableActionKey_suggestActionMsgColumn = 3; // 0x3

/**
 * <p>
 * @attr description
 * If provided and <code>true</code>, URLs entered in the search dialog while searching
 * within this activity would be detected and treated as URLs (show a 'go' button in the
 * keyboard and invoke the browser directly when user launches the URL instead of passing
 * the URL to the activity). If set to <code>false</code> any URLs entered are treated as
 * normal query text.
 * The default value is <code>false</code>. <i>Optional attribute.</i>.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:autoUrlDetect
 */

public static final int Searchable_autoUrlDetect = 21; // 0x15

/**
 * <p>
 * @attr description
 * If supplied, this string will be displayed as a hint to the user.  <i>Optional
 * attribute.</i>
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:hint
 */

public static final int Searchable_hint = 2; // 0x2

/**
 * <p>
 * @attr description
 * <strong>This is deprecated.</strong><br/>The default
 * application icon is now always used, so this attribute is
 * obsolete.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:icon
 */

public static final int Searchable_icon = 1; // 0x1

/**
 * <p>
 * @attr description
 * Additional features you can enable in an IME associated with an editor
 * to improve the integration with your application.  The constants
 * here correspond to those defined by
 * {@link android.view.inputmethod.EditorInfo#imeOptions}.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>actionDone</td><td>6</td><td>The action key performs a "done"
 * operation, closing the soft input method.
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_ACTION_DONE}.</td></tr>
 * <tr><td>actionGo</td><td>2</td><td>The action key performs a "go"
 * operation to take the user to the target of the text they typed.
 * Typically used, for example, when entering a URL.
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_ACTION_GO}.</td></tr>
 * <tr><td>actionNext</td><td>5</td><td>The action key performs a "next"
 * operation, taking the user to the next field that will accept text.
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_ACTION_NEXT}.</td></tr>
 * <tr><td>actionNone</td><td>1</td><td>This editor has no action associated with it.
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_ACTION_NONE}.</td></tr>
 * <tr><td>actionPrevious</td><td>7</td><td>The action key performs a "previous"
 * operation, taking the user to the previous field that will accept text.
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_ACTION_PREVIOUS}.</td></tr>
 * <tr><td>actionSearch</td><td>3</td><td>The action key performs a "search"
 * operation, taking the user to the results of searching for the text
 * the have typed (in whatever context is appropriate).
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_ACTION_SEARCH}.</td></tr>
 * <tr><td>actionSend</td><td>4</td><td>The action key performs a "send"
 * operation, delivering the text to its target.  This is typically used
 * when composing a message.
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_ACTION_SEND}.</td></tr>
 * <tr><td>actionUnspecified</td><td>0</td><td>There is no specific action associated with this editor, let the
 * editor come up with its own if it can.
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_NULL}.</td></tr>
 * <tr><td>flagForceAscii</td><td>80000000</td><td>Used to request that the IME should be capable of inputting ASCII
 * characters.  The intention of this flag is to ensure that the user
 * can type Roman alphabet characters in a {@link android.widget.TextView}
 * used for, typically, account ID or password input.  It is expected that IMEs
 * normally are able to input ASCII even without being told so (such IMEs
 * already respect this flag in a sense), but there could be some cases they
 * aren't when, for instance, only non-ASCII input languages like Arabic,
 * Greek, Hebrew, Russian are enabled in the IME.  Applications need to be
 * aware that the flag is not a guarantee, and not all IMEs will respect it.
 * However, it is strongly recommended for IME authors to respect this flag
 * especially when their IME could end up with a state that has only non-ASCII
 * input languages enabled.
 * <p>Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_FLAG_FORCE_ASCII}.</td></tr>
 * <tr><td>flagNavigateNext</td><td>8000000</td><td>Used to specify that there is something
 * interesting that a forward navigation can focus on. This is like using
 * actionNext, except allows the IME to be multiline (with
 * an enter key) as well as provide forward navigation.  Note that some
 * IMEs may not be able to do this, especially when running on a small
 * screen where there is little space.  In that case it does not need to
 * present a UI for this option.  Like actionNext, if the
 * user selects the IME's facility to forward navigate, this will show up
 * in the application at
 * {@link android.view.inputmethod.InputConnection#performEditorAction(int)
 * InputConnection.performEditorAction(int)}.
 * <p>Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NAVIGATE_NEXT}.</td></tr>
 * <tr><td>flagNavigatePrevious</td><td>4000000</td><td>Like flagNavigateNext, but
 * specifies there is something interesting that a backward navigation
 * can focus on.  If the user selects the IME's facility to backward
 * navigate, this will show up in the application as an actionPrevious
 * at {@link android.view.inputmethod.InputConnection#performEditorAction(int)
 * InputConnection.performEditorAction(int)}.
 * <p>Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NAVIGATE_PREVIOUS}.</td></tr>
 * <tr><td>flagNoAccessoryAction</td><td>20000000</td><td>Used in conjunction with a custom action, this indicates that the
 * action should not be available as an accessory button when the
 * input method is full-screen.
 * Note that by setting this flag, there can be cases where the action
 * is simply never available to the user.  Setting this generally means
 * that you think showing text being edited is more important than the
 * action you have supplied.
 * <p>Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_ACCESSORY_ACTION}.</td></tr>
 * <tr><td>flagNoEnterAction</td><td>40000000</td><td>Used in conjunction with a custom action,
 * this indicates that the action should not be available in-line as
 * a replacement for the "enter" key.  Typically this is
 * because the action has such a significant impact or is not recoverable
 * enough that accidentally hitting it should be avoided, such as sending
 * a message.    Note that {@link android.widget.TextView} will
 * automatically set this flag for you on multi-line text views.
 * <p>Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_ENTER_ACTION}.</td></tr>
 * <tr><td>flagNoExtractUi</td><td>10000000</td><td>Used to specify that the IME does not need
 * to show its extracted text UI.  For input methods that may be fullscreen,
 * often when in landscape mode, this allows them to be smaller and let part
 * of the application be shown behind.  Though there will likely be limited
 * access to the application available from the user, it can make the
 * experience of a (mostly) fullscreen IME less jarring.  Note that when
 * this flag is specified the IME may <em>not</em> be set up to be able
 * to display text, so it should only be used in situations where this is
 * not needed.
 * <p>Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_EXTRACT_UI}.</td></tr>
 * <tr><td>flagNoFullscreen</td><td>2000000</td><td>Used to request that the IME never go
 * into fullscreen mode.  Applications need to be aware that the flag is not
 * a guarantee, and not all IMEs will respect it.
 * <p>Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_FULLSCREEN}.</td></tr>
 * <tr><td>flagNoPersonalizedLearning</td><td>1000000</td><td>Used to request that the IME should not update any personalized data such as typing
 * history and personalized language model based on what the user typed on this text
 * editing object. Typical use cases are:
 * <ul>
 * <li>When the application is in a special mode, where user's activities are expected
 * to be not recorded in the application's history. Some web browsers and chat
 * applications may have this kind of modes.</li>
 * <li>When storing typing history does not make much sense.  Specifying this flag in
 * typing games may help to avoid typing history from being filled up with words that
 * the user is less likely to type in their daily life.  Another example is that when
 * the application already knows that the expected input is not a valid word (e.g. a
 * promotion code that is not a valid word in any natural language).</li>
 * </ul>
 * <p>Applications need to be aware that the flag is not a guarantee, and some IMEs may
 * not respect it.</p></td></tr>
 * <tr><td>normal</td><td>0</td><td>There are no special semantics associated with this editor.</td></tr>
 * </table>
 *
 * @attr name android:imeOptions
 */

public static final int Searchable_imeOptions = 16; // 0x10

/**
 * <p>
 * @attr description
 * If provided and <code>true</code>, this searchable activity will be
 * included in any global lists of search targets.
 * The default value is <code>false</code>. <i>Optional attribute.</i>.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:includeInGlobalSearch
 */

public static final int Searchable_includeInGlobalSearch = 18; // 0x12

/**
 * <p>
 * @attr description
 * The type of data being placed in a text field, used to help an
 * input method decide how to let the user enter text.  The constants
 * here correspond to those defined by
 * {@link android.text.InputType}.  Generally you can select
 * a single value, though some can be combined together as
 * indicated.  Setting this attribute to anything besides
 * <var>none</var> also implies that the text is editable.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>date</td><td>14</td><td>For entering a date.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_DATETIME} |
 * {@link android.text.InputType#TYPE_DATETIME_VARIATION_DATE}.</td></tr>
 * <tr><td>datetime</td><td>4</td><td>For entering a date and time.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_DATETIME} |
 * {@link android.text.InputType#TYPE_DATETIME_VARIATION_NORMAL}.</td></tr>
 * <tr><td>none</td><td>0</td><td>There is no content type.  The text is not editable.</td></tr>
 * <tr><td>number</td><td>2</td><td>A numeric only field.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
 * {@link android.text.InputType#TYPE_NUMBER_VARIATION_NORMAL}.</td></tr>
 * <tr><td>numberDecimal</td><td>2002</td><td>Can be combined with <var>number</var> and its other options to
 * allow a decimal (fractional) number.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
 * {@link android.text.InputType#TYPE_NUMBER_FLAG_DECIMAL}.</td></tr>
 * <tr><td>numberPassword</td><td>12</td><td>A numeric password field.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
 * {@link android.text.InputType#TYPE_NUMBER_VARIATION_PASSWORD}.</td></tr>
 * <tr><td>numberSigned</td><td>1002</td><td>Can be combined with <var>number</var> and its other options to
 * allow a signed number.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
 * {@link android.text.InputType#TYPE_NUMBER_FLAG_SIGNED}.</td></tr>
 * <tr><td>phone</td><td>3</td><td>For entering a phone number.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_PHONE}.</td></tr>
 * <tr><td>text</td><td>1</td><td>Just plain old text.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_NORMAL}.</td></tr>
 * <tr><td>textAutoComplete</td><td>10001</td><td>Can be combined with <var>text</var> and its variations to
 * specify that this field will be doing its own auto-completion and
 * talking with the input method appropriately.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_AUTO_COMPLETE}.</td></tr>
 * <tr><td>textAutoCorrect</td><td>8001</td><td>Can be combined with <var>text</var> and its variations to
 * request auto-correction of text being input.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_AUTO_CORRECT}.</td></tr>
 * <tr><td>textCapCharacters</td><td>1001</td><td>Can be combined with <var>text</var> and its variations to
 * request capitalization of all characters.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_CHARACTERS}.</td></tr>
 * <tr><td>textCapSentences</td><td>4001</td><td>Can be combined with <var>text</var> and its variations to
 * request capitalization of the first character of every sentence.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_SENTENCES}.</td></tr>
 * <tr><td>textCapWords</td><td>2001</td><td>Can be combined with <var>text</var> and its variations to
 * request capitalization of the first character of every word.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_WORDS}.</td></tr>
 * <tr><td>textEmailAddress</td><td>21</td><td>Text that will be used as an e-mail address.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_EMAIL_ADDRESS}.</td></tr>
 * <tr><td>textEmailSubject</td><td>31</td><td>Text that is being supplied as the subject of an e-mail.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_EMAIL_SUBJECT}.</td></tr>
 * <tr><td>textFilter</td><td>b1</td><td>Text that is filtering some other data.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_FILTER}.</td></tr>
 * <tr><td>textImeMultiLine</td><td>40001</td><td>Can be combined with <var>text</var> and its variations to
 * indicate that though the regular text view should not be multiple
 * lines, the IME should provide multiple lines if it can.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_IME_MULTI_LINE}.</td></tr>
 * <tr><td>textLongMessage</td><td>51</td><td>Text that is the content of a long message.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_LONG_MESSAGE}.</td></tr>
 * <tr><td>textMultiLine</td><td>20001</td><td>Can be combined with <var>text</var> and its variations to
 * allow multiple lines of text in the field.  If this flag is not set,
 * the text field will be constrained to a single line.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_MULTI_LINE}.</td></tr>
 * <tr><td>textNoSuggestions</td><td>80001</td><td>Can be combined with <var>text</var> and its variations to
 * indicate that the IME should not show any
 * dictionary-based word suggestions.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_NO_SUGGESTIONS}.</td></tr>
 * <tr><td>textPassword</td><td>81</td><td>Text that is a password.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_PASSWORD}.</td></tr>
 * <tr><td>textPersonName</td><td>61</td><td>Text that is the name of a person.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_PERSON_NAME}.</td></tr>
 * <tr><td>textPhonetic</td><td>c1</td><td>Text that is for phonetic pronunciation, such as a phonetic name
 * field in a contact entry.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_PHONETIC}.</td></tr>
 * <tr><td>textPostalAddress</td><td>71</td><td>Text that is being supplied as a postal mailing address.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_POSTAL_ADDRESS}.</td></tr>
 * <tr><td>textShortMessage</td><td>41</td><td>Text that is the content of a short message.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_SHORT_MESSAGE}.</td></tr>
 * <tr><td>textUri</td><td>11</td><td>Text that will be used as a URI.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_URI}.</td></tr>
 * <tr><td>textVisiblePassword</td><td>91</td><td>Text that is a password that should be visible.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_VISIBLE_PASSWORD}.</td></tr>
 * <tr><td>textWebEditText</td><td>a1</td><td>Text that is being supplied as text in a web form.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_EDIT_TEXT}.</td></tr>
 * <tr><td>textWebEmailAddress</td><td>d1</td><td>Text that will be used as an e-mail address on a web form.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS}.</td></tr>
 * <tr><td>textWebPassword</td><td>e1</td><td>Text that will be used as a password on a web form.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_PASSWORD}.</td></tr>
 * <tr><td>time</td><td>24</td><td>For entering a time.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_DATETIME} |
 * {@link android.text.InputType#TYPE_DATETIME_VARIATION_TIME}.</td></tr>
 * </table>
 *
 * @attr name android:inputType
 */

public static final int Searchable_inputType = 10; // 0xa

/**
 * <p>
 * @attr description
 * This is the user-displayed name of the searchable activity.  <i>Required
 * attribute.</i>
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:label
 */

public static final int Searchable_label = 0; // 0x0

/**
 * <p>
 * @attr description
 * If provided and <code>true</code>, this searchable activity will be invoked for all
 * queries in a particular session. If set to <code>false</code> and the activity
 * returned zero results for a query, it will not be invoked again in that session for
 * supersets of that zero-results query. For example, if the activity returned zero
 * results for "bo", it would not be queried again for "bob".
 * The default value is <code>false</code>. <i>Optional attribute.</i>.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:queryAfterZeroResults
 */

public static final int Searchable_queryAfterZeroResults = 19; // 0x13

/**
 * <p>
 * @attr description
 * If supplied, this string will be displayed as the text of the "Search" button.
 * <i>Optional attribute.</i>
 * {@deprecated This will create a non-standard UI appearance, because the search bar UI is
 * changing to use only icons for its buttons.}
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:searchButtonText
 */

@Deprecated public static final int Searchable_searchButtonText = 9; // 0x9

/**
 * <p>
 * @attr description
 * Additional features are controlled by mode bits in this field.  Omitting
 * this field, or setting to zero, provides default behavior.  <i>Optional attribute.</i>
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>queryRewriteFromData</td><td>10</td><td>If set, this flag causes the suggestion column SUGGEST_COLUMN_INTENT_DATA to
 * be considered as the text for suggestion query rewriting.  This should only
 * be used when the values in SUGGEST_COLUMN_INTENT_DATA are suitable for user
 * inspection and editing - typically, HTTP/HTTPS Uri's.</td></tr>
 * <tr><td>queryRewriteFromText</td><td>20</td><td>If set, this flag causes the suggestion column SUGGEST_COLUMN_TEXT_1 to
 * be considered as the text for suggestion query rewriting.  This should be used
 * for suggestions in which no query text is provided and the SUGGEST_COLUMN_INTENT_DATA
 * values are not suitable for user inspection and editing.</td></tr>
 * <tr><td>showSearchIconAsBadge</td><td>8</td><td><strong>This is deprecated.</strong><br/>The default
 * application icon is now always used, so this option is
 * obsolete.</td></tr>
 * <tr><td>showSearchLabelAsBadge</td><td>4</td><td>If set, this flag enables the display of the search target (label) within the
 * search bar.  If neither bad mode is selected, no badge will be shown.</td></tr>
 * </table>
 *
 * @attr name android:searchMode
 */

public static final int Searchable_searchMode = 3; // 0x3

/**
 * <p>
 * @attr description
 * If provided, this string will be used to describe the searchable item in the
 * searchable items settings within system search settings. <i>Optional
 * attribute.</i>
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:searchSettingsDescription
 */

public static final int Searchable_searchSettingsDescription = 20; // 0x14

/**
 * <p>
 * @attr description
 * If provided, this is the trigger indicating that the searchable activity
 * provides suggestions as well.  The value must be a fully-qualified content provider
 * authority (for example, "com.example.android.apis.SuggestionProvider") and should match
 * the "android:authorities" tag in your content provider's manifest entry.  <i>Optional
 * attribute.</i>
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:searchSuggestAuthority
 */

public static final int Searchable_searchSuggestAuthority = 4; // 0x4

/**
 * <p>
 * @attr description
 * If provided, and not overridden by an action in the selected suggestion, this
 * string will be placed in the action field of the {@link android.content.Intent Intent}
 * when the user clicks a suggestion.  <i>Optional attribute.</i>
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:searchSuggestIntentAction
 */

public static final int Searchable_searchSuggestIntentAction = 7; // 0x7

/**
 * <p>
 * @attr description
 * If provided, and not overridden by an action in the selected suggestion, this
 * string will be placed in the data field of the {@link android.content.Intent Intent}
 * when the user clicks a suggestion.  <i>Optional attribute.</i>
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:searchSuggestIntentData
 */

public static final int Searchable_searchSuggestIntentData = 8; // 0x8

/**
 * <p>
 * @attr description
 * If provided, this will be inserted in the suggestions query Uri, after the authority
 * you have provide but before the standard suggestions path. <i>Optional attribute.</i>
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:searchSuggestPath
 */

public static final int Searchable_searchSuggestPath = 5; // 0x5

/**
 * <p>
 * @attr description
 * If provided, suggestion queries will be passed into your query function
 * as the <i>selection</i> parameter.  Typically this will be a WHERE clause for your
 * database, and will contain a single question mark, which represents the actual query
 * string that has been typed by the user.  If not provided, then the user query text
 * will be appended to the query Uri (after an additional "/".)  <i>Optional
 * attribute.</i>
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:searchSuggestSelection
 */

public static final int Searchable_searchSuggestSelection = 6; // 0x6

/**
 * <p>
 * @attr description
 * If provided, this is the minimum number of characters needed to trigger
 * search suggestions. The default value is 0. <i>Optional attribute.</i>
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:searchSuggestThreshold
 */

public static final int Searchable_searchSuggestThreshold = 17; // 0x11

/**
 * <p>
 * @attr description
 * If provided, this specifies the spoken language to be expected, and that it will be
 * different than the one set in the {@link java.util.Locale#getDefault()}.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:voiceLanguage
 */

public static final int Searchable_voiceLanguage = 14; // 0xe

/**
 * <p>
 * @attr description
 * If provided, this specifies the language model that should be used by the
 * voice recognition system.  See
 * {@link android.speech.RecognizerIntent#EXTRA_LANGUAGE_MODEL } for more information.
 * If not provided, the default value
 * {@link android.speech.RecognizerIntent#LANGUAGE_MODEL_FREE_FORM } will be used.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:voiceLanguageModel
 */

public static final int Searchable_voiceLanguageModel = 12; // 0xc

/**
 * <p>
 * @attr description
 * If provided, enforces the maximum number of results to return, including the "best"
 * result which will always be provided as the SEARCH intent's primary query.  Must be one
 * or greater.  If not provided, the recognizer will choose how many results to return.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:voiceMaxResults
 */

public static final int Searchable_voiceMaxResults = 15; // 0xf

/**
 * <p>
 * @attr description
 * If provided, this specifies a prompt that will be displayed during voice input.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:voicePromptText
 */

public static final int Searchable_voicePromptText = 13; // 0xd

/**
 * <p>
 * @attr description
 * Voice search features are controlled by mode bits in this field.  Omitting
 * this field, or setting to zero, provides default behavior.
 * If showVoiceSearchButton is set, then launchWebSearch or launchRecognizer must
 * also be set.  <i>Optional attribute.</i>
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>launchRecognizer</td><td>4</td><td>If set, the voice search button will take the user directly to a built-in
 * voice recording activity.  This activity will prompt the user to speak,
 * transcribe the spoken text, and forward the resulting query
 * text to the searchable activity, just as if the user had typed it into
 * the search UI and clicked the search button.</td></tr>
 * <tr><td>launchWebSearch</td><td>2</td><td>If set, the voice search button will take the user directly to a built-in
 * voice web search activity.  Most applications will not use this flag, as it
 * will take the user away from the activity in which search was invoked.</td></tr>
 * <tr><td>showVoiceSearchButton</td><td>1</td><td>If set, display a voice search button.  This only takes effect if voice search is
 * available on the device.</td></tr>
 * </table>
 *
 * @attr name android:voiceSearchMode
 */

public static final int Searchable_voiceSearchMode = 11; // 0xb

/**
 * Attributes that can be used with a SeekBar.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #SeekBar_thumb android:thumb}</code></td><td>Draws the thumb on a seekbar.</td></tr>
 * <tr><td><code>{@link #SeekBar_thumbOffset android:thumbOffset}</code></td><td>An offset for the thumb that allows it to extend out of the range of the track.</td></tr>
 * <tr><td><code>{@link #SeekBar_splitTrack android:splitTrack}</code></td><td>Whether to split the track and leave a gap for the thumb drawable.</td></tr>
 * <tr><td><code>{@link #SeekBar_thumbTint android:thumbTint}</code></td><td>Tint to apply to the thumb drawable.</td></tr>
 * <tr><td><code>{@link #SeekBar_thumbTintMode android:thumbTintMode}</code></td><td>Blending mode used to apply the thumb tint.</td></tr>
 * <tr><td><code>{@link #SeekBar_tickMark android:tickMark}</code></td><td>Drawable displayed at each progress position on a seekbar.</td></tr>
 * <tr><td><code>{@link #SeekBar_tickMarkTint android:tickMarkTint}</code></td><td>Tint to apply to the tick mark drawable.</td></tr>
 * <tr><td><code>{@link #SeekBar_tickMarkTintMode android:tickMarkTintMode}</code></td><td>Blending mode used to apply the tick mark tint.</td></tr>
 * </table>
 * @see #SeekBar_thumb
 * @see #SeekBar_thumbOffset
 * @see #SeekBar_splitTrack
 * @see #SeekBar_thumbTint
 * @see #SeekBar_thumbTintMode
 * @see #SeekBar_tickMark
 * @see #SeekBar_tickMarkTint
 * @see #SeekBar_tickMarkTintMode
 */

public static final int[] SeekBar;
static { SeekBar = new int[0]; }

/**
 * Attributes that can be used with a SeekBarPreference.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #SeekBarPreference_layout android:layout}</code></td><td>Supply an identifier for the layout resource to inflate when the ViewStub
 * becomes visible or when forced to do so.</td></tr>
 * </table>
 * @see #SeekBarPreference_layout
 */

public static final int[] SeekBarPreference;
static { SeekBarPreference = new int[0]; }

/**
 * <p>
 * @attr description
 * Supply an identifier for the layout resource to inflate when the ViewStub
 * becomes visible or when forced to do so. The layout resource must be a
 * valid reference to a layout.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:layout
 */

public static final int SeekBarPreference_layout = 0; // 0x0

/**
 * <p>
 * @attr description
 * Whether to split the track and leave a gap for the thumb drawable.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:splitTrack
 */

public static final int SeekBar_splitTrack = 2; // 0x2

/**
 * <p>
 * @attr description
 * Draws the thumb on a seekbar.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:thumb
 */

public static final int SeekBar_thumb = 0; // 0x0

/**
 * <p>
 * @attr description
 * An offset for the thumb that allows it to extend out of the range of the track.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:thumbOffset
 */

public static final int SeekBar_thumbOffset = 1; // 0x1

/**
 * <p>
 * @attr description
 * Tint to apply to the thumb drawable.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:thumbTint
 */

public static final int SeekBar_thumbTint = 3; // 0x3

/**
 * <p>
 * @attr description
 * Blending mode used to apply the thumb tint.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 *
 * @attr name android:thumbTintMode
 */

public static final int SeekBar_thumbTintMode = 4; // 0x4

/**
 * <p>
 * @attr description
 * Drawable displayed at each progress position on a seekbar.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:tickMark
 */

public static final int SeekBar_tickMark = 5; // 0x5

/**
 * <p>
 * @attr description
 * Tint to apply to the tick mark drawable.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:tickMarkTint
 */

public static final int SeekBar_tickMarkTint = 6; // 0x6

/**
 * <p>
 * @attr description
 * Blending mode used to apply the tick mark tint.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 *
 * @attr name android:tickMarkTintMode
 */

public static final int SeekBar_tickMarkTintMode = 7; // 0x7

/**
 * Attributes that can be used with a SelectionModeDrawables.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #SelectionModeDrawables_actionModeCutDrawable android:actionModeCutDrawable}</code></td><td>Drawable to use for the Cut action button in Contextual Action Bar.</td></tr>
 * <tr><td><code>{@link #SelectionModeDrawables_actionModeCopyDrawable android:actionModeCopyDrawable}</code></td><td>Drawable to use for the Copy action button in Contextual Action Bar.</td></tr>
 * <tr><td><code>{@link #SelectionModeDrawables_actionModePasteDrawable android:actionModePasteDrawable}</code></td><td>Drawable to use for the Paste action button in Contextual Action Bar.</td></tr>
 * <tr><td><code>{@link #SelectionModeDrawables_actionModeSelectAllDrawable android:actionModeSelectAllDrawable}</code></td><td>Drawable to use for the Select all action button in Contextual Action Bar.</td></tr>
 * </table>
 * @see #SelectionModeDrawables_actionModeCutDrawable
 * @see #SelectionModeDrawables_actionModeCopyDrawable
 * @see #SelectionModeDrawables_actionModePasteDrawable
 * @see #SelectionModeDrawables_actionModeSelectAllDrawable
 */

public static final int[] SelectionModeDrawables;
static { SelectionModeDrawables = new int[0]; }

/**
 * <p>
 * @attr description
 * Drawable to use for the Copy action button in Contextual Action Bar.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:actionModeCopyDrawable
 */

public static final int SelectionModeDrawables_actionModeCopyDrawable = 1; // 0x1

/**
 * <p>
 * @attr description
 * Drawable to use for the Cut action button in Contextual Action Bar.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:actionModeCutDrawable
 */

public static final int SelectionModeDrawables_actionModeCutDrawable = 0; // 0x0

/**
 * <p>
 * @attr description
 * Drawable to use for the Paste action button in Contextual Action Bar.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:actionModePasteDrawable
 */

public static final int SelectionModeDrawables_actionModePasteDrawable = 2; // 0x2

/**
 * <p>
 * @attr description
 * Drawable to use for the Select all action button in Contextual Action Bar.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:actionModeSelectAllDrawable
 */

public static final int SelectionModeDrawables_actionModeSelectAllDrawable = 3; // 0x3

/**
 * Use <code>injected-location-setting</code> as the root tag of the XML resource that
 * describes an injected "Location services" setting. Note that the status value (subtitle)
 * for the setting is specified dynamically by a subclass of SettingInjectorService.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #SettingInjectorService_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
 * associated item.</td></tr>
 * <tr><td><code>{@link #SettingInjectorService_title android:title}</code></td><td>The title associated with the item.</td></tr>
 * <tr><td><code>{@link #SettingInjectorService_settingsActivity android:settingsActivity}</code></td><td>Component name of an activity that allows the user to modify
 * the settings for this service.</td></tr>
 * <tr><td><code>{@link #SettingInjectorService_userRestriction android:userRestriction}</code></td><td>The user restriction for this preference.</td></tr>
 * </table>
 * @see #SettingInjectorService_icon
 * @see #SettingInjectorService_title
 * @see #SettingInjectorService_settingsActivity
 * @see #SettingInjectorService_userRestriction
 */

public static final int[] SettingInjectorService;
static { SettingInjectorService = new int[0]; }

/**
 * <p>
 * @attr description
 * The icon for the preference, should refer to all apps covered by the setting. Typically
 * a generic icon for the developer.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:icon
 */

public static final int SettingInjectorService_icon = 0; // 0x0

/**
 * <p>
 * @attr description
 * The activity to launch when the setting is clicked on.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:settingsActivity
 */

public static final int SettingInjectorService_settingsActivity = 2; // 0x2

/**
 * <p>
 * @attr description
 * The title for the preference.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:title
 */

public static final int SettingInjectorService_title = 1; // 0x1

/**
 * <p>
 * @attr description
 * The user restriction for this preference.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:userRestriction
 */

public static final int SettingInjectorService_userRestriction = 3; // 0x3

/**
 * Drawable used to draw shapes.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #ShapeDrawable_dither android:dither}</code></td><td>Enables or disables dithering of the bitmap if the bitmap does not have the
 * same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
 * an RGB 565 screen).</td></tr>
 * <tr><td><code>{@link #ShapeDrawable_tint android:tint}</code></td><td>The tinting color for the image.</td></tr>
 * <tr><td><code>{@link #ShapeDrawable_height android:height}</code></td><td>Makes the TextView be exactly this tall.</td></tr>
 * <tr><td><code>{@link #ShapeDrawable_width android:width}</code></td><td>Makes the TextView be exactly this wide.</td></tr>
 * <tr><td><code>{@link #ShapeDrawable_color android:color}</code></td><td>Solid color for the gradient shape.</td></tr>
 * <tr><td><code>{@link #ShapeDrawable_tintMode android:tintMode}</code></td><td>When a tint color is set, specifies its Porter-Duff blending mode.</td></tr>
 * </table>
 * @see #ShapeDrawable_dither
 * @see #ShapeDrawable_tint
 * @see #ShapeDrawable_height
 * @see #ShapeDrawable_width
 * @see #ShapeDrawable_color
 * @see #ShapeDrawable_tintMode
 */

public static final int[] ShapeDrawable;
static { ShapeDrawable = new int[0]; }

/**
 * Defines the padding of a ShapeDrawable.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #ShapeDrawablePadding_left android:left}</code></td><td>Amount of left padding inside the gradient shape.</td></tr>
 * <tr><td><code>{@link #ShapeDrawablePadding_top android:top}</code></td><td>Amount of top padding inside the gradient shape.</td></tr>
 * <tr><td><code>{@link #ShapeDrawablePadding_right android:right}</code></td><td>Amount of right padding inside the gradient shape.</td></tr>
 * <tr><td><code>{@link #ShapeDrawablePadding_bottom android:bottom}</code></td><td>Amount of bottom padding inside the gradient shape.</td></tr>
 * </table>
 * @see #ShapeDrawablePadding_left
 * @see #ShapeDrawablePadding_top
 * @see #ShapeDrawablePadding_right
 * @see #ShapeDrawablePadding_bottom
 */

public static final int[] ShapeDrawablePadding;
static { ShapeDrawablePadding = new int[0]; }

/**
 * <p>
 * @attr description
 * Bottom padding.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:bottom
 */

public static final int ShapeDrawablePadding_bottom = 3; // 0x3

/**
 * <p>
 * @attr description
 * Left padding.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:left
 */

public static final int ShapeDrawablePadding_left = 0; // 0x0

/**
 * <p>
 * @attr description
 * Right padding.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:right
 */

public static final int ShapeDrawablePadding_right = 2; // 0x2

/**
 * <p>
 * @attr description
 * Top padding.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:top
 */

public static final int ShapeDrawablePadding_top = 1; // 0x1

/**
 * <p>
 * @attr description
 * Defines the color of the shape.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:color
 */

public static final int ShapeDrawable_color = 4; // 0x4

/**
 * <p>
 * @attr description
 * Enables or disables dithering.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:dither
 */

public static final int ShapeDrawable_dither = 0; // 0x0

/**
 * <p>
 * @attr description
 * Defines the height of the shape.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:height
 */

public static final int ShapeDrawable_height = 2; // 0x2

/**
 * <p>
 * @attr description
 * If set, specifies the color to apply to the drawable as a tint. By default,
 * no tint is applied. May be a color state list.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:tint
 */

public static final int ShapeDrawable_tint = 1; // 0x1

/**
 * <p>
 * @attr description
 * When a tint color is set, specifies its Porter-Duff blending mode. The
 * default value is src_in, which treats the drawable as an alpha mask.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 *
 * @attr name android:tintMode
 */

public static final int ShapeDrawable_tintMode = 5; // 0x5

/**
 * <p>
 * @attr description
 * Defines the width of the shape.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:width
 */

public static final int ShapeDrawable_width = 3; // 0x3

/**
 * Attributes that can be used with a Shortcut.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #Shortcut_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
 * associated item.</td></tr>
 * <tr><td><code>{@link #Shortcut_enabled android:enabled}</code></td><td>Specifies whether the widget is enabled.</td></tr>
 * <tr><td><code>{@link #Shortcut_shortcutId android:shortcutId}</code></td><td></td></tr>
 * <tr><td><code>{@link #Shortcut_shortcutShortLabel android:shortcutShortLabel}</code></td><td></td></tr>
 * <tr><td><code>{@link #Shortcut_shortcutLongLabel android:shortcutLongLabel}</code></td><td></td></tr>
 * <tr><td><code>{@link #Shortcut_shortcutDisabledMessage android:shortcutDisabledMessage}</code></td><td></td></tr>
 * </table>
 * @see #Shortcut_icon
 * @see #Shortcut_enabled
 * @see #Shortcut_shortcutId
 * @see #Shortcut_shortcutShortLabel
 * @see #Shortcut_shortcutLongLabel
 * @see #Shortcut_shortcutDisabledMessage
 */

public static final int[] Shortcut;
static { Shortcut = new int[0]; }

/**
 * Attributes that can be used with a ShortcutCategories.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #ShortcutCategories_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * </table>
 * @see #ShortcutCategories_name
 */

public static final int[] ShortcutCategories;
static { ShortcutCategories = new int[0]; }

/**
 * <p>
 * @attr description
 * A unique name for the given item.  This must use a Java-style naming
 * convention to ensure the name is unique, for example
 * "com.mycompany.MyName".
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int ShortcutCategories_name = 0; // 0x0

/**
 * <p>
 * @attr description
 * Specifies whether the widget is enabled. The interpretation of the enabled state varies by subclass.
 * For example, a non-enabled EditText prevents the user from editing the contained text, and
 * a non-enabled Button prevents the user from tapping the button.
 * The appearance of enabled and non-enabled widgets may differ, if the drawables referenced
 * from evaluating state_enabled differ.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:enabled
 */

public static final int Shortcut_enabled = 1; // 0x1

/**
 * <p>
 * @attr description
 * A Drawable resource providing a graphical representation of its
 * associated item.  Use with the
 * application tag (to supply a default icon for all application
 * components), or with the activity, receiver, service, or instrumentation
 * tag (to supply a specific icon for that component).  It may also be
 * used with the intent-filter tag to supply an icon to show to the
 * user when an activity is being selected based on a particular Intent.
 * <p>The given icon will be used to display to the user a graphical
 * representation of its associated component; for example, as the icon
 * for main activity that is displayed in the launcher.  This must be
 * a reference to a Drawable resource containing the image definition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:icon
 */

public static final int Shortcut_icon = 0; // 0x0

/**
 * <p>This symbol is the offset where the {@link android.R.attr#shortcutDisabledMessage}
 * attribute's value can be found in the {@link #Shortcut} array.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:shortcutDisabledMessage
 */

public static final int Shortcut_shortcutDisabledMessage = 5; // 0x5

/**
 * <p>This symbol is the offset where the {@link android.R.attr#shortcutId}
 * attribute's value can be found in the {@link #Shortcut} array.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:shortcutId
 */

public static final int Shortcut_shortcutId = 2; // 0x2

/**
 * <p>This symbol is the offset where the {@link android.R.attr#shortcutLongLabel}
 * attribute's value can be found in the {@link #Shortcut} array.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:shortcutLongLabel
 */

public static final int Shortcut_shortcutLongLabel = 4; // 0x4

/**
 * <p>This symbol is the offset where the {@link android.R.attr#shortcutShortLabel}
 * attribute's value can be found in the {@link #Shortcut} array.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:shortcutShortLabel
 */

public static final int Shortcut_shortcutShortLabel = 3; // 0x3

/**
 * Use <code>slide</code>as the root tag of the XML resource that
 * describes a {@link android.transition.Slide Slide} transition.
 * The attributes of the {@link android.R.styleable#Transition Transition}
 * resource are available in addition to the specific attributes of Slide
 * described here.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #Slide_slideEdge android:slideEdge}</code></td><td></td></tr>
 * </table>
 * @see #Slide_slideEdge
 */

public static final int[] Slide;
static { Slide = new int[0]; }

/**
 * <p>This symbol is the offset where the {@link android.R.attr#slideEdge}
 * attribute's value can be found in the {@link #Slide} array.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td>Slide to and from the bottom edge of the Scene.</td></tr>
 * <tr><td>end</td><td>800005</td><td>Slide to and from the x-axis position at the end of the Scene root.</td></tr>
 * <tr><td>left</td><td>3</td><td>Slide to and from the left edge of the Scene.</td></tr>
 * <tr><td>right</td><td>5</td><td>Slide to and from the right edge of the Scene.</td></tr>
 * <tr><td>start</td><td>800003</td><td>Slide to and from the x-axis position at the start of the Scene root.</td></tr>
 * <tr><td>top</td><td>30</td><td>Slide to and from the top edge of the Scene.</td></tr>
 * </table>
 *
 * @attr name android:slideEdge
 */

public static final int Slide_slideEdge = 0; // 0x0

/**
 * SlidingDrawer specific attributes. These attributes are used to configure
 * a SlidingDrawer from XML.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #SlidingDrawer_orientation android:orientation}</code></td><td>Standard orientation constant.</td></tr>
 * <tr><td><code>{@link #SlidingDrawer_bottomOffset android:bottomOffset}</code></td><td>Extra offset for the handle at the bottom of the SlidingDrawer.</td></tr>
 * <tr><td><code>{@link #SlidingDrawer_topOffset android:topOffset}</code></td><td>Extra offset for the handle at the top of the SlidingDrawer.</td></tr>
 * <tr><td><code>{@link #SlidingDrawer_allowSingleTap android:allowSingleTap}</code></td><td>Indicates whether the drawer can be opened/closed by a single tap
 * on the handle.</td></tr>
 * <tr><td><code>{@link #SlidingDrawer_handle android:handle}</code></td><td>Identifier for the child that represents the drawer's handle.</td></tr>
 * <tr><td><code>{@link #SlidingDrawer_content android:content}</code></td><td>Identifier for the child that represents the drawer's content.</td></tr>
 * <tr><td><code>{@link #SlidingDrawer_animateOnClick android:animateOnClick}</code></td><td>Indicates whether the drawer should be opened/closed with an animation
 * when the user clicks the handle.</td></tr>
 * </table>
 * @see #SlidingDrawer_orientation
 * @see #SlidingDrawer_bottomOffset
 * @see #SlidingDrawer_topOffset
 * @see #SlidingDrawer_allowSingleTap
 * @see #SlidingDrawer_handle
 * @see #SlidingDrawer_content
 * @see #SlidingDrawer_animateOnClick
 */

public static final int[] SlidingDrawer;
static { SlidingDrawer = new int[0]; }

/**
 * <p>
 * @attr description
 * Indicates whether the drawer can be opened/closed by a single tap
 * on the handle.  (If false, the user must drag or fling, or click
 * using the trackball, to open/close the drawer.)  Default is true.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:allowSingleTap
 */

public static final int SlidingDrawer_allowSingleTap = 3; // 0x3

/**
 * <p>
 * @attr description
 * Indicates whether the drawer should be opened/closed with an animation
 * when the user clicks the handle. Default is true.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:animateOnClick
 */

public static final int SlidingDrawer_animateOnClick = 6; // 0x6

/**
 * <p>
 * @attr description
 * Extra offset for the handle at the bottom of the SlidingDrawer.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:bottomOffset
 */

public static final int SlidingDrawer_bottomOffset = 1; // 0x1

/**
 * <p>
 * @attr description
 * Identifier for the child that represents the drawer's content.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:content
 */

public static final int SlidingDrawer_content = 5; // 0x5

/**
 * <p>
 * @attr description
 * Identifier for the child that represents the drawer's handle.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:handle
 */

public static final int SlidingDrawer_handle = 4; // 0x4

/**
 * <p>
 * @attr description
 * Orientation of the SlidingDrawer.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>horizontal</td><td>0</td><td>Defines an horizontal widget.</td></tr>
 * <tr><td>vertical</td><td>1</td><td>Defines a vertical widget.</td></tr>
 * </table>
 *
 * @attr name android:orientation
 */

public static final int SlidingDrawer_orientation = 0; // 0x0

/**
 * <p>
 * @attr description
 * Extra offset for the handle at the top of the SlidingDrawer.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:topOffset
 */

public static final int SlidingDrawer_topOffset = 2; // 0x2

/**
 * Attributes that can be used with a SlidingTab.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #SlidingTab_orientation android:orientation}</code></td><td>Standard orientation constant.</td></tr>
 * </table>
 * @see #SlidingTab_orientation
 */

public static final int[] SlidingTab;
static { SlidingTab = new int[0]; }

/**
 * <p>
 * @attr description
 * Use "horizontal" for a row, "vertical" for a column.  The default is horizontal.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>horizontal</td><td>0</td><td>Defines an horizontal widget.</td></tr>
 * <tr><td>vertical</td><td>1</td><td>Defines a vertical widget.</td></tr>
 * </table>
 *
 * @attr name android:orientation
 */

public static final int SlidingTab_orientation = 0; // 0x0

/**
 * Use <code>spell-checker</code> as the root tag of the XML resource that
 * describes an
 * {@link android.service.textservice.SpellCheckerService} service, which is
 * referenced from its
 * {@link android.view.textservice.SpellCheckerSession#SERVICE_META_DATA}
 * meta-data entry.  Described here are the attributes that can be
 * included in that tag.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #SpellChecker_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
 * <tr><td><code>{@link #SpellChecker_settingsActivity android:settingsActivity}</code></td><td>Component name of an activity that allows the user to modify
 * the settings for this service.</td></tr>
 * </table>
 * @see #SpellChecker_label
 * @see #SpellChecker_settingsActivity
 */

public static final int[] SpellChecker;
static { SpellChecker = new int[0]; }

/**
 * This is the subtype of the spell checker. Subtype can describe locales (for example,
 * en_US and fr_FR).
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #SpellChecker_Subtype_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
 * <tr><td><code>{@link #SpellChecker_Subtype_subtypeLocale android:subtypeLocale}</code></td><td>The locale of the subtype.</td></tr>
 * <tr><td><code>{@link #SpellChecker_Subtype_subtypeExtraValue android:subtypeExtraValue}</code></td><td>The extra value of the subtype.</td></tr>
 * <tr><td><code>{@link #SpellChecker_Subtype_subtypeId android:subtypeId}</code></td><td>The unique id for the subtype.</td></tr>
 * <tr><td><code>{@link #SpellChecker_Subtype_languageTag android:languageTag}</code></td><td>The BCP-47 Language Tag of the subtype.</td></tr>
 * </table>
 * @see #SpellChecker_Subtype_label
 * @see #SpellChecker_Subtype_subtypeLocale
 * @see #SpellChecker_Subtype_subtypeExtraValue
 * @see #SpellChecker_Subtype_subtypeId
 * @see #SpellChecker_Subtype_languageTag
 */

public static final int[] SpellChecker_Subtype;
static { SpellChecker_Subtype = new int[0]; }

/**
 * <p>
 * @attr description
 * The name of the subtype.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:label
 */

public static final int SpellChecker_Subtype_label = 0; // 0x0

/**
 * <p>
 * @attr description
 * The BCP-47 Language Tag of the subtype.  This replaces
 * {@link android.R.styleable#SpellChecker_Subtype_subtypeLocale}.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:languageTag
 */

public static final int SpellChecker_Subtype_languageTag = 4; // 0x4

/**
 * <p>
 * @attr description
 * The extra value of the subtype. This string can be any string and will be passed to
 * the SpellChecker.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:subtypeExtraValue
 */

public static final int SpellChecker_Subtype_subtypeExtraValue = 2; // 0x2

/**
 * <p>
 * @attr description
 * The unique id for the subtype. The text service (spell checker) framework keeps track
 * of enabled subtypes by ID. When the spell checker package gets upgraded, enabled IDs
 * will stay enabled even if other attributes are different. If the ID is unspecified or
 * explicitly specified to 0 in XML resources,
 * {@code Arrays.hashCode(new Object[] {subtypeLocale, extraValue})} will be used instead.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:subtypeId
 */

public static final int SpellChecker_Subtype_subtypeId = 3; // 0x3

/**
 * <p>
 * @attr description
 * The locale of the subtype. This string should be a locale (for example, en_US and
 * fr_FR). This is also used by the framework to know the supported locales
 * of the spell checker. {@link android.view.textservice.SpellCheckerSubtype#getLocale()}
 * returns the value specified in this attribute.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:subtypeLocale
 */

public static final int SpellChecker_Subtype_subtypeLocale = 1; // 0x1

/**
 * <p>
 * @attr description
 * The name of the spell checker.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:label
 */

public static final int SpellChecker_label = 0; // 0x0

/**
 * <p>
 * @attr description
 * Component name of an activity that allows the user to modify
 * the settings for this service.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:settingsActivity
 */

public static final int SpellChecker_settingsActivity = 1; // 0x1

/**
 * Attributes that can be used with a Spinner.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #Spinner_gravity android:gravity}</code></td><td>Specifies how an object should position its content, on both the X and Y axes,
 * within its own bounds.</td></tr>
 * <tr><td><code>{@link #Spinner_dropDownSelector android:dropDownSelector}</code></td><td>Selector in a drop down list.</td></tr>
 * <tr><td><code>{@link #Spinner_popupBackground android:popupBackground}</code></td><td>The background to use for the popup window.</td></tr>
 * <tr><td><code>{@link #Spinner_prompt android:prompt}</code></td><td>The prompt to display when the spinner's dialog is shown.</td></tr>
 * <tr><td><code>{@link #Spinner_dropDownWidth android:dropDownWidth}</code></td><td>Specifies the basic width of the dropdown.</td></tr>
 * <tr><td><code>{@link #Spinner_spinnerMode android:spinnerMode}</code></td><td>Display mode for spinner options.</td></tr>
 * <tr><td><code>{@link #Spinner_popupElevation android:popupElevation}</code></td><td>Window elevation to use for the popup window.</td></tr>
 * <tr><td><code>{@link #Spinner_popupTheme android:popupTheme}</code></td><td>Reference to a theme that should be used to inflate popups
 * shown by widgets in the toolbar.</td></tr>
 * </table>
 * @see #Spinner_gravity
 * @see #Spinner_dropDownSelector
 * @see #Spinner_popupBackground
 * @see #Spinner_prompt
 * @see #Spinner_dropDownWidth
 * @see #Spinner_spinnerMode
 * @see #Spinner_popupElevation
 * @see #Spinner_popupTheme
 */

public static final int[] Spinner;
static { Spinner = new int[0]; }

/**
 * <p>
 * @attr description
 * List selector to use for spinnerMode="dropdown" display.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:dropDownSelector
 */

public static final int Spinner_dropDownSelector = 1; // 0x1

/**
 * <p>
 * @attr description
 * Width of the dropdown in spinnerMode="dropdown".
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>fill_parent</td><td>ffffffff</td><td>The dropdown should fill the width of the screen.
 * This constant is deprecated starting from API Level 8 and
 * is replaced by {@code match_parent}.</td></tr>
 * <tr><td>match_parent</td><td>ffffffff</td><td>The dropdown should fit the width of the screen.
 * Introduced in API Level 8.</td></tr>
 * <tr><td>wrap_content</td><td>fffffffe</td><td>The dropdown should fit the width of its anchor.</td></tr>
 * </table>
 *
 * @attr name android:dropDownWidth
 */

public static final int Spinner_dropDownWidth = 4; // 0x4

/**
 * <p>
 * @attr description
 * Gravity setting for positioning the currently selected item.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
 * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
 * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
 * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
 * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the horizontal gravity: a left gravity will clip the right
 * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
 * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the vertical gravity: a top gravity will clip the bottom
 * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
 * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
 * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
 * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
 * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
 * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
 * </table>
 *
 * @attr name android:gravity
 */

public static final int Spinner_gravity = 0; // 0x0

/**
 * <p>
 * @attr description
 * Background drawable to use for the dropdown in spinnerMode="dropdown".
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:popupBackground
 */

public static final int Spinner_popupBackground = 2; // 0x2

/**
 * <p>
 * @attr description
 * Window elevation to use for the dropdown in spinnerMode="dropdown".
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:popupElevation
 */

public static final int Spinner_popupElevation = 6; // 0x6

/**
 * <p>
 * @attr description
 * Theme to use for the drop-down or dialog popup window.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:popupTheme
 */

public static final int Spinner_popupTheme = 7; // 0x7

/**
 * <p>
 * @attr description
 * The prompt to display when the spinner's dialog is shown.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:prompt
 */

public static final int Spinner_prompt = 3; // 0x3

/**
 * <p>
 * @attr description
 * Display mode for spinner options.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>dialog</td><td>0</td><td>Spinner options will be presented to the user as a dialog window.</td></tr>
 * <tr><td>dropdown</td><td>1</td><td>Spinner options will be presented to the user as an inline dropdown
 * anchored to the spinner widget itself.</td></tr>
 * </table>
 *
 * @attr name android:spinnerMode
 */

public static final int Spinner_spinnerMode = 5; // 0x5

/**
 * Attributes that can be used with a StackView.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * </table>
 */

public static final int[] StackView;
static { StackView = new int[0]; }

/**
 * Attributes that can be assigned to a StateListAnimator item.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #StateListAnimatorItem_animation android:animation}</code></td><td>Animation to use on each child.</td></tr>
 * </table>
 * @see #StateListAnimatorItem_animation
 */

public static final int[] StateListAnimatorItem;
static { StateListAnimatorItem = new int[0]; }

/**
 * <p>
 * @attr description
 * Animation to use on each child.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:animation
 */

public static final int StateListAnimatorItem_animation = 0; // 0x0

/**
 * Drawable used to render several states. Each state is represented by
 * a child drawable.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #StateListDrawable_dither android:dither}</code></td><td>Enables or disables dithering of the bitmap if the bitmap does not have the
 * same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
 * an RGB 565 screen).</td></tr>
 * <tr><td><code>{@link #StateListDrawable_visible android:visible}</code></td><td>Provides initial visibility state of the drawable; the default
 * value is false.</td></tr>
 * <tr><td><code>{@link #StateListDrawable_variablePadding android:variablePadding}</code></td><td>If true, allows the drawable's padding to change based on the
 * current state that is selected.</td></tr>
 * <tr><td><code>{@link #StateListDrawable_constantSize android:constantSize}</code></td><td>If true, the drawable's reported internal size will remain
 * constant as the state changes; the size is the maximum of all
 * of the states.</td></tr>
 * <tr><td><code>{@link #StateListDrawable_enterFadeDuration android:enterFadeDuration}</code></td><td>Amount of time (in milliseconds) to fade in a new state drawable.</td></tr>
 * <tr><td><code>{@link #StateListDrawable_exitFadeDuration android:exitFadeDuration}</code></td><td>Amount of time (in milliseconds) to fade out an old state drawable.</td></tr>
 * <tr><td><code>{@link #StateListDrawable_autoMirrored android:autoMirrored}</code></td><td>Indicates if the drawable needs to be mirrored when its layout direction is
 * RTL (right-to-left).</td></tr>
 * </table>
 * @see #StateListDrawable_dither
 * @see #StateListDrawable_visible
 * @see #StateListDrawable_variablePadding
 * @see #StateListDrawable_constantSize
 * @see #StateListDrawable_enterFadeDuration
 * @see #StateListDrawable_exitFadeDuration
 * @see #StateListDrawable_autoMirrored
 */

public static final int[] StateListDrawable;
static { StateListDrawable = new int[0]; }

/**
 * Represents a single state inside a StateListDrawable.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #StateListDrawableItem_drawable android:drawable}</code></td><td>Reference to a drawable resource to use for the frame.</td></tr>
 * </table>
 * @see #StateListDrawableItem_drawable
 */

public static final int[] StateListDrawableItem;
static { StateListDrawableItem = new int[0]; }

/**
 * <p>
 * @attr description
 * Reference to a drawable resource to use for the state. If not
 * given, the drawable must be defined by the first child tag.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:drawable
 */

public static final int StateListDrawableItem_drawable = 0; // 0x0

/**
 * <p>
 * @attr description
 * Indicates if the drawable needs to be mirrored when its layout direction is
 * RTL (right-to-left).
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:autoMirrored
 */

public static final int StateListDrawable_autoMirrored = 6; // 0x6

/**
 * <p>
 * @attr description
 * If true, the drawable's reported internal size will remain
 * constant as the state changes; the size is the maximum of all
 * of the states.  If false, the size will vary based on the
 * current state.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:constantSize
 */

public static final int StateListDrawable_constantSize = 3; // 0x3

/**
 * <p>
 * @attr description
 * Enables or disables dithering of the bitmap if the bitmap does not have the
 * same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
 * an RGB 565 screen).
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:dither
 */

public static final int StateListDrawable_dither = 0; // 0x0

/**
 * <p>
 * @attr description
 * Amount of time (in milliseconds) to fade in a new state drawable.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:enterFadeDuration
 */

public static final int StateListDrawable_enterFadeDuration = 4; // 0x4

/**
 * <p>
 * @attr description
 * Amount of time (in milliseconds) to fade out an old state drawable.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:exitFadeDuration
 */

public static final int StateListDrawable_exitFadeDuration = 5; // 0x5

/**
 * <p>
 * @attr description
 * If true, allows the drawable's padding to change based on the
 * current state that is selected.  If false, the padding will
 * stay the same (based on the maximum padding of all the states).
 * Enabling this feature requires that the owner of the drawable
 * deal with performing layout when the state changes, which is
 * often not supported.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:variablePadding
 */

public static final int StateListDrawable_variablePadding = 2; // 0x2

/**
 * <p>
 * @attr description
 * Indicates whether the drawable should be initially visible.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:visible
 */

public static final int StateListDrawable_visible = 1; // 0x1

/**
 * Attributes that can be used with a Storage.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * </table>
 */

public static final int[] Storage;
static { Storage = new int[0]; }

/**
 * Attributes that can be used with a SuggestionSpan.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * </table>
 */

public static final int[] SuggestionSpan;
static { SuggestionSpan = new int[0]; }

/**
 * Attributes that can be used with a Switch.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #Switch_textOn android:textOn}</code></td><td>The text for the button when it is checked.</td></tr>
 * <tr><td><code>{@link #Switch_textOff android:textOff}</code></td><td>The text for the button when it is not checked.</td></tr>
 * <tr><td><code>{@link #Switch_thumb android:thumb}</code></td><td>Draws the thumb on a seekbar.</td></tr>
 * <tr><td><code>{@link #Switch_switchTextAppearance android:switchTextAppearance}</code></td><td>TextAppearance style for text displayed on the switch thumb.</td></tr>
 * <tr><td><code>{@link #Switch_track android:track}</code></td><td>Drawable to use as the "track" that the switch thumb slides within.</td></tr>
 * <tr><td><code>{@link #Switch_switchMinWidth android:switchMinWidth}</code></td><td>Minimum width for the switch component.</td></tr>
 * <tr><td><code>{@link #Switch_switchPadding android:switchPadding}</code></td><td>Minimum space between the switch and caption text.</td></tr>
 * <tr><td><code>{@link #Switch_thumbTextPadding android:thumbTextPadding}</code></td><td>Amount of padding on either side of text within the switch thumb.</td></tr>
 * <tr><td><code>{@link #Switch_splitTrack android:splitTrack}</code></td><td>Whether to split the track and leave a gap for the thumb drawable.</td></tr>
 * <tr><td><code>{@link #Switch_thumbTint android:thumbTint}</code></td><td>Tint to apply to the thumb drawable.</td></tr>
 * <tr><td><code>{@link #Switch_thumbTintMode android:thumbTintMode}</code></td><td>Blending mode used to apply the thumb tint.</td></tr>
 * <tr><td><code>{@link #Switch_showText android:showText}</code></td><td>Whether to draw on/off text.</td></tr>
 * <tr><td><code>{@link #Switch_trackTint android:trackTint}</code></td><td>Tint to apply to the track.</td></tr>
 * <tr><td><code>{@link #Switch_trackTintMode android:trackTintMode}</code></td><td>Blending mode used to apply the track tint.</td></tr>
 * </table>
 * @see #Switch_textOn
 * @see #Switch_textOff
 * @see #Switch_thumb
 * @see #Switch_switchTextAppearance
 * @see #Switch_track
 * @see #Switch_switchMinWidth
 * @see #Switch_switchPadding
 * @see #Switch_thumbTextPadding
 * @see #Switch_splitTrack
 * @see #Switch_thumbTint
 * @see #Switch_thumbTintMode
 * @see #Switch_showText
 * @see #Switch_trackTint
 * @see #Switch_trackTintMode
 */

public static final int[] Switch;
static { Switch = new int[0]; }

/**
 * Attributes that can be used with a SwitchPreference.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #SwitchPreference_summaryOn android:summaryOn}</code></td><td>The summary for the Preference in a PreferenceActivity screen when the
 * CheckBoxPreference is checked.</td></tr>
 * <tr><td><code>{@link #SwitchPreference_summaryOff android:summaryOff}</code></td><td>The summary for the Preference in a PreferenceActivity screen when the
 * CheckBoxPreference is unchecked.</td></tr>
 * <tr><td><code>{@link #SwitchPreference_disableDependentsState android:disableDependentsState}</code></td><td>The state (true for on, or false for off) that causes dependents to be disabled.</td></tr>
 * <tr><td><code>{@link #SwitchPreference_switchTextOn android:switchTextOn}</code></td><td>The text used on the switch itself when in the "on" state.</td></tr>
 * <tr><td><code>{@link #SwitchPreference_switchTextOff android:switchTextOff}</code></td><td>The text used on the switch itself when in the "off" state.</td></tr>
 * </table>
 * @see #SwitchPreference_summaryOn
 * @see #SwitchPreference_summaryOff
 * @see #SwitchPreference_disableDependentsState
 * @see #SwitchPreference_switchTextOn
 * @see #SwitchPreference_switchTextOff
 */

public static final int[] SwitchPreference;
static { SwitchPreference = new int[0]; }

/**
 * <p>
 * @attr description
 * The state (true for on, or false for off) that causes dependents to be disabled. By default,
 * dependents will be disabled when this is unchecked, so the value of this preference is false.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:disableDependentsState
 */

public static final int SwitchPreference_disableDependentsState = 2; // 0x2

/**
 * <p>
 * @attr description
 * The summary for the Preference in a PreferenceActivity screen when the
 * SwitchPreference is unchecked. If separate on/off summaries are not
 * needed, the summary attribute can be used instead.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:summaryOff
 */

public static final int SwitchPreference_summaryOff = 1; // 0x1

/**
 * <p>
 * @attr description
 * The summary for the Preference in a PreferenceActivity screen when the
 * SwitchPreference is checked. If separate on/off summaries are not
 * needed, the summary attribute can be used instead.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:summaryOn
 */

public static final int SwitchPreference_summaryOn = 0; // 0x0

/**
 * <p>
 * @attr description
 * The text used on the switch itself when in the "off" state.
 * This should be a very SHORT string, as it appears in a small space.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:switchTextOff
 */

public static final int SwitchPreference_switchTextOff = 4; // 0x4

/**
 * <p>
 * @attr description
 * The text used on the switch itself when in the "on" state.
 * This should be a very SHORT string, as it appears in a small space.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:switchTextOn
 */

public static final int SwitchPreference_switchTextOn = 3; // 0x3

/**
 * <p>
 * @attr description
 * Whether to draw on/off text.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:showText
 */

public static final int Switch_showText = 11; // 0xb

/**
 * <p>
 * @attr description
 * Whether to split the track and leave a gap for the thumb drawable.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:splitTrack
 */

public static final int Switch_splitTrack = 8; // 0x8

/**
 * <p>
 * @attr description
 * Minimum width for the switch component.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:switchMinWidth
 */

public static final int Switch_switchMinWidth = 5; // 0x5

/**
 * <p>
 * @attr description
 * Minimum space between the switch and caption text.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:switchPadding
 */

public static final int Switch_switchPadding = 6; // 0x6

/**
 * <p>
 * @attr description
 * TextAppearance style for text displayed on the switch thumb.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:switchTextAppearance
 */

public static final int Switch_switchTextAppearance = 3; // 0x3

/**
 * <p>
 * @attr description
 * Text to use when the switch is in the unchecked/"off" state.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:textOff
 */

public static final int Switch_textOff = 1; // 0x1

/**
 * <p>
 * @attr description
 * Text to use when the switch is in the checked/"on" state.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:textOn
 */

public static final int Switch_textOn = 0; // 0x0

/**
 * <p>
 * @attr description
 * Drawable to use as the "thumb" that switches back and forth.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:thumb
 */

public static final int Switch_thumb = 2; // 0x2

/**
 * <p>
 * @attr description
 * Amount of padding on either side of text within the switch thumb.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:thumbTextPadding
 */

public static final int Switch_thumbTextPadding = 7; // 0x7

/**
 * <p>
 * @attr description
 * Tint to apply to the thumb.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:thumbTint
 */

public static final int Switch_thumbTint = 9; // 0x9

/**
 * <p>
 * @attr description
 * Blending mode used to apply the thumb tint.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 *
 * @attr name android:thumbTintMode
 */

public static final int Switch_thumbTintMode = 10; // 0xa

/**
 * <p>
 * @attr description
 * Drawable to use as the "track" that the switch thumb slides within.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:track
 */

public static final int Switch_track = 4; // 0x4

/**
 * <p>
 * @attr description
 * Tint to apply to the track.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:trackTint
 */

public static final int Switch_trackTint = 12; // 0xc

/**
 * <p>
 * @attr description
 * Blending mode used to apply the track tint.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 *
 * @attr name android:trackTintMode
 */

public static final int Switch_trackTintMode = 13; // 0xd

/**
 * Use <code>account-authenticator</code> as the root tag of the XML resource that
 * describes an account authenticator.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #SyncAdapter_settingsActivity android:settingsActivity}</code></td><td>Component name of an activity that allows the user to modify
 * the settings for this service.</td></tr>
 * <tr><td><code>{@link #SyncAdapter_accountType android:accountType}</code></td><td>The account type this authenticator handles.</td></tr>
 * <tr><td><code>{@link #SyncAdapter_contentAuthority android:contentAuthority}</code></td><td>the authority of a content provider.</td></tr>
 * <tr><td><code>{@link #SyncAdapter_userVisible android:userVisible}</code></td><td></td></tr>
 * <tr><td><code>{@link #SyncAdapter_supportsUploading android:supportsUploading}</code></td><td></td></tr>
 * <tr><td><code>{@link #SyncAdapter_allowParallelSyncs android:allowParallelSyncs}</code></td><td>Set to true to tell the SyncManager that this SyncAdapter supports
 * multiple simultaneous syncs for the same account type and authority.</td></tr>
 * <tr><td><code>{@link #SyncAdapter_isAlwaysSyncable android:isAlwaysSyncable}</code></td><td>Set to true to tell the SyncManager to automatically call setIsSyncable(..., ..., 1)
 * for the SyncAdapter instead of issuaing an initialization sync to the SyncAdapter.</td></tr>
 * </table>
 * @see #SyncAdapter_settingsActivity
 * @see #SyncAdapter_accountType
 * @see #SyncAdapter_contentAuthority
 * @see #SyncAdapter_userVisible
 * @see #SyncAdapter_supportsUploading
 * @see #SyncAdapter_allowParallelSyncs
 * @see #SyncAdapter_isAlwaysSyncable
 */

public static final int[] SyncAdapter;
static { SyncAdapter = new int[0]; }

/**
 * <p>
 * @attr description
 * The account type this authenticator handles.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:accountType
 */

public static final int SyncAdapter_accountType = 1; // 0x1

/**
 * <p>
 * @attr description
 * Set to true to tell the SyncManager that this SyncAdapter supports
 * multiple simultaneous syncs for the same account type and authority.
 * Otherwise the SyncManager will be sure not to issue a start sync request
 * to this SyncAdapter if the SyncAdapter is already syncing another account.
 * Defaults to false.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:allowParallelSyncs
 */

public static final int SyncAdapter_allowParallelSyncs = 5; // 0x5

/**
 * <p>
 * @attr description
 * the authority of a content provider.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:contentAuthority
 */

public static final int SyncAdapter_contentAuthority = 2; // 0x2

/**
 * <p>
 * @attr description
 * Set to true to tell the SyncManager to automatically call setIsSyncable(..., ..., 1)
 * for the SyncAdapter instead of issuaing an initialization sync to the SyncAdapter.
 * Defaults to false.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:isAlwaysSyncable
 */

public static final int SyncAdapter_isAlwaysSyncable = 6; // 0x6

/**
 * <p>
 * @attr description
 * If provided, specifies the action of the settings
 * activity for this SyncAdapter.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:settingsActivity
 */

public static final int SyncAdapter_settingsActivity = 0; // 0x0

/**
 * <p>This symbol is the offset where the {@link android.R.attr#supportsUploading}
 * attribute's value can be found in the {@link #SyncAdapter} array.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:supportsUploading
 */

public static final int SyncAdapter_supportsUploading = 4; // 0x4

/**
 * <p>This symbol is the offset where the {@link android.R.attr#userVisible}
 * attribute's value can be found in the {@link #SyncAdapter} array.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:userVisible
 */

public static final int SyncAdapter_userVisible = 3; // 0x3

/**
 * Specify one or more <code>system-code-filter</code> elements inside a
 * <code>host-nfcf-service</code> element to specify a System Code
 * your service can handle.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #SystemCodeFilter_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * </table>
 * @see #SystemCodeFilter_name
 */

public static final int[] SystemCodeFilter;
static { SystemCodeFilter = new int[0]; }

/**
 * <p>
 * @attr description
 * The System Code. This attribute is mandatory.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int SystemCodeFilter_name = 0; // 0x0

/**
 * Specify one or more <code>t3tPmm-filter</code> elements inside a
 * <code>host-nfcf-service</code> element to specify a LF_T3T_PMM.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #T3tPmmFilter_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * </table>
 * @see #T3tPmmFilter_name
 */

public static final int[] T3tPmmFilter;
static { T3tPmmFilter = new int[0]; }

/**
 * <p>
 * @attr description
 * A unique name for the given item.  This must use a Java-style naming
 * convention to ensure the name is unique, for example
 * "com.mycompany.MyName".
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int T3tPmmFilter_name = 0; // 0x0

/**
 * Attributes that can be used with a TabWidget.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #TabWidget_divider android:divider}</code></td><td>Drawable or color to draw between list items.</td></tr>
 * <tr><td><code>{@link #TabWidget_tabStripLeft android:tabStripLeft}</code></td><td>Drawable used to draw the left part of the strip underneath the tabs.</td></tr>
 * <tr><td><code>{@link #TabWidget_tabStripRight android:tabStripRight}</code></td><td>Drawable used to draw the right part of the strip underneath the tabs.</td></tr>
 * <tr><td><code>{@link #TabWidget_tabStripEnabled android:tabStripEnabled}</code></td><td>Determines whether the strip under the tab indicators is drawn or not.</td></tr>
 * </table>
 * @see #TabWidget_divider
 * @see #TabWidget_tabStripLeft
 * @see #TabWidget_tabStripRight
 * @see #TabWidget_tabStripEnabled
 */

public static final int[] TabWidget;
static { TabWidget = new int[0]; }

/**
 * <p>
 * @attr description
 * Drawable used to draw the divider between tabs.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:divider
 */

public static final int TabWidget_divider = 0; // 0x0

/**
 * <p>
 * @attr description
 * Determines whether the strip under the tab indicators is drawn or not.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:tabStripEnabled
 */

public static final int TabWidget_tabStripEnabled = 3; // 0x3

/**
 * <p>
 * @attr description
 * Drawable used to draw the left part of the strip underneath the tabs.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:tabStripLeft
 */

public static final int TabWidget_tabStripLeft = 1; // 0x1

/**
 * <p>
 * @attr description
 * Drawable used to draw the right part of the strip underneath the tabs.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:tabStripRight
 */

public static final int TabWidget_tabStripRight = 2; // 0x2

/**
 * Attributes that can be used with a TableLayout.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #TableLayout_stretchColumns android:stretchColumns}</code></td><td>The zero-based index of the columns to stretch.</td></tr>
 * <tr><td><code>{@link #TableLayout_shrinkColumns android:shrinkColumns}</code></td><td>The zero-based index of the columns to shrink.</td></tr>
 * <tr><td><code>{@link #TableLayout_collapseColumns android:collapseColumns}</code></td><td>The zero-based index of the columns to collapse.</td></tr>
 * </table>
 * @see #TableLayout_stretchColumns
 * @see #TableLayout_shrinkColumns
 * @see #TableLayout_collapseColumns
 */

public static final int[] TableLayout;
static { TableLayout = new int[0]; }

/**
 * <p>
 * @attr description
 * The zero-based index of the columns to collapse. The column indices
 * must be separated by a comma: 1, 2, 5. Illegal and duplicate
 * indices are ignored.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:collapseColumns
 */

public static final int TableLayout_collapseColumns = 2; // 0x2

/**
 * <p>
 * @attr description
 * The zero-based index of the columns to shrink. The column indices
 * must be separated by a comma: 1, 2, 5. Illegal and duplicate
 * indices are ignored. You can shrink all columns by using the
 * value "*" instead. Note that a column can be marked stretchable
 * and shrinkable at the same time.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:shrinkColumns
 */

public static final int TableLayout_shrinkColumns = 1; // 0x1

/**
 * <p>
 * @attr description
 * The zero-based index of the columns to stretch. The column indices
 * must be separated by a comma: 1, 2, 5. Illegal and duplicate
 * indices are ignored. You can stretch all columns by using the
 * value "*" instead. Note that a column can be marked stretchable
 * and shrinkable at the same time.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:stretchColumns
 */

public static final int TableLayout_stretchColumns = 0; // 0x0

public static final int[] TableRow;
static { TableRow = new int[0]; }

/**
 * Attributes that can be used with a TableRow_Cell.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #TableRow_Cell_layout_column android:layout_column}</code></td><td>The index of the column in which this child should be.</td></tr>
 * <tr><td><code>{@link #TableRow_Cell_layout_span android:layout_span}</code></td><td>Defines how many columns this child should span.</td></tr>
 * </table>
 * @see #TableRow_Cell_layout_column
 * @see #TableRow_Cell_layout_span
 */

public static final int[] TableRow_Cell;
static { TableRow_Cell = new int[0]; }

/**
 * <p>
 * @attr description
 * The index of the column in which this child should be.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:layout_column
 */

public static final int TableRow_Cell_layout_column = 0; // 0x0

/**
 * <p>
 * @attr description
 * Defines how many columns this child should span.  Must be >= 1.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:layout_span
 */

public static final int TableRow_Cell_layout_span = 1; // 0x1

/**
 * Attributes that can be used with a TextAppearance.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #TextAppearance_textSize android:textSize}</code></td><td>Size of text.</td></tr>
 * <tr><td><code>{@link #TextAppearance_typeface android:typeface}</code></td><td>Default text typeface.</td></tr>
 * <tr><td><code>{@link #TextAppearance_textStyle android:textStyle}</code></td><td>Default text typeface style.</td></tr>
 * <tr><td><code>{@link #TextAppearance_textColor android:textColor}</code></td><td>Color of text (usually same as colorForeground).</td></tr>
 * <tr><td><code>{@link #TextAppearance_textColorHighlight android:textColorHighlight}</code></td><td>Color of highlighted text.</td></tr>
 * <tr><td><code>{@link #TextAppearance_textColorHint android:textColorHint}</code></td><td>Color of hint text (displayed when the field is empty).</td></tr>
 * <tr><td><code>{@link #TextAppearance_textColorLink android:textColorLink}</code></td><td>Color of link text (URLs).</td></tr>
 * <tr><td><code>{@link #TextAppearance_shadowColor android:shadowColor}</code></td><td>Place a blurred shadow of text underneath the text, drawn with the
 * specified color.</td></tr>
 * <tr><td><code>{@link #TextAppearance_shadowDx android:shadowDx}</code></td><td>Horizontal offset of the text shadow.</td></tr>
 * <tr><td><code>{@link #TextAppearance_shadowDy android:shadowDy}</code></td><td>Vertical offset of the text shadow.</td></tr>
 * <tr><td><code>{@link #TextAppearance_shadowRadius android:shadowRadius}</code></td><td>Blur radius of the text shadow.</td></tr>
 * <tr><td><code>{@link #TextAppearance_textAllCaps android:textAllCaps}</code></td><td>Present the text in ALL CAPS.</td></tr>
 * <tr><td><code>{@link #TextAppearance_fontFamily android:fontFamily}</code></td><td>Default font family.</td></tr>
 * <tr><td><code>{@link #TextAppearance_elegantTextHeight android:elegantTextHeight}</code></td><td>Elegant text height, especially for less compacted complex script text.</td></tr>
 * <tr><td><code>{@link #TextAppearance_letterSpacing android:letterSpacing}</code></td><td>Text letter-spacing.</td></tr>
 * <tr><td><code>{@link #TextAppearance_fontFeatureSettings android:fontFeatureSettings}</code></td><td>Font feature settings.</td></tr>
 * <tr><td><code>{@link #TextAppearance_fontVariationSettings android:fontVariationSettings}</code></td><td>The variation settings to be applied to the font.</td></tr>
 * <tr><td><code>{@link #TextAppearance_fallbackLineSpacing android:fallbackLineSpacing}</code></td><td>Whether to respect the ascent and descent of the fallback fonts that are used in
 * displaying the text.</td></tr>
 * <tr><td><code>{@link #TextAppearance_textFontWeight android:textFontWeight}</code></td><td>Weight for the font used in the TextView.</td></tr>
 * <tr><td><code>{@link #TextAppearance_textLocale android:textLocale}</code></td><td>Specifies the {@link android.os.LocaleList} for the text in this TextView.</td></tr>
 * </table>
 * @see #TextAppearance_textSize
 * @see #TextAppearance_typeface
 * @see #TextAppearance_textStyle
 * @see #TextAppearance_textColor
 * @see #TextAppearance_textColorHighlight
 * @see #TextAppearance_textColorHint
 * @see #TextAppearance_textColorLink
 * @see #TextAppearance_shadowColor
 * @see #TextAppearance_shadowDx
 * @see #TextAppearance_shadowDy
 * @see #TextAppearance_shadowRadius
 * @see #TextAppearance_textAllCaps
 * @see #TextAppearance_fontFamily
 * @see #TextAppearance_elegantTextHeight
 * @see #TextAppearance_letterSpacing
 * @see #TextAppearance_fontFeatureSettings
 * @see #TextAppearance_fontVariationSettings
 * @see #TextAppearance_fallbackLineSpacing
 * @see #TextAppearance_textFontWeight
 * @see #TextAppearance_textLocale
 */

public static final int[] TextAppearance;
static { TextAppearance = new int[0]; }

/**
 * <p>
 * @attr description
 * Elegant text height, especially for less compacted complex script text.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:elegantTextHeight
 */

public static final int TextAppearance_elegantTextHeight = 13; // 0xd

/**
 * <p>
 * @attr description
 * Whether to respect the ascent and descent of the fallback fonts that are used in
 * displaying the text. When true, fallback fonts that end up getting used can increase
 * the ascent and descent of the lines that they are used on.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:fallbackLineSpacing
 */

public static final int TextAppearance_fallbackLineSpacing = 17; // 0x11

/**
 * <p>
 * @attr description
 * Font family (named by string or as a font resource reference) for the text.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:fontFamily
 */

public static final int TextAppearance_fontFamily = 12; // 0xc

/**
 * <p>
 * @attr description
 * Font feature settings.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:fontFeatureSettings
 */

public static final int TextAppearance_fontFeatureSettings = 15; // 0xf

/**
 * <p>
 * @attr description
 * Font variation settings.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:fontVariationSettings
 */

public static final int TextAppearance_fontVariationSettings = 16; // 0x10

/**
 * <p>
 * @attr description
 * Text letter-spacing.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:letterSpacing
 */

public static final int TextAppearance_letterSpacing = 14; // 0xe

/**
 * <p>
 * @attr description
 * Place a blurred shadow of text underneath the text, drawn with the
 * specified color. The text shadow produced does not interact with
 * properties on View that are responsible for real time shadows,
 * {@link android.R.styleable#View_elevation elevation} and
 * {@link android.R.styleable#View_translationZ translationZ}.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:shadowColor
 */

public static final int TextAppearance_shadowColor = 7; // 0x7

/**
 * <p>
 * @attr description
 * Horizontal offset of the text shadow.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:shadowDx
 */

public static final int TextAppearance_shadowDx = 8; // 0x8

/**
 * <p>
 * @attr description
 * Vertical offset of the text shadow.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:shadowDy
 */

public static final int TextAppearance_shadowDy = 9; // 0x9

/**
 * <p>
 * @attr description
 * Blur radius of the text shadow.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:shadowRadius
 */

public static final int TextAppearance_shadowRadius = 10; // 0xa

/**
 * <p>
 * @attr description
 * Present the text in ALL CAPS. This may use a small-caps form when available.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:textAllCaps
 */

public static final int TextAppearance_textAllCaps = 11; // 0xb

/**
 * <p>
 * @attr description
 * Text color.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:textColor
 */

public static final int TextAppearance_textColor = 3; // 0x3

/**
 * <p>
 * @attr description
 * Color of the text selection highlight.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:textColorHighlight
 */

public static final int TextAppearance_textColorHighlight = 4; // 0x4

/**
 * <p>
 * @attr description
 * Color of the hint text.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:textColorHint
 */

public static final int TextAppearance_textColorHint = 5; // 0x5

/**
 * <p>
 * @attr description
 * Color of the links.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:textColorLink
 */

public static final int TextAppearance_textColorLink = 6; // 0x6

/**
 * <p>
 * @attr description
 * Weight for the font used in the TextView.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:textFontWeight
 */

public static final int TextAppearance_textFontWeight = 18; // 0x12

/**
 * <p>
 * @attr description
 * Specifies the {@link android.os.LocaleList} for the text.
 * May be a string value, which is a comma-separated language tag list, such as "ja-JP,zh-CN".
 * When not specified or an empty string is given, it will fallback to the default one.
 * {@see android.os.LocaleList#forLanguageTags(String)}
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:textLocale
 */

public static final int TextAppearance_textLocale = 19; // 0x13

/**
 * <p>
 * @attr description
 * Size of the text. Recommended dimension type for text is "sp" for scaled-pixels (example: 15sp).
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:textSize
 */

public static final int TextAppearance_textSize = 0; // 0x0

/**
 * <p>
 * @attr description
 * Style (normal, bold, italic, bold|italic) for the text.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bold</td><td>1</td><td></td></tr>
 * <tr><td>italic</td><td>2</td><td></td></tr>
 * <tr><td>normal</td><td>0</td><td></td></tr>
 * </table>
 *
 * @attr name android:textStyle
 */

public static final int TextAppearance_textStyle = 2; // 0x2

/**
 * <p>
 * @attr description
 * Typeface (normal, sans, serif, monospace) for the text.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>monospace</td><td>3</td><td></td></tr>
 * <tr><td>normal</td><td>0</td><td></td></tr>
 * <tr><td>sans</td><td>1</td><td></td></tr>
 * <tr><td>serif</td><td>2</td><td></td></tr>
 * </table>
 *
 * @attr name android:typeface
 */

public static final int TextAppearance_typeface = 1; // 0x1

/**
 * Attributes that can be used with a TextClock.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #TextClock_format12Hour android:format12Hour}</code></td><td>Specifies the formatting pattern used to show the time and/or date
 * in 12-hour mode.</td></tr>
 * <tr><td><code>{@link #TextClock_format24Hour android:format24Hour}</code></td><td>Specifies the formatting pattern used to show the time and/or date
 * in 24-hour mode.</td></tr>
 * <tr><td><code>{@link #TextClock_timeZone android:timeZone}</code></td><td>Specifies the time zone to use.</td></tr>
 * </table>
 * @see #TextClock_format12Hour
 * @see #TextClock_format24Hour
 * @see #TextClock_timeZone
 */

public static final int[] TextClock;
static { TextClock = new int[0]; }

/**
 * <p>
 * @attr description
 * Specifies the formatting pattern used to show the time and/or date
 * in 12-hour mode. Please refer to {@link android.text.format.DateFormat}
 * for a complete description of accepted formatting patterns.
 * The default pattern is a locale-appropriate equivalent of "h:mm a".
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:format12Hour
 */

public static final int TextClock_format12Hour = 0; // 0x0

/**
 * <p>
 * @attr description
 * Specifies the formatting pattern used to show the time and/or date
 * in 24-hour mode. Please refer to {@link android.text.format.DateFormat}
 * for a complete description of accepted formatting patterns.
 * The default pattern is a locale-appropriate equivalent of "H:mm".
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:format24Hour
 */

public static final int TextClock_format24Hour = 1; // 0x1

/**
 * <p>
 * @attr description
 * Specifies the time zone to use. When this attribute is specified, the
 * TextClock will ignore the time zone of the system. To use the user's
 * time zone, do not specify this attribute. The default value is the
 * user's time zone. Please refer to {@link java.util.TimeZone} for more
 * information about time zone ids.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:timeZone
 */

public static final int TextClock_timeZone = 2; // 0x2

public static final int[] TextSwitcher;
static { TextSwitcher = new int[0]; }

/**
 * Use <code>tts-engine</code> as the root tag of the XML resource that
 * describes a text to speech engine implemented as a subclass of
 * {@link android.speech.tts.TextToSpeechService}.
 * The XML resource must be referenced from its
 * {@link android.speech.tts.TextToSpeech.Engine#SERVICE_META_DATA} meta-data
 * entry.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #TextToSpeechEngine_settingsActivity android:settingsActivity}</code></td><td>Component name of an activity that allows the user to modify
 * the settings for this service.</td></tr>
 * </table>
 * @see #TextToSpeechEngine_settingsActivity
 */

public static final int[] TextToSpeechEngine;
static { TextToSpeechEngine = new int[0]; }

/**
 * <p>
 * @attr description
 * Component name of an activity that allows the user to modify
 * the settings for this service.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:settingsActivity
 */

public static final int TextToSpeechEngine_settingsActivity = 0; // 0x0

/**
 * Attributes that can be used with a TextView.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #TextView_enabled android:enabled}</code></td><td>Specifies whether the widget is enabled.</td></tr>
 * <tr><td><code>{@link #TextView_textAppearance android:textAppearance}</code></td><td>Default appearance of text: color, typeface, size, and style.</td></tr>
 * <tr><td><code>{@link #TextView_textSize android:textSize}</code></td><td>Size of text.</td></tr>
 * <tr><td><code>{@link #TextView_typeface android:typeface}</code></td><td>Default text typeface.</td></tr>
 * <tr><td><code>{@link #TextView_textStyle android:textStyle}</code></td><td>Default text typeface style.</td></tr>
 * <tr><td><code>{@link #TextView_textColor android:textColor}</code></td><td>Color of text (usually same as colorForeground).</td></tr>
 * <tr><td><code>{@link #TextView_textColorHighlight android:textColorHighlight}</code></td><td>Color of highlighted text.</td></tr>
 * <tr><td><code>{@link #TextView_textColorHint android:textColorHint}</code></td><td>Color of hint text (displayed when the field is empty).</td></tr>
 * <tr><td><code>{@link #TextView_textColorLink android:textColorLink}</code></td><td>Color of link text (URLs).</td></tr>
 * <tr><td><code>{@link #TextView_ellipsize android:ellipsize}</code></td><td>Where to ellipsize text.</td></tr>
 * <tr><td><code>{@link #TextView_gravity android:gravity}</code></td><td>Specifies how an object should position its content, on both the X and Y axes,
 * within its own bounds.</td></tr>
 * <tr><td><code>{@link #TextView_autoLink android:autoLink}</code></td><td>Controls whether links such as urls and email addresses are
 * automatically found and converted to clickable links.</td></tr>
 * <tr><td><code>{@link #TextView_linksClickable android:linksClickable}</code></td><td>If set to false, keeps the movement method from being set
 * to the link movement method even if autoLink causes links
 * to be found.</td></tr>
 * <tr><td><code>{@link #TextView_maxWidth android:maxWidth}</code></td><td>An optional argument to supply a maximum width for this view.</td></tr>
 * <tr><td><code>{@link #TextView_maxHeight android:maxHeight}</code></td><td>An optional argument to supply a maximum height for this view.</td></tr>
 * <tr><td><code>{@link #TextView_minWidth android:minWidth}</code></td><td></td></tr>
 * <tr><td><code>{@link #TextView_minHeight android:minHeight}</code></td><td></td></tr>
 * <tr><td><code>{@link #TextView_bufferType android:bufferType}</code></td><td>Determines the minimum type that getText() will return.</td></tr>
 * <tr><td><code>{@link #TextView_text android:text}</code></td><td>Text to display.</td></tr>
 * <tr><td><code>{@link #TextView_hint android:hint}</code></td><td>Hint text to display when the text is empty.</td></tr>
 * <tr><td><code>{@link #TextView_textScaleX android:textScaleX}</code></td><td>Sets the horizontal scaling factor for the text.</td></tr>
 * <tr><td><code>{@link #TextView_cursorVisible android:cursorVisible}</code></td><td>Makes the cursor visible (the default) or invisible.</td></tr>
 * <tr><td><code>{@link #TextView_maxLines android:maxLines}</code></td><td>Makes the TextView be at most this many lines tall.</td></tr>
 * <tr><td><code>{@link #TextView_lines android:lines}</code></td><td>Makes the TextView be exactly this many lines tall.</td></tr>
 * <tr><td><code>{@link #TextView_height android:height}</code></td><td>Makes the TextView be exactly this tall.</td></tr>
 * <tr><td><code>{@link #TextView_minLines android:minLines}</code></td><td>Makes the TextView be at least this many lines tall.</td></tr>
 * <tr><td><code>{@link #TextView_maxEms android:maxEms}</code></td><td>Makes the TextView be at most this many ems wide.</td></tr>
 * <tr><td><code>{@link #TextView_ems android:ems}</code></td><td>Makes the TextView be exactly this many ems wide.</td></tr>
 * <tr><td><code>{@link #TextView_width android:width}</code></td><td>Makes the TextView be exactly this wide.</td></tr>
 * <tr><td><code>{@link #TextView_minEms android:minEms}</code></td><td>Makes the TextView be at least this many ems wide.</td></tr>
 * <tr><td><code>{@link #TextView_scrollHorizontally android:scrollHorizontally}</code></td><td>Whether the text is allowed to be wider than the view (and
 * therefore can be scrolled horizontally).</td></tr>
 * <tr><td><code>{@link #TextView_password android:password}</code></td><td>Whether the characters of the field are displayed as
 * password dots instead of themselves.</td></tr>
 * <tr><td><code>{@link #TextView_singleLine android:singleLine}</code></td><td>Constrains the text to a single horizontally scrolling line
 * instead of letting it wrap onto multiple lines, and advances
 * focus instead of inserting a newline when you press the
 * enter key.</td></tr>
 * <tr><td><code>{@link #TextView_selectAllOnFocus android:selectAllOnFocus}</code></td><td>If the text is selectable, select it all when the view takes
 * focus.</td></tr>
 * <tr><td><code>{@link #TextView_includeFontPadding android:includeFontPadding}</code></td><td>Leave enough room for ascenders and descenders instead of
 * using the font ascent and descent strictly.</td></tr>
 * <tr><td><code>{@link #TextView_maxLength android:maxLength}</code></td><td>Set an input filter to constrain the text length to the
 * specified number.</td></tr>
 * <tr><td><code>{@link #TextView_shadowColor android:shadowColor}</code></td><td>Place a blurred shadow of text underneath the text, drawn with the
 * specified color.</td></tr>
 * <tr><td><code>{@link #TextView_shadowDx android:shadowDx}</code></td><td>Horizontal offset of the text shadow.</td></tr>
 * <tr><td><code>{@link #TextView_shadowDy android:shadowDy}</code></td><td>Vertical offset of the text shadow.</td></tr>
 * <tr><td><code>{@link #TextView_shadowRadius android:shadowRadius}</code></td><td>Blur radius of the text shadow.</td></tr>
 * <tr><td><code>{@link #TextView_numeric android:numeric}</code></td><td>If set, specifies that this TextView has a numeric input method.</td></tr>
 * <tr><td><code>{@link #TextView_digits android:digits}</code></td><td>If set, specifies that this TextView has a numeric input method
 * and that these specific characters are the ones that it will
 * accept.</td></tr>
 * <tr><td><code>{@link #TextView_phoneNumber android:phoneNumber}</code></td><td>If set, specifies that this TextView has a phone number input
 * method.</td></tr>
 * <tr><td><code>{@link #TextView_inputMethod android:inputMethod}</code></td><td>If set, specifies that this TextView should use the specified
 * input method (specified by fully-qualified class name).</td></tr>
 * <tr><td><code>{@link #TextView_capitalize android:capitalize}</code></td><td>If set, specifies that this TextView has a textual input method
 * and should automatically capitalize what the user types.</td></tr>
 * <tr><td><code>{@link #TextView_autoText android:autoText}</code></td><td>If set, specifies that this TextView has a textual input method
 * and automatically corrects some common spelling errors.</td></tr>
 * <tr><td><code>{@link #TextView_editable android:editable}</code></td><td>If set, specifies that this TextView has an input method.</td></tr>
 * <tr><td><code>{@link #TextView_freezesText android:freezesText}</code></td><td>If set, the text view will include its current complete text
 * inside of its frozen icicle in addition to meta-data such as
 * the current cursor position.</td></tr>
 * <tr><td><code>{@link #TextView_drawableTop android:drawableTop}</code></td><td>The drawable to be drawn above the text.</td></tr>
 * <tr><td><code>{@link #TextView_drawableBottom android:drawableBottom}</code></td><td>The drawable to be drawn below the text.</td></tr>
 * <tr><td><code>{@link #TextView_drawableLeft android:drawableLeft}</code></td><td>The drawable to be drawn to the left of the text.</td></tr>
 * <tr><td><code>{@link #TextView_drawableRight android:drawableRight}</code></td><td>The drawable to be drawn to the right of the text.</td></tr>
 * <tr><td><code>{@link #TextView_drawablePadding android:drawablePadding}</code></td><td>The padding between the drawables and the text.</td></tr>
 * <tr><td><code>{@link #TextView_lineSpacingExtra android:lineSpacingExtra}</code></td><td>Extra spacing between lines of text.</td></tr>
 * <tr><td><code>{@link #TextView_lineSpacingMultiplier android:lineSpacingMultiplier}</code></td><td>Extra spacing between lines of text, as a multiplier.</td></tr>
 * <tr><td><code>{@link #TextView_marqueeRepeatLimit android:marqueeRepeatLimit}</code></td><td>The number of times to repeat the marquee animation.</td></tr>
 * <tr><td><code>{@link #TextView_inputType android:inputType}</code></td><td>The type of data being placed in a text field, used to help an
 * input method decide how to let the user enter text.</td></tr>
 * <tr><td><code>{@link #TextView_privateImeOptions android:privateImeOptions}</code></td><td>An addition content type description to supply to the input
 * method attached to the text view, which is private to the
 * implementation of the input method.</td></tr>
 * <tr><td><code>{@link #TextView_editorExtras android:editorExtras}</code></td><td>Reference to an
 * {@link android.R.styleable#InputExtras &lt;input-extras&gt;}
 * XML resource containing additional data to
 * supply to an input method, which is private to the implementation
 * of the input method.</td></tr>
 * <tr><td><code>{@link #TextView_imeOptions android:imeOptions}</code></td><td>Additional features you can enable in an IME associated with an editor
 * to improve the integration with your application.</td></tr>
 * <tr><td><code>{@link #TextView_imeActionLabel android:imeActionLabel}</code></td><td>Supply a value for
 * {@link android.view.inputmethod.EditorInfo#actionLabel EditorInfo.actionLabel}
 * used when an input method is connected to the text view.</td></tr>
 * <tr><td><code>{@link #TextView_imeActionId android:imeActionId}</code></td><td>Supply a value for
 * {@link android.view.inputmethod.EditorInfo#actionId EditorInfo.actionId}
 * used when an input method is connected to the text view.</td></tr>
 * <tr><td><code>{@link #TextView_textSelectHandleLeft android:textSelectHandleLeft}</code></td><td>Reference to a drawable that will be used to display a text selection
 * anchor on the left side of a selection region.</td></tr>
 * <tr><td><code>{@link #TextView_textSelectHandleRight android:textSelectHandleRight}</code></td><td>Reference to a drawable that will be used to display a text selection
 * anchor on the right side of a selection region.</td></tr>
 * <tr><td><code>{@link #TextView_textSelectHandle android:textSelectHandle}</code></td><td>Reference to a drawable that will be used to display a text selection
 * anchor for positioning the cursor within text.</td></tr>
 * <tr><td><code>{@link #TextView_textEditPasteWindowLayout android:textEditPasteWindowLayout}</code></td><td>The layout of the view that is displayed on top of the cursor to paste inside a
 * TextEdit field.</td></tr>
 * <tr><td><code>{@link #TextView_textEditNoPasteWindowLayout android:textEditNoPasteWindowLayout}</code></td><td>Variation of textEditPasteWindowLayout displayed when the clipboard is empty.</td></tr>
 * <tr><td><code>{@link #TextView_textIsSelectable android:textIsSelectable}</code></td><td>Indicates that the content of a non-editable TextView can be selected.</td></tr>
 * <tr><td><code>{@link #TextView_textEditSidePasteWindowLayout android:textEditSidePasteWindowLayout}</code></td><td>Used instead of textEditPasteWindowLayout when the window is moved on the side of the
 * insertion cursor because it would be clipped if it were positioned on top.</td></tr>
 * <tr><td><code>{@link #TextView_textEditSideNoPasteWindowLayout android:textEditSideNoPasteWindowLayout}</code></td><td>Variation of textEditSidePasteWindowLayout displayed when the clipboard is empty.</td></tr>
 * <tr><td><code>{@link #TextView_textCursorDrawable android:textCursorDrawable}</code></td><td>Reference to a drawable that will be drawn under the insertion cursor.</td></tr>
 * <tr><td><code>{@link #TextView_textEditSuggestionItemLayout android:textEditSuggestionItemLayout}</code></td><td>Layout of the TextView item that will populate the suggestion popup window.</td></tr>
 * <tr><td><code>{@link #TextView_textAllCaps android:textAllCaps}</code></td><td>Present the text in ALL CAPS.</td></tr>
 * <tr><td><code>{@link #TextView_drawableStart android:drawableStart}</code></td><td>The drawable to be drawn to the start of the text.</td></tr>
 * <tr><td><code>{@link #TextView_drawableEnd android:drawableEnd}</code></td><td>The drawable to be drawn to the end of the text.</td></tr>
 * <tr><td><code>{@link #TextView_fontFamily android:fontFamily}</code></td><td>Default font family.</td></tr>
 * <tr><td><code>{@link #TextView_elegantTextHeight android:elegantTextHeight}</code></td><td>Elegant text height, especially for less compacted complex script text.</td></tr>
 * <tr><td><code>{@link #TextView_letterSpacing android:letterSpacing}</code></td><td>Text letter-spacing.</td></tr>
 * <tr><td><code>{@link #TextView_fontFeatureSettings android:fontFeatureSettings}</code></td><td>Font feature settings.</td></tr>
 * <tr><td><code>{@link #TextView_drawableTint android:drawableTint}</code></td><td>Tint to apply to the compound (left, top, etc.) drawables.</td></tr>
 * <tr><td><code>{@link #TextView_drawableTintMode android:drawableTintMode}</code></td><td>Blending mode used to apply the compound (left, top, etc.) drawables tint.</td></tr>
 * <tr><td><code>{@link #TextView_breakStrategy android:breakStrategy}</code></td><td>Break strategy (control over paragraph layout).</td></tr>
 * <tr><td><code>{@link #TextView_hyphenationFrequency android:hyphenationFrequency}</code></td><td>Frequency of automatic hyphenation.</td></tr>
 * <tr><td><code>{@link #TextView_allowUndo android:allowUndo}</code></td><td>Whether undo should be allowed for editable text.</td></tr>
 * <tr><td><code>{@link #TextView_autoSizeTextType android:autoSizeTextType}</code></td><td>Specify the type of auto-size.</td></tr>
 * <tr><td><code>{@link #TextView_autoSizeStepGranularity android:autoSizeStepGranularity}</code></td><td>Specify the auto-size step size if <code>autoSizeTextType</code> is set to
 * <code>uniform</code>.</td></tr>
 * <tr><td><code>{@link #TextView_autoSizePresetSizes android:autoSizePresetSizes}</code></td><td></td></tr>
 * <tr><td><code>{@link #TextView_autoSizeMinTextSize android:autoSizeMinTextSize}</code></td><td>The minimum text size constraint to be used when auto-sizing text.</td></tr>
 * <tr><td><code>{@link #TextView_autoSizeMaxTextSize android:autoSizeMaxTextSize}</code></td><td>The maximum text size constraint to be used when auto-sizing text.</td></tr>
 * <tr><td><code>{@link #TextView_justificationMode android:justificationMode}</code></td><td>Mode for justification.</td></tr>
 * <tr><td><code>{@link #TextView_fontVariationSettings android:fontVariationSettings}</code></td><td>The variation settings to be applied to the font.</td></tr>
 * <tr><td><code>{@link #TextView_fallbackLineSpacing android:fallbackLineSpacing}</code></td><td>Whether to respect the ascent and descent of the fallback fonts that are used in
 * displaying the text.</td></tr>
 * <tr><td><code>{@link #TextView_firstBaselineToTopHeight android:firstBaselineToTopHeight}</code></td><td>Distance from the top of the TextView to the first text baseline.</td></tr>
 * <tr><td><code>{@link #TextView_lastBaselineToBottomHeight android:lastBaselineToBottomHeight}</code></td><td>Distance from the bottom of the TextView to the last text baseline.</td></tr>
 * <tr><td><code>{@link #TextView_lineHeight android:lineHeight}</code></td><td>Explicit height between lines of text.</td></tr>
 * <tr><td><code>{@link #TextView_textFontWeight android:textFontWeight}</code></td><td>Weight for the font used in the TextView.</td></tr>
 * <tr><td><code>{@link #TextView_textLocale android:textLocale}</code></td><td>Specifies the {@link android.os.LocaleList} for the text in this TextView.</td></tr>
 * </table>
 * @see #TextView_enabled
 * @see #TextView_textAppearance
 * @see #TextView_textSize
 * @see #TextView_typeface
 * @see #TextView_textStyle
 * @see #TextView_textColor
 * @see #TextView_textColorHighlight
 * @see #TextView_textColorHint
 * @see #TextView_textColorLink
 * @see #TextView_ellipsize
 * @see #TextView_gravity
 * @see #TextView_autoLink
 * @see #TextView_linksClickable
 * @see #TextView_maxWidth
 * @see #TextView_maxHeight
 * @see #TextView_minWidth
 * @see #TextView_minHeight
 * @see #TextView_bufferType
 * @see #TextView_text
 * @see #TextView_hint
 * @see #TextView_textScaleX
 * @see #TextView_cursorVisible
 * @see #TextView_maxLines
 * @see #TextView_lines
 * @see #TextView_height
 * @see #TextView_minLines
 * @see #TextView_maxEms
 * @see #TextView_ems
 * @see #TextView_width
 * @see #TextView_minEms
 * @see #TextView_scrollHorizontally
 * @see #TextView_password
 * @see #TextView_singleLine
 * @see #TextView_selectAllOnFocus
 * @see #TextView_includeFontPadding
 * @see #TextView_maxLength
 * @see #TextView_shadowColor
 * @see #TextView_shadowDx
 * @see #TextView_shadowDy
 * @see #TextView_shadowRadius
 * @see #TextView_numeric
 * @see #TextView_digits
 * @see #TextView_phoneNumber
 * @see #TextView_inputMethod
 * @see #TextView_capitalize
 * @see #TextView_autoText
 * @see #TextView_editable
 * @see #TextView_freezesText
 * @see #TextView_drawableTop
 * @see #TextView_drawableBottom
 * @see #TextView_drawableLeft
 * @see #TextView_drawableRight
 * @see #TextView_drawablePadding
 * @see #TextView_lineSpacingExtra
 * @see #TextView_lineSpacingMultiplier
 * @see #TextView_marqueeRepeatLimit
 * @see #TextView_inputType
 * @see #TextView_privateImeOptions
 * @see #TextView_editorExtras
 * @see #TextView_imeOptions
 * @see #TextView_imeActionLabel
 * @see #TextView_imeActionId
 * @see #TextView_textSelectHandleLeft
 * @see #TextView_textSelectHandleRight
 * @see #TextView_textSelectHandle
 * @see #TextView_textEditPasteWindowLayout
 * @see #TextView_textEditNoPasteWindowLayout
 * @see #TextView_textIsSelectable
 * @see #TextView_textEditSidePasteWindowLayout
 * @see #TextView_textEditSideNoPasteWindowLayout
 * @see #TextView_textCursorDrawable
 * @see #TextView_textEditSuggestionItemLayout
 * @see #TextView_textAllCaps
 * @see #TextView_drawableStart
 * @see #TextView_drawableEnd
 * @see #TextView_fontFamily
 * @see #TextView_elegantTextHeight
 * @see #TextView_letterSpacing
 * @see #TextView_fontFeatureSettings
 * @see #TextView_drawableTint
 * @see #TextView_drawableTintMode
 * @see #TextView_breakStrategy
 * @see #TextView_hyphenationFrequency
 * @see #TextView_allowUndo
 * @see #TextView_autoSizeTextType
 * @see #TextView_autoSizeStepGranularity
 * @see #TextView_autoSizePresetSizes
 * @see #TextView_autoSizeMinTextSize
 * @see #TextView_autoSizeMaxTextSize
 * @see #TextView_justificationMode
 * @see #TextView_fontVariationSettings
 * @see #TextView_fallbackLineSpacing
 * @see #TextView_firstBaselineToTopHeight
 * @see #TextView_lastBaselineToBottomHeight
 * @see #TextView_lineHeight
 * @see #TextView_textFontWeight
 * @see #TextView_textLocale
 */

public static final int[] TextView;
static { TextView = new int[0]; }

/**
 * Attributes that can be used with a TextViewAppearance.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #TextViewAppearance_textAppearance android:textAppearance}</code></td><td>Default appearance of text: color, typeface, size, and style.</td></tr>
 * </table>
 * @see #TextViewAppearance_textAppearance
 */

public static final int[] TextViewAppearance;
static { TextViewAppearance = new int[0]; }

/**
 * <p>
 * @attr description
 * Base text color, typeface, size, and style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textAppearance
 */

public static final int TextViewAppearance_textAppearance = 0; // 0x0

/**
 * Attributes that can be used with a TextViewMultiLineBackgroundState.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #TextViewMultiLineBackgroundState_state_multiline android:state_multiline}</code></td><td>State identifier indicating a TextView has a multi-line layout.</td></tr>
 * </table>
 * @see #TextViewMultiLineBackgroundState_state_multiline
 */

public static final int[] TextViewMultiLineBackgroundState;
static { TextViewMultiLineBackgroundState = new int[0]; }

/**
 * <p>
 * @attr description
 * State identifier indicating a TextView has a multi-line layout.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_multiline
 */

public static final int TextViewMultiLineBackgroundState_state_multiline = 0; // 0x0

/**
 * <p>
 * @attr description
 * Whether undo should be allowed for editable text. Defaults to true.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:allowUndo
 */

public static final int TextView_allowUndo = 83; // 0x53

/**
 * <p>
 * @attr description
 * Controls whether links such as urls and email addresses are
 * automatically found and converted to clickable links.  The default
 * value is "none", disabling this feature.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>all</td><td>f</td><td>Match all patterns (equivalent to web|email|phone|map).</td></tr>
 * <tr><td>email</td><td>2</td><td>Match email addresses.</td></tr>
 * <tr><td>map</td><td>8</td><td>Match map addresses.
 * Deprecated: see {@link android.text.util.Linkify#MAP_ADDRESSES}.</td></tr>
 * <tr><td>none</td><td>0</td><td>Match no patterns (default).</td></tr>
 * <tr><td>phone</td><td>4</td><td>Match phone numbers.</td></tr>
 * <tr><td>web</td><td>1</td><td>Match Web URLs.</td></tr>
 * </table>
 *
 * @attr name android:autoLink
 */

public static final int TextView_autoLink = 11; // 0xb

/**
 * <p>
 * @attr description
 * The maximum text size constraint to be used when auto-sizing text.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:autoSizeMaxTextSize
 */

public static final int TextView_autoSizeMaxTextSize = 88; // 0x58

/**
 * <p>
 * @attr description
 * The minimum text size constraint to be used when auto-sizing text.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:autoSizeMinTextSize
 */

public static final int TextView_autoSizeMinTextSize = 87; // 0x57

/**
 * <p>
 * @attr description
 * Resource array of dimensions to be used in conjunction with
 * <code>autoSizeTextType</code> set to <code>uniform</code>. Overrides
 * <code>autoSizeStepGranularity</code> if set.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:autoSizePresetSizes
 */

public static final int TextView_autoSizePresetSizes = 86; // 0x56

/**
 * <p>
 * @attr description
 * Specify the auto-size step size if <code>autoSizeTextType</code> is set to
 * <code>uniform</code>. The default is 1px. Overwrites
 * <code>autoSizePresetSizes</code> if set.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:autoSizeStepGranularity
 */

public static final int TextView_autoSizeStepGranularity = 85; // 0x55

/**
 * <p>
 * @attr description
 * Specify the type of auto-size. Note that this feature is not supported by EditText,
 * works only for TextView.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>none</td><td>0</td><td>No auto-sizing (default).</td></tr>
 * <tr><td>uniform</td><td>1</td><td>Uniform horizontal and vertical text size scaling to fit within the
 * container.</td></tr>
 * </table>
 *
 * @attr name android:autoSizeTextType
 */

public static final int TextView_autoSizeTextType = 84; // 0x54

/**
 * <p>
 * @attr description
 * If set, specifies that this TextView has a textual input method
 * and automatically corrects some common spelling errors.
 * The default is "false".
 * {@deprecated Use inputType instead.}
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:autoText
 */

@Deprecated public static final int TextView_autoText = 45; // 0x2d

/**
 * <p>
 * @attr description
 * Break strategy (control over paragraph layout).
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>balanced</td><td>2</td><td>Line breaking strategy balances line lengths.</td></tr>
 * <tr><td>high_quality</td><td>1</td><td>Line breaking uses high-quality strategy, including hyphenation.</td></tr>
 * <tr><td>simple</td><td>0</td><td>Line breaking uses simple strategy.</td></tr>
 * </table>
 *
 * @attr name android:breakStrategy
 */

public static final int TextView_breakStrategy = 81; // 0x51

/**
 * <p>
 * @attr description
 * Determines the minimum type that getText() will return.
 * The default is "normal".
 * Note that EditText and LogTextBox always return Editable,
 * even if you specify something less powerful here.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>editable</td><td>2</td><td>Can only return Spannable and Editable.</td></tr>
 * <tr><td>normal</td><td>0</td><td>Can return any CharSequence, possibly a
 * Spanned one if the source text was Spanned.</td></tr>
 * <tr><td>spannable</td><td>1</td><td>Can only return Spannable.</td></tr>
 * </table>
 *
 * @attr name android:bufferType
 */

public static final int TextView_bufferType = 17; // 0x11

/**
 * <p>
 * @attr description
 * If set, specifies that this TextView has a textual input method
 * and should automatically capitalize what the user types.
 * The default is "none".
 * {@deprecated Use inputType instead.}
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>characters</td><td>3</td><td>Capitalize every character.</td></tr>
 * <tr><td>none</td><td>0</td><td>Don't automatically capitalize anything.</td></tr>
 * <tr><td>sentences</td><td>1</td><td>Capitalize the first word of each sentence.</td></tr>
 * <tr><td>words</td><td>2</td><td>Capitalize the first letter of every word.</td></tr>
 * </table>
 *
 * @attr name android:capitalize
 */

@Deprecated public static final int TextView_capitalize = 44; // 0x2c

/**
 * <p>
 * @attr description
 * Makes the cursor visible (the default) or invisible.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:cursorVisible
 */

public static final int TextView_cursorVisible = 21; // 0x15

/**
 * <p>
 * @attr description
 * If set, specifies that this TextView has a numeric input method
 * and that these specific characters are the ones that it will
 * accept.
 * If this is set, numeric is implied to be true.
 * The default is false.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:digits
 */

public static final int TextView_digits = 41; // 0x29

/**
 * <p>
 * @attr description
 * The drawable to be drawn below the text.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:drawableBottom
 */

public static final int TextView_drawableBottom = 49; // 0x31

/**
 * <p>
 * @attr description
 * The drawable to be drawn to the end of the text.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:drawableEnd
 */

public static final int TextView_drawableEnd = 74; // 0x4a

/**
 * <p>
 * @attr description
 * The drawable to be drawn to the left of the text.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:drawableLeft
 */

public static final int TextView_drawableLeft = 50; // 0x32

/**
 * <p>
 * @attr description
 * The padding between the drawables and the text.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:drawablePadding
 */

public static final int TextView_drawablePadding = 52; // 0x34

/**
 * <p>
 * @attr description
 * The drawable to be drawn to the right of the text.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:drawableRight
 */

public static final int TextView_drawableRight = 51; // 0x33

/**
 * <p>
 * @attr description
 * The drawable to be drawn to the start of the text.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:drawableStart
 */

public static final int TextView_drawableStart = 73; // 0x49

/**
 * <p>
 * @attr description
 * Tint to apply to the compound (left, top, etc.) drawables.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:drawableTint
 */

public static final int TextView_drawableTint = 79; // 0x4f

/**
 * <p>
 * @attr description
 * Blending mode used to apply the compound (left, top, etc.) drawables tint.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 *
 * @attr name android:drawableTintMode
 */

public static final int TextView_drawableTintMode = 80; // 0x50

/**
 * <p>
 * @attr description
 * The drawable to be drawn above the text.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:drawableTop
 */

public static final int TextView_drawableTop = 48; // 0x30

/**
 * <p>
 * @attr description
 * If set, specifies that this TextView has an input method.
 * It will be a textual one unless it has otherwise been specified.
 * For TextView, this is false by default.  For EditText, it is
 * true by default.
 * {@deprecated Use inputType instead.}
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:editable
 */

@Deprecated public static final int TextView_editable = 46; // 0x2e

/**
 * <p>
 * @attr description
 * Reference to an
 * {@link android.R.styleable#InputExtras &lt;input-extras&gt;}
 * XML resource containing additional data to
 * supply to an input method, which is private to the implementation
 * of the input method.  This simply fills in
 * the {@link android.view.inputmethod.EditorInfo#extras
 * EditorInfo.extras} field when the input
 * method is connected.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:editorExtras
 */

public static final int TextView_editorExtras = 58; // 0x3a

/**
 * <p>
 * @attr description
 * Elegant text height, especially for less compacted complex script text.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:elegantTextHeight
 */

public static final int TextView_elegantTextHeight = 76; // 0x4c

/**
 * <p>
 * @attr description
 * If set, causes words that are longer than the view is wide
 * to be ellipsized instead of broken in the middle.
 * You will often also want to set scrollHorizontally or singleLine
 * as well so that the text as a whole is also constrained to
 * a single line instead of still allowed to be broken onto
 * multiple lines.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>end</td><td>3</td><td></td></tr>
 * <tr><td>marquee</td><td>4</td><td></td></tr>
 * <tr><td>middle</td><td>2</td><td></td></tr>
 * <tr><td>none</td><td>0</td><td></td></tr>
 * <tr><td>start</td><td>1</td><td></td></tr>
 * </table>
 *
 * @attr name android:ellipsize
 */

public static final int TextView_ellipsize = 9; // 0x9

/**
 * <p>
 * @attr description
 * Makes the TextView be exactly this many ems wide.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:ems
 */

public static final int TextView_ems = 27; // 0x1b

/**
 * <p>
 * @attr description
 * Specifies whether the widget is enabled. The interpretation of the enabled state varies by subclass.
 * For example, a non-enabled EditText prevents the user from editing the contained text, and
 * a non-enabled Button prevents the user from tapping the button.
 * The appearance of enabled and non-enabled widgets may differ, if the drawables referenced
 * from evaluating state_enabled differ.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:enabled
 */

public static final int TextView_enabled = 0; // 0x0

/**
 * <p>
 * @attr description
 * Whether to respect the ascent and descent of the fallback fonts that are used in
 * displaying the text. When true, fallback fonts that end up getting used can increase
 * the ascent and descent of the lines that they are used on.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:fallbackLineSpacing
 */

public static final int TextView_fallbackLineSpacing = 91; // 0x5b

/**
 * <p>
 * @attr description
 * Distance from the top of the TextView to the first text baseline. If set, this
 * overrides the value set for paddingTop.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:firstBaselineToTopHeight
 */

public static final int TextView_firstBaselineToTopHeight = 92; // 0x5c

/**
 * <p>
 * @attr description
 * Font family (named by string or as a font resource reference) for the text.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:fontFamily
 */

public static final int TextView_fontFamily = 75; // 0x4b

/**
 * <p>
 * @attr description
 * Font feature settings.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:fontFeatureSettings
 */

public static final int TextView_fontFeatureSettings = 78; // 0x4e

/**
 * <p>
 * @attr description
 * Font variation settings.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:fontVariationSettings
 */

public static final int TextView_fontVariationSettings = 90; // 0x5a

/**
 * <p>
 * @attr description
 * If set, the text view will include its current complete text
 * inside of its frozen icicle in addition to meta-data such as
 * the current cursor position.  By default this is disabled;
 * it can be useful when the contents of a text view is not stored
 * in a persistent place such as a content provider. For
 * {@link android.widget.EditText} it is always enabled, regardless
 * of the value of the attribute.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:freezesText
 */

public static final int TextView_freezesText = 47; // 0x2f

/**
 * <p>
 * @attr description
 * Specifies how to align the text by the view's x- and/or y-axis
 * when the text is smaller than the view.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
 * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
 * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
 * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
 * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the horizontal gravity: a left gravity will clip the right
 * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
 * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the vertical gravity: a top gravity will clip the bottom
 * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
 * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
 * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
 * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
 * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
 * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
 * </table>
 *
 * @attr name android:gravity
 */

public static final int TextView_gravity = 10; // 0xa

/**
 * <p>
 * @attr description
 * Makes the TextView be exactly this tall.
 * You could get the same effect by specifying this number in the
 * layout parameters.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:height
 */

public static final int TextView_height = 24; // 0x18

/**
 * <p>
 * @attr description
 * Hint text to display when the text is empty.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:hint
 */

public static final int TextView_hint = 19; // 0x13

/**
 * <p>
 * @attr description
 * Frequency of automatic hyphenation.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>full</td><td>2</td><td>Standard amount of hyphenation, useful for running text and for
 * screens with limited space for text.</td></tr>
 * <tr><td>none</td><td>0</td><td>No hyphenation.</td></tr>
 * <tr><td>normal</td><td>1</td><td>Less frequent hyphenation, useful for informal use cases, such
 * as chat messages.</td></tr>
 * </table>
 *
 * @attr name android:hyphenationFrequency
 */

public static final int TextView_hyphenationFrequency = 82; // 0x52

/**
 * <p>
 * @attr description
 * Supply a value for
 * {@link android.view.inputmethod.EditorInfo#actionId EditorInfo.actionId}
 * used when an input method is connected to the text view.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:imeActionId
 */

public static final int TextView_imeActionId = 61; // 0x3d

/**
 * <p>
 * @attr description
 * Supply a value for
 * {@link android.view.inputmethod.EditorInfo#actionLabel EditorInfo.actionLabel}
 * used when an input method is connected to the text view.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:imeActionLabel
 */

public static final int TextView_imeActionLabel = 60; // 0x3c

/**
 * <p>
 * @attr description
 * Additional features you can enable in an IME associated with an editor
 * to improve the integration with your application.  The constants
 * here correspond to those defined by
 * {@link android.view.inputmethod.EditorInfo#imeOptions}.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>actionDone</td><td>6</td><td>The action key performs a "done"
 * operation, closing the soft input method.
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_ACTION_DONE}.</td></tr>
 * <tr><td>actionGo</td><td>2</td><td>The action key performs a "go"
 * operation to take the user to the target of the text they typed.
 * Typically used, for example, when entering a URL.
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_ACTION_GO}.</td></tr>
 * <tr><td>actionNext</td><td>5</td><td>The action key performs a "next"
 * operation, taking the user to the next field that will accept text.
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_ACTION_NEXT}.</td></tr>
 * <tr><td>actionNone</td><td>1</td><td>This editor has no action associated with it.
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_ACTION_NONE}.</td></tr>
 * <tr><td>actionPrevious</td><td>7</td><td>The action key performs a "previous"
 * operation, taking the user to the previous field that will accept text.
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_ACTION_PREVIOUS}.</td></tr>
 * <tr><td>actionSearch</td><td>3</td><td>The action key performs a "search"
 * operation, taking the user to the results of searching for the text
 * the have typed (in whatever context is appropriate).
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_ACTION_SEARCH}.</td></tr>
 * <tr><td>actionSend</td><td>4</td><td>The action key performs a "send"
 * operation, delivering the text to its target.  This is typically used
 * when composing a message.
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_ACTION_SEND}.</td></tr>
 * <tr><td>actionUnspecified</td><td>0</td><td>There is no specific action associated with this editor, let the
 * editor come up with its own if it can.
 * Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_NULL}.</td></tr>
 * <tr><td>flagForceAscii</td><td>80000000</td><td>Used to request that the IME should be capable of inputting ASCII
 * characters.  The intention of this flag is to ensure that the user
 * can type Roman alphabet characters in a {@link android.widget.TextView}
 * used for, typically, account ID or password input.  It is expected that IMEs
 * normally are able to input ASCII even without being told so (such IMEs
 * already respect this flag in a sense), but there could be some cases they
 * aren't when, for instance, only non-ASCII input languages like Arabic,
 * Greek, Hebrew, Russian are enabled in the IME.  Applications need to be
 * aware that the flag is not a guarantee, and not all IMEs will respect it.
 * However, it is strongly recommended for IME authors to respect this flag
 * especially when their IME could end up with a state that has only non-ASCII
 * input languages enabled.
 * <p>Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_FLAG_FORCE_ASCII}.</td></tr>
 * <tr><td>flagNavigateNext</td><td>8000000</td><td>Used to specify that there is something
 * interesting that a forward navigation can focus on. This is like using
 * actionNext, except allows the IME to be multiline (with
 * an enter key) as well as provide forward navigation.  Note that some
 * IMEs may not be able to do this, especially when running on a small
 * screen where there is little space.  In that case it does not need to
 * present a UI for this option.  Like actionNext, if the
 * user selects the IME's facility to forward navigate, this will show up
 * in the application at
 * {@link android.view.inputmethod.InputConnection#performEditorAction(int)
 * InputConnection.performEditorAction(int)}.
 * <p>Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NAVIGATE_NEXT}.</td></tr>
 * <tr><td>flagNavigatePrevious</td><td>4000000</td><td>Like flagNavigateNext, but
 * specifies there is something interesting that a backward navigation
 * can focus on.  If the user selects the IME's facility to backward
 * navigate, this will show up in the application as an actionPrevious
 * at {@link android.view.inputmethod.InputConnection#performEditorAction(int)
 * InputConnection.performEditorAction(int)}.
 * <p>Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NAVIGATE_PREVIOUS}.</td></tr>
 * <tr><td>flagNoAccessoryAction</td><td>20000000</td><td>Used in conjunction with a custom action, this indicates that the
 * action should not be available as an accessory button when the
 * input method is full-screen.
 * Note that by setting this flag, there can be cases where the action
 * is simply never available to the user.  Setting this generally means
 * that you think showing text being edited is more important than the
 * action you have supplied.
 * <p>Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_ACCESSORY_ACTION}.</td></tr>
 * <tr><td>flagNoEnterAction</td><td>40000000</td><td>Used in conjunction with a custom action,
 * this indicates that the action should not be available in-line as
 * a replacement for the "enter" key.  Typically this is
 * because the action has such a significant impact or is not recoverable
 * enough that accidentally hitting it should be avoided, such as sending
 * a message.    Note that {@link android.widget.TextView} will
 * automatically set this flag for you on multi-line text views.
 * <p>Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_ENTER_ACTION}.</td></tr>
 * <tr><td>flagNoExtractUi</td><td>10000000</td><td>Used to specify that the IME does not need
 * to show its extracted text UI.  For input methods that may be fullscreen,
 * often when in landscape mode, this allows them to be smaller and let part
 * of the application be shown behind.  Though there will likely be limited
 * access to the application available from the user, it can make the
 * experience of a (mostly) fullscreen IME less jarring.  Note that when
 * this flag is specified the IME may <em>not</em> be set up to be able
 * to display text, so it should only be used in situations where this is
 * not needed.
 * <p>Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_EXTRACT_UI}.</td></tr>
 * <tr><td>flagNoFullscreen</td><td>2000000</td><td>Used to request that the IME never go
 * into fullscreen mode.  Applications need to be aware that the flag is not
 * a guarantee, and not all IMEs will respect it.
 * <p>Corresponds to
 * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_FULLSCREEN}.</td></tr>
 * <tr><td>flagNoPersonalizedLearning</td><td>1000000</td><td>Used to request that the IME should not update any personalized data such as typing
 * history and personalized language model based on what the user typed on this text
 * editing object. Typical use cases are:
 * <ul>
 * <li>When the application is in a special mode, where user's activities are expected
 * to be not recorded in the application's history. Some web browsers and chat
 * applications may have this kind of modes.</li>
 * <li>When storing typing history does not make much sense.  Specifying this flag in
 * typing games may help to avoid typing history from being filled up with words that
 * the user is less likely to type in their daily life.  Another example is that when
 * the application already knows that the expected input is not a valid word (e.g. a
 * promotion code that is not a valid word in any natural language).</li>
 * </ul>
 * <p>Applications need to be aware that the flag is not a guarantee, and some IMEs may
 * not respect it.</p></td></tr>
 * <tr><td>normal</td><td>0</td><td>There are no special semantics associated with this editor.</td></tr>
 * </table>
 *
 * @attr name android:imeOptions
 */

public static final int TextView_imeOptions = 59; // 0x3b

/**
 * <p>
 * @attr description
 * Leave enough room for ascenders and descenders instead of
 * using the font ascent and descent strictly.  (Normally true).
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:includeFontPadding
 */

public static final int TextView_includeFontPadding = 34; // 0x22

/**
 * <p>
 * @attr description
 * If set, specifies that this TextView should use the specified
 * input method (specified by fully-qualified class name).
 * {@deprecated Use inputType instead.}
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:inputMethod
 */

@Deprecated public static final int TextView_inputMethod = 43; // 0x2b

/**
 * <p>
 * @attr description
 * The type of data being placed in a text field, used to help an
 * input method decide how to let the user enter text.  The constants
 * here correspond to those defined by
 * {@link android.text.InputType}.  Generally you can select
 * a single value, though some can be combined together as
 * indicated.  Setting this attribute to anything besides
 * <var>none</var> also implies that the text is editable.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>date</td><td>14</td><td>For entering a date.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_DATETIME} |
 * {@link android.text.InputType#TYPE_DATETIME_VARIATION_DATE}.</td></tr>
 * <tr><td>datetime</td><td>4</td><td>For entering a date and time.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_DATETIME} |
 * {@link android.text.InputType#TYPE_DATETIME_VARIATION_NORMAL}.</td></tr>
 * <tr><td>none</td><td>0</td><td>There is no content type.  The text is not editable.</td></tr>
 * <tr><td>number</td><td>2</td><td>A numeric only field.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
 * {@link android.text.InputType#TYPE_NUMBER_VARIATION_NORMAL}.</td></tr>
 * <tr><td>numberDecimal</td><td>2002</td><td>Can be combined with <var>number</var> and its other options to
 * allow a decimal (fractional) number.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
 * {@link android.text.InputType#TYPE_NUMBER_FLAG_DECIMAL}.</td></tr>
 * <tr><td>numberPassword</td><td>12</td><td>A numeric password field.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
 * {@link android.text.InputType#TYPE_NUMBER_VARIATION_PASSWORD}.</td></tr>
 * <tr><td>numberSigned</td><td>1002</td><td>Can be combined with <var>number</var> and its other options to
 * allow a signed number.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
 * {@link android.text.InputType#TYPE_NUMBER_FLAG_SIGNED}.</td></tr>
 * <tr><td>phone</td><td>3</td><td>For entering a phone number.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_PHONE}.</td></tr>
 * <tr><td>text</td><td>1</td><td>Just plain old text.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_NORMAL}.</td></tr>
 * <tr><td>textAutoComplete</td><td>10001</td><td>Can be combined with <var>text</var> and its variations to
 * specify that this field will be doing its own auto-completion and
 * talking with the input method appropriately.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_AUTO_COMPLETE}.</td></tr>
 * <tr><td>textAutoCorrect</td><td>8001</td><td>Can be combined with <var>text</var> and its variations to
 * request auto-correction of text being input.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_AUTO_CORRECT}.</td></tr>
 * <tr><td>textCapCharacters</td><td>1001</td><td>Can be combined with <var>text</var> and its variations to
 * request capitalization of all characters.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_CHARACTERS}.</td></tr>
 * <tr><td>textCapSentences</td><td>4001</td><td>Can be combined with <var>text</var> and its variations to
 * request capitalization of the first character of every sentence.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_SENTENCES}.</td></tr>
 * <tr><td>textCapWords</td><td>2001</td><td>Can be combined with <var>text</var> and its variations to
 * request capitalization of the first character of every word.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_WORDS}.</td></tr>
 * <tr><td>textEmailAddress</td><td>21</td><td>Text that will be used as an e-mail address.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_EMAIL_ADDRESS}.</td></tr>
 * <tr><td>textEmailSubject</td><td>31</td><td>Text that is being supplied as the subject of an e-mail.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_EMAIL_SUBJECT}.</td></tr>
 * <tr><td>textFilter</td><td>b1</td><td>Text that is filtering some other data.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_FILTER}.</td></tr>
 * <tr><td>textImeMultiLine</td><td>40001</td><td>Can be combined with <var>text</var> and its variations to
 * indicate that though the regular text view should not be multiple
 * lines, the IME should provide multiple lines if it can.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_IME_MULTI_LINE}.</td></tr>
 * <tr><td>textLongMessage</td><td>51</td><td>Text that is the content of a long message.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_LONG_MESSAGE}.</td></tr>
 * <tr><td>textMultiLine</td><td>20001</td><td>Can be combined with <var>text</var> and its variations to
 * allow multiple lines of text in the field.  If this flag is not set,
 * the text field will be constrained to a single line.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_MULTI_LINE}.</td></tr>
 * <tr><td>textNoSuggestions</td><td>80001</td><td>Can be combined with <var>text</var> and its variations to
 * indicate that the IME should not show any
 * dictionary-based word suggestions.  Corresponds to
 * {@link android.text.InputType#TYPE_TEXT_FLAG_NO_SUGGESTIONS}.</td></tr>
 * <tr><td>textPassword</td><td>81</td><td>Text that is a password.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_PASSWORD}.</td></tr>
 * <tr><td>textPersonName</td><td>61</td><td>Text that is the name of a person.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_PERSON_NAME}.</td></tr>
 * <tr><td>textPhonetic</td><td>c1</td><td>Text that is for phonetic pronunciation, such as a phonetic name
 * field in a contact entry.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_PHONETIC}.</td></tr>
 * <tr><td>textPostalAddress</td><td>71</td><td>Text that is being supplied as a postal mailing address.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_POSTAL_ADDRESS}.</td></tr>
 * <tr><td>textShortMessage</td><td>41</td><td>Text that is the content of a short message.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_SHORT_MESSAGE}.</td></tr>
 * <tr><td>textUri</td><td>11</td><td>Text that will be used as a URI.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_URI}.</td></tr>
 * <tr><td>textVisiblePassword</td><td>91</td><td>Text that is a password that should be visible.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_VISIBLE_PASSWORD}.</td></tr>
 * <tr><td>textWebEditText</td><td>a1</td><td>Text that is being supplied as text in a web form.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_EDIT_TEXT}.</td></tr>
 * <tr><td>textWebEmailAddress</td><td>d1</td><td>Text that will be used as an e-mail address on a web form.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS}.</td></tr>
 * <tr><td>textWebPassword</td><td>e1</td><td>Text that will be used as a password on a web form.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_TEXT} |
 * {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_PASSWORD}.</td></tr>
 * <tr><td>time</td><td>24</td><td>For entering a time.  Corresponds to
 * {@link android.text.InputType#TYPE_CLASS_DATETIME} |
 * {@link android.text.InputType#TYPE_DATETIME_VARIATION_TIME}.</td></tr>
 * </table>
 *
 * @attr name android:inputType
 */

public static final int TextView_inputType = 56; // 0x38

/**
 * <p>
 * @attr description
 * Mode for justification.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>inter_word</td><td>1</td><td>Justification by stretching word spacing.</td></tr>
 * <tr><td>none</td><td>0</td><td>No justification.</td></tr>
 * </table>
 *
 * @attr name android:justificationMode
 */

public static final int TextView_justificationMode = 89; // 0x59

/**
 * <p>
 * @attr description
 * Distance from the bottom of the TextView to the last text baseline. If set, this
 * overrides the value set for paddingBottom.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:lastBaselineToBottomHeight
 */

public static final int TextView_lastBaselineToBottomHeight = 93; // 0x5d

/**
 * <p>
 * @attr description
 * Text letter-spacing.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:letterSpacing
 */

public static final int TextView_letterSpacing = 77; // 0x4d

/**
 * <p>
 * @attr description
 * Explicit height between lines of text. If set, this will override the values set
 * for lineSpacingExtra and lineSpacingMultiplier.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:lineHeight
 */

public static final int TextView_lineHeight = 94; // 0x5e

/**
 * <p>
 * @attr description
 * Extra spacing between lines of text. The value will not be applied for the last
 * line of text.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:lineSpacingExtra
 */

public static final int TextView_lineSpacingExtra = 53; // 0x35

/**
 * <p>
 * @attr description
 * Extra spacing between lines of text, as a multiplier. The value will not be applied
 * for the last line of text.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:lineSpacingMultiplier
 */

public static final int TextView_lineSpacingMultiplier = 54; // 0x36

/**
 * <p>
 * @attr description
 * Makes the TextView be exactly this many lines tall.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:lines
 */

public static final int TextView_lines = 23; // 0x17

/**
 * <p>
 * @attr description
 * If set to false, keeps the movement method from being set
 * to the link movement method even if autoLink causes links
 * to be found.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:linksClickable
 */

public static final int TextView_linksClickable = 12; // 0xc

/**
 * <p>
 * @attr description
 * The number of times to repeat the marquee animation. Only applied if the
 * TextView has marquee enabled.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>marquee_forever</td><td>ffffffff</td><td>Indicates that marquee should repeat indefinitely.</td></tr>
 * </table>
 *
 * @attr name android:marqueeRepeatLimit
 */

public static final int TextView_marqueeRepeatLimit = 55; // 0x37

/**
 * <p>
 * @attr description
 * Makes the TextView be at most this many ems wide.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:maxEms
 */

public static final int TextView_maxEms = 26; // 0x1a

/**
 * <p>
 * @attr description
 * Makes the TextView be at most this many pixels tall.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:maxHeight
 */

public static final int TextView_maxHeight = 14; // 0xe

/**
 * <p>
 * @attr description
 * Set an input filter to constrain the text length to the
 * specified number.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:maxLength
 */

public static final int TextView_maxLength = 35; // 0x23

/**
 * <p>
 * @attr description
 * Makes the TextView be at most this many lines tall.
 * When used on an editable text, the <code>inputType</code> attribute's value must be
 * combined with the <code>textMultiLine</code> flag for the maxLines attribute to apply.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:maxLines
 */

public static final int TextView_maxLines = 22; // 0x16

/**
 * <p>
 * @attr description
 * Makes the TextView be at most this many pixels wide.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:maxWidth
 */

public static final int TextView_maxWidth = 13; // 0xd

/**
 * <p>
 * @attr description
 * Makes the TextView be at least this many ems wide.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:minEms
 */

public static final int TextView_minEms = 29; // 0x1d

/**
 * <p>
 * @attr description
 * Makes the TextView be at least this many pixels tall.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:minHeight
 */

public static final int TextView_minHeight = 16; // 0x10

/**
 * <p>
 * @attr description
 * Makes the TextView be at least this many lines tall.
 * When used on an editable text, the <code>inputType</code> attribute's value must be
 * combined with the <code>textMultiLine</code> flag for the minLines attribute to apply.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:minLines
 */

public static final int TextView_minLines = 25; // 0x19

/**
 * <p>
 * @attr description
 * Makes the TextView be at least this many pixels wide.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:minWidth
 */

public static final int TextView_minWidth = 15; // 0xf

/**
 * <p>
 * @attr description
 * If set, specifies that this TextView has a numeric input method.
 * The default is false.
 * {@deprecated Use inputType instead.}
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>decimal</td><td>5</td><td>Input is numeric, with decimals allowed.</td></tr>
 * <tr><td>integer</td><td>1</td><td>Input is numeric.</td></tr>
 * <tr><td>signed</td><td>3</td><td>Input is numeric, with sign allowed.</td></tr>
 * </table>
 *
 * @attr name android:numeric
 */

@Deprecated public static final int TextView_numeric = 40; // 0x28

/**
 * <p>
 * @attr description
 * Whether the characters of the field are displayed as
 * password dots instead of themselves.
 * {@deprecated Use inputType instead.}
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:password
 */

@Deprecated public static final int TextView_password = 31; // 0x1f

/**
 * <p>
 * @attr description
 * If set, specifies that this TextView has a phone number input
 * method. The default is false.
 * {@deprecated Use inputType instead.}
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:phoneNumber
 */

@Deprecated public static final int TextView_phoneNumber = 42; // 0x2a

/**
 * <p>
 * @attr description
 * An addition content type description to supply to the input
 * method attached to the text view, which is private to the
 * implementation of the input method.  This simply fills in
 * the {@link android.view.inputmethod.EditorInfo#privateImeOptions
 * EditorInfo.privateImeOptions} field when the input
 * method is connected.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:privateImeOptions
 */

public static final int TextView_privateImeOptions = 57; // 0x39

/**
 * <p>
 * @attr description
 * Whether the text is allowed to be wider than the view (and
 * therefore can be scrolled horizontally).
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:scrollHorizontally
 */

public static final int TextView_scrollHorizontally = 30; // 0x1e

/**
 * <p>
 * @attr description
 * If the text is selectable, select it all when the view takes
 * focus.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:selectAllOnFocus
 */

public static final int TextView_selectAllOnFocus = 33; // 0x21

/**
 * <p>
 * @attr description
 * Place a blurred shadow of text underneath the text, drawn with the
 * specified color. The text shadow produced does not interact with
 * properties on View that are responsible for real time shadows,
 * {@link android.R.styleable#View_elevation elevation} and
 * {@link android.R.styleable#View_translationZ translationZ}.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:shadowColor
 */

public static final int TextView_shadowColor = 36; // 0x24

/**
 * <p>
 * @attr description
 * Horizontal offset of the text shadow.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:shadowDx
 */

public static final int TextView_shadowDx = 37; // 0x25

/**
 * <p>
 * @attr description
 * Vertical offset of the text shadow.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:shadowDy
 */

public static final int TextView_shadowDy = 38; // 0x26

/**
 * <p>
 * @attr description
 * Blur radius of the text shadow.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:shadowRadius
 */

public static final int TextView_shadowRadius = 39; // 0x27

/**
 * <p>
 * @attr description
 * Constrains the text to a single horizontally scrolling line
 * instead of letting it wrap onto multiple lines, and advances
 * focus instead of inserting a newline when you press the
 * enter key.
 * The default value is false (multi-line wrapped text mode) for non-editable text, but if
 * you specify any value for inputType, the default is true (single-line input field mode).
 * {@deprecated This attribute is deprecated. Use <code>maxLines</code> instead to change
 * the layout of a static text, and use the <code>textMultiLine</code> flag in the
 * inputType attribute instead for editable text views (if both singleLine and inputType
 * are supplied, the inputType flags will override the value of singleLine). }
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:singleLine
 */

@Deprecated public static final int TextView_singleLine = 32; // 0x20

/**
 * <p>
 * @attr description
 * Text to display.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:text
 */

public static final int TextView_text = 18; // 0x12

/**
 * <p>
 * @attr description
 * Present the text in ALL CAPS. This may use a small-caps form when available.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:textAllCaps
 */

public static final int TextView_textAllCaps = 72; // 0x48

/**
 * <p>
 * @attr description
 * Base text color, typeface, size, and style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textAppearance
 */

public static final int TextView_textAppearance = 1; // 0x1

/**
 * <p>
 * @attr description
 * Text color.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:textColor
 */

public static final int TextView_textColor = 5; // 0x5

/**
 * <p>
 * @attr description
 * Color of the text selection highlight.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:textColorHighlight
 */

public static final int TextView_textColorHighlight = 6; // 0x6

/**
 * <p>
 * @attr description
 * Color of the hint text.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:textColorHint
 */

public static final int TextView_textColorHint = 7; // 0x7

/**
 * <p>
 * @attr description
 * Text color for links.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:textColorLink
 */

public static final int TextView_textColorLink = 8; // 0x8

/**
 * <p>
 * @attr description
 * Reference to a drawable that will be drawn under the insertion cursor.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textCursorDrawable
 */

public static final int TextView_textCursorDrawable = 70; // 0x46

/**
 * <p>
 * @attr description
 * Variation of textEditPasteWindowLayout displayed when the clipboard is empty.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textEditNoPasteWindowLayout
 */

public static final int TextView_textEditNoPasteWindowLayout = 66; // 0x42

/**
 * <p>
 * @attr description
 * The layout of the view that is displayed on top of the cursor to paste inside a
 * TextEdit field.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textEditPasteWindowLayout
 */

public static final int TextView_textEditPasteWindowLayout = 65; // 0x41

/**
 * <p>
 * @attr description
 * Variation of textEditSidePasteWindowLayout displayed when the clipboard is empty.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textEditSideNoPasteWindowLayout
 */

public static final int TextView_textEditSideNoPasteWindowLayout = 69; // 0x45

/**
 * <p>
 * @attr description
 * Used instead of textEditPasteWindowLayout when the window is moved on the side of the
 * insertion cursor because it would be clipped if it were positioned on top.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textEditSidePasteWindowLayout
 */

public static final int TextView_textEditSidePasteWindowLayout = 68; // 0x44

/**
 * <p>
 * @attr description
 * Layout of the TextView item that will populate the suggestion popup window.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textEditSuggestionItemLayout
 */

public static final int TextView_textEditSuggestionItemLayout = 71; // 0x47

/**
 * <p>
 * @attr description
 * Weight for the font used in the TextView.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:textFontWeight
 */

public static final int TextView_textFontWeight = 95; // 0x5f

/**
 * <p>
 * @attr description
 * Indicates that the content of a non-editable text can be selected.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:textIsSelectable
 */

public static final int TextView_textIsSelectable = 67; // 0x43

/**
 * <p>
 * @attr description
 * Specifies the {@link android.os.LocaleList} for the text in this TextView.
 * If not given, the system default will be used.
 * May be a string value, which is a comma-separated language tag list, such as "ja-JP,zh-CN".
 * When not specified or an empty string is given, it will fallback to the default one.
 * {@see android.os.LocaleList#forLanguageTags(String)}
 * {@see android.text.TextView#setTextLocales(android.os.LocaleList)}
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:textLocale
 */

public static final int TextView_textLocale = 96; // 0x60

/**
 * <p>
 * @attr description
 * Sets the horizontal scaling factor for the text.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:textScaleX
 */

public static final int TextView_textScaleX = 20; // 0x14

/**
 * <p>
 * @attr description
 * Reference to a drawable that will be used to display a text selection
 * anchor for positioning the cursor within text.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textSelectHandle
 */

public static final int TextView_textSelectHandle = 64; // 0x40

/**
 * <p>
 * @attr description
 * Reference to a drawable that will be used to display a text selection
 * anchor on the left side of a selection region.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textSelectHandleLeft
 */

public static final int TextView_textSelectHandleLeft = 62; // 0x3e

/**
 * <p>
 * @attr description
 * Reference to a drawable that will be used to display a text selection
 * anchor on the right side of a selection region.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textSelectHandleRight
 */

public static final int TextView_textSelectHandleRight = 63; // 0x3f

/**
 * <p>
 * @attr description
 * Size of the text. Recommended dimension type for text is "sp" for scaled-pixels (example: 15sp).
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:textSize
 */

public static final int TextView_textSize = 2; // 0x2

/**
 * <p>
 * @attr description
 * Style (normal, bold, italic, bold|italic) for the text.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bold</td><td>1</td><td></td></tr>
 * <tr><td>italic</td><td>2</td><td></td></tr>
 * <tr><td>normal</td><td>0</td><td></td></tr>
 * </table>
 *
 * @attr name android:textStyle
 */

public static final int TextView_textStyle = 4; // 0x4

/**
 * <p>
 * @attr description
 * Typeface (normal, sans, serif, monospace) for the text.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>monospace</td><td>3</td><td></td></tr>
 * <tr><td>normal</td><td>0</td><td></td></tr>
 * <tr><td>sans</td><td>1</td><td></td></tr>
 * <tr><td>serif</td><td>2</td><td></td></tr>
 * </table>
 *
 * @attr name android:typeface
 */

public static final int TextView_typeface = 3; // 0x3

/**
 * <p>
 * @attr description
 * Makes the TextView be exactly this wide.
 * You could get the same effect by specifying this number in the
 * layout parameters.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:width
 */

public static final int TextView_width = 28; // 0x1c

/**
 * These are the standard attributes that make up a complete theme.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #Theme_colorForeground android:colorForeground}</code></td><td>Default color of foreground imagery.</td></tr>
 * <tr><td><code>{@link #Theme_colorBackground android:colorBackground}</code></td><td>Default color of background imagery, ex.</td></tr>
 * <tr><td><code>{@link #Theme_backgroundDimAmount android:backgroundDimAmount}</code></td><td>Default background dim amount when a menu, dialog, or something similar pops up.</td></tr>
 * <tr><td><code>{@link #Theme_disabledAlpha android:disabledAlpha}</code></td><td>Default disabled alpha for widgets that set enabled/disabled alpha programmatically.</td></tr>
 * <tr><td><code>{@link #Theme_textAppearance android:textAppearance}</code></td><td>Default appearance of text: color, typeface, size, and style.</td></tr>
 * <tr><td><code>{@link #Theme_textAppearanceInverse android:textAppearanceInverse}</code></td><td>Default appearance of text against an inverted background:
 * color, typeface, size, and style.</td></tr>
 * <tr><td><code>{@link #Theme_textColorPrimary android:textColorPrimary}</code></td><td>The most prominent text color.</td></tr>
 * <tr><td><code>{@link #Theme_textColorPrimaryDisableOnly android:textColorPrimaryDisableOnly}</code></td><td>Bright text color.</td></tr>
 * <tr><td><code>{@link #Theme_textColorSecondary android:textColorSecondary}</code></td><td>Secondary text color.</td></tr>
 * <tr><td><code>{@link #Theme_textColorPrimaryInverse android:textColorPrimaryInverse}</code></td><td>Primary inverse text color, useful for inverted backgrounds.</td></tr>
 * <tr><td><code>{@link #Theme_textColorSecondaryInverse android:textColorSecondaryInverse}</code></td><td>Secondary inverse text color, useful for inverted backgrounds.</td></tr>
 * <tr><td><code>{@link #Theme_textColorPrimaryNoDisable android:textColorPrimaryNoDisable}</code></td><td>Bright text color.</td></tr>
 * <tr><td><code>{@link #Theme_textColorSecondaryNoDisable android:textColorSecondaryNoDisable}</code></td><td>Dim text color.</td></tr>
 * <tr><td><code>{@link #Theme_textColorPrimaryInverseNoDisable android:textColorPrimaryInverseNoDisable}</code></td><td>Bright inverse text color.</td></tr>
 * <tr><td><code>{@link #Theme_textColorSecondaryInverseNoDisable android:textColorSecondaryInverseNoDisable}</code></td><td>Dim inverse text color.</td></tr>
 * <tr><td><code>{@link #Theme_textColorHintInverse android:textColorHintInverse}</code></td><td>Inverse hint text color.</td></tr>
 * <tr><td><code>{@link #Theme_textAppearanceLarge android:textAppearanceLarge}</code></td><td>Text color, typeface, size, and style for "large" text.</td></tr>
 * <tr><td><code>{@link #Theme_textAppearanceMedium android:textAppearanceMedium}</code></td><td>Text color, typeface, size, and style for "medium" text.</td></tr>
 * <tr><td><code>{@link #Theme_textAppearanceSmall android:textAppearanceSmall}</code></td><td>Text color, typeface, size, and style for "small" text.</td></tr>
 * <tr><td><code>{@link #Theme_textAppearanceLargeInverse android:textAppearanceLargeInverse}</code></td><td>Text color, typeface, size, and style for "large" inverse text.</td></tr>
 * <tr><td><code>{@link #Theme_textAppearanceMediumInverse android:textAppearanceMediumInverse}</code></td><td>Text color, typeface, size, and style for "medium" inverse text.</td></tr>
 * <tr><td><code>{@link #Theme_textAppearanceSmallInverse android:textAppearanceSmallInverse}</code></td><td>Text color, typeface, size, and style for "small" inverse text.</td></tr>
 * <tr><td><code>{@link #Theme_textCheckMark android:textCheckMark}</code></td><td>Drawable to use for check marks.</td></tr>
 * <tr><td><code>{@link #Theme_textCheckMarkInverse android:textCheckMarkInverse}</code></td><td></td></tr>
 * <tr><td><code>{@link #Theme_buttonStyle android:buttonStyle}</code></td><td>Normal Button style.</td></tr>
 * <tr><td><code>{@link #Theme_buttonStyleSmall android:buttonStyleSmall}</code></td><td>Small Button style.</td></tr>
 * <tr><td><code>{@link #Theme_buttonStyleInset android:buttonStyleInset}</code></td><td>Button style to inset into an EditText.</td></tr>
 * <tr><td><code>{@link #Theme_buttonStyleToggle android:buttonStyleToggle}</code></td><td>ToggleButton style.</td></tr>
 * <tr><td><code>{@link #Theme_galleryItemBackground android:galleryItemBackground}</code></td><td>The preferred background for gallery items.</td></tr>
 * <tr><td><code>{@link #Theme_listPreferredItemHeight android:listPreferredItemHeight}</code></td><td>The preferred list item height.</td></tr>
 * <tr><td><code>{@link #Theme_expandableListPreferredItemPaddingLeft android:expandableListPreferredItemPaddingLeft}</code></td><td>The preferred left padding for an expandable list item (for child-specific layouts,
 * use expandableListPreferredChildPaddingLeft).</td></tr>
 * <tr><td><code>{@link #Theme_expandableListPreferredChildPaddingLeft android:expandableListPreferredChildPaddingLeft}</code></td><td>The preferred left padding for an expandable list item that is a child.</td></tr>
 * <tr><td><code>{@link #Theme_expandableListPreferredItemIndicatorLeft android:expandableListPreferredItemIndicatorLeft}</code></td><td>The preferred left bound for an expandable list item's indicator.</td></tr>
 * <tr><td><code>{@link #Theme_expandableListPreferredItemIndicatorRight android:expandableListPreferredItemIndicatorRight}</code></td><td>The preferred right bound for an expandable list item's indicator.</td></tr>
 * <tr><td><code>{@link #Theme_expandableListPreferredChildIndicatorLeft android:expandableListPreferredChildIndicatorLeft}</code></td><td>The preferred left bound for an expandable list child's indicator.</td></tr>
 * <tr><td><code>{@link #Theme_expandableListPreferredChildIndicatorRight android:expandableListPreferredChildIndicatorRight}</code></td><td>The preferred right bound for an expandable list child's indicator.</td></tr>
 * <tr><td><code>{@link #Theme_windowBackground android:windowBackground}</code></td><td>Drawable to use as the overall window background.</td></tr>
 * <tr><td><code>{@link #Theme_windowFrame android:windowFrame}</code></td><td>Drawable to use as a frame around the window.</td></tr>
 * <tr><td><code>{@link #Theme_windowNoTitle android:windowNoTitle}</code></td><td>Flag indicating whether there should be no title on this window.</td></tr>
 * <tr><td><code>{@link #Theme_windowIsFloating android:windowIsFloating}</code></td><td>Flag indicating whether this is a floating window.</td></tr>
 * <tr><td><code>{@link #Theme_windowIsTranslucent android:windowIsTranslucent}</code></td><td>Flag indicating whether this is a translucent window.</td></tr>
 * <tr><td><code>{@link #Theme_windowContentOverlay android:windowContentOverlay}</code></td><td>This Drawable is overlaid over the foreground of the Window's content area, usually
 * to place a shadow below the title.</td></tr>
 * <tr><td><code>{@link #Theme_windowTitleSize android:windowTitleSize}</code></td><td>The style resource to use for a window's title bar height.</td></tr>
 * <tr><td><code>{@link #Theme_windowTitleStyle android:windowTitleStyle}</code></td><td>The style resource to use for a window's title text.</td></tr>
 * <tr><td><code>{@link #Theme_windowTitleBackgroundStyle android:windowTitleBackgroundStyle}</code></td><td>The style resource to use for a window's title area.</td></tr>
 * <tr><td><code>{@link #Theme_alertDialogStyle android:alertDialogStyle}</code></td><td></td></tr>
 * <tr><td><code>{@link #Theme_panelBackground android:panelBackground}</code></td><td>The background of a panel when it is inset from the left and right edges of the screen.</td></tr>
 * <tr><td><code>{@link #Theme_panelFullBackground android:panelFullBackground}</code></td><td>The background of a panel when it extends to the left and right edges of the screen.</td></tr>
 * <tr><td><code>{@link #Theme_panelColorForeground android:panelColorForeground}</code></td><td>Default color of foreground panel imagery.</td></tr>
 * <tr><td><code>{@link #Theme_panelColorBackground android:panelColorBackground}</code></td><td>Color that matches (as closely as possible) the panel background.</td></tr>
 * <tr><td><code>{@link #Theme_panelTextAppearance android:panelTextAppearance}</code></td><td>Default appearance of panel text.</td></tr>
 * <tr><td><code>{@link #Theme_absListViewStyle android:absListViewStyle}</code></td><td>Default AbsListView style.</td></tr>
 * <tr><td><code>{@link #Theme_autoCompleteTextViewStyle android:autoCompleteTextViewStyle}</code></td><td>Default AutoCompleteTextView style.</td></tr>
 * <tr><td><code>{@link #Theme_checkboxStyle android:checkboxStyle}</code></td><td>Default Checkbox style.</td></tr>
 * <tr><td><code>{@link #Theme_dropDownListViewStyle android:dropDownListViewStyle}</code></td><td>Default ListView style for drop downs.</td></tr>
 * <tr><td><code>{@link #Theme_editTextStyle android:editTextStyle}</code></td><td>Default EditText style.</td></tr>
 * <tr><td><code>{@link #Theme_expandableListViewStyle android:expandableListViewStyle}</code></td><td>Default ExpandableListView style.</td></tr>
 * <tr><td><code>{@link #Theme_galleryStyle android:galleryStyle}</code></td><td>Default Gallery style.</td></tr>
 * <tr><td><code>{@link #Theme_gridViewStyle android:gridViewStyle}</code></td><td>Default GridView style.</td></tr>
 * <tr><td><code>{@link #Theme_imageButtonStyle android:imageButtonStyle}</code></td><td>The style resource to use for an ImageButton.</td></tr>
 * <tr><td><code>{@link #Theme_imageWellStyle android:imageWellStyle}</code></td><td>The style resource to use for an ImageButton that is an image well.</td></tr>
 * <tr><td><code>{@link #Theme_listViewStyle android:listViewStyle}</code></td><td>Default ListView style.</td></tr>
 * <tr><td><code>{@link #Theme_listViewWhiteStyle android:listViewWhiteStyle}</code></td><td>ListView with white background.</td></tr>
 * <tr><td><code>{@link #Theme_popupWindowStyle android:popupWindowStyle}</code></td><td>Default PopupWindow style.</td></tr>
 * <tr><td><code>{@link #Theme_progressBarStyle android:progressBarStyle}</code></td><td>Default ProgressBar style.</td></tr>
 * <tr><td><code>{@link #Theme_progressBarStyleHorizontal android:progressBarStyleHorizontal}</code></td><td>Horizontal ProgressBar style.</td></tr>
 * <tr><td><code>{@link #Theme_progressBarStyleSmall android:progressBarStyleSmall}</code></td><td>Small ProgressBar style.</td></tr>
 * <tr><td><code>{@link #Theme_progressBarStyleLarge android:progressBarStyleLarge}</code></td><td>Large ProgressBar style.</td></tr>
 * <tr><td><code>{@link #Theme_seekBarStyle android:seekBarStyle}</code></td><td>Default SeekBar style.</td></tr>
 * <tr><td><code>{@link #Theme_ratingBarStyle android:ratingBarStyle}</code></td><td>Default RatingBar style.</td></tr>
 * <tr><td><code>{@link #Theme_ratingBarStyleSmall android:ratingBarStyleSmall}</code></td><td>Small indicator RatingBar style.</td></tr>
 * <tr><td><code>{@link #Theme_radioButtonStyle android:radioButtonStyle}</code></td><td>Default RadioButton style.</td></tr>
 * <tr><td><code>{@link #Theme_scrollViewStyle android:scrollViewStyle}</code></td><td>Default ScrollView style.</td></tr>
 * <tr><td><code>{@link #Theme_spinnerStyle android:spinnerStyle}</code></td><td>Default Spinner style.</td></tr>
 * <tr><td><code>{@link #Theme_starStyle android:starStyle}</code></td><td>Default Star style.</td></tr>
 * <tr><td><code>{@link #Theme_tabWidgetStyle android:tabWidgetStyle}</code></td><td>Default TabWidget style.</td></tr>
 * <tr><td><code>{@link #Theme_textViewStyle android:textViewStyle}</code></td><td>Default TextView style.</td></tr>
 * <tr><td><code>{@link #Theme_webViewStyle android:webViewStyle}</code></td><td>Default WebView style.</td></tr>
 * <tr><td><code>{@link #Theme_dropDownItemStyle android:dropDownItemStyle}</code></td><td>Default style for drop down items.</td></tr>
 * <tr><td><code>{@link #Theme_spinnerDropDownItemStyle android:spinnerDropDownItemStyle}</code></td><td>Default style for spinner drop down items.</td></tr>
 * <tr><td><code>{@link #Theme_dropDownHintAppearance android:dropDownHintAppearance}</code></td><td>Default style for drop down hints.</td></tr>
 * <tr><td><code>{@link #Theme_spinnerItemStyle android:spinnerItemStyle}</code></td><td>Default spinner item style.</td></tr>
 * <tr><td><code>{@link #Theme_mapViewStyle android:mapViewStyle}</code></td><td>Default MapView style.</td></tr>
 * <tr><td><code>{@link #Theme_preferenceScreenStyle android:preferenceScreenStyle}</code></td><td>Default style for PreferenceScreen.</td></tr>
 * <tr><td><code>{@link #Theme_preferenceCategoryStyle android:preferenceCategoryStyle}</code></td><td>Default style for PreferenceCategory.</td></tr>
 * <tr><td><code>{@link #Theme_preferenceInformationStyle android:preferenceInformationStyle}</code></td><td>Default style for informational Preference.</td></tr>
 * <tr><td><code>{@link #Theme_preferenceStyle android:preferenceStyle}</code></td><td>Default style for Preference.</td></tr>
 * <tr><td><code>{@link #Theme_checkBoxPreferenceStyle android:checkBoxPreferenceStyle}</code></td><td>Default style for CheckBoxPreference.</td></tr>
 * <tr><td><code>{@link #Theme_yesNoPreferenceStyle android:yesNoPreferenceStyle}</code></td><td>Default style for YesNoPreference.</td></tr>
 * <tr><td><code>{@link #Theme_dialogPreferenceStyle android:dialogPreferenceStyle}</code></td><td>Default style for DialogPreference.</td></tr>
 * <tr><td><code>{@link #Theme_editTextPreferenceStyle android:editTextPreferenceStyle}</code></td><td>Default style for EditTextPreference.</td></tr>
 * <tr><td><code>{@link #Theme_ringtonePreferenceStyle android:ringtonePreferenceStyle}</code></td><td>Default style for RingtonePreference.</td></tr>
 * <tr><td><code>{@link #Theme_preferenceLayoutChild android:preferenceLayoutChild}</code></td><td>The preference layout that has the child/tabbed effect.</td></tr>
 * <tr><td><code>{@link #Theme_windowAnimationStyle android:windowAnimationStyle}</code></td><td>Reference to a style resource holding
 * the set of window animations to use, which can be
 * any of the attributes defined by
 * {@link android.R.styleable#WindowAnimation}.</td></tr>
 * <tr><td><code>{@link #Theme_colorForegroundInverse android:colorForegroundInverse}</code></td><td>Default color of foreground imagery on an inverted background.</td></tr>
 * <tr><td><code>{@link #Theme_textAppearanceButton android:textAppearanceButton}</code></td><td>Text color, typeface, size, and style for the text inside of a button.</td></tr>
 * <tr><td><code>{@link #Theme_listSeparatorTextViewStyle android:listSeparatorTextViewStyle}</code></td><td>TextView style for list separators.</td></tr>
 * <tr><td><code>{@link #Theme_windowFullscreen android:windowFullscreen}</code></td><td>Flag indicating whether this window should fill the entire screen.</td></tr>
 * <tr><td><code>{@link #Theme_progressBarStyleSmallTitle android:progressBarStyleSmallTitle}</code></td><td>Small ProgressBar in title style.</td></tr>
 * <tr><td><code>{@link #Theme_ratingBarStyleIndicator android:ratingBarStyleIndicator}</code></td><td>Indicator RatingBar style.</td></tr>
 * <tr><td><code>{@link #Theme_textColorTertiary android:textColorTertiary}</code></td><td>Tertiary text color.</td></tr>
 * <tr><td><code>{@link #Theme_textColorTertiaryInverse android:textColorTertiaryInverse}</code></td><td>Tertiary inverse text color, useful for inverted backgrounds.</td></tr>
 * <tr><td><code>{@link #Theme_listDivider android:listDivider}</code></td><td>The drawable for the list divider.</td></tr>
 * <tr><td><code>{@link #Theme_listChoiceIndicatorSingle android:listChoiceIndicatorSingle}</code></td><td>Drawable to use for single choice indicators.</td></tr>
 * <tr><td><code>{@link #Theme_listChoiceIndicatorMultiple android:listChoiceIndicatorMultiple}</code></td><td>Drawable to use for multiple choice indicators.</td></tr>
 * <tr><td><code>{@link #Theme_windowNoDisplay android:windowNoDisplay}</code></td><td>Flag indicating that this window should not be displayed at all.</td></tr>
 * <tr><td><code>{@link #Theme_backgroundDimEnabled android:backgroundDimEnabled}</code></td><td>Control whether dimming behind the window is enabled.</td></tr>
 * <tr><td><code>{@link #Theme_windowDisablePreview android:windowDisablePreview}</code></td><td>Flag allowing you to disable the splash screen for a window.</td></tr>
 * <tr><td><code>{@link #Theme_windowSoftInputMode android:windowSoftInputMode}</code></td><td>Defines the default soft input state that this window would
 * like when it is displayed.</td></tr>
 * <tr><td><code>{@link #Theme_candidatesTextStyleSpans android:candidatesTextStyleSpans}</code></td><td>A styled string, specifying the style to be used for showing
 * inline candidate text when composing with an input method.</td></tr>
 * <tr><td><code>{@link #Theme_progressBarStyleInverse android:progressBarStyleInverse}</code></td><td>Inverse ProgressBar style.</td></tr>
 * <tr><td><code>{@link #Theme_progressBarStyleSmallInverse android:progressBarStyleSmallInverse}</code></td><td>Small inverse ProgressBar style.</td></tr>
 * <tr><td><code>{@link #Theme_progressBarStyleLargeInverse android:progressBarStyleLargeInverse}</code></td><td>Large inverse ProgressBar style.</td></tr>
 * <tr><td><code>{@link #Theme_textColorPrimaryInverseDisableOnly android:textColorPrimaryInverseDisableOnly}</code></td><td>Bright inverse text color.</td></tr>
 * <tr><td><code>{@link #Theme_windowShowWallpaper android:windowShowWallpaper}</code></td><td>Flag indicating that this window's background should be the
 * user's current wallpaper.</td></tr>
 * <tr><td><code>{@link #Theme_textAppearanceSearchResultSubtitle android:textAppearanceSearchResultSubtitle}</code></td><td>Text color, typeface, size, and style for system search result subtitle.</td></tr>
 * <tr><td><code>{@link #Theme_textAppearanceSearchResultTitle android:textAppearanceSearchResultTitle}</code></td><td>Text color, typeface, size, and style for system search result title.</td></tr>
 * <tr><td><code>{@link #Theme_colorBackgroundCacheHint android:colorBackgroundCacheHint}</code></td><td>This is a hint for a solid color that can be used for caching
 * rendered views.</td></tr>
 * <tr><td><code>{@link #Theme_quickContactBadgeStyleWindowSmall android:quickContactBadgeStyleWindowSmall}</code></td><td>Default quickcontact badge style with small quickcontact window.</td></tr>
 * <tr><td><code>{@link #Theme_quickContactBadgeStyleWindowMedium android:quickContactBadgeStyleWindowMedium}</code></td><td>Default quickcontact badge style with medium quickcontact window.</td></tr>
 * <tr><td><code>{@link #Theme_quickContactBadgeStyleWindowLarge android:quickContactBadgeStyleWindowLarge}</code></td><td>Default quickcontact badge style with large quickcontact window.</td></tr>
 * <tr><td><code>{@link #Theme_quickContactBadgeStyleSmallWindowSmall android:quickContactBadgeStyleSmallWindowSmall}</code></td><td>Default quickcontact badge style with small quickcontact window.</td></tr>
 * <tr><td><code>{@link #Theme_quickContactBadgeStyleSmallWindowMedium android:quickContactBadgeStyleSmallWindowMedium}</code></td><td>Default quickcontact badge style with medium quickcontact window.</td></tr>
 * <tr><td><code>{@link #Theme_quickContactBadgeStyleSmallWindowLarge android:quickContactBadgeStyleSmallWindowLarge}</code></td><td>Default quickcontact badge style with large quickcontact window.</td></tr>
 * <tr><td><code>{@link #Theme_expandableListViewWhiteStyle android:expandableListViewWhiteStyle}</code></td><td>ExpandableListView with white background.</td></tr>
 * <tr><td><code>{@link #Theme_webTextViewStyle android:webTextViewStyle}</code></td><td>Default WebTextView style.</td></tr>
 * <tr><td><code>{@link #Theme_textSelectHandleLeft android:textSelectHandleLeft}</code></td><td>Reference to a drawable that will be used to display a text selection
 * anchor on the left side of a selection region.</td></tr>
 * <tr><td><code>{@link #Theme_textSelectHandleRight android:textSelectHandleRight}</code></td><td>Reference to a drawable that will be used to display a text selection
 * anchor on the right side of a selection region.</td></tr>
 * <tr><td><code>{@link #Theme_textSelectHandle android:textSelectHandle}</code></td><td>Reference to a drawable that will be used to display a text selection
 * anchor for positioning the cursor within text.</td></tr>
 * <tr><td><code>{@link #Theme_textSelectHandleWindowStyle android:textSelectHandleWindowStyle}</code></td><td>Reference to a style that will be used for the window containing a text
 * selection anchor.</td></tr>
 * <tr><td><code>{@link #Theme_windowActionBar android:windowActionBar}</code></td><td>Flag indicating whether this window should have an Action Bar
 * in place of the usual title bar.</td></tr>
 * <tr><td><code>{@link #Theme_actionBarStyle android:actionBarStyle}</code></td><td>Reference to a style for the Action Bar.</td></tr>
 * <tr><td><code>{@link #Theme_dropDownSpinnerStyle android:dropDownSpinnerStyle}</code></td><td>Default dropdown Spinner style.</td></tr>
 * <tr><td><code>{@link #Theme_actionDropDownStyle android:actionDropDownStyle}</code></td><td>Default ActionBar dropdown style.</td></tr>
 * <tr><td><code>{@link #Theme_actionButtonStyle android:actionButtonStyle}</code></td><td>Default action button style.</td></tr>
 * <tr><td><code>{@link #Theme_actionModeBackground android:actionModeBackground}</code></td><td>Background drawable to use for action mode UI.</td></tr>
 * <tr><td><code>{@link #Theme_actionModeCloseDrawable android:actionModeCloseDrawable}</code></td><td>Drawable to use for the close action mode button.</td></tr>
 * <tr><td><code>{@link #Theme_windowActionModeOverlay android:windowActionModeOverlay}</code></td><td>Flag indicating whether action modes should overlay window content
 * when there is not reserved space for their UI (such as an Action Bar).</td></tr>
 * <tr><td><code>{@link #Theme_windowActionBarOverlay android:windowActionBarOverlay}</code></td><td>Flag indicating whether this window's Action Bar should overlay
 * application content.</td></tr>
 * <tr><td><code>{@link #Theme_actionBarSize android:actionBarSize}</code></td><td>Size of the Action Bar, including the contextual
 * bar used to present Action Modes.</td></tr>
 * <tr><td><code>{@link #Theme_listChoiceBackgroundIndicator android:listChoiceBackgroundIndicator}</code></td><td>Drawable used as a background for selected list items.</td></tr>
 * <tr><td><code>{@link #Theme_actionBarTabStyle android:actionBarTabStyle}</code></td><td>Default style for tabs within an action bar.</td></tr>
 * <tr><td><code>{@link #Theme_actionBarTabBarStyle android:actionBarTabBarStyle}</code></td><td>Reference to a style for the Action Bar Tab Bar.</td></tr>
 * <tr><td><code>{@link #Theme_actionBarTabTextStyle android:actionBarTabTextStyle}</code></td><td>Reference to a style for the Action Bar Tab text.</td></tr>
 * <tr><td><code>{@link #Theme_actionOverflowButtonStyle android:actionOverflowButtonStyle}</code></td><td>Reference to a style for Action Bar overflow buttons.</td></tr>
 * <tr><td><code>{@link #Theme_actionModeCloseButtonStyle android:actionModeCloseButtonStyle}</code></td><td>Reference to a style for the Action Mode close button.</td></tr>
 * <tr><td><code>{@link #Theme_activatedBackgroundIndicator android:activatedBackgroundIndicator}</code></td><td>Drawable used as a background for activated items.</td></tr>
 * <tr><td><code>{@link #Theme_listPopupWindowStyle android:listPopupWindowStyle}</code></td><td>Default ListPopupWindow style.</td></tr>
 * <tr><td><code>{@link #Theme_popupMenuStyle android:popupMenuStyle}</code></td><td>Default PopupMenu style.</td></tr>
 * <tr><td><code>{@link #Theme_textAppearanceLargePopupMenu android:textAppearanceLargePopupMenu}</code></td><td>Text color, typeface, size, and style for the text inside of a popup menu.</td></tr>
 * <tr><td><code>{@link #Theme_textAppearanceSmallPopupMenu android:textAppearanceSmallPopupMenu}</code></td><td>Text color, typeface, size, and style for small text inside of a popup menu.</td></tr>
 * <tr><td><code>{@link #Theme_listDividerAlertDialog android:listDividerAlertDialog}</code></td><td>The list divider used in alert dialogs.</td></tr>
 * <tr><td><code>{@link #Theme_textColorAlertDialogListItem android:textColorAlertDialogListItem}</code></td><td>Color of list item text in alert dialogs.</td></tr>
 * <tr><td><code>{@link #Theme_dialogTheme android:dialogTheme}</code></td><td>Theme to use for dialogs spawned from this theme.</td></tr>
 * <tr><td><code>{@link #Theme_alertDialogTheme android:alertDialogTheme}</code></td><td>Theme to use for alert dialogs spawned from this theme.</td></tr>
 * <tr><td><code>{@link #Theme_dividerVertical android:dividerVertical}</code></td><td>Drawable to use for generic vertical dividers.</td></tr>
 * <tr><td><code>{@link #Theme_homeAsUpIndicator android:homeAsUpIndicator}</code></td><td>Specifies a drawable to use for the 'home as up' indicator.</td></tr>
 * <tr><td><code>{@link #Theme_selectableItemBackground android:selectableItemBackground}</code></td><td>Background drawable for bordered standalone items that need focus/pressed states.</td></tr>
 * <tr><td><code>{@link #Theme_actionModeCutDrawable android:actionModeCutDrawable}</code></td><td>Drawable to use for the Cut action button in Contextual Action Bar.</td></tr>
 * <tr><td><code>{@link #Theme_actionModeCopyDrawable android:actionModeCopyDrawable}</code></td><td>Drawable to use for the Copy action button in Contextual Action Bar.</td></tr>
 * <tr><td><code>{@link #Theme_actionModePasteDrawable android:actionModePasteDrawable}</code></td><td>Drawable to use for the Paste action button in Contextual Action Bar.</td></tr>
 * <tr><td><code>{@link #Theme_textEditPasteWindowLayout android:textEditPasteWindowLayout}</code></td><td>The layout of the view that is displayed on top of the cursor to paste inside a
 * TextEdit field.</td></tr>
 * <tr><td><code>{@link #Theme_textEditNoPasteWindowLayout android:textEditNoPasteWindowLayout}</code></td><td>Variation of textEditPasteWindowLayout displayed when the clipboard is empty.</td></tr>
 * <tr><td><code>{@link #Theme_windowEnableSplitTouch android:windowEnableSplitTouch}</code></td><td>Flag indicating that this window should allow touches to be split
 * across other windows that also support split touch.</td></tr>
 * <tr><td><code>{@link #Theme_borderlessButtonStyle android:borderlessButtonStyle}</code></td><td>Style for buttons without an explicit border, often used in groups.</td></tr>
 * <tr><td><code>{@link #Theme_dividerHorizontal android:dividerHorizontal}</code></td><td>Drawable to use for generic horizontal dividers.</td></tr>
 * <tr><td><code>{@link #Theme_buttonBarStyle android:buttonBarStyle}</code></td><td>Style for button bars.</td></tr>
 * <tr><td><code>{@link #Theme_buttonBarButtonStyle android:buttonBarButtonStyle}</code></td><td>Style for buttons within button bars.</td></tr>
 * <tr><td><code>{@link #Theme_segmentedButtonStyle android:segmentedButtonStyle}</code></td><td>Style for segmented buttons - a container that houses several buttons
 * with the appearance of a singel button broken into segments.</td></tr>
 * <tr><td><code>{@link #Theme_fastScrollThumbDrawable android:fastScrollThumbDrawable}</code></td><td>Drawable to use as the fast scroll thumb.</td></tr>
 * <tr><td><code>{@link #Theme_fastScrollPreviewBackgroundLeft android:fastScrollPreviewBackgroundLeft}</code></td><td>Drawable to use as the fast scroll index preview window background
 * when shown on the left.</td></tr>
 * <tr><td><code>{@link #Theme_fastScrollPreviewBackgroundRight android:fastScrollPreviewBackgroundRight}</code></td><td>Drawable to use as the fast scroll index preview window background
 * when shown on the right.</td></tr>
 * <tr><td><code>{@link #Theme_fastScrollTrackDrawable android:fastScrollTrackDrawable}</code></td><td>Drawable to use as the track for the fast scroll thumb.</td></tr>
 * <tr><td><code>{@link #Theme_fastScrollOverlayPosition android:fastScrollOverlayPosition}</code></td><td>Position of the fast scroll index overlay window.</td></tr>
 * <tr><td><code>{@link #Theme_detailsElementBackground android:detailsElementBackground}</code></td><td>Background that can be used behind parts of a UI that provide
 * details on data the user is selecting.</td></tr>
 * <tr><td><code>{@link #Theme_textColorHighlightInverse android:textColorHighlightInverse}</code></td><td>Color of highlighted text, when used in a light theme.</td></tr>
 * <tr><td><code>{@link #Theme_textColorLinkInverse android:textColorLinkInverse}</code></td><td>Color of link text (URLs), when used in a light theme.</td></tr>
 * <tr><td><code>{@link #Theme_editTextColor android:editTextColor}</code></td><td>EditText text foreground color.</td></tr>
 * <tr><td><code>{@link #Theme_editTextBackground android:editTextBackground}</code></td><td>EditText background drawable.</td></tr>
 * <tr><td><code>{@link #Theme_horizontalScrollViewStyle android:horizontalScrollViewStyle}</code></td><td>Default HorizontalScrollView style.</td></tr>
 * <tr><td><code>{@link #Theme_alertDialogIcon android:alertDialogIcon}</code></td><td>Icon drawable to use for alerts.</td></tr>
 * <tr><td><code>{@link #Theme_fastScrollTextColor android:fastScrollTextColor}</code></td><td>Text color for the fast scroll index overlay.</td></tr>
 * <tr><td><code>{@link #Theme_windowCloseOnTouchOutside android:windowCloseOnTouchOutside}</code></td><td>Control whether a container should automatically close itself if
 * the user touches outside of it.</td></tr>
 * <tr><td><code>{@link #Theme_datePickerStyle android:datePickerStyle}</code></td><td>The DatePicker style.</td></tr>
 * <tr><td><code>{@link #Theme_calendarViewStyle android:calendarViewStyle}</code></td><td>The CalendarView style.</td></tr>
 * <tr><td><code>{@link #Theme_textEditSidePasteWindowLayout android:textEditSidePasteWindowLayout}</code></td><td>Used instead of textEditPasteWindowLayout when the window is moved on the side of the
 * insertion cursor because it would be clipped if it were positioned on top.</td></tr>
 * <tr><td><code>{@link #Theme_textEditSideNoPasteWindowLayout android:textEditSideNoPasteWindowLayout}</code></td><td>Variation of textEditSidePasteWindowLayout displayed when the clipboard is empty.</td></tr>
 * <tr><td><code>{@link #Theme_actionMenuTextAppearance android:actionMenuTextAppearance}</code></td><td>TextAppearance style that will be applied to text that
 * appears within action menu items.</td></tr>
 * <tr><td><code>{@link #Theme_actionMenuTextColor android:actionMenuTextColor}</code></td><td>Color for text that appears within action menu items.</td></tr>
 * <tr><td><code>{@link #Theme_switchPreferenceStyle android:switchPreferenceStyle}</code></td><td>Default style for switch preferences.</td></tr>
 * <tr><td><code>{@link #Theme_textSuggestionsWindowStyle android:textSuggestionsWindowStyle}</code></td><td>Reference to a style that will be used for the window containing a list of possible
 * text suggestions in an EditText.</td></tr>
 * <tr><td><code>{@link #Theme_textEditSuggestionItemLayout android:textEditSuggestionItemLayout}</code></td><td>Layout of the TextView item that will populate the suggestion popup window.</td></tr>
 * <tr><td><code>{@link #Theme_actionModeSelectAllDrawable android:actionModeSelectAllDrawable}</code></td><td>Drawable to use for the Select all action button in Contextual Action Bar.</td></tr>
 * <tr><td><code>{@link #Theme_listPreferredItemHeightLarge android:listPreferredItemHeightLarge}</code></td><td>A larger, more robust list item height.</td></tr>
 * <tr><td><code>{@link #Theme_listPreferredItemHeightSmall android:listPreferredItemHeightSmall}</code></td><td>A smaller, sleeker list item height.</td></tr>
 * <tr><td><code>{@link #Theme_actionBarSplitStyle android:actionBarSplitStyle}</code></td><td>Reference to a style for the split Action Bar.</td></tr>
 * <tr><td><code>{@link #Theme_colorPressedHighlight android:colorPressedHighlight}</code></td><td>Default highlight color for items that are pressed.</td></tr>
 * <tr><td><code>{@link #Theme_colorLongPressedHighlight android:colorLongPressedHighlight}</code></td><td>Default highlight color for items that are long-pressed.</td></tr>
 * <tr><td><code>{@link #Theme_colorFocusedHighlight android:colorFocusedHighlight}</code></td><td>Default highlight color for items that are
 * focused.</td></tr>
 * <tr><td><code>{@link #Theme_colorActivatedHighlight android:colorActivatedHighlight}</code></td><td>Default highlight color for items that are
 * activated.</td></tr>
 * <tr><td><code>{@link #Theme_colorMultiSelectHighlight android:colorMultiSelectHighlight}</code></td><td>Default highlight color for items in multiple selection
 * mode.</td></tr>
 * <tr><td><code>{@link #Theme_actionModeStyle android:actionModeStyle}</code></td><td>Reference to a style for the Action Mode.</td></tr>
 * <tr><td><code>{@link #Theme_actionBarWidgetTheme android:actionBarWidgetTheme}</code></td><td>Reference to a theme that should be used to inflate widgets
 * and layouts destined for the action bar.</td></tr>
 * <tr><td><code>{@link #Theme_actionBarDivider android:actionBarDivider}</code></td><td>Custom divider drawable to use for elements in the action bar.</td></tr>
 * <tr><td><code>{@link #Theme_actionBarItemBackground android:actionBarItemBackground}</code></td><td>Custom item state list drawable background for action bar items.</td></tr>
 * <tr><td><code>{@link #Theme_actionModeSplitBackground android:actionModeSplitBackground}</code></td><td>Background drawable to use for action mode UI in the lower split bar.</td></tr>
 * <tr><td><code>{@link #Theme_textAppearanceListItem android:textAppearanceListItem}</code></td><td>The preferred TextAppearance for the primary text of list items.</td></tr>
 * <tr><td><code>{@link #Theme_textAppearanceListItemSmall android:textAppearanceListItemSmall}</code></td><td>The preferred TextAppearance for the primary text of small list items.</td></tr>
 * <tr><td><code>{@link #Theme_listPreferredItemPaddingLeft android:listPreferredItemPaddingLeft}</code></td><td>The preferred padding along the left edge of list items.</td></tr>
 * <tr><td><code>{@link #Theme_listPreferredItemPaddingRight android:listPreferredItemPaddingRight}</code></td><td>The preferred padding along the right edge of list items.</td></tr>
 * <tr><td><code>{@link #Theme_mediaRouteButtonStyle android:mediaRouteButtonStyle}</code></td><td>Default style for the MediaRouteButton widget.</td></tr>
 * <tr><td><code>{@link #Theme_listPreferredItemPaddingStart android:listPreferredItemPaddingStart}</code></td><td>The preferred padding along the start edge of list items.</td></tr>
 * <tr><td><code>{@link #Theme_listPreferredItemPaddingEnd android:listPreferredItemPaddingEnd}</code></td><td>The preferred padding along the end edge of list items.</td></tr>
 * <tr><td><code>{@link #Theme_presentationTheme android:presentationTheme}</code></td><td>Theme to use for presentations spawned from this theme.</td></tr>
 * <tr><td><code>{@link #Theme_checkedTextViewStyle android:checkedTextViewStyle}</code></td><td>Default CheckedTextView style.</td></tr>
 * <tr><td><code>{@link #Theme_windowOverscan android:windowOverscan}</code></td><td>Flag indicating whether this window should extend into overscan region.</td></tr>
 * <tr><td><code>{@link #Theme_windowTranslucentStatus android:windowTranslucentStatus}</code></td><td>Flag indicating whether this window requests a translucent status bar.</td></tr>
 * <tr><td><code>{@link #Theme_windowTranslucentNavigation android:windowTranslucentNavigation}</code></td><td>Flag indicating whether this window requests a translucent navigation bar.</td></tr>
 * <tr><td><code>{@link #Theme_windowSwipeToDismiss android:windowSwipeToDismiss}</code></td><td>Flag to indicate that a window can be swiped away to be dismissed.</td></tr>
 * <tr><td><code>{@link #Theme_windowContentTransitions android:windowContentTransitions}</code></td><td>Flag indicating whether this window requests that content changes be performed
 * as scene changes with transitions.</td></tr>
 * <tr><td><code>{@link #Theme_windowContentTransitionManager android:windowContentTransitionManager}</code></td><td>Reference to a TransitionManager XML resource defining the desired
 * transitions between different window content.</td></tr>
 * <tr><td><code>{@link #Theme_colorControlNormal android:colorControlNormal}</code></td><td>The color applied to framework controls in their normal state.</td></tr>
 * <tr><td><code>{@link #Theme_colorControlActivated android:colorControlActivated}</code></td><td>The color applied to framework controls in their activated (ex.</td></tr>
 * <tr><td><code>{@link #Theme_colorButtonNormal android:colorButtonNormal}</code></td><td>The color applied to framework buttons in their normal state.</td></tr>
 * <tr><td><code>{@link #Theme_colorControlHighlight android:colorControlHighlight}</code></td><td>The color applied to framework control highlights (ex.</td></tr>
 * <tr><td><code>{@link #Theme_actionBarTheme android:actionBarTheme}</code></td><td>Reference to a theme that should be used to inflate the
 * action bar.</td></tr>
 * <tr><td><code>{@link #Theme_textAppearanceListItemSecondary android:textAppearanceListItemSecondary}</code></td><td>The preferred TextAppearance for the secondary text of list items.</td></tr>
 * <tr><td><code>{@link #Theme_colorPrimary android:colorPrimary}</code></td><td>The primary branding color for the app.</td></tr>
 * <tr><td><code>{@link #Theme_colorPrimaryDark android:colorPrimaryDark}</code></td><td>Dark variant of the primary branding color.</td></tr>
 * <tr><td><code>{@link #Theme_colorAccent android:colorAccent}</code></td><td>Bright complement to the primary branding color.</td></tr>
 * <tr><td><code>{@link #Theme_windowEnterTransition android:windowEnterTransition}</code></td><td>Reference to a Transition XML resource defining the desired Transition
 * used to move Views into the initial Window's content Scene.</td></tr>
 * <tr><td><code>{@link #Theme_windowExitTransition android:windowExitTransition}</code></td><td>Reference to a Transition XML resource defining the desired Transition
 * used to move Views out of the Window's content Scene when launching a new Activity.</td></tr>
 * <tr><td><code>{@link #Theme_windowSharedElementEnterTransition android:windowSharedElementEnterTransition}</code></td><td>Reference to a Transition XML resource defining the desired Transition
 * used to move shared elements transferred into the Window's initial content Scene.</td></tr>
 * <tr><td><code>{@link #Theme_windowSharedElementExitTransition android:windowSharedElementExitTransition}</code></td><td>Reference to a Transition XML resource defining the desired Transition
 * used when starting a new Activity to move shared elements prior to transferring
 * to the called Activity.</td></tr>
 * <tr><td><code>{@link #Theme_windowAllowReturnTransitionOverlap android:windowAllowReturnTransitionOverlap}</code></td><td>Flag indicating whether this Window's transition should overlap with
 * the exiting transition of the called Activity when the called Activity
 * finishes.</td></tr>
 * <tr><td><code>{@link #Theme_windowAllowEnterTransitionOverlap android:windowAllowEnterTransitionOverlap}</code></td><td>Flag indicating whether this Window's transition should overlap with
 * the exiting transition of the calling Activity.</td></tr>
 * <tr><td><code>{@link #Theme_stackViewStyle android:stackViewStyle}</code></td><td>Default StackView style.</td></tr>
 * <tr><td><code>{@link #Theme_switchStyle android:switchStyle}</code></td><td>Default style for the Switch widget.</td></tr>
 * <tr><td><code>{@link #Theme_actionOverflowMenuStyle android:actionOverflowMenuStyle}</code></td><td>Reference to a style for the Action Bar menu.</td></tr>
 * <tr><td><code>{@link #Theme_selectableItemBackgroundBorderless android:selectableItemBackgroundBorderless}</code></td><td>Background drawable for borderless standalone items that need focus/pressed states.</td></tr>
 * <tr><td><code>{@link #Theme_windowTransitionBackgroundFadeDuration android:windowTransitionBackgroundFadeDuration}</code></td><td>The duration, in milliseconds, of the window background fade duration
 * when transitioning into or away from an Activity when called with an
 * Activity Transition.</td></tr>
 * <tr><td><code>{@link #Theme_actionModeShareDrawable android:actionModeShareDrawable}</code></td><td>Drawable to use for the Share action button in WebView selection action modes.</td></tr>
 * <tr><td><code>{@link #Theme_actionModeFindDrawable android:actionModeFindDrawable}</code></td><td>Drawable to use for the Find action button in WebView selection action modes.</td></tr>
 * <tr><td><code>{@link #Theme_actionModeWebSearchDrawable android:actionModeWebSearchDrawable}</code></td><td>Drawable to use for the Web Search action button in WebView selection action modes.</td></tr>
 * <tr><td><code>{@link #Theme_searchViewStyle android:searchViewStyle}</code></td><td>Style for the search query widget.</td></tr>
 * <tr><td><code>{@link #Theme_buttonBarPositiveButtonStyle android:buttonBarPositiveButtonStyle}</code></td><td>Style for the "positive" buttons within button bars.</td></tr>
 * <tr><td><code>{@link #Theme_buttonBarNeutralButtonStyle android:buttonBarNeutralButtonStyle}</code></td><td>Style for the "neutral" buttons within button bars.</td></tr>
 * <tr><td><code>{@link #Theme_buttonBarNegativeButtonStyle android:buttonBarNegativeButtonStyle}</code></td><td>Style for the "negative" buttons within button bars.</td></tr>
 * <tr><td><code>{@link #Theme_actionBarPopupTheme android:actionBarPopupTheme}</code></td><td>Reference to a theme that should be used to inflate popups
 * shown by widgets in the action bar.</td></tr>
 * <tr><td><code>{@link #Theme_timePickerStyle android:timePickerStyle}</code></td><td>The TimePicker style.</td></tr>
 * <tr><td><code>{@link #Theme_timePickerDialogTheme android:timePickerDialogTheme}</code></td><td>The TimePicker dialog theme.</td></tr>
 * <tr><td><code>{@link #Theme_toolbarStyle android:toolbarStyle}</code></td><td>Default Toolbar style.</td></tr>
 * <tr><td><code>{@link #Theme_datePickerDialogTheme android:datePickerDialogTheme}</code></td><td>The DatePicker dialog theme.</td></tr>
 * <tr><td><code>{@link #Theme_windowReturnTransition android:windowReturnTransition}</code></td><td>Reference to a Transition XML resource defining the desired Transition
 * used to move Views out of the scene when the Window is
 * preparing to close.</td></tr>
 * <tr><td><code>{@link #Theme_windowReenterTransition android:windowReenterTransition}</code></td><td>Reference to a Transition XML resource defining the desired Transition
 * used to move Views in to the scene when returning from a previously-started Activity.</td></tr>
 * <tr><td><code>{@link #Theme_windowSharedElementReturnTransition android:windowSharedElementReturnTransition}</code></td><td>Reference to a Transition XML resource defining the desired Transition
 * used to move shared elements transferred back to a calling Activity.</td></tr>
 * <tr><td><code>{@link #Theme_windowSharedElementReenterTransition android:windowSharedElementReenterTransition}</code></td><td>Reference to a Transition XML resource defining the desired Transition
 * used for shared elements transferred back to a calling Activity.</td></tr>
 * <tr><td><code>{@link #Theme_windowSharedElementsUseOverlay android:windowSharedElementsUseOverlay}</code></td><td>Indicates whether or not shared elements should use an overlay
 * during transitions.</td></tr>
 * <tr><td><code>{@link #Theme_ambientShadowAlpha android:ambientShadowAlpha}</code></td><td>Alpha value of the ambient shadow projected by elevated views, between 0 and 1.</td></tr>
 * <tr><td><code>{@link #Theme_spotShadowAlpha android:spotShadowAlpha}</code></td><td>Alpha value of the spot shadow projected by elevated views, between 0 and 1.</td></tr>
 * <tr><td><code>{@link #Theme_windowActivityTransitions android:windowActivityTransitions}</code></td><td>Flag indicating whether this window allows Activity Transitions.</td></tr>
 * <tr><td><code>{@link #Theme_colorEdgeEffect android:colorEdgeEffect}</code></td><td>The color applied to the edge effect on scrolling containers.</td></tr>
 * <tr><td><code>{@link #Theme_dialogPreferredPadding android:dialogPreferredPadding}</code></td><td>Preferred padding for dialog content.</td></tr>
 * <tr><td><code>{@link #Theme_colorBackgroundFloating android:colorBackgroundFloating}</code></td><td>Default color of background imagery for floating components, ex.</td></tr>
 * <tr><td><code>{@link #Theme_fingerprintAuthDrawable android:fingerprintAuthDrawable}</code></td><td>Icon that should be used to indicate that an app is waiting for a fingerprint scan.</td></tr>
 * <tr><td><code>{@link #Theme_listMenuViewStyle android:listMenuViewStyle}</code></td><td>Default menu-style ListView style.</td></tr>
 * <tr><td><code>{@link #Theme_contextPopupMenuStyle android:contextPopupMenuStyle}</code></td><td>Default context menu PopupMenu style.</td></tr>
 * <tr><td><code>{@link #Theme_textAppearancePopupMenuHeader android:textAppearancePopupMenuHeader}</code></td><td>Text color, typeface, size, and style for header text inside of a popup menu.</td></tr>
 * <tr><td><code>{@link #Theme_windowBackgroundFallback android:windowBackgroundFallback}</code></td><td>Drawable to draw selectively within the inset areas when the windowBackground
 * has been set to null.</td></tr>
 * <tr><td><code>{@link #Theme_preferenceFragmentStyle android:preferenceFragmentStyle}</code></td><td>Default style for Headers pane in PreferenceActivity.</td></tr>
 * <tr><td><code>{@link #Theme_numberPickerStyle android:numberPickerStyle}</code></td><td>NumberPicker style.</td></tr>
 * <tr><td><code>{@link #Theme_colorSecondary android:colorSecondary}</code></td><td>The secondary branding color for the app.</td></tr>
 * <tr><td><code>{@link #Theme_colorError android:colorError}</code></td><td>Color used for error states and things that need to be drawn to
 * the users attention..</td></tr>
 * <tr><td><code>{@link #Theme_primaryContentAlpha android:primaryContentAlpha}</code></td><td>The alpha applied to the foreground color to create the primary text color.</td></tr>
 * <tr><td><code>{@link #Theme_secondaryContentAlpha android:secondaryContentAlpha}</code></td><td>The alpha applied to the foreground color to create the secondary text color.</td></tr>
 * <tr><td><code>{@link #Theme_autofilledHighlight android:autofilledHighlight}</code></td><td>Drawable to be drawn over the view to mark it as autofilled</td></tr>
 * <tr><td><code>{@link #Theme_dialogCornerRadius android:dialogCornerRadius}</code></td><td>Corner radius of dialogs.</td></tr>
 * <tr><td><code>{@link #Theme_buttonCornerRadius android:buttonCornerRadius}</code></td><td>Corner radius of buttons.</td></tr>
 * <tr><td><code>{@link #Theme_forceDarkAllowed android:forceDarkAllowed}</code></td><td><p>Whether or not the force dark feature is allowed to be applied to this View.</td></tr>
 * <tr><td><code>{@link #Theme_isLightTheme android:isLightTheme}</code></td><td>Specifies that a theme has a light background with dark text on top.</td></tr>
 * </table>
 * @see #Theme_colorForeground
 * @see #Theme_colorBackground
 * @see #Theme_backgroundDimAmount
 * @see #Theme_disabledAlpha
 * @see #Theme_textAppearance
 * @see #Theme_textAppearanceInverse
 * @see #Theme_textColorPrimary
 * @see #Theme_textColorPrimaryDisableOnly
 * @see #Theme_textColorSecondary
 * @see #Theme_textColorPrimaryInverse
 * @see #Theme_textColorSecondaryInverse
 * @see #Theme_textColorPrimaryNoDisable
 * @see #Theme_textColorSecondaryNoDisable
 * @see #Theme_textColorPrimaryInverseNoDisable
 * @see #Theme_textColorSecondaryInverseNoDisable
 * @see #Theme_textColorHintInverse
 * @see #Theme_textAppearanceLarge
 * @see #Theme_textAppearanceMedium
 * @see #Theme_textAppearanceSmall
 * @see #Theme_textAppearanceLargeInverse
 * @see #Theme_textAppearanceMediumInverse
 * @see #Theme_textAppearanceSmallInverse
 * @see #Theme_textCheckMark
 * @see #Theme_textCheckMarkInverse
 * @see #Theme_buttonStyle
 * @see #Theme_buttonStyleSmall
 * @see #Theme_buttonStyleInset
 * @see #Theme_buttonStyleToggle
 * @see #Theme_galleryItemBackground
 * @see #Theme_listPreferredItemHeight
 * @see #Theme_expandableListPreferredItemPaddingLeft
 * @see #Theme_expandableListPreferredChildPaddingLeft
 * @see #Theme_expandableListPreferredItemIndicatorLeft
 * @see #Theme_expandableListPreferredItemIndicatorRight
 * @see #Theme_expandableListPreferredChildIndicatorLeft
 * @see #Theme_expandableListPreferredChildIndicatorRight
 * @see #Theme_windowBackground
 * @see #Theme_windowFrame
 * @see #Theme_windowNoTitle
 * @see #Theme_windowIsFloating
 * @see #Theme_windowIsTranslucent
 * @see #Theme_windowContentOverlay
 * @see #Theme_windowTitleSize
 * @see #Theme_windowTitleStyle
 * @see #Theme_windowTitleBackgroundStyle
 * @see #Theme_alertDialogStyle
 * @see #Theme_panelBackground
 * @see #Theme_panelFullBackground
 * @see #Theme_panelColorForeground
 * @see #Theme_panelColorBackground
 * @see #Theme_panelTextAppearance
 * @see #Theme_absListViewStyle
 * @see #Theme_autoCompleteTextViewStyle
 * @see #Theme_checkboxStyle
 * @see #Theme_dropDownListViewStyle
 * @see #Theme_editTextStyle
 * @see #Theme_expandableListViewStyle
 * @see #Theme_galleryStyle
 * @see #Theme_gridViewStyle
 * @see #Theme_imageButtonStyle
 * @see #Theme_imageWellStyle
 * @see #Theme_listViewStyle
 * @see #Theme_listViewWhiteStyle
 * @see #Theme_popupWindowStyle
 * @see #Theme_progressBarStyle
 * @see #Theme_progressBarStyleHorizontal
 * @see #Theme_progressBarStyleSmall
 * @see #Theme_progressBarStyleLarge
 * @see #Theme_seekBarStyle
 * @see #Theme_ratingBarStyle
 * @see #Theme_ratingBarStyleSmall
 * @see #Theme_radioButtonStyle
 * @see #Theme_scrollViewStyle
 * @see #Theme_spinnerStyle
 * @see #Theme_starStyle
 * @see #Theme_tabWidgetStyle
 * @see #Theme_textViewStyle
 * @see #Theme_webViewStyle
 * @see #Theme_dropDownItemStyle
 * @see #Theme_spinnerDropDownItemStyle
 * @see #Theme_dropDownHintAppearance
 * @see #Theme_spinnerItemStyle
 * @see #Theme_mapViewStyle
 * @see #Theme_preferenceScreenStyle
 * @see #Theme_preferenceCategoryStyle
 * @see #Theme_preferenceInformationStyle
 * @see #Theme_preferenceStyle
 * @see #Theme_checkBoxPreferenceStyle
 * @see #Theme_yesNoPreferenceStyle
 * @see #Theme_dialogPreferenceStyle
 * @see #Theme_editTextPreferenceStyle
 * @see #Theme_ringtonePreferenceStyle
 * @see #Theme_preferenceLayoutChild
 * @see #Theme_windowAnimationStyle
 * @see #Theme_colorForegroundInverse
 * @see #Theme_textAppearanceButton
 * @see #Theme_listSeparatorTextViewStyle
 * @see #Theme_windowFullscreen
 * @see #Theme_progressBarStyleSmallTitle
 * @see #Theme_ratingBarStyleIndicator
 * @see #Theme_textColorTertiary
 * @see #Theme_textColorTertiaryInverse
 * @see #Theme_listDivider
 * @see #Theme_listChoiceIndicatorSingle
 * @see #Theme_listChoiceIndicatorMultiple
 * @see #Theme_windowNoDisplay
 * @see #Theme_backgroundDimEnabled
 * @see #Theme_windowDisablePreview
 * @see #Theme_windowSoftInputMode
 * @see #Theme_candidatesTextStyleSpans
 * @see #Theme_progressBarStyleInverse
 * @see #Theme_progressBarStyleSmallInverse
 * @see #Theme_progressBarStyleLargeInverse
 * @see #Theme_textColorPrimaryInverseDisableOnly
 * @see #Theme_windowShowWallpaper
 * @see #Theme_textAppearanceSearchResultSubtitle
 * @see #Theme_textAppearanceSearchResultTitle
 * @see #Theme_colorBackgroundCacheHint
 * @see #Theme_quickContactBadgeStyleWindowSmall
 * @see #Theme_quickContactBadgeStyleWindowMedium
 * @see #Theme_quickContactBadgeStyleWindowLarge
 * @see #Theme_quickContactBadgeStyleSmallWindowSmall
 * @see #Theme_quickContactBadgeStyleSmallWindowMedium
 * @see #Theme_quickContactBadgeStyleSmallWindowLarge
 * @see #Theme_expandableListViewWhiteStyle
 * @see #Theme_webTextViewStyle
 * @see #Theme_textSelectHandleLeft
 * @see #Theme_textSelectHandleRight
 * @see #Theme_textSelectHandle
 * @see #Theme_textSelectHandleWindowStyle
 * @see #Theme_windowActionBar
 * @see #Theme_actionBarStyle
 * @see #Theme_dropDownSpinnerStyle
 * @see #Theme_actionDropDownStyle
 * @see #Theme_actionButtonStyle
 * @see #Theme_actionModeBackground
 * @see #Theme_actionModeCloseDrawable
 * @see #Theme_windowActionModeOverlay
 * @see #Theme_windowActionBarOverlay
 * @see #Theme_actionBarSize
 * @see #Theme_listChoiceBackgroundIndicator
 * @see #Theme_actionBarTabStyle
 * @see #Theme_actionBarTabBarStyle
 * @see #Theme_actionBarTabTextStyle
 * @see #Theme_actionOverflowButtonStyle
 * @see #Theme_actionModeCloseButtonStyle
 * @see #Theme_activatedBackgroundIndicator
 * @see #Theme_listPopupWindowStyle
 * @see #Theme_popupMenuStyle
 * @see #Theme_textAppearanceLargePopupMenu
 * @see #Theme_textAppearanceSmallPopupMenu
 * @see #Theme_listDividerAlertDialog
 * @see #Theme_textColorAlertDialogListItem
 * @see #Theme_dialogTheme
 * @see #Theme_alertDialogTheme
 * @see #Theme_dividerVertical
 * @see #Theme_homeAsUpIndicator
 * @see #Theme_selectableItemBackground
 * @see #Theme_actionModeCutDrawable
 * @see #Theme_actionModeCopyDrawable
 * @see #Theme_actionModePasteDrawable
 * @see #Theme_textEditPasteWindowLayout
 * @see #Theme_textEditNoPasteWindowLayout
 * @see #Theme_windowEnableSplitTouch
 * @see #Theme_borderlessButtonStyle
 * @see #Theme_dividerHorizontal
 * @see #Theme_buttonBarStyle
 * @see #Theme_buttonBarButtonStyle
 * @see #Theme_segmentedButtonStyle
 * @see #Theme_fastScrollThumbDrawable
 * @see #Theme_fastScrollPreviewBackgroundLeft
 * @see #Theme_fastScrollPreviewBackgroundRight
 * @see #Theme_fastScrollTrackDrawable
 * @see #Theme_fastScrollOverlayPosition
 * @see #Theme_detailsElementBackground
 * @see #Theme_textColorHighlightInverse
 * @see #Theme_textColorLinkInverse
 * @see #Theme_editTextColor
 * @see #Theme_editTextBackground
 * @see #Theme_horizontalScrollViewStyle
 * @see #Theme_alertDialogIcon
 * @see #Theme_fastScrollTextColor
 * @see #Theme_windowCloseOnTouchOutside
 * @see #Theme_datePickerStyle
 * @see #Theme_calendarViewStyle
 * @see #Theme_textEditSidePasteWindowLayout
 * @see #Theme_textEditSideNoPasteWindowLayout
 * @see #Theme_actionMenuTextAppearance
 * @see #Theme_actionMenuTextColor
 * @see #Theme_switchPreferenceStyle
 * @see #Theme_textSuggestionsWindowStyle
 * @see #Theme_textEditSuggestionItemLayout
 * @see #Theme_actionModeSelectAllDrawable
 * @see #Theme_listPreferredItemHeightLarge
 * @see #Theme_listPreferredItemHeightSmall
 * @see #Theme_actionBarSplitStyle
 * @see #Theme_colorPressedHighlight
 * @see #Theme_colorLongPressedHighlight
 * @see #Theme_colorFocusedHighlight
 * @see #Theme_colorActivatedHighlight
 * @see #Theme_colorMultiSelectHighlight
 * @see #Theme_actionModeStyle
 * @see #Theme_actionBarWidgetTheme
 * @see #Theme_actionBarDivider
 * @see #Theme_actionBarItemBackground
 * @see #Theme_actionModeSplitBackground
 * @see #Theme_textAppearanceListItem
 * @see #Theme_textAppearanceListItemSmall
 * @see #Theme_listPreferredItemPaddingLeft
 * @see #Theme_listPreferredItemPaddingRight
 * @see #Theme_mediaRouteButtonStyle
 * @see #Theme_listPreferredItemPaddingStart
 * @see #Theme_listPreferredItemPaddingEnd
 * @see #Theme_presentationTheme
 * @see #Theme_checkedTextViewStyle
 * @see #Theme_windowOverscan
 * @see #Theme_windowTranslucentStatus
 * @see #Theme_windowTranslucentNavigation
 * @see #Theme_windowSwipeToDismiss
 * @see #Theme_windowContentTransitions
 * @see #Theme_windowContentTransitionManager
 * @see #Theme_colorControlNormal
 * @see #Theme_colorControlActivated
 * @see #Theme_colorButtonNormal
 * @see #Theme_colorControlHighlight
 * @see #Theme_actionBarTheme
 * @see #Theme_textAppearanceListItemSecondary
 * @see #Theme_colorPrimary
 * @see #Theme_colorPrimaryDark
 * @see #Theme_colorAccent
 * @see #Theme_windowEnterTransition
 * @see #Theme_windowExitTransition
 * @see #Theme_windowSharedElementEnterTransition
 * @see #Theme_windowSharedElementExitTransition
 * @see #Theme_windowAllowReturnTransitionOverlap
 * @see #Theme_windowAllowEnterTransitionOverlap
 * @see #Theme_stackViewStyle
 * @see #Theme_switchStyle
 * @see #Theme_actionOverflowMenuStyle
 * @see #Theme_selectableItemBackgroundBorderless
 * @see #Theme_windowTransitionBackgroundFadeDuration
 * @see #Theme_actionModeShareDrawable
 * @see #Theme_actionModeFindDrawable
 * @see #Theme_actionModeWebSearchDrawable
 * @see #Theme_searchViewStyle
 * @see #Theme_buttonBarPositiveButtonStyle
 * @see #Theme_buttonBarNeutralButtonStyle
 * @see #Theme_buttonBarNegativeButtonStyle
 * @see #Theme_actionBarPopupTheme
 * @see #Theme_timePickerStyle
 * @see #Theme_timePickerDialogTheme
 * @see #Theme_toolbarStyle
 * @see #Theme_datePickerDialogTheme
 * @see #Theme_windowReturnTransition
 * @see #Theme_windowReenterTransition
 * @see #Theme_windowSharedElementReturnTransition
 * @see #Theme_windowSharedElementReenterTransition
 * @see #Theme_windowSharedElementsUseOverlay
 * @see #Theme_ambientShadowAlpha
 * @see #Theme_spotShadowAlpha
 * @see #Theme_windowActivityTransitions
 * @see #Theme_colorEdgeEffect
 * @see #Theme_dialogPreferredPadding
 * @see #Theme_colorBackgroundFloating
 * @see #Theme_fingerprintAuthDrawable
 * @see #Theme_listMenuViewStyle
 * @see #Theme_contextPopupMenuStyle
 * @see #Theme_textAppearancePopupMenuHeader
 * @see #Theme_windowBackgroundFallback
 * @see #Theme_preferenceFragmentStyle
 * @see #Theme_numberPickerStyle
 * @see #Theme_colorSecondary
 * @see #Theme_colorError
 * @see #Theme_primaryContentAlpha
 * @see #Theme_secondaryContentAlpha
 * @see #Theme_autofilledHighlight
 * @see #Theme_dialogCornerRadius
 * @see #Theme_buttonCornerRadius
 * @see #Theme_forceDarkAllowed
 * @see #Theme_isLightTheme
 */

public static final int[] Theme;
static { Theme = new int[0]; }

/**
 * <p>
 * @attr description
 * Default AbsListView style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:absListViewStyle
 */

public static final int Theme_absListViewStyle = 51; // 0x33

/**
 * <p>
 * @attr description
 * Custom divider drawable to use for elements in the action bar.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:actionBarDivider
 */

public static final int Theme_actionBarDivider = 203; // 0xcb

/**
 * <p>
 * @attr description
 * Custom item state list drawable background for action bar items.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:actionBarItemBackground
 */

public static final int Theme_actionBarItemBackground = 204; // 0xcc

/**
 * <p>
 * @attr description
 * Reference to a theme that should be used to inflate popups
 * shown by widgets in the action bar.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:actionBarPopupTheme
 */

public static final int Theme_actionBarPopupTheme = 248; // 0xf8

/**
 * <p>
 * @attr description
 * Size of the Action Bar, including the contextual
 * bar used to present Action Modes.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>wrap_content</td><td>0</td><td></td></tr>
 * </table>
 *
 * @attr name android:actionBarSize
 */

public static final int Theme_actionBarSize = 139; // 0x8b

/**
 * <p>
 * @attr description
 * Reference to a style for the split Action Bar. This style
 * controls the split component that holds the menu/action
 * buttons. actionBarStyle is still used for the primary
 * bar.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:actionBarSplitStyle
 */

public static final int Theme_actionBarSplitStyle = 195; // 0xc3

/**
 * <p>
 * @attr description
 * Reference to a style for the Action Bar.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:actionBarStyle
 */

public static final int Theme_actionBarStyle = 131; // 0x83

/**
 * <p>
 * @attr description
 * Reference to a style for the Action Bar Tab Bar.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:actionBarTabBarStyle
 */

public static final int Theme_actionBarTabBarStyle = 142; // 0x8e

/**
 * <p>
 * @attr description
 * Default style for tabs within an action bar.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:actionBarTabStyle
 */

public static final int Theme_actionBarTabStyle = 141; // 0x8d

/**
 * <p>
 * @attr description
 * Reference to a style for the Action Bar Tab text.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:actionBarTabTextStyle
 */

public static final int Theme_actionBarTabTextStyle = 143; // 0x8f

/**
 * <p>
 * @attr description
 * Reference to a theme that should be used to inflate the
 * action bar. This will be inherited by any widget inflated
 * into the action bar.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:actionBarTheme
 */

public static final int Theme_actionBarTheme = 225; // 0xe1

/**
 * <p>
 * @attr description
 * Reference to a theme that should be used to inflate widgets
 * and layouts destined for the action bar. Most of the time
 * this will be a reference to the current theme, but when
 * the action bar has a significantly different contrast
 * profile than the rest of the activity the difference
 * can become important. If this is set to @null the current
 * theme will be used.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:actionBarWidgetTheme
 */

public static final int Theme_actionBarWidgetTheme = 202; // 0xca

/**
 * <p>
 * @attr description
 * Default action button style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:actionButtonStyle
 */

public static final int Theme_actionButtonStyle = 134; // 0x86

/**
 * <p>
 * @attr description
 * Default ActionBar dropdown style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:actionDropDownStyle
 */

public static final int Theme_actionDropDownStyle = 133; // 0x85

/**
 * <p>
 * @attr description
 * TextAppearance style that will be applied to text that
 * appears within action menu items.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:actionMenuTextAppearance
 */

public static final int Theme_actionMenuTextAppearance = 187; // 0xbb

/**
 * <p>
 * @attr description
 * Color for text that appears within action menu items.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:actionMenuTextColor
 */

public static final int Theme_actionMenuTextColor = 188; // 0xbc

/**
 * <p>
 * @attr description
 * Background drawable to use for action mode UI.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:actionModeBackground
 */

public static final int Theme_actionModeBackground = 135; // 0x87

/**
 * <p>
 * @attr description
 * Reference to a style for the Action Mode close button.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:actionModeCloseButtonStyle
 */

public static final int Theme_actionModeCloseButtonStyle = 145; // 0x91

/**
 * <p>
 * @attr description
 * Drawable to use for the close action mode button.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:actionModeCloseDrawable
 */

public static final int Theme_actionModeCloseDrawable = 136; // 0x88

/**
 * <p>
 * @attr description
 * Drawable to use for the Copy action button in Contextual Action Bar.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:actionModeCopyDrawable
 */

public static final int Theme_actionModeCopyDrawable = 159; // 0x9f

/**
 * <p>
 * @attr description
 * Drawable to use for the Cut action button in Contextual Action Bar.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:actionModeCutDrawable
 */

public static final int Theme_actionModeCutDrawable = 158; // 0x9e

/**
 * <p>
 * @attr description
 * Drawable to use for the Find action button in WebView selection action modes.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:actionModeFindDrawable
 */

public static final int Theme_actionModeFindDrawable = 242; // 0xf2

/**
 * <p>
 * @attr description
 * Drawable to use for the Paste action button in Contextual Action Bar.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:actionModePasteDrawable
 */

public static final int Theme_actionModePasteDrawable = 160; // 0xa0

/**
 * <p>
 * @attr description
 * Drawable to use for the Select all action button in Contextual Action Bar.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:actionModeSelectAllDrawable
 */

public static final int Theme_actionModeSelectAllDrawable = 192; // 0xc0

/**
 * <p>
 * @attr description
 * Drawable to use for the Share action button in WebView selection action modes.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:actionModeShareDrawable
 */

public static final int Theme_actionModeShareDrawable = 241; // 0xf1

/**
 * <p>
 * @attr description
 * Background drawable to use for action mode UI in the lower split bar.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:actionModeSplitBackground
 */

public static final int Theme_actionModeSplitBackground = 205; // 0xcd

/**
 * <p>
 * @attr description
 * Reference to a style for the Action Mode.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:actionModeStyle
 */

public static final int Theme_actionModeStyle = 201; // 0xc9

/**
 * <p>
 * @attr description
 * Drawable to use for the Web Search action button in WebView selection action modes.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:actionModeWebSearchDrawable
 */

public static final int Theme_actionModeWebSearchDrawable = 243; // 0xf3

/**
 * <p>
 * @attr description
 * Reference to a style for Action Bar overflow buttons.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:actionOverflowButtonStyle
 */

public static final int Theme_actionOverflowButtonStyle = 144; // 0x90

/**
 * <p>
 * @attr description
 * Reference to a style for the Action Bar menu.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:actionOverflowMenuStyle
 */

public static final int Theme_actionOverflowMenuStyle = 238; // 0xee

/**
 * <p>
 * @attr description
 * Drawable used as a background for activated items.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:activatedBackgroundIndicator
 */

public static final int Theme_activatedBackgroundIndicator = 146; // 0x92

/**
 * <p>
 * @attr description
 * Icon drawable to use for alerts.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:alertDialogIcon
 */

public static final int Theme_alertDialogIcon = 180; // 0xb4

/**
 * <p>This symbol is the offset where the {@link android.R.attr#alertDialogStyle}
 * attribute's value can be found in the {@link #Theme} array.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:alertDialogStyle
 */

public static final int Theme_alertDialogStyle = 45; // 0x2d

/**
 * <p>
 * @attr description
 * Theme to use for alert dialogs spawned from this theme.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:alertDialogTheme
 */

public static final int Theme_alertDialogTheme = 154; // 0x9a

/**
 * <p>
 * @attr description
 * Alpha value of the ambient shadow projected by elevated views, between 0 and 1.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:ambientShadowAlpha
 */

public static final int Theme_ambientShadowAlpha = 258; // 0x102

/**
 * <p>
 * @attr description
 * Default AutoCompleteTextView style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:autoCompleteTextViewStyle
 */

public static final int Theme_autoCompleteTextViewStyle = 52; // 0x34

/**
 * <p>
 * @attr description
 * Drawable to be drawn over the view to mark it as autofilled
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:autofilledHighlight
 */

public static final int Theme_autofilledHighlight = 275; // 0x113

/**
 * <p>
 * @attr description
 * Default background dim amount when a menu, dialog, or something similar pops up.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:backgroundDimAmount
 */

public static final int Theme_backgroundDimAmount = 2; // 0x2

/**
 * <p>
 * @attr description
 * Control whether dimming behind the window is enabled.  The default
 * theme does not set this value, meaning it is based on whether the
 * window is floating.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:backgroundDimEnabled
 */

public static final int Theme_backgroundDimEnabled = 106; // 0x6a

/**
 * <p>
 * @attr description
 * Style for buttons without an explicit border, often used in groups.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:borderlessButtonStyle
 */

public static final int Theme_borderlessButtonStyle = 164; // 0xa4

/**
 * <p>
 * @attr description
 * Style for buttons within button bars.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:buttonBarButtonStyle
 */

public static final int Theme_buttonBarButtonStyle = 167; // 0xa7

/**
 * <p>
 * @attr description
 * Style for the "negative" buttons within button bars.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:buttonBarNegativeButtonStyle
 */

public static final int Theme_buttonBarNegativeButtonStyle = 247; // 0xf7

/**
 * <p>
 * @attr description
 * Style for the "neutral" buttons within button bars.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:buttonBarNeutralButtonStyle
 */

public static final int Theme_buttonBarNeutralButtonStyle = 246; // 0xf6

/**
 * <p>
 * @attr description
 * Style for the "positive" buttons within button bars.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:buttonBarPositiveButtonStyle
 */

public static final int Theme_buttonBarPositiveButtonStyle = 245; // 0xf5

/**
 * <p>
 * @attr description
 * Style for button bars.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:buttonBarStyle
 */

public static final int Theme_buttonBarStyle = 166; // 0xa6

/**
 * <p>
 * @attr description
 * Corner radius of buttons.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:buttonCornerRadius
 */

public static final int Theme_buttonCornerRadius = 277; // 0x115

/**
 * <p>
 * @attr description
 * Normal Button style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:buttonStyle
 */

public static final int Theme_buttonStyle = 24; // 0x18

/**
 * <p>
 * @attr description
 * Button style to inset into an EditText.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:buttonStyleInset
 */

public static final int Theme_buttonStyleInset = 26; // 0x1a

/**
 * <p>
 * @attr description
 * Small Button style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:buttonStyleSmall
 */

public static final int Theme_buttonStyleSmall = 25; // 0x19

/**
 * <p>
 * @attr description
 * ToggleButton style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:buttonStyleToggle
 */

public static final int Theme_buttonStyleToggle = 27; // 0x1b

/**
 * <p>
 * @attr description
 * The CalendarView style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:calendarViewStyle
 */

public static final int Theme_calendarViewStyle = 184; // 0xb8

/**
 * <p>
 * @attr description
 * A styled string, specifying the style to be used for showing
 * inline candidate text when composing with an input method.  The
 * text itself will be ignored, but the style spans will be applied
 * to the candidate text as it is edited.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:candidatesTextStyleSpans
 */

public static final int Theme_candidatesTextStyleSpans = 109; // 0x6d

/**
 * <p>
 * @attr description
 * Default style for CheckBoxPreference.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:checkBoxPreferenceStyle
 */

public static final int Theme_checkBoxPreferenceStyle = 87; // 0x57

/**
 * <p>
 * @attr description
 * Default Checkbox style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:checkboxStyle
 */

public static final int Theme_checkboxStyle = 53; // 0x35

/**
 * <p>
 * @attr description
 * Default CheckedTextView style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:checkedTextViewStyle
 */

public static final int Theme_checkedTextViewStyle = 214; // 0xd6

/**
 * <p>
 * @attr description
 * Bright complement to the primary branding color. By default, this is the color applied
 * to framework controls (via colorControlActivated).
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:colorAccent
 */

public static final int Theme_colorAccent = 229; // 0xe5

/**
 * <p>
 * @attr description
 * Default highlight color for items that are
 * activated. (Activated meaning persistent selection.)
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:colorActivatedHighlight
 */

public static final int Theme_colorActivatedHighlight = 199; // 0xc7

/**
 * <p>
 * @attr description
 * Default color of background imagery, ex. full-screen windows.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:colorBackground
 */

public static final int Theme_colorBackground = 1; // 0x1

/**
 * <p>
 * @attr description
 * This is a hint for a solid color that can be used for caching
 * rendered views.  This should be the color of the background when
 * there is a solid background color; it should be null when the
 * background is a texture or translucent.  When a device is able
 * to use accelerated drawing (thus setting state_accelerated), the
 * cache hint is ignored and always assumed to be transparent.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:colorBackgroundCacheHint
 */

public static final int Theme_colorBackgroundCacheHint = 117; // 0x75

/**
 * <p>
 * @attr description
 * Default color of background imagery for floating components, ex. dialogs, popups, and cards.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:colorBackgroundFloating
 */

public static final int Theme_colorBackgroundFloating = 263; // 0x107

/**
 * <p>
 * @attr description
 * The color applied to framework buttons in their normal state.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:colorButtonNormal
 */

public static final int Theme_colorButtonNormal = 223; // 0xdf

/**
 * <p>
 * @attr description
 * The color applied to framework controls in their activated (ex. checked) state.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:colorControlActivated
 */

public static final int Theme_colorControlActivated = 222; // 0xde

/**
 * <p>
 * @attr description
 * The color applied to framework control highlights (ex. ripples, list selectors).
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:colorControlHighlight
 */

public static final int Theme_colorControlHighlight = 224; // 0xe0

/**
 * <p>
 * @attr description
 * The color applied to framework controls in their normal state.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:colorControlNormal
 */

public static final int Theme_colorControlNormal = 221; // 0xdd

/**
 * <p>
 * @attr description
 * The color applied to the edge effect on scrolling containers.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:colorEdgeEffect
 */

public static final int Theme_colorEdgeEffect = 261; // 0x105

/**
 * <p>
 * @attr description
 * Color used for error states and things that need to be drawn to
 * the users attention..
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:colorError
 */

public static final int Theme_colorError = 272; // 0x110

/**
 * <p>
 * @attr description
 * Default highlight color for items that are
 * focused. (Focused meaning cursor-based selection.)
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:colorFocusedHighlight
 */

public static final int Theme_colorFocusedHighlight = 198; // 0xc6

/**
 * <p>
 * @attr description
 * Default color of foreground imagery.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:colorForeground
 */

public static final int Theme_colorForeground = 0; // 0x0

/**
 * <p>
 * @attr description
 * Default color of foreground imagery on an inverted background.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:colorForegroundInverse
 */

public static final int Theme_colorForegroundInverse = 94; // 0x5e

/**
 * <p>
 * @attr description
 * Default highlight color for items that are long-pressed.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:colorLongPressedHighlight
 */

public static final int Theme_colorLongPressedHighlight = 197; // 0xc5

/**
 * <p>
 * @attr description
 * Default highlight color for items in multiple selection
 * mode.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:colorMultiSelectHighlight
 */

public static final int Theme_colorMultiSelectHighlight = 200; // 0xc8

/**
 * <p>
 * @attr description
 * Default highlight color for items that are pressed.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:colorPressedHighlight
 */

public static final int Theme_colorPressedHighlight = 196; // 0xc4

/**
 * <p>
 * @attr description
 * The primary branding color for the app. By default, this is the color applied to the
 * action bar background.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:colorPrimary
 */

public static final int Theme_colorPrimary = 227; // 0xe3

/**
 * <p>
 * @attr description
 * Dark variant of the primary branding color. By default, this is the color applied to
 * the status bar (via statusBarColor) and navigation bar (via navigationBarColor).
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:colorPrimaryDark
 */

public static final int Theme_colorPrimaryDark = 228; // 0xe4

/**
 * <p>
 * @attr description
 * The secondary branding color for the app.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:colorSecondary
 */

public static final int Theme_colorSecondary = 271; // 0x10f

/**
 * <p>
 * @attr description
 * Default context menu PopupMenu style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:contextPopupMenuStyle
 */

public static final int Theme_contextPopupMenuStyle = 266; // 0x10a

/**
 * <p>
 * @attr description
 * The DatePicker dialog theme.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:datePickerDialogTheme
 */

public static final int Theme_datePickerDialogTheme = 252; // 0xfc

/**
 * <p>
 * @attr description
 * The DatePicker style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:datePickerStyle
 */

public static final int Theme_datePickerStyle = 183; // 0xb7

/**
 * <p>
 * @attr description
 * Background that can be used behind parts of a UI that provide
 * details on data the user is selecting.  For example, this is
 * the background element of PreferenceActivity's embedded
 * preference fragment.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:detailsElementBackground
 */

public static final int Theme_detailsElementBackground = 174; // 0xae

/**
 * <p>
 * @attr description
 * Corner radius of dialogs.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:dialogCornerRadius
 */

public static final int Theme_dialogCornerRadius = 276; // 0x114

/**
 * <p>
 * @attr description
 * Default style for DialogPreference.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:dialogPreferenceStyle
 */

public static final int Theme_dialogPreferenceStyle = 89; // 0x59

/**
 * <p>
 * @attr description
 * Preferred padding for dialog content.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:dialogPreferredPadding
 */

public static final int Theme_dialogPreferredPadding = 262; // 0x106

/**
 * <p>
 * @attr description
 * Theme to use for dialogs spawned from this theme.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:dialogTheme
 */

public static final int Theme_dialogTheme = 153; // 0x99

/**
 * <p>
 * @attr description
 * Default disabled alpha for widgets that set enabled/disabled alpha programmatically.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:disabledAlpha
 */

public static final int Theme_disabledAlpha = 3; // 0x3

/**
 * <p>
 * @attr description
 * Drawable to use for generic horizontal dividers.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:dividerHorizontal
 */

public static final int Theme_dividerHorizontal = 165; // 0xa5

/**
 * <p>
 * @attr description
 * Drawable to use for generic vertical dividers.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:dividerVertical
 */

public static final int Theme_dividerVertical = 155; // 0x9b

/**
 * <p>
 * @attr description
 * Default style for drop down hints.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:dropDownHintAppearance
 */

public static final int Theme_dropDownHintAppearance = 80; // 0x50

/**
 * <p>
 * @attr description
 * Default style for drop down items.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:dropDownItemStyle
 */

public static final int Theme_dropDownItemStyle = 78; // 0x4e

/**
 * <p>
 * @attr description
 * Default ListView style for drop downs.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:dropDownListViewStyle
 */

public static final int Theme_dropDownListViewStyle = 54; // 0x36

/**
 * <p>
 * @attr description
 * Default dropdown Spinner style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:dropDownSpinnerStyle
 */

public static final int Theme_dropDownSpinnerStyle = 132; // 0x84

/**
 * <p>
 * @attr description
 * EditText background drawable.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:editTextBackground
 */

public static final int Theme_editTextBackground = 178; // 0xb2

/**
 * <p>
 * @attr description
 * EditText text foreground color.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:editTextColor
 */

public static final int Theme_editTextColor = 177; // 0xb1

/**
 * <p>
 * @attr description
 * Default style for EditTextPreference.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:editTextPreferenceStyle
 */

public static final int Theme_editTextPreferenceStyle = 90; // 0x5a

/**
 * <p>
 * @attr description
 * Default EditText style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:editTextStyle
 */

public static final int Theme_editTextStyle = 55; // 0x37

/**
 * <p>
 * @attr description
 * The preferred left bound for an expandable list child's indicator.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:expandableListPreferredChildIndicatorLeft
 */

public static final int Theme_expandableListPreferredChildIndicatorLeft = 34; // 0x22

/**
 * <p>
 * @attr description
 * The preferred right bound for an expandable list child's indicator.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:expandableListPreferredChildIndicatorRight
 */

public static final int Theme_expandableListPreferredChildIndicatorRight = 35; // 0x23

/**
 * <p>
 * @attr description
 * The preferred left padding for an expandable list item that is a child.
 * If this is not provided, it defaults to the expandableListPreferredItemPaddingLeft.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:expandableListPreferredChildPaddingLeft
 */

public static final int Theme_expandableListPreferredChildPaddingLeft = 31; // 0x1f

/**
 * <p>
 * @attr description
 * The preferred left bound for an expandable list item's indicator. For a child-specific
 * indicator, use expandableListPreferredChildIndicatorLeft.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:expandableListPreferredItemIndicatorLeft
 */

public static final int Theme_expandableListPreferredItemIndicatorLeft = 32; // 0x20

/**
 * <p>
 * @attr description
 * The preferred right bound for an expandable list item's indicator. For a child-specific
 * indicator, use expandableListPreferredChildIndicatorRight.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:expandableListPreferredItemIndicatorRight
 */

public static final int Theme_expandableListPreferredItemIndicatorRight = 33; // 0x21

/**
 * <p>
 * @attr description
 * The preferred left padding for an expandable list item (for child-specific layouts,
 * use expandableListPreferredChildPaddingLeft). This takes into account
 * the indicator that will be shown to next to the item.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:expandableListPreferredItemPaddingLeft
 */

public static final int Theme_expandableListPreferredItemPaddingLeft = 30; // 0x1e

/**
 * <p>
 * @attr description
 * Default ExpandableListView style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:expandableListViewStyle
 */

public static final int Theme_expandableListViewStyle = 56; // 0x38

/**
 * <p>
 * @attr description
 * ExpandableListView with white background.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:expandableListViewWhiteStyle
 */

public static final int Theme_expandableListViewWhiteStyle = 124; // 0x7c

/**
 * <p>
 * @attr description
 * Position of the fast scroll index overlay window.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>aboveThumb</td><td>2</td><td></td></tr>
 * <tr><td>atThumb</td><td>1</td><td></td></tr>
 * <tr><td>floating</td><td>0</td><td></td></tr>
 * </table>
 *
 * @attr name android:fastScrollOverlayPosition
 */

public static final int Theme_fastScrollOverlayPosition = 173; // 0xad

/**
 * <p>
 * @attr description
 * Drawable to use as the fast scroll index preview window background
 * when shown on the left.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:fastScrollPreviewBackgroundLeft
 */

public static final int Theme_fastScrollPreviewBackgroundLeft = 170; // 0xaa

/**
 * <p>
 * @attr description
 * Drawable to use as the fast scroll index preview window background
 * when shown on the right.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:fastScrollPreviewBackgroundRight
 */

public static final int Theme_fastScrollPreviewBackgroundRight = 171; // 0xab

/**
 * <p>
 * @attr description
 * Text color for the fast scroll index overlay. Make sure it
 * plays nicely with fastScrollPreviewBackground[Left|Right].
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:fastScrollTextColor
 */

public static final int Theme_fastScrollTextColor = 181; // 0xb5

/**
 * <p>
 * @attr description
 * Drawable to use as the fast scroll thumb.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:fastScrollThumbDrawable
 */

public static final int Theme_fastScrollThumbDrawable = 169; // 0xa9

/**
 * <p>
 * @attr description
 * Drawable to use as the track for the fast scroll thumb.
 * This may be null.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:fastScrollTrackDrawable
 */

public static final int Theme_fastScrollTrackDrawable = 172; // 0xac

/**
 * <p>
 * @attr description
 * Icon that should be used to indicate that an app is waiting for a fingerprint scan.
 * This should be used whenever an app is requesting the user to place a finger on the
 * fingerprint sensor. It can be combined with other drawables such as colored circles, so
 * the appearance matches the branding of the app requesting the fingerprint scan.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:fingerprintAuthDrawable
 */

public static final int Theme_fingerprintAuthDrawable = 264; // 0x108

/**
 * <p>
 * @attr description
 * <p>Whether or not the force dark feature is allowed to be applied to this theme.
 * <p>Setting this to false will disable the auto-dark feature on everything this
 * theme is applied to along with anything drawn by any children of views using
 * this theme.
 * <p>Setting this to true will allow this view to be automatically made dark, however
 * a value of 'true' will not override any 'false' value in its parent chain nor will
 * it prevent any 'false' in any of its children.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:forceDarkAllowed
 */

public static final int Theme_forceDarkAllowed = 278; // 0x116

/**
 * <p>
 * @attr description
 * The preferred background for gallery items. This should be set
 * as the background of any Views you provide from the Adapter.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:galleryItemBackground
 */

public static final int Theme_galleryItemBackground = 28; // 0x1c

/**
 * <p>
 * @attr description
 * Default Gallery style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:galleryStyle
 */

public static final int Theme_galleryStyle = 57; // 0x39

/**
 * <p>
 * @attr description
 * Default GridView style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:gridViewStyle
 */

public static final int Theme_gridViewStyle = 58; // 0x3a

/**
 * <p>
 * @attr description
 * Specifies a drawable to use for the 'home as up' indicator.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:homeAsUpIndicator
 */

public static final int Theme_homeAsUpIndicator = 156; // 0x9c

/**
 * <p>
 * @attr description
 * Default HorizontalScrollView style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:horizontalScrollViewStyle
 */

public static final int Theme_horizontalScrollViewStyle = 179; // 0xb3

/**
 * <p>
 * @attr description
 * The style resource to use for an ImageButton.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:imageButtonStyle
 */

public static final int Theme_imageButtonStyle = 59; // 0x3b

/**
 * <p>
 * @attr description
 * The style resource to use for an ImageButton that is an image well.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:imageWellStyle
 */

public static final int Theme_imageWellStyle = 60; // 0x3c

/**
 * <p>
 * @attr description
 * Specifies that a theme has a light background with dark text on top.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:isLightTheme
 */

public static final int Theme_isLightTheme = 279; // 0x117

/**
 * <p>
 * @attr description
 * Drawable used as a background for selected list items.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:listChoiceBackgroundIndicator
 */

public static final int Theme_listChoiceBackgroundIndicator = 140; // 0x8c

/**
 * <p>
 * @attr description
 * Drawable to use for multiple choice indicators.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:listChoiceIndicatorMultiple
 */

public static final int Theme_listChoiceIndicatorMultiple = 104; // 0x68

/**
 * <p>
 * @attr description
 * Drawable to use for single choice indicators.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:listChoiceIndicatorSingle
 */

public static final int Theme_listChoiceIndicatorSingle = 103; // 0x67

/**
 * <p>
 * @attr description
 * The drawable for the list divider.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:listDivider
 */

public static final int Theme_listDivider = 102; // 0x66

/**
 * <p>
 * @attr description
 * The list divider used in alert dialogs.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:listDividerAlertDialog
 */

public static final int Theme_listDividerAlertDialog = 151; // 0x97

/**
 * <p>
 * @attr description
 * Default menu-style ListView style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:listMenuViewStyle
 */

public static final int Theme_listMenuViewStyle = 265; // 0x109

/**
 * <p>
 * @attr description
 * Default ListPopupWindow style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:listPopupWindowStyle
 */

public static final int Theme_listPopupWindowStyle = 147; // 0x93

/**
 * <p>
 * @attr description
 * The preferred list item height.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:listPreferredItemHeight
 */

public static final int Theme_listPreferredItemHeight = 29; // 0x1d

/**
 * <p>
 * @attr description
 * A larger, more robust list item height.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:listPreferredItemHeightLarge
 */

public static final int Theme_listPreferredItemHeightLarge = 193; // 0xc1

/**
 * <p>
 * @attr description
 * A smaller, sleeker list item height.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:listPreferredItemHeightSmall
 */

public static final int Theme_listPreferredItemHeightSmall = 194; // 0xc2

/**
 * <p>
 * @attr description
 * The preferred padding along the end edge of list items.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:listPreferredItemPaddingEnd
 */

public static final int Theme_listPreferredItemPaddingEnd = 212; // 0xd4

/**
 * <p>
 * @attr description
 * The preferred padding along the left edge of list items.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:listPreferredItemPaddingLeft
 */

public static final int Theme_listPreferredItemPaddingLeft = 208; // 0xd0

/**
 * <p>
 * @attr description
 * The preferred padding along the right edge of list items.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:listPreferredItemPaddingRight
 */

public static final int Theme_listPreferredItemPaddingRight = 209; // 0xd1

/**
 * <p>
 * @attr description
 * The preferred padding along the start edge of list items.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:listPreferredItemPaddingStart
 */

public static final int Theme_listPreferredItemPaddingStart = 211; // 0xd3

/**
 * <p>
 * @attr description
 * TextView style for list separators.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:listSeparatorTextViewStyle
 */

public static final int Theme_listSeparatorTextViewStyle = 96; // 0x60

/**
 * <p>
 * @attr description
 * Default ListView style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:listViewStyle
 */

public static final int Theme_listViewStyle = 61; // 0x3d

/**
 * <p>
 * @attr description
 * ListView with white background.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:listViewWhiteStyle
 */

public static final int Theme_listViewWhiteStyle = 62; // 0x3e

/**
 * <p>
 * @attr description
 * Default MapView style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:mapViewStyle
 */

public static final int Theme_mapViewStyle = 82; // 0x52

/**
 * <p>
 * @attr description
 * Default style for the MediaRouteButton widget.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:mediaRouteButtonStyle
 */

public static final int Theme_mediaRouteButtonStyle = 210; // 0xd2

/**
 * <p>
 * @attr description
 * NumberPicker style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:numberPickerStyle
 */

public static final int Theme_numberPickerStyle = 270; // 0x10e

/**
 * <p>
 * @attr description
 * The background of a panel when it is inset from the left and right edges of the screen.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:panelBackground
 */

public static final int Theme_panelBackground = 46; // 0x2e

/**
 * <p>
 * @attr description
 * Color that matches (as closely as possible) the panel background.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:panelColorBackground
 */

public static final int Theme_panelColorBackground = 49; // 0x31

/**
 * <p>
 * @attr description
 * Default color of foreground panel imagery.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:panelColorForeground
 */

public static final int Theme_panelColorForeground = 48; // 0x30

/**
 * <p>
 * @attr description
 * The background of a panel when it extends to the left and right edges of the screen.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:panelFullBackground
 */

public static final int Theme_panelFullBackground = 47; // 0x2f

/**
 * <p>
 * @attr description
 * Default appearance of panel text.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:panelTextAppearance
 */

public static final int Theme_panelTextAppearance = 50; // 0x32

/**
 * <p>
 * @attr description
 * Default PopupMenu style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:popupMenuStyle
 */

public static final int Theme_popupMenuStyle = 148; // 0x94

/**
 * <p>
 * @attr description
 * Default PopupWindow style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:popupWindowStyle
 */

public static final int Theme_popupWindowStyle = 63; // 0x3f

/**
 * <p>
 * @attr description
 * Default style for PreferenceCategory.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:preferenceCategoryStyle
 */

public static final int Theme_preferenceCategoryStyle = 84; // 0x54

/**
 * <p>
 * @attr description
 * Default style for Headers pane in PreferenceActivity.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:preferenceFragmentStyle
 */

public static final int Theme_preferenceFragmentStyle = 269; // 0x10d

/**
 * <p>
 * @attr description
 * Default style for informational Preference.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:preferenceInformationStyle
 */

public static final int Theme_preferenceInformationStyle = 85; // 0x55

/**
 * <p>
 * @attr description
 * The preference layout that has the child/tabbed effect.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:preferenceLayoutChild
 */

public static final int Theme_preferenceLayoutChild = 92; // 0x5c

/**
 * <p>
 * @attr description
 * Default style for PreferenceScreen.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:preferenceScreenStyle
 */

public static final int Theme_preferenceScreenStyle = 83; // 0x53

/**
 * <p>
 * @attr description
 * Default style for Preference.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:preferenceStyle
 */

public static final int Theme_preferenceStyle = 86; // 0x56

/**
 * <p>
 * @attr description
 * Theme to use for presentations spawned from this theme.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:presentationTheme
 */

public static final int Theme_presentationTheme = 213; // 0xd5

/**
 * <p>
 * @attr description
 * The alpha applied to the foreground color to create the primary text color.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:primaryContentAlpha
 */

public static final int Theme_primaryContentAlpha = 273; // 0x111

/**
 * <p>
 * @attr description
 * Default ProgressBar style. This is a medium circular progress bar.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:progressBarStyle
 */

public static final int Theme_progressBarStyle = 64; // 0x40

/**
 * <p>
 * @attr description
 * Horizontal ProgressBar style. This is a horizontal progress bar.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:progressBarStyleHorizontal
 */

public static final int Theme_progressBarStyleHorizontal = 65; // 0x41

/**
 * <p>
 * @attr description
 * Inverse ProgressBar style. This is a medium circular progress bar.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:progressBarStyleInverse
 */

public static final int Theme_progressBarStyleInverse = 110; // 0x6e

/**
 * <p>
 * @attr description
 * Large ProgressBar style. This is a large circular progress bar.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:progressBarStyleLarge
 */

public static final int Theme_progressBarStyleLarge = 67; // 0x43

/**
 * <p>
 * @attr description
 * Large inverse ProgressBar style. This is a large circular progress bar.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:progressBarStyleLargeInverse
 */

public static final int Theme_progressBarStyleLargeInverse = 112; // 0x70

/**
 * <p>
 * @attr description
 * Small ProgressBar style. This is a small circular progress bar.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:progressBarStyleSmall
 */

public static final int Theme_progressBarStyleSmall = 66; // 0x42

/**
 * <p>
 * @attr description
 * Small inverse ProgressBar style. This is a small circular progress bar.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:progressBarStyleSmallInverse
 */

public static final int Theme_progressBarStyleSmallInverse = 111; // 0x6f

/**
 * <p>
 * @attr description
 * Small ProgressBar in title style. This is a small circular progress bar that will be placed in title bars.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:progressBarStyleSmallTitle
 */

public static final int Theme_progressBarStyleSmallTitle = 98; // 0x62

/**
 * <p>
 * @attr description
 * Default quickcontact badge style with large quickcontact window.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:quickContactBadgeStyleSmallWindowLarge
 */

public static final int Theme_quickContactBadgeStyleSmallWindowLarge = 123; // 0x7b

/**
 * <p>
 * @attr description
 * Default quickcontact badge style with medium quickcontact window.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:quickContactBadgeStyleSmallWindowMedium
 */

public static final int Theme_quickContactBadgeStyleSmallWindowMedium = 122; // 0x7a

/**
 * <p>
 * @attr description
 * Default quickcontact badge style with small quickcontact window.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:quickContactBadgeStyleSmallWindowSmall
 */

public static final int Theme_quickContactBadgeStyleSmallWindowSmall = 121; // 0x79

/**
 * <p>
 * @attr description
 * Default quickcontact badge style with large quickcontact window.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:quickContactBadgeStyleWindowLarge
 */

public static final int Theme_quickContactBadgeStyleWindowLarge = 120; // 0x78

/**
 * <p>
 * @attr description
 * Default quickcontact badge style with medium quickcontact window.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:quickContactBadgeStyleWindowMedium
 */

public static final int Theme_quickContactBadgeStyleWindowMedium = 119; // 0x77

/**
 * <p>
 * @attr description
 * Default quickcontact badge style with small quickcontact window.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:quickContactBadgeStyleWindowSmall
 */

public static final int Theme_quickContactBadgeStyleWindowSmall = 118; // 0x76

/**
 * <p>
 * @attr description
 * Default RadioButton style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:radioButtonStyle
 */

public static final int Theme_radioButtonStyle = 71; // 0x47

/**
 * <p>
 * @attr description
 * Default RatingBar style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:ratingBarStyle
 */

public static final int Theme_ratingBarStyle = 69; // 0x45

/**
 * <p>
 * @attr description
 * Indicator RatingBar style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:ratingBarStyleIndicator
 */

public static final int Theme_ratingBarStyleIndicator = 99; // 0x63

/**
 * <p>
 * @attr description
 * Small indicator RatingBar style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:ratingBarStyleSmall
 */

public static final int Theme_ratingBarStyleSmall = 70; // 0x46

/**
 * <p>
 * @attr description
 * Default style for RingtonePreference.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:ringtonePreferenceStyle
 */

public static final int Theme_ringtonePreferenceStyle = 91; // 0x5b

/**
 * <p>
 * @attr description
 * Default ScrollView style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:scrollViewStyle
 */

public static final int Theme_scrollViewStyle = 72; // 0x48

/**
 * <p>
 * @attr description
 * Style for the search query widget.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:searchViewStyle
 */

public static final int Theme_searchViewStyle = 244; // 0xf4

/**
 * <p>
 * @attr description
 * The alpha applied to the foreground color to create the secondary text color.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:secondaryContentAlpha
 */

public static final int Theme_secondaryContentAlpha = 274; // 0x112

/**
 * <p>
 * @attr description
 * Default SeekBar style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:seekBarStyle
 */

public static final int Theme_seekBarStyle = 68; // 0x44

/**
 * <p>
 * @attr description
 * Style for segmented buttons - a container that houses several buttons
 * with the appearance of a singel button broken into segments.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:segmentedButtonStyle
 */

public static final int Theme_segmentedButtonStyle = 168; // 0xa8

/**
 * <p>
 * @attr description
 * Background drawable for bordered standalone items that need focus/pressed states.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:selectableItemBackground
 */

public static final int Theme_selectableItemBackground = 157; // 0x9d

/**
 * <p>
 * @attr description
 * Background drawable for borderless standalone items that need focus/pressed states.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:selectableItemBackgroundBorderless
 */

public static final int Theme_selectableItemBackgroundBorderless = 239; // 0xef

/**
 * <p>
 * @attr description
 * Default style for spinner drop down items.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:spinnerDropDownItemStyle
 */

public static final int Theme_spinnerDropDownItemStyle = 79; // 0x4f

/**
 * <p>
 * @attr description
 * Default spinner item style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:spinnerItemStyle
 */

public static final int Theme_spinnerItemStyle = 81; // 0x51

/**
 * <p>
 * @attr description
 * Default Spinner style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:spinnerStyle
 */

public static final int Theme_spinnerStyle = 73; // 0x49

/**
 * <p>
 * @attr description
 * Alpha value of the spot shadow projected by elevated views, between 0 and 1.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:spotShadowAlpha
 */

public static final int Theme_spotShadowAlpha = 259; // 0x103

/**
 * <p>
 * @attr description
 * Default StackView style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:stackViewStyle
 */

public static final int Theme_stackViewStyle = 236; // 0xec

/**
 * <p>
 * @attr description
 * Default Star style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:starStyle
 */

public static final int Theme_starStyle = 74; // 0x4a

/**
 * <p>
 * @attr description
 * Default style for switch preferences.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:switchPreferenceStyle
 */

public static final int Theme_switchPreferenceStyle = 189; // 0xbd

/**
 * <p>
 * @attr description
 * Default style for the Switch widget.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:switchStyle
 */

public static final int Theme_switchStyle = 237; // 0xed

/**
 * <p>
 * @attr description
 * Default TabWidget style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:tabWidgetStyle
 */

public static final int Theme_tabWidgetStyle = 75; // 0x4b

/**
 * <p>
 * @attr description
 * Default appearance of text: color, typeface, size, and style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textAppearance
 */

public static final int Theme_textAppearance = 4; // 0x4

/**
 * <p>
 * @attr description
 * Text color, typeface, size, and style for the text inside of a button.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textAppearanceButton
 */

public static final int Theme_textAppearanceButton = 95; // 0x5f

/**
 * <p>
 * @attr description
 * Default appearance of text against an inverted background:
 * color, typeface, size, and style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textAppearanceInverse
 */

public static final int Theme_textAppearanceInverse = 5; // 0x5

/**
 * <p>
 * @attr description
 * Text color, typeface, size, and style for "large" text. Defaults to primary text color.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textAppearanceLarge
 */

public static final int Theme_textAppearanceLarge = 16; // 0x10

/**
 * <p>
 * @attr description
 * Text color, typeface, size, and style for "large" inverse text. Defaults to primary inverse text color.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textAppearanceLargeInverse
 */

public static final int Theme_textAppearanceLargeInverse = 19; // 0x13

/**
 * <p>
 * @attr description
 * Text color, typeface, size, and style for the text inside of a popup menu.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textAppearanceLargePopupMenu
 */

public static final int Theme_textAppearanceLargePopupMenu = 149; // 0x95

/**
 * <p>
 * @attr description
 * The preferred TextAppearance for the primary text of list items.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textAppearanceListItem
 */

public static final int Theme_textAppearanceListItem = 206; // 0xce

/**
 * <p>
 * @attr description
 * The preferred TextAppearance for the secondary text of list items.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textAppearanceListItemSecondary
 */

public static final int Theme_textAppearanceListItemSecondary = 226; // 0xe2

/**
 * <p>
 * @attr description
 * The preferred TextAppearance for the primary text of small list items.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textAppearanceListItemSmall
 */

public static final int Theme_textAppearanceListItemSmall = 207; // 0xcf

/**
 * <p>
 * @attr description
 * Text color, typeface, size, and style for "medium" text. Defaults to primary text color.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textAppearanceMedium
 */

public static final int Theme_textAppearanceMedium = 17; // 0x11

/**
 * <p>
 * @attr description
 * Text color, typeface, size, and style for "medium" inverse text. Defaults to primary inverse text color.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textAppearanceMediumInverse
 */

public static final int Theme_textAppearanceMediumInverse = 20; // 0x14

/**
 * <p>
 * @attr description
 * Text color, typeface, size, and style for header text inside of a popup menu.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textAppearancePopupMenuHeader
 */

public static final int Theme_textAppearancePopupMenuHeader = 267; // 0x10b

/**
 * <p>
 * @attr description
 * Text color, typeface, size, and style for system search result subtitle. Defaults to primary inverse text color.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textAppearanceSearchResultSubtitle
 */

public static final int Theme_textAppearanceSearchResultSubtitle = 115; // 0x73

/**
 * <p>
 * @attr description
 * Text color, typeface, size, and style for system search result title. Defaults to primary inverse text color.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textAppearanceSearchResultTitle
 */

public static final int Theme_textAppearanceSearchResultTitle = 116; // 0x74

/**
 * <p>
 * @attr description
 * Text color, typeface, size, and style for "small" text. Defaults to secondary text color.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textAppearanceSmall
 */

public static final int Theme_textAppearanceSmall = 18; // 0x12

/**
 * <p>
 * @attr description
 * Text color, typeface, size, and style for "small" inverse text. Defaults to secondary inverse text color.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textAppearanceSmallInverse
 */

public static final int Theme_textAppearanceSmallInverse = 21; // 0x15

/**
 * <p>
 * @attr description
 * Text color, typeface, size, and style for small text inside of a popup menu.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textAppearanceSmallPopupMenu
 */

public static final int Theme_textAppearanceSmallPopupMenu = 150; // 0x96

/**
 * <p>
 * @attr description
 * Drawable to use for check marks.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textCheckMark
 */

public static final int Theme_textCheckMark = 22; // 0x16

/**
 * <p>This symbol is the offset where the {@link android.R.attr#textCheckMarkInverse}
 * attribute's value can be found in the {@link #Theme} array.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textCheckMarkInverse
 */

public static final int Theme_textCheckMarkInverse = 23; // 0x17

/**
 * <p>
 * @attr description
 * Color of list item text in alert dialogs.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:textColorAlertDialogListItem
 */

public static final int Theme_textColorAlertDialogListItem = 152; // 0x98

/**
 * <p>
 * @attr description
 * Color of highlighted text, when used in a light theme.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:textColorHighlightInverse
 */

public static final int Theme_textColorHighlightInverse = 175; // 0xaf

/**
 * <p>
 * @attr description
 * Inverse hint text color.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:textColorHintInverse
 */

public static final int Theme_textColorHintInverse = 15; // 0xf

/**
 * <p>
 * @attr description
 * Color of link text (URLs), when used in a light theme.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:textColorLinkInverse
 */

public static final int Theme_textColorLinkInverse = 176; // 0xb0

/**
 * <p>
 * @attr description
 * The most prominent text color.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:textColorPrimary
 */

public static final int Theme_textColorPrimary = 6; // 0x6

/**
 * <p>
 * @attr description
 * Bright text color. Only differentiates based on the disabled state.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:textColorPrimaryDisableOnly
 */

public static final int Theme_textColorPrimaryDisableOnly = 7; // 0x7

/**
 * <p>
 * @attr description
 * Primary inverse text color, useful for inverted backgrounds.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:textColorPrimaryInverse
 */

public static final int Theme_textColorPrimaryInverse = 9; // 0x9

/**
 * <p>
 * @attr description
 * Bright inverse text color. Only differentiates based on the disabled state.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:textColorPrimaryInverseDisableOnly
 */

public static final int Theme_textColorPrimaryInverseDisableOnly = 113; // 0x71

/**
 * <p>
 * @attr description
 * Bright inverse text color. This does not differentiate the disabled state.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:textColorPrimaryInverseNoDisable
 */

public static final int Theme_textColorPrimaryInverseNoDisable = 13; // 0xd

/**
 * <p>
 * @attr description
 * Bright text color. This does not differentiate the disabled state. As an example,
 * buttons use this since they display the disabled state via the background and not the
 * foreground text color.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:textColorPrimaryNoDisable
 */

public static final int Theme_textColorPrimaryNoDisable = 11; // 0xb

/**
 * <p>
 * @attr description
 * Secondary text color.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:textColorSecondary
 */

public static final int Theme_textColorSecondary = 8; // 0x8

/**
 * <p>
 * @attr description
 * Secondary inverse text color, useful for inverted backgrounds.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:textColorSecondaryInverse
 */

public static final int Theme_textColorSecondaryInverse = 10; // 0xa

/**
 * <p>
 * @attr description
 * Dim inverse text color. This does not differentiate the disabled state.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:textColorSecondaryInverseNoDisable
 */

public static final int Theme_textColorSecondaryInverseNoDisable = 14; // 0xe

/**
 * <p>
 * @attr description
 * Dim text color. This does not differentiate the disabled state.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:textColorSecondaryNoDisable
 */

public static final int Theme_textColorSecondaryNoDisable = 12; // 0xc

/**
 * <p>
 * @attr description
 * Tertiary text color.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:textColorTertiary
 */

public static final int Theme_textColorTertiary = 100; // 0x64

/**
 * <p>
 * @attr description
 * Tertiary inverse text color, useful for inverted backgrounds.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:textColorTertiaryInverse
 */

public static final int Theme_textColorTertiaryInverse = 101; // 0x65

/**
 * <p>
 * @attr description
 * Variation of textEditPasteWindowLayout displayed when the clipboard is empty.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textEditNoPasteWindowLayout
 */

public static final int Theme_textEditNoPasteWindowLayout = 162; // 0xa2

/**
 * <p>
 * @attr description
 * The layout of the view that is displayed on top of the cursor to paste inside a
 * TextEdit field.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textEditPasteWindowLayout
 */

public static final int Theme_textEditPasteWindowLayout = 161; // 0xa1

/**
 * <p>
 * @attr description
 * Variation of textEditSidePasteWindowLayout displayed when the clipboard is empty.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textEditSideNoPasteWindowLayout
 */

public static final int Theme_textEditSideNoPasteWindowLayout = 186; // 0xba

/**
 * <p>
 * @attr description
 * Used instead of textEditPasteWindowLayout when the window is moved on the side of the
 * insertion cursor because it would be clipped if it were positioned on top.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textEditSidePasteWindowLayout
 */

public static final int Theme_textEditSidePasteWindowLayout = 185; // 0xb9

/**
 * <p>
 * @attr description
 * Layout of the TextView item that will populate the suggestion popup window.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textEditSuggestionItemLayout
 */

public static final int Theme_textEditSuggestionItemLayout = 191; // 0xbf

/**
 * <p>
 * @attr description
 * Reference to a drawable that will be used to display a text selection
 * anchor for positioning the cursor within text.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textSelectHandle
 */

public static final int Theme_textSelectHandle = 128; // 0x80

/**
 * <p>
 * @attr description
 * Reference to a drawable that will be used to display a text selection
 * anchor on the left side of a selection region.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textSelectHandleLeft
 */

public static final int Theme_textSelectHandleLeft = 126; // 0x7e

/**
 * <p>
 * @attr description
 * Reference to a drawable that will be used to display a text selection
 * anchor on the right side of a selection region.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textSelectHandleRight
 */

public static final int Theme_textSelectHandleRight = 127; // 0x7f

/**
 * <p>
 * @attr description
 * Reference to a style that will be used for the window containing a text
 * selection anchor.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textSelectHandleWindowStyle
 */

public static final int Theme_textSelectHandleWindowStyle = 129; // 0x81

/**
 * <p>
 * @attr description
 * Reference to a style that will be used for the window containing a list of possible
 * text suggestions in an EditText.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textSuggestionsWindowStyle
 */

public static final int Theme_textSuggestionsWindowStyle = 190; // 0xbe

/**
 * <p>
 * @attr description
 * Default TextView style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:textViewStyle
 */

public static final int Theme_textViewStyle = 76; // 0x4c

/**
 * <p>
 * @attr description
 * The TimePicker dialog theme.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:timePickerDialogTheme
 */

public static final int Theme_timePickerDialogTheme = 250; // 0xfa

/**
 * <p>
 * @attr description
 * The TimePicker style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:timePickerStyle
 */

public static final int Theme_timePickerStyle = 249; // 0xf9

/**
 * <p>
 * @attr description
 * Default Toolbar style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:toolbarStyle
 */

public static final int Theme_toolbarStyle = 251; // 0xfb

/**
 * <p>
 * @attr description
 * Default WebTextView style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:webTextViewStyle
 */

public static final int Theme_webTextViewStyle = 125; // 0x7d

/**
 * <p>
 * @attr description
 * Default WebView style.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:webViewStyle
 */

public static final int Theme_webViewStyle = 77; // 0x4d

/**
 * <p>
 * @attr description
 * Flag indicating whether this window should have an Action Bar
 * in place of the usual title bar.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowActionBar
 */

public static final int Theme_windowActionBar = 130; // 0x82

/**
 * <p>
 * @attr description
 * Flag indicating whether this window's Action Bar should overlay
 * application content. Does nothing if the window would not
 * have an Action Bar.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowActionBarOverlay
 */

public static final int Theme_windowActionBarOverlay = 138; // 0x8a

/**
 * <p>
 * @attr description
 * Flag indicating whether action modes should overlay window content
 * when there is not reserved space for their UI (such as an Action Bar).
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowActionModeOverlay
 */

public static final int Theme_windowActionModeOverlay = 137; // 0x89

/**
 * <p>
 * @attr description
 * Flag indicating whether this window allows Activity Transitions.
 * Corresponds to {@link android.view.Window#FEATURE_ACTIVITY_TRANSITIONS}.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowActivityTransitions
 */

public static final int Theme_windowActivityTransitions = 260; // 0x104

/**
 * <p>
 * @attr description
 * Flag indicating whether this Window's transition should overlap with
 * the exiting transition of the calling Activity. Corresponds to
 * {@link android.view.Window#setAllowEnterTransitionOverlap(boolean)}.
 * The default value is true.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowAllowEnterTransitionOverlap
 */

public static final int Theme_windowAllowEnterTransitionOverlap = 235; // 0xeb

/**
 * <p>
 * @attr description
 * Flag indicating whether this Window's transition should overlap with
 * the exiting transition of the called Activity when the called Activity
 * finishes. Corresponds to
 * {@link android.view.Window#setAllowReturnTransitionOverlap(boolean)}.
 * The default value is true.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowAllowReturnTransitionOverlap
 */

public static final int Theme_windowAllowReturnTransitionOverlap = 234; // 0xea

/**
 * <p>
 * @attr description
 * Reference to a style resource holding
 * the set of window animations to use, which can be
 * any of the attributes defined by
 * {@link android.R.styleable#WindowAnimation}.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:windowAnimationStyle
 */

public static final int Theme_windowAnimationStyle = 93; // 0x5d

/**
 * <p>
 * @attr description
 * Drawable to use as the overall window background.  As of
 * {@link android.os.Build.VERSION_CODES#HONEYCOMB}, this may
 * be a selector that uses state_accelerated to pick a non-solid
 * color when running on devices that can draw such a bitmap
 * with complex compositing on top at 60fps.
 * <p>There are a few special considerations to use when setting this
 * drawable:
 * <ul>
 * <li> This information will be used to infer the pixel format
 * for your window's surface.  If the drawable has any
 * non-opaque pixels, your window will be translucent
 * (32 bpp).
 * <li> If you want to draw the entire background
 * yourself, you should set this drawable to some solid
 * color that closely matches that background (so the
 * system's preview of your window will match), and
 * then in code manually set your window's background to
 * null so it will not be drawn.
 * </ul>
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:windowBackground
 */

public static final int Theme_windowBackground = 36; // 0x24

/**
 * <p>
 * @attr description
 * Drawable to draw selectively within the inset areas when the windowBackground
 * has been set to null. This protects against seeing visual garbage in the
 * surface when the app has not drawn any content into this area. One example is
 * when the user is resizing a window of an activity in multi-window mode.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:windowBackgroundFallback
 */

public static final int Theme_windowBackgroundFallback = 268; // 0x10c

/**
 * <p>
 * @attr description
 * Control whether a container should automatically close itself if
 * the user touches outside of it.  This only applies to activities
 * and dialogs.
 * <p>Note: this attribute will only be respected for applications
 * that are targeting {@link android.os.Build.VERSION_CODES#HONEYCOMB}
 * or later.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowCloseOnTouchOutside
 */

public static final int Theme_windowCloseOnTouchOutside = 182; // 0xb6

/**
 * <p>
 * @attr description
 * This Drawable is overlaid over the foreground of the Window's content area, usually
 * to place a shadow below the title.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:windowContentOverlay
 */

public static final int Theme_windowContentOverlay = 41; // 0x29

/**
 * <p>
 * @attr description
 * Reference to a TransitionManager XML resource defining the desired
 * transitions between different window content.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:windowContentTransitionManager
 */

public static final int Theme_windowContentTransitionManager = 220; // 0xdc

/**
 * <p>
 * @attr description
 * Flag indicating whether this window requests that content changes be performed
 * as scene changes with transitions. Corresponds to
 * {@link android.view.Window#FEATURE_CONTENT_TRANSITIONS}.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowContentTransitions
 */

public static final int Theme_windowContentTransitions = 219; // 0xdb

/**
 * <p>
 * @attr description
 * Flag allowing you to disable the splash screen for a window. The default value is
 * false; if set to true, the system can never use the window's theme to show a splash
 * screen before your actual instance is shown to the user.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowDisablePreview
 */

public static final int Theme_windowDisablePreview = 107; // 0x6b

/**
 * <p>
 * @attr description
 * Flag indicating that this window should allow touches to be split
 * across other windows that also support split touch.
 * The default value is true for applications with a targetSdkVersion
 * of Honeycomb or newer; false otherwise.
 * When this flag is false, the first pointer that goes down determines
 * the window to which all subsequent touches go until all pointers go up.
 * When this flag is true, each pointer (not necessarily the first) that
 * goes down determines the window to which all subsequent touches of that
 * pointer will go until that pointers go up thereby enabling touches
 * with multiple pointers to be split across multiple windows.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowEnableSplitTouch
 */

public static final int Theme_windowEnableSplitTouch = 163; // 0xa3

/**
 * <p>
 * @attr description
 * Reference to a Transition XML resource defining the desired Transition
 * used to move Views into the initial Window's content Scene. Corresponds to
 * {@link android.view.Window#setEnterTransition(android.transition.Transition)}.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:windowEnterTransition
 */

public static final int Theme_windowEnterTransition = 230; // 0xe6

/**
 * <p>
 * @attr description
 * Reference to a Transition XML resource defining the desired Transition
 * used to move Views out of the Window's content Scene when launching a new Activity.
 * Corresponds to
 * {@link android.view.Window#setExitTransition(android.transition.Transition)}.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:windowExitTransition
 */

public static final int Theme_windowExitTransition = 231; // 0xe7

/**
 * <p>
 * @attr description
 * Drawable to use as a frame around the window.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:windowFrame
 */

public static final int Theme_windowFrame = 37; // 0x25

/**
 * <p>
 * @attr description
 * Flag indicating whether this window should fill the entire screen.  Corresponds
 * to {@link android.view.WindowManager.LayoutParams#FLAG_FULLSCREEN}.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowFullscreen
 */

public static final int Theme_windowFullscreen = 97; // 0x61

/**
 * <p>
 * @attr description
 * Flag indicating whether this is a floating window.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowIsFloating
 */

public static final int Theme_windowIsFloating = 39; // 0x27

/**
 * <p>
 * @attr description
 * Flag indicating whether this is a translucent window. If this attribute is unset (but
 * not if set to false), the window might still be considered translucent, if
 * windowSwipeToDismiss is set to true.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowIsTranslucent
 */

public static final int Theme_windowIsTranslucent = 40; // 0x28

/**
 * <p>
 * @attr description
 * Flag indicating that this window should not be displayed at all.
 * The default value is false; if set to true, and this window is
 * the main window of an Activity, then it will never actually
 * be added to the window manager.  This means that your activity
 * must immediately quit without waiting for user interaction,
 * because there will be no such interaction coming.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowNoDisplay
 */

public static final int Theme_windowNoDisplay = 105; // 0x69

/**
 * <p>
 * @attr description
 * Flag indicating whether there should be no title on this window.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowNoTitle
 */

public static final int Theme_windowNoTitle = 38; // 0x26

/**
 * <p>
 * @attr description
 * Flag indicating whether this window should extend into overscan region.  Corresponds
 * to {@link android.view.WindowManager.LayoutParams#FLAG_LAYOUT_IN_OVERSCAN}.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowOverscan
 */

public static final int Theme_windowOverscan = 215; // 0xd7

/**
 * <p>
 * @attr description
 * Reference to a Transition XML resource defining the desired Transition
 * used to move Views in to the scene when returning from a previously-started Activity.
 * Corresponds to
 * {@link android.view.Window#setReenterTransition(android.transition.Transition)}.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:windowReenterTransition
 */

public static final int Theme_windowReenterTransition = 254; // 0xfe

/**
 * <p>
 * @attr description
 * Reference to a Transition XML resource defining the desired Transition
 * used to move Views out of the scene when the Window is
 * preparing to close. Corresponds to
 * {@link android.view.Window#setReturnTransition(android.transition.Transition)}.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:windowReturnTransition
 */

public static final int Theme_windowReturnTransition = 253; // 0xfd

/**
 * <p>
 * @attr description
 * Reference to a Transition XML resource defining the desired Transition
 * used to move shared elements transferred into the Window's initial content Scene.
 * Corresponds to {@link android.view.Window#setSharedElementEnterTransition(
 * android.transition.Transition)}.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:windowSharedElementEnterTransition
 */

public static final int Theme_windowSharedElementEnterTransition = 232; // 0xe8

/**
 * <p>
 * @attr description
 * Reference to a Transition XML resource defining the desired Transition
 * used when starting a new Activity to move shared elements prior to transferring
 * to the called Activity.
 * Corresponds to {@link android.view.Window#setSharedElementExitTransition(
 * android.transition.Transition)}.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:windowSharedElementExitTransition
 */

public static final int Theme_windowSharedElementExitTransition = 233; // 0xe9

/**
 * <p>
 * @attr description
 * Reference to a Transition XML resource defining the desired Transition
 * used for shared elements transferred back to a calling Activity.
 * Corresponds to {@link android.view.Window#setSharedElementReenterTransition(
 * android.transition.Transition)}.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:windowSharedElementReenterTransition
 */

public static final int Theme_windowSharedElementReenterTransition = 256; // 0x100

/**
 * <p>
 * @attr description
 * Reference to a Transition XML resource defining the desired Transition
 * used to move shared elements transferred back to a calling Activity.
 * Corresponds to {@link android.view.Window#setSharedElementReturnTransition(
 * android.transition.Transition)}.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:windowSharedElementReturnTransition
 */

public static final int Theme_windowSharedElementReturnTransition = 255; // 0xff

/**
 * <p>
 * @attr description
 * Indicates whether or not shared elements should use an overlay
 * during transitions. The default value is true.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowSharedElementsUseOverlay
 */

public static final int Theme_windowSharedElementsUseOverlay = 257; // 0x101

/**
 * <p>
 * @attr description
 * Flag indicating that this window's background should be the
 * user's current wallpaper.  Corresponds
 * to {@link android.view.WindowManager.LayoutParams#FLAG_SHOW_WALLPAPER}.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowShowWallpaper
 */

public static final int Theme_windowShowWallpaper = 114; // 0x72

/**
 * <p>
 * @attr description
 * Defines the default soft input state that this window would
 * like when it is displayed.  Corresponds
 * to {@link android.view.WindowManager.LayoutParams#softInputMode}.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>adjustNothing</td><td>30</td><td>Don't resize <em>or</em> pan the window to make room for the
 * soft input area; the window is never adjusted for it.</td></tr>
 * <tr><td>adjustPan</td><td>20</td><td>Don't resize the window to make room for the soft input area;
 * instead pan the contents of the window as focus moves inside
 * of it so that the user can see what they are typing.  This is
 * generally less desireable than panning because the user may
 * need to close the input area to get at and interact with
 * parts of the window.</td></tr>
 * <tr><td>adjustResize</td><td>10</td><td>Always resize the window: the content area of the window is
 * reduced to make room for the soft input area.</td></tr>
 * <tr><td>adjustUnspecified</td><td>0</td><td>The window resize/pan adjustment has not been specified,
 * the system will automatically select between resize and pan
 * modes, depending
 * on whether the content of the window has any layout views
 * that can scroll their contents.  If there is such a view,
 * then the window will be resized, with the assumption being
 * that the resizeable area can be reduced to make room for
 * the input UI.</td></tr>
 * <tr><td>stateAlwaysHidden</td><td>3</td><td>Always make the soft input area hidden when this window
 * has input focus.</td></tr>
 * <tr><td>stateAlwaysVisible</td><td>5</td><td>Always make the soft input area visible when this window
 * has input focus.</td></tr>
 * <tr><td>stateHidden</td><td>2</td><td>Make the soft input area hidden when normally appropriate
 * (when the user is navigating forward to your window).</td></tr>
 * <tr><td>stateUnchanged</td><td>1</td><td>Leave the soft input window as-is, in whatever state it
 * last was.</td></tr>
 * <tr><td>stateUnspecified</td><td>0</td><td>Not specified, use what the system thinks is best.  This
 * is the default.</td></tr>
 * <tr><td>stateVisible</td><td>4</td><td>Make the soft input area visible when normally appropriate
 * (when the user is navigating forward to your window).</td></tr>
 * </table>
 *
 * @attr name android:windowSoftInputMode
 */

public static final int Theme_windowSoftInputMode = 108; // 0x6c

/**
 * <p>
 * @attr description
 * Flag to indicate that a window can be swiped away to be dismissed.
 * Corresponds to {@link android.view.Window#FEATURE_SWIPE_TO_DISMISS}. It will also
 * dynamically change translucency of the window, if the windowIsTranslucent is not set.
 * If windowIsTranslucent is set (to either true or false) it will obey that setting.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowSwipeToDismiss
 */

public static final int Theme_windowSwipeToDismiss = 218; // 0xda

/**
 * <p>
 * @attr description
 * The style resource to use for a window's title area.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:windowTitleBackgroundStyle
 */

public static final int Theme_windowTitleBackgroundStyle = 44; // 0x2c

/**
 * <p>
 * @attr description
 * The style resource to use for a window's title bar height.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:windowTitleSize
 */

public static final int Theme_windowTitleSize = 42; // 0x2a

/**
 * <p>
 * @attr description
 * The style resource to use for a window's title text.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:windowTitleStyle
 */

public static final int Theme_windowTitleStyle = 43; // 0x2b

/**
 * <p>
 * @attr description
 * The duration, in milliseconds, of the window background fade duration
 * when transitioning into or away from an Activity when called with an
 * Activity Transition. Corresponds to
 * {@link android.view.Window#setTransitionBackgroundFadeDuration(long)}.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:windowTransitionBackgroundFadeDuration
 */

public static final int Theme_windowTransitionBackgroundFadeDuration = 240; // 0xf0

/**
 * <p>
 * @attr description
 * Flag indicating whether this window requests a translucent navigation bar.  Corresponds
 * to {@link android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_NAVIGATION}.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowTranslucentNavigation
 */

public static final int Theme_windowTranslucentNavigation = 217; // 0xd9

/**
 * <p>
 * @attr description
 * Flag indicating whether this window requests a translucent status bar.  Corresponds
 * to {@link android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_STATUS}.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowTranslucentStatus
 */

public static final int Theme_windowTranslucentStatus = 216; // 0xd8

/**
 * <p>
 * @attr description
 * Default style for YesNoPreference.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:yesNoPreferenceStyle
 */

public static final int Theme_yesNoPreferenceStyle = 88; // 0x58

/**
 * Attributes that can be used with a TimePicker.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #TimePicker_headerBackground android:headerBackground}</code></td><td>Default background for the menu header.</td></tr>
 * <tr><td><code>{@link #TimePicker_headerTimeTextAppearance android:headerTimeTextAppearance}</code></td><td>The text appearance for the time header.</td></tr>
 * <tr><td><code>{@link #TimePicker_headerAmPmTextAppearance android:headerAmPmTextAppearance}</code></td><td>The text appearance for the AM/PM header.</td></tr>
 * <tr><td><code>{@link #TimePicker_numbersTextColor android:numbersTextColor}</code></td><td>The color for the hours/minutes numbers.</td></tr>
 * <tr><td><code>{@link #TimePicker_numbersBackgroundColor android:numbersBackgroundColor}</code></td><td>The background color for the hours/minutes numbers.</td></tr>
 * <tr><td><code>{@link #TimePicker_numbersSelectorColor android:numbersSelectorColor}</code></td><td>The color for the hours/minutes selector.</td></tr>
 * <tr><td><code>{@link #TimePicker_amPmTextColor android:amPmTextColor}</code></td><td>The color for the AM/PM selectors.</td></tr>
 * <tr><td><code>{@link #TimePicker_amPmBackgroundColor android:amPmBackgroundColor}</code></td><td>The background color state list for the AM/PM selectors.</td></tr>
 * <tr><td><code>{@link #TimePicker_timePickerMode android:timePickerMode}</code></td><td>Defines the look of the widget.</td></tr>
 * <tr><td><code>{@link #TimePicker_numbersInnerTextColor android:numbersInnerTextColor}</code></td><td>The color for the inner hours numbers used in 24-hour mode.</td></tr>
 * </table>
 * @see #TimePicker_headerBackground
 * @see #TimePicker_headerTimeTextAppearance
 * @see #TimePicker_headerAmPmTextAppearance
 * @see #TimePicker_numbersTextColor
 * @see #TimePicker_numbersBackgroundColor
 * @see #TimePicker_numbersSelectorColor
 * @see #TimePicker_amPmTextColor
 * @see #TimePicker_amPmBackgroundColor
 * @see #TimePicker_timePickerMode
 * @see #TimePicker_numbersInnerTextColor
 */

public static final int[] TimePicker;
static { TimePicker = new int[0]; }

/**
 * <p>
 * @attr description
 * The background color state list for the AM/PM selectors.
 * {@deprecated Use headerBackground instead.}
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:amPmBackgroundColor
 */

@Deprecated public static final int TimePicker_amPmBackgroundColor = 7; // 0x7

/**
 * <p>
 * @attr description
 * The color for the AM/PM selectors.
 * {@deprecated Use headerTextColor instead.}
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:amPmTextColor
 */

@Deprecated public static final int TimePicker_amPmTextColor = 6; // 0x6

/**
 * <p>
 * @attr description
 * The text appearance for the AM/PM header.
 * @deprecated Use headerTextColor instead.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:headerAmPmTextAppearance
 */

@Deprecated public static final int TimePicker_headerAmPmTextAppearance = 2; // 0x2

/**
 * <p>
 * @attr description
 * The background for the header containing the currently selected time.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:headerBackground
 */

public static final int TimePicker_headerBackground = 0; // 0x0

/**
 * <p>
 * @attr description
 * The text appearance for the time header.
 * @deprecated Use headerTextColor instead.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:headerTimeTextAppearance
 */

@Deprecated public static final int TimePicker_headerTimeTextAppearance = 1; // 0x1

/**
 * <p>
 * @attr description
 * The background color for the hours/minutes numbers.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:numbersBackgroundColor
 */

public static final int TimePicker_numbersBackgroundColor = 4; // 0x4

/**
 * <p>
 * @attr description
 * The color for the inner hours numbers used in 24-hour mode. This
 * should be a color state list where the activated state will be
 * used when the number is active.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:numbersInnerTextColor
 */

public static final int TimePicker_numbersInnerTextColor = 9; // 0x9

/**
 * <p>
 * @attr description
 * The color for the hours/minutes selector.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:numbersSelectorColor
 */

public static final int TimePicker_numbersSelectorColor = 5; // 0x5

/**
 * <p>
 * @attr description
 * The color for the hours/minutes numbers. This should be a color
 * state list where the activated state will be used when the number
 * is active.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:numbersTextColor
 */

public static final int TimePicker_numbersTextColor = 3; // 0x3

/**
 * <p>
 * @attr description
 * Defines the look of the widget. Prior to the L release, the only choice was
 * spinner. As of L, with the Material theme selected, the default layout is clock,
 * but this attribute can be used to force spinner to be used instead.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>clock</td><td>2</td><td>Time picker with clock face to select the time.</td></tr>
 * <tr><td>spinner</td><td>1</td><td>Time picker with spinner controls to select the time.</td></tr>
 * </table>
 *
 * @attr name android:timePickerMode
 */

public static final int TimePicker_timePickerMode = 8; // 0x8

/**
 * Attributes that can be used with a ToggleButton.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #ToggleButton_disabledAlpha android:disabledAlpha}</code></td><td>Default disabled alpha for widgets that set enabled/disabled alpha programmatically.</td></tr>
 * <tr><td><code>{@link #ToggleButton_textOn android:textOn}</code></td><td>The text for the button when it is checked.</td></tr>
 * <tr><td><code>{@link #ToggleButton_textOff android:textOff}</code></td><td>The text for the button when it is not checked.</td></tr>
 * </table>
 * @see #ToggleButton_disabledAlpha
 * @see #ToggleButton_textOn
 * @see #ToggleButton_textOff
 */

public static final int[] ToggleButton;
static { ToggleButton = new int[0]; }

/**
 * <p>
 * @attr description
 * The alpha to apply to the indicator when disabled.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:disabledAlpha
 */

public static final int ToggleButton_disabledAlpha = 0; // 0x0

/**
 * <p>
 * @attr description
 * The text for the button when it is not checked.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:textOff
 */

public static final int ToggleButton_textOff = 2; // 0x2

/**
 * <p>
 * @attr description
 * The text for the button when it is checked.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:textOn
 */

public static final int ToggleButton_textOn = 1; // 0x1

/**
 * Attributes that can be used with a Toolbar.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #Toolbar_gravity android:gravity}</code></td><td>Specifies how an object should position its content, on both the X and Y axes,
 * within its own bounds.</td></tr>
 * <tr><td><code>{@link #Toolbar_title android:title}</code></td><td>The title associated with the item.</td></tr>
 * <tr><td><code>{@link #Toolbar_logo android:logo}</code></td><td>A Drawable resource providing an extended graphical logo for its
 * associated item.</td></tr>
 * <tr><td><code>{@link #Toolbar_subtitle android:subtitle}</code></td><td>Specifies subtitle text used for navigationMode="normal".</td></tr>
 * <tr><td><code>{@link #Toolbar_titleTextAppearance android:titleTextAppearance}</code></td><td></td></tr>
 * <tr><td><code>{@link #Toolbar_subtitleTextAppearance android:subtitleTextAppearance}</code></td><td></td></tr>
 * <tr><td><code>{@link #Toolbar_contentInsetStart android:contentInsetStart}</code></td><td>Minimum inset for content views within a bar.</td></tr>
 * <tr><td><code>{@link #Toolbar_contentInsetEnd android:contentInsetEnd}</code></td><td>Minimum inset for content views within a bar.</td></tr>
 * <tr><td><code>{@link #Toolbar_contentInsetLeft android:contentInsetLeft}</code></td><td>Minimum inset for content views within a bar.</td></tr>
 * <tr><td><code>{@link #Toolbar_contentInsetRight android:contentInsetRight}</code></td><td>Minimum inset for content views within a bar.</td></tr>
 * <tr><td><code>{@link #Toolbar_popupTheme android:popupTheme}</code></td><td>Reference to a theme that should be used to inflate popups
 * shown by widgets in the toolbar.</td></tr>
 * <tr><td><code>{@link #Toolbar_navigationIcon android:navigationIcon}</code></td><td>Icon drawable to use for the navigation button located at
 * the start of the toolbar.</td></tr>
 * <tr><td><code>{@link #Toolbar_navigationContentDescription android:navigationContentDescription}</code></td><td>Text to set as the content description for the navigation button
 * located at the start of the toolbar.</td></tr>
 * <tr><td><code>{@link #Toolbar_collapseContentDescription android:collapseContentDescription}</code></td><td>Text to set as the content description for the collapse button.</td></tr>
 * <tr><td><code>{@link #Toolbar_titleTextColor android:titleTextColor}</code></td><td>A color to apply to the title string.</td></tr>
 * <tr><td><code>{@link #Toolbar_subtitleTextColor android:subtitleTextColor}</code></td><td>A color to apply to the subtitle string.</td></tr>
 * <tr><td><code>{@link #Toolbar_logoDescription android:logoDescription}</code></td><td>A content description string to describe the appearance of the
 * associated logo image.</td></tr>
 * <tr><td><code>{@link #Toolbar_titleMargin android:titleMargin}</code></td><td>Specifies extra space on the left, start, right and end sides
 * of the toolbar's title.</td></tr>
 * <tr><td><code>{@link #Toolbar_titleMarginStart android:titleMarginStart}</code></td><td>Specifies extra space on the start side of the toolbar's title.</td></tr>
 * <tr><td><code>{@link #Toolbar_titleMarginEnd android:titleMarginEnd}</code></td><td>Specifies extra space on the end side of the toolbar's title.</td></tr>
 * <tr><td><code>{@link #Toolbar_titleMarginTop android:titleMarginTop}</code></td><td>Specifies extra space on the top side of the toolbar's title.</td></tr>
 * <tr><td><code>{@link #Toolbar_titleMarginBottom android:titleMarginBottom}</code></td><td>Specifies extra space on the bottom side of the toolbar's title.</td></tr>
 * <tr><td><code>{@link #Toolbar_maxButtonHeight android:maxButtonHeight}</code></td><td></td></tr>
 * <tr><td><code>{@link #Toolbar_buttonGravity android:buttonGravity}</code></td><td></td></tr>
 * <tr><td><code>{@link #Toolbar_collapseIcon android:collapseIcon}</code></td><td>Icon drawable to use for the collapse button.</td></tr>
 * <tr><td><code>{@link #Toolbar_contentInsetStartWithNavigation android:contentInsetStartWithNavigation}</code></td><td>Minimum inset for content views within a bar when a navigation button
 * is present, such as the Up button.</td></tr>
 * <tr><td><code>{@link #Toolbar_contentInsetEndWithActions android:contentInsetEndWithActions}</code></td><td>Minimum inset for content views within a bar when actions from a menu
 * are present.</td></tr>
 * </table>
 * @see #Toolbar_gravity
 * @see #Toolbar_title
 * @see #Toolbar_logo
 * @see #Toolbar_subtitle
 * @see #Toolbar_titleTextAppearance
 * @see #Toolbar_subtitleTextAppearance
 * @see #Toolbar_contentInsetStart
 * @see #Toolbar_contentInsetEnd
 * @see #Toolbar_contentInsetLeft
 * @see #Toolbar_contentInsetRight
 * @see #Toolbar_popupTheme
 * @see #Toolbar_navigationIcon
 * @see #Toolbar_navigationContentDescription
 * @see #Toolbar_collapseContentDescription
 * @see #Toolbar_titleTextColor
 * @see #Toolbar_subtitleTextColor
 * @see #Toolbar_logoDescription
 * @see #Toolbar_titleMargin
 * @see #Toolbar_titleMarginStart
 * @see #Toolbar_titleMarginEnd
 * @see #Toolbar_titleMarginTop
 * @see #Toolbar_titleMarginBottom
 * @see #Toolbar_maxButtonHeight
 * @see #Toolbar_buttonGravity
 * @see #Toolbar_collapseIcon
 * @see #Toolbar_contentInsetStartWithNavigation
 * @see #Toolbar_contentInsetEndWithActions
 */

public static final int[] Toolbar;
static { Toolbar = new int[0]; }

/**
 * Attributes that can be used with a Toolbar_LayoutParams.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #Toolbar_LayoutParams_layout_gravity android:layout_gravity}</code></td><td>Standard gravity constant that a child supplies to its parent.</td></tr>
 * </table>
 * @see #Toolbar_LayoutParams_layout_gravity
 */

public static final int[] Toolbar_LayoutParams;
static { Toolbar_LayoutParams = new int[0]; }

/**
 * <p>
 * @attr description
 * Standard gravity constant that a child supplies to its parent.
 * Defines how the child view should be positioned, on both the X and Y axes, within its enclosing layout.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
 * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
 * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
 * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
 * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the horizontal gravity: a left gravity will clip the right
 * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
 * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the vertical gravity: a top gravity will clip the bottom
 * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
 * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
 * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
 * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
 * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
 * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
 * </table>
 *
 * @attr name android:layout_gravity
 */

public static final int Toolbar_LayoutParams_layout_gravity = 0; // 0x0

/**
 * <p>This symbol is the offset where the {@link android.R.attr#buttonGravity}
 * attribute's value can be found in the {@link #Toolbar} array.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
 * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
 * </table>
 *
 * @attr name android:buttonGravity
 */

public static final int Toolbar_buttonGravity = 23; // 0x17

/**
 * <p>
 * @attr description
 * Text to set as the content description for the collapse button.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:collapseContentDescription
 */

public static final int Toolbar_collapseContentDescription = 13; // 0xd

/**
 * <p>
 * @attr description
 * Icon drawable to use for the collapse button.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:collapseIcon
 */

public static final int Toolbar_collapseIcon = 24; // 0x18

/**
 * <p>
 * @attr description
 * Minimum inset for content views within a bar. Navigation buttons and
 * menu views are excepted. Only valid for some themes and configurations.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:contentInsetEnd
 */

public static final int Toolbar_contentInsetEnd = 7; // 0x7

/**
 * <p>
 * @attr description
 * Minimum inset for content views within a bar when actions from a menu
 * are present. Only valid for some themes and configurations.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:contentInsetEndWithActions
 */

public static final int Toolbar_contentInsetEndWithActions = 26; // 0x1a

/**
 * <p>
 * @attr description
 * Minimum inset for content views within a bar. Navigation buttons and
 * menu views are excepted. Only valid for some themes and configurations.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:contentInsetLeft
 */

public static final int Toolbar_contentInsetLeft = 8; // 0x8

/**
 * <p>
 * @attr description
 * Minimum inset for content views within a bar. Navigation buttons and
 * menu views are excepted. Only valid for some themes and configurations.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:contentInsetRight
 */

public static final int Toolbar_contentInsetRight = 9; // 0x9

/**
 * <p>
 * @attr description
 * Minimum inset for content views within a bar. Navigation buttons and
 * menu views are excepted. Only valid for some themes and configurations.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:contentInsetStart
 */

public static final int Toolbar_contentInsetStart = 6; // 0x6

/**
 * <p>
 * @attr description
 * Minimum inset for content views within a bar when a navigation button
 * is present, such as the Up button. Only valid for some themes and configurations.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:contentInsetStartWithNavigation
 */

public static final int Toolbar_contentInsetStartWithNavigation = 25; // 0x19

/**
 * <p>
 * @attr description
 * Specifies how an object should position its content, on both the X and Y axes,
 * within its own bounds.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
 * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
 * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
 * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
 * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the horizontal gravity: a left gravity will clip the right
 * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
 * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the vertical gravity: a top gravity will clip the bottom
 * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
 * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
 * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
 * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
 * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
 * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
 * </table>
 *
 * @attr name android:gravity
 */

public static final int Toolbar_gravity = 0; // 0x0

/**
 * <p>
 * @attr description
 * Drawable to set as the logo that appears at the starting side of
 * the Toolbar, just after the navigation button.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:logo
 */

public static final int Toolbar_logo = 2; // 0x2

/**
 * <p>
 * @attr description
 * A content description string to describe the appearance of the
 * associated logo image.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:logoDescription
 */

public static final int Toolbar_logoDescription = 16; // 0x10

/**
 * <p>This symbol is the offset where the {@link android.R.attr#maxButtonHeight}
 * attribute's value can be found in the {@link #Toolbar} array.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:maxButtonHeight
 */

public static final int Toolbar_maxButtonHeight = 22; // 0x16

/**
 * <p>
 * @attr description
 * Text to set as the content description for the navigation button
 * located at the start of the toolbar.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:navigationContentDescription
 */

public static final int Toolbar_navigationContentDescription = 12; // 0xc

/**
 * <p>
 * @attr description
 * Icon drawable to use for the navigation button located at
 * the start of the toolbar.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:navigationIcon
 */

public static final int Toolbar_navigationIcon = 11; // 0xb

/**
 * <p>
 * @attr description
 * Reference to a theme that should be used to inflate popups
 * shown by widgets in the toolbar.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:popupTheme
 */

public static final int Toolbar_popupTheme = 10; // 0xa

/**
 * <p>
 * @attr description
 * Specifies subtitle text used for navigationMode="normal".
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:subtitle
 */

public static final int Toolbar_subtitle = 3; // 0x3

/**
 * <p>This symbol is the offset where the {@link android.R.attr#subtitleTextAppearance}
 * attribute's value can be found in the {@link #Toolbar} array.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:subtitleTextAppearance
 */

public static final int Toolbar_subtitleTextAppearance = 5; // 0x5

/**
 * <p>
 * @attr description
 * A color to apply to the subtitle string.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:subtitleTextColor
 */

public static final int Toolbar_subtitleTextColor = 15; // 0xf

/**
 * <p>
 * @attr description
 * The title associated with the item.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:title
 */

public static final int Toolbar_title = 1; // 0x1

/**
 * <p>
 * @attr description
 * Specifies extra space on the left, start, right and end sides
 * of the toolbar's title. Margin values should be positive.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:titleMargin
 */

public static final int Toolbar_titleMargin = 17; // 0x11

/**
 * <p>
 * @attr description
 * Specifies extra space on the bottom side of the toolbar's title.
 * If both this attribute and titleMargin are specified, then this
 * attribute takes precedence. Margin values should be positive.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:titleMarginBottom
 */

public static final int Toolbar_titleMarginBottom = 21; // 0x15

/**
 * <p>
 * @attr description
 * Specifies extra space on the end side of the toolbar's title.
 * If both this attribute and titleMargin are specified, then this
 * attribute takes precedence. Margin values should be positive.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:titleMarginEnd
 */

public static final int Toolbar_titleMarginEnd = 19; // 0x13

/**
 * <p>
 * @attr description
 * Specifies extra space on the start side of the toolbar's title.
 * If both this attribute and titleMargin are specified, then this
 * attribute takes precedence. Margin values should be positive.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:titleMarginStart
 */

public static final int Toolbar_titleMarginStart = 18; // 0x12

/**
 * <p>
 * @attr description
 * Specifies extra space on the top side of the toolbar's title.
 * If both this attribute and titleMargin are specified, then this
 * attribute takes precedence. Margin values should be positive.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:titleMarginTop
 */

public static final int Toolbar_titleMarginTop = 20; // 0x14

/**
 * <p>This symbol is the offset where the {@link android.R.attr#titleTextAppearance}
 * attribute's value can be found in the {@link #Toolbar} array.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:titleTextAppearance
 */

public static final int Toolbar_titleTextAppearance = 4; // 0x4

/**
 * <p>
 * @attr description
 * A color to apply to the title string.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:titleTextColor
 */

public static final int Toolbar_titleTextColor = 14; // 0xe

/**
 * Use specific transition subclass names as the root tag of the XML resource that
 * describes a {@link android.transition.Transition Transition},
 * such as <code>changeBounds</code>, <code>fade</code>, and <code>transitionSet</code>.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #Transition_interpolator android:interpolator}</code></td><td>Sets the acceleration curve for the indeterminate animation.</td></tr>
 * <tr><td><code>{@link #Transition_duration android:duration}</code></td><td>Amount of time (in milliseconds) to display this frame.</td></tr>
 * <tr><td><code>{@link #Transition_startDelay android:startDelay}</code></td><td>Delay in milliseconds before the transition starts.</td></tr>
 * <tr><td><code>{@link #Transition_matchOrder android:matchOrder}</code></td><td>The match order to use for the transition.</td></tr>
 * </table>
 * @see #Transition_interpolator
 * @see #Transition_duration
 * @see #Transition_startDelay
 * @see #Transition_matchOrder
 */

public static final int[] Transition;
static { Transition = new int[0]; }

/**
 * Use <code>transitionManager</code> as the root tag of the XML resource that
 * describes a {@link android.transition.TransitionManager
 * TransitionManager}.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #TransitionManager_fromScene android:fromScene}</code></td><td>The originating scene in this scene change.</td></tr>
 * <tr><td><code>{@link #TransitionManager_toScene android:toScene}</code></td><td>The destination scene in this scene change.</td></tr>
 * <tr><td><code>{@link #TransitionManager_transition android:transition}</code></td><td>The id of a transition to be used in a particular scene change.</td></tr>
 * </table>
 * @see #TransitionManager_fromScene
 * @see #TransitionManager_toScene
 * @see #TransitionManager_transition
 */

public static final int[] TransitionManager;
static { TransitionManager = new int[0]; }

/**
 * <p>
 * @attr description
 * The originating scene in this scene change.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:fromScene
 */

public static final int TransitionManager_fromScene = 0; // 0x0

/**
 * <p>
 * @attr description
 * The destination scene in this scene change.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:toScene
 */

public static final int TransitionManager_toScene = 1; // 0x1

/**
 * <p>
 * @attr description
 * The id of a transition to be used in a particular scene change.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:transition
 */

public static final int TransitionManager_transition = 2; // 0x2

/**
 * Use <code>set</code> as the root tag of the XML resource that
 * describes a {@link android.transition.TransitionSet
 * TransitionSet} transition.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #TransitionSet_transitionOrdering android:transitionOrdering}</code></td><td></td></tr>
 * </table>
 * @see #TransitionSet_transitionOrdering
 */

public static final int[] TransitionSet;
static { TransitionSet = new int[0]; }

/**
 * <p>This symbol is the offset where the {@link android.R.attr#transitionOrdering}
 * attribute's value can be found in the {@link #TransitionSet} array.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>sequential</td><td>1</td><td>child transitions should be played sequentially, in the same order
 * as the xml.</td></tr>
 * <tr><td>together</td><td>0</td><td>child transitions should be played together.</td></tr>
 * </table>
 *
 * @attr name android:transitionOrdering
 */

public static final int TransitionSet_transitionOrdering = 0; // 0x0

/**
 * Use <code>target</code> as the root tag of the XML resource that
 * describes a {@link android.transition.Transition#addTarget(int)
 * targetId} of a transition. There can be one or more targets inside
 * a <code>targets</code> tag, which is itself inside an appropriate
 * {@link android.R.styleable#Transition Transition} tag.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #TransitionTarget_targetClass android:targetClass}</code></td><td>The class part of the ComponentName to assign to the Intent, as per
 * {@link android.content.Intent#setComponent Intent.setComponent()}.</td></tr>
 * <tr><td><code>{@link #TransitionTarget_targetId android:targetId}</code></td><td>The id of a target on which this transition will animate changes.</td></tr>
 * <tr><td><code>{@link #TransitionTarget_excludeId android:excludeId}</code></td><td>The id of a target to exclude from this transition.</td></tr>
 * <tr><td><code>{@link #TransitionTarget_excludeClass android:excludeClass}</code></td><td>The fully-qualified name of the Class to exclude from this transition.</td></tr>
 * <tr><td><code>{@link #TransitionTarget_targetName android:targetName}</code></td><td>The transitionName of the target on which this transition will animation changes.</td></tr>
 * <tr><td><code>{@link #TransitionTarget_excludeName android:excludeName}</code></td><td>The transitionName of the target to exclude from this transition.</td></tr>
 * </table>
 * @see #TransitionTarget_targetClass
 * @see #TransitionTarget_targetId
 * @see #TransitionTarget_excludeId
 * @see #TransitionTarget_excludeClass
 * @see #TransitionTarget_targetName
 * @see #TransitionTarget_excludeName
 */

public static final int[] TransitionTarget;
static { TransitionTarget = new int[0]; }

/**
 * <p>
 * @attr description
 * The fully-qualified name of the Class to exclude from this transition.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:excludeClass
 */

public static final int TransitionTarget_excludeClass = 3; // 0x3

/**
 * <p>
 * @attr description
 * The id of a target to exclude from this transition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:excludeId
 */

public static final int TransitionTarget_excludeId = 2; // 0x2

/**
 * <p>
 * @attr description
 * The transitionName of the target to exclude from this transition.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:excludeName
 */

public static final int TransitionTarget_excludeName = 5; // 0x5

/**
 * <p>
 * @attr description
 * The fully-qualified name of the Class to include in this transition.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:targetClass
 */

public static final int TransitionTarget_targetClass = 0; // 0x0

/**
 * <p>
 * @attr description
 * The id of a target on which this transition will animate changes.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:targetId
 */

public static final int TransitionTarget_targetId = 1; // 0x1

/**
 * <p>
 * @attr description
 * The transitionName of the target on which this transition will animation changes.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:targetName
 */

public static final int TransitionTarget_targetName = 4; // 0x4

/**
 * <p>
 * @attr description
 * Amount of time (in milliseconds) that the transition should run.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:duration
 */

public static final int Transition_duration = 1; // 0x1

/**
 * <p>
 * @attr description
 * Interpolator to be used in the animations spawned by this transition.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:interpolator
 */

public static final int Transition_interpolator = 0; // 0x0

/**
 * <p>
 * @attr description
 * The match order to use for the transition. This is a comma-separated
 * list of values, containing one or more of the following:
 * id, itemId, name, instance. These correspond to
 * {@link android.transition.Transition#MATCH_ID},
 * {@link android.transition.Transition#MATCH_ITEM_ID},
 * {@link android.transition.Transition#MATCH_NAME}, and
 * {@link android.transition.Transition#MATCH_INSTANCE}, respectively.
 * This corresponds to {@link android.transition.Transition#setMatchOrder(int...)}.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:matchOrder
 */

public static final int Transition_matchOrder = 3; // 0x3

/**
 * <p>
 * @attr description
 * Delay in milliseconds before the transition starts.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:startDelay
 */

public static final int Transition_startDelay = 2; // 0x2

/**
 * Attributes that can be used with a TranslateAnimation.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #TranslateAnimation_fromXDelta android:fromXDelta}</code></td><td></td></tr>
 * <tr><td><code>{@link #TranslateAnimation_toXDelta android:toXDelta}</code></td><td></td></tr>
 * <tr><td><code>{@link #TranslateAnimation_fromYDelta android:fromYDelta}</code></td><td></td></tr>
 * <tr><td><code>{@link #TranslateAnimation_toYDelta android:toYDelta}</code></td><td></td></tr>
 * </table>
 * @see #TranslateAnimation_fromXDelta
 * @see #TranslateAnimation_toXDelta
 * @see #TranslateAnimation_fromYDelta
 * @see #TranslateAnimation_toYDelta
 */

public static final int[] TranslateAnimation;
static { TranslateAnimation = new int[0]; }

/**
 * <p>This symbol is the offset where the {@link android.R.attr#fromXDelta}
 * attribute's value can be found in the {@link #TranslateAnimation} array.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:fromXDelta
 */

public static final int TranslateAnimation_fromXDelta = 0; // 0x0

/**
 * <p>This symbol is the offset where the {@link android.R.attr#fromYDelta}
 * attribute's value can be found in the {@link #TranslateAnimation} array.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:fromYDelta
 */

public static final int TranslateAnimation_fromYDelta = 2; // 0x2

/**
 * <p>This symbol is the offset where the {@link android.R.attr#toXDelta}
 * attribute's value can be found in the {@link #TranslateAnimation} array.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:toXDelta
 */

public static final int TranslateAnimation_toXDelta = 1; // 0x1

/**
 * <p>This symbol is the offset where the {@link android.R.attr#toYDelta}
 * attribute's value can be found in the {@link #TranslateAnimation} array.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:toYDelta
 */

public static final int TranslateAnimation_toYDelta = 3; // 0x3

/**
 * Use <code>tv-input</code> as the root tag of the XML resource that describes a
 * {@link android.media.tv.TvInputService}, which is referenced from its
 * {@link android.media.tv.TvInputService#SERVICE_META_DATA} meta-data entry.
 * Described here are the attributes that can be included in that tag.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #TvInputService_settingsActivity android:settingsActivity}</code></td><td>Component name of an activity that allows the user to modify
 * the settings for this service.</td></tr>
 * <tr><td><code>{@link #TvInputService_setupActivity android:setupActivity}</code></td><td>Component name of an activity that allows the user to set up this service.</td></tr>
 * <tr><td><code>{@link #TvInputService_canRecord android:canRecord}</code></td><td>Attribute whether the TV input service can record programs.</td></tr>
 * <tr><td><code>{@link #TvInputService_tunerCount android:tunerCount}</code></td><td>The number of tuners that the TV input service is associated with.</td></tr>
 * </table>
 * @see #TvInputService_settingsActivity
 * @see #TvInputService_setupActivity
 * @see #TvInputService_canRecord
 * @see #TvInputService_tunerCount
 */

public static final int[] TvInputService;
static { TvInputService = new int[0]; }

/**
 * <p>
 * @attr description
 * Attribute whether the TV input service can record programs. This value can be changed
 * at runtime by calling
 * {@link android.media.tv.TvInputManager#updateTvInputInfo(android.media.tv.TvInputInfo)}.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:canRecord
 */

public static final int TvInputService_canRecord = 2; // 0x2

/**
 * <p>
 * @attr description
 * Component name of an activity that allows the user to modify the settings for this
 * service.
 * {@deprecated This value is deprecated and not used by the framework starting from API
 * level 26. Use setupActivity instead.}
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:settingsActivity
 */

@Deprecated public static final int TvInputService_settingsActivity = 0; // 0x0

/**
 * <p>
 * @attr description
 * Component name of an activity that allows the user to set up this service.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:setupActivity
 */

public static final int TvInputService_setupActivity = 1; // 0x1

/**
 * <p>
 * @attr description
 * The number of tuners that the TV input service is associated with. This value can be
 * changed at runtime by calling
 * {@link android.media.tv.TvInputManager#updateTvInputInfo(android.media.tv.TvInputInfo)}.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:tunerCount
 */

public static final int TvInputService_tunerCount = 3; // 0x3

/**
 * Attributes that can be used with a TwoLineListItem.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #TwoLineListItem_mode android:mode}</code></td><td></td></tr>
 * </table>
 * @see #TwoLineListItem_mode
 */

public static final int[] TwoLineListItem;
static { TwoLineListItem = new int[0]; }

/**
 * <p>This symbol is the offset where the {@link android.R.attr#mode}
 * attribute's value can be found in the {@link #TwoLineListItem} array.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>collapsing</td><td>2</td><td>When selected show both lines, otherwise show only the first line.
 * This is the default mode.</td></tr>
 * <tr><td>oneLine</td><td>1</td><td>Always show only the first line.</td></tr>
 * <tr><td>twoLine</td><td>3</td><td>Always show both lines.</td></tr>
 * </table>
 *
 * @attr name android:mode
 */

public static final int TwoLineListItem_mode = 0; // 0x0

/**
 * Drawable used to draw vector paths.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #VectorDrawable_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * <tr><td><code>{@link #VectorDrawable_tint android:tint}</code></td><td>The tinting color for the image.</td></tr>
 * <tr><td><code>{@link #VectorDrawable_height android:height}</code></td><td>Makes the TextView be exactly this tall.</td></tr>
 * <tr><td><code>{@link #VectorDrawable_width android:width}</code></td><td>Makes the TextView be exactly this wide.</td></tr>
 * <tr><td><code>{@link #VectorDrawable_alpha android:alpha}</code></td><td>alpha property of the view, as a value between 0 (completely transparent) and 1
 * (completely opaque).</td></tr>
 * <tr><td><code>{@link #VectorDrawable_autoMirrored android:autoMirrored}</code></td><td>Indicates if the drawable needs to be mirrored when its layout direction is
 * RTL (right-to-left).</td></tr>
 * <tr><td><code>{@link #VectorDrawable_tintMode android:tintMode}</code></td><td>When a tint color is set, specifies its Porter-Duff blending mode.</td></tr>
 * <tr><td><code>{@link #VectorDrawable_viewportWidth android:viewportWidth}</code></td><td>The width of the canvas the drawing is on.</td></tr>
 * <tr><td><code>{@link #VectorDrawable_viewportHeight android:viewportHeight}</code></td><td>The height of the canvas the drawing is on.</td></tr>
 * <tr><td><code>{@link #VectorDrawable_opticalInsetLeft android:opticalInsetLeft}</code></td><td>Left optical inset.</td></tr>
 * <tr><td><code>{@link #VectorDrawable_opticalInsetTop android:opticalInsetTop}</code></td><td>Top optical inset.</td></tr>
 * <tr><td><code>{@link #VectorDrawable_opticalInsetRight android:opticalInsetRight}</code></td><td>Right optical inset.</td></tr>
 * <tr><td><code>{@link #VectorDrawable_opticalInsetBottom android:opticalInsetBottom}</code></td><td>Bottom optical inset.</td></tr>
 * </table>
 * @see #VectorDrawable_name
 * @see #VectorDrawable_tint
 * @see #VectorDrawable_height
 * @see #VectorDrawable_width
 * @see #VectorDrawable_alpha
 * @see #VectorDrawable_autoMirrored
 * @see #VectorDrawable_tintMode
 * @see #VectorDrawable_viewportWidth
 * @see #VectorDrawable_viewportHeight
 * @see #VectorDrawable_opticalInsetLeft
 * @see #VectorDrawable_opticalInsetTop
 * @see #VectorDrawable_opticalInsetRight
 * @see #VectorDrawable_opticalInsetBottom
 */

public static final int[] VectorDrawable;
static { VectorDrawable = new int[0]; }

/**
 * Defines the clip path used in VectorDrawables.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #VectorDrawableClipPath_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * <tr><td><code>{@link #VectorDrawableClipPath_pathData android:pathData}</code></td><td>The specification of the operations that define the path.</td></tr>
 * </table>
 * @see #VectorDrawableClipPath_name
 * @see #VectorDrawableClipPath_pathData
 */

public static final int[] VectorDrawableClipPath;
static { VectorDrawableClipPath = new int[0]; }

/**
 * <p>
 * @attr description
 * The Name of this path.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int VectorDrawableClipPath_name = 0; // 0x0

/**
 * <p>
 * @attr description
 * The specification of the operations that define the path.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:pathData
 */

public static final int VectorDrawableClipPath_pathData = 1; // 0x1

/**
 * Defines the group used in VectorDrawables.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #VectorDrawableGroup_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * <tr><td><code>{@link #VectorDrawableGroup_pivotX android:pivotX}</code></td><td></td></tr>
 * <tr><td><code>{@link #VectorDrawableGroup_pivotY android:pivotY}</code></td><td></td></tr>
 * <tr><td><code>{@link #VectorDrawableGroup_scaleX android:scaleX}</code></td><td>scale of the view in the x direction.</td></tr>
 * <tr><td><code>{@link #VectorDrawableGroup_scaleY android:scaleY}</code></td><td>scale of the view in the y direction.</td></tr>
 * <tr><td><code>{@link #VectorDrawableGroup_rotation android:rotation}</code></td><td>rotation of the view, in degrees.</td></tr>
 * <tr><td><code>{@link #VectorDrawableGroup_translateX android:translateX}</code></td><td>The amount to translate the group on X coordinate.</td></tr>
 * <tr><td><code>{@link #VectorDrawableGroup_translateY android:translateY}</code></td><td>The amount to translate the group on Y coordinate.</td></tr>
 * </table>
 * @see #VectorDrawableGroup_name
 * @see #VectorDrawableGroup_pivotX
 * @see #VectorDrawableGroup_pivotY
 * @see #VectorDrawableGroup_scaleX
 * @see #VectorDrawableGroup_scaleY
 * @see #VectorDrawableGroup_rotation
 * @see #VectorDrawableGroup_translateX
 * @see #VectorDrawableGroup_translateY
 */

public static final int[] VectorDrawableGroup;
static { VectorDrawableGroup = new int[0]; }

/**
 * <p>
 * @attr description
 * The name of this group.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int VectorDrawableGroup_name = 0; // 0x0

/**
 * <p>
 * @attr description
 * The X coordinate of the center of rotation of a group.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:pivotX
 */

public static final int VectorDrawableGroup_pivotX = 1; // 0x1

/**
 * <p>
 * @attr description
 * The Y coordinate of the center of rotation of a group.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:pivotY
 */

public static final int VectorDrawableGroup_pivotY = 2; // 0x2

/**
 * <p>
 * @attr description
 * The amount to rotate the group.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:rotation
 */

public static final int VectorDrawableGroup_rotation = 5; // 0x5

/**
 * <p>
 * @attr description
 * The amount to scale the group on X coordinate.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:scaleX
 */

public static final int VectorDrawableGroup_scaleX = 3; // 0x3

/**
 * <p>
 * @attr description
 * The amount to scale the group on X coordinate.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:scaleY
 */

public static final int VectorDrawableGroup_scaleY = 4; // 0x4

/**
 * <p>
 * @attr description
 * The amount to translate the group on X coordinate.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:translateX
 */

public static final int VectorDrawableGroup_translateX = 6; // 0x6

/**
 * <p>
 * @attr description
 * The amount to translate the group on Y coordinate.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:translateY
 */

public static final int VectorDrawableGroup_translateY = 7; // 0x7

/**
 * Defines the path used in VectorDrawables.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #VectorDrawablePath_name android:name}</code></td><td>A unique name for the given item.</td></tr>
 * <tr><td><code>{@link #VectorDrawablePath_fillColor android:fillColor}</code></td><td>The color to fill the path if not defined implies no fill.</td></tr>
 * <tr><td><code>{@link #VectorDrawablePath_pathData android:pathData}</code></td><td>The specification of the operations that define the path.</td></tr>
 * <tr><td><code>{@link #VectorDrawablePath_strokeColor android:strokeColor}</code></td><td>The color to stroke the path if not defined implies no stroke.</td></tr>
 * <tr><td><code>{@link #VectorDrawablePath_strokeWidth android:strokeWidth}</code></td><td>The width a path stroke.</td></tr>
 * <tr><td><code>{@link #VectorDrawablePath_trimPathStart android:trimPathStart}</code></td><td>The fraction of the path to trim from the start from 0 to 1.</td></tr>
 * <tr><td><code>{@link #VectorDrawablePath_trimPathEnd android:trimPathEnd}</code></td><td>The fraction of the path to trim from the end from 0 to 1 .</td></tr>
 * <tr><td><code>{@link #VectorDrawablePath_trimPathOffset android:trimPathOffset}</code></td><td>Shift trim region (allows visible region to include the start and end) from 0 to 1.</td></tr>
 * <tr><td><code>{@link #VectorDrawablePath_strokeLineCap android:strokeLineCap}</code></td><td>sets the linecap for a stroked path.</td></tr>
 * <tr><td><code>{@link #VectorDrawablePath_strokeLineJoin android:strokeLineJoin}</code></td><td>sets the lineJoin for a stroked path.</td></tr>
 * <tr><td><code>{@link #VectorDrawablePath_strokeMiterLimit android:strokeMiterLimit}</code></td><td>sets the Miter limit for a stroked path.</td></tr>
 * <tr><td><code>{@link #VectorDrawablePath_strokeAlpha android:strokeAlpha}</code></td><td>The opacity of a path stroke, as a value between 0 (completely transparent)
 * and 1 (completely opaque).</td></tr>
 * <tr><td><code>{@link #VectorDrawablePath_fillAlpha android:fillAlpha}</code></td><td>The alpha of the path fill, as a value between 0 (completely transparent)
 * and 1 (completely opaque).</td></tr>
 * <tr><td><code>{@link #VectorDrawablePath_fillType android:fillType}</code></td><td>sets the fillType for a path.</td></tr>
 * </table>
 * @see #VectorDrawablePath_name
 * @see #VectorDrawablePath_fillColor
 * @see #VectorDrawablePath_pathData
 * @see #VectorDrawablePath_strokeColor
 * @see #VectorDrawablePath_strokeWidth
 * @see #VectorDrawablePath_trimPathStart
 * @see #VectorDrawablePath_trimPathEnd
 * @see #VectorDrawablePath_trimPathOffset
 * @see #VectorDrawablePath_strokeLineCap
 * @see #VectorDrawablePath_strokeLineJoin
 * @see #VectorDrawablePath_strokeMiterLimit
 * @see #VectorDrawablePath_strokeAlpha
 * @see #VectorDrawablePath_fillAlpha
 * @see #VectorDrawablePath_fillType
 */

public static final int[] VectorDrawablePath;
static { VectorDrawablePath = new int[0]; }

/**
 * <p>
 * @attr description
 * The alpha of the path fill, as a value between 0 (completely transparent)
 * and 1 (completely opaque).
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:fillAlpha
 */

public static final int VectorDrawablePath_fillAlpha = 12; // 0xc

/**
 * <p>
 * @attr description
 * The color to fill the path if not defined implies no fill.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:fillColor
 */

public static final int VectorDrawablePath_fillColor = 1; // 0x1

/**
 * <p>
 * @attr description
 * sets the fillType for a path. It is the same as SVG's "fill-rule" properties.
 * For more details, see https://www.w3.org/TR/SVG/painting.html#FillRuleProperty.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>evenOdd</td><td>1</td><td></td></tr>
 * <tr><td>nonZero</td><td>0</td><td></td></tr>
 * </table>
 *
 * @attr name android:fillType
 */

public static final int VectorDrawablePath_fillType = 13; // 0xd

/**
 * <p>
 * @attr description
 * The name of this path.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int VectorDrawablePath_name = 0; // 0x0

/**
 * <p>
 * @attr description
 * The specification of the operations that define the path.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:pathData
 */

public static final int VectorDrawablePath_pathData = 2; // 0x2

/**
 * <p>
 * @attr description
 * The opacity of a path stroke, as a value between 0 (completely transparent)
 * and 1 (completely opaque).
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:strokeAlpha
 */

public static final int VectorDrawablePath_strokeAlpha = 11; // 0xb

/**
 * <p>
 * @attr description
 * The color to stroke the path if not defined implies no stroke.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:strokeColor
 */

public static final int VectorDrawablePath_strokeColor = 3; // 0x3

/**
 * <p>
 * @attr description
 * sets the linecap for a stroked path.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>butt</td><td>0</td><td></td></tr>
 * <tr><td>round</td><td>1</td><td></td></tr>
 * <tr><td>square</td><td>2</td><td></td></tr>
 * </table>
 *
 * @attr name android:strokeLineCap
 */

public static final int VectorDrawablePath_strokeLineCap = 8; // 0x8

/**
 * <p>
 * @attr description
 * sets the lineJoin for a stroked path.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bevel</td><td>2</td><td></td></tr>
 * <tr><td>miter</td><td>0</td><td></td></tr>
 * <tr><td>round</td><td>1</td><td></td></tr>
 * </table>
 *
 * @attr name android:strokeLineJoin
 */

public static final int VectorDrawablePath_strokeLineJoin = 9; // 0x9

/**
 * <p>
 * @attr description
 * sets the Miter limit for a stroked path.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:strokeMiterLimit
 */

public static final int VectorDrawablePath_strokeMiterLimit = 10; // 0xa

/**
 * <p>
 * @attr description
 * The width a path stroke.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:strokeWidth
 */

public static final int VectorDrawablePath_strokeWidth = 4; // 0x4

/**
 * <p>
 * @attr description
 * The fraction of the path to trim from the end from 0 to 1 .
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:trimPathEnd
 */

public static final int VectorDrawablePath_trimPathEnd = 6; // 0x6

/**
 * <p>
 * @attr description
 * Shift trim region (allows visible region to include the start and end) from 0 to 1.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:trimPathOffset
 */

public static final int VectorDrawablePath_trimPathOffset = 7; // 0x7

/**
 * <p>
 * @attr description
 * The fraction of the path to trim from the start from 0 to 1.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:trimPathStart
 */

public static final int VectorDrawablePath_trimPathStart = 5; // 0x5

/**
 * <p>
 * @attr description
 * The opacity of the whole vector drawable, as a value between 0
 * (completely transparent) and 1 (completely opaque).
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:alpha
 */

public static final int VectorDrawable_alpha = 4; // 0x4

/**
 * <p>
 * @attr description
 * Indicates if the drawable needs to be mirrored when its layout direction is
 * RTL (right-to-left).
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:autoMirrored
 */

public static final int VectorDrawable_autoMirrored = 5; // 0x5

/**
 * <p>
 * @attr description
 * The intrinsic height of the Vector Drawable.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:height
 */

public static final int VectorDrawable_height = 2; // 0x2

/**
 * <p>
 * @attr description
 * The name of this vector drawable.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:name
 */

public static final int VectorDrawable_name = 0; // 0x0

/**
 * <p>
 * @attr description
 * Bottom optical inset.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:opticalInsetBottom
 */

public static final int VectorDrawable_opticalInsetBottom = 12; // 0xc

/**
 * <p>
 * @attr description
 * Left optical inset.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:opticalInsetLeft
 */

public static final int VectorDrawable_opticalInsetLeft = 9; // 0x9

/**
 * <p>
 * @attr description
 * Right optical inset.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:opticalInsetRight
 */

public static final int VectorDrawable_opticalInsetRight = 11; // 0xb

/**
 * <p>
 * @attr description
 * Top optical inset.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:opticalInsetTop
 */

public static final int VectorDrawable_opticalInsetTop = 10; // 0xa

/**
 * <p>
 * @attr description
 * If set, specifies the color to apply to the drawable as a tint. By default,
 * no tint is applied. May be a color state list.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:tint
 */

public static final int VectorDrawable_tint = 1; // 0x1

/**
 * <p>
 * @attr description
 * When a tint color is set, specifies its Porter-Duff blending mode. The
 * default value is src_in, which treats the drawable as an alpha mask.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 *
 * @attr name android:tintMode
 */

public static final int VectorDrawable_tintMode = 6; // 0x6

/**
 * <p>
 * @attr description
 * The height of the canvas the drawing is on.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:viewportHeight
 */

public static final int VectorDrawable_viewportHeight = 8; // 0x8

/**
 * <p>
 * @attr description
 * The width of the canvas the drawing is on.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:viewportWidth
 */

public static final int VectorDrawable_viewportWidth = 7; // 0x7

/**
 * <p>
 * @attr description
 * The intrinsic width of the Vector Drawable.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:width
 */

public static final int VectorDrawable_width = 3; // 0x3

/**
 * Attributes that can be used with a VerticalSlider_Layout.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #VerticalSlider_Layout_layout_scale android:layout_scale}</code></td><td></td></tr>
 * </table>
 * @see #VerticalSlider_Layout_layout_scale
 */

public static final int[] VerticalSlider_Layout;
static { VerticalSlider_Layout = new int[0]; }

/**
 * <p>This symbol is the offset where the {@link android.R.attr#layout_scale}
 * attribute's value can be found in the {@link #VerticalSlider_Layout} array.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:layout_scale
 */

public static final int VerticalSlider_Layout_layout_scale = 0; // 0x0

/**
 * Attributes that are read when parsing a  tag.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * </table>
 */

public static final int[] VideoView2;
static { VideoView2 = new int[0]; }

/**
 * Attributes that can be used with {@link android.view.View} or
 * any of its subclasses.  Also see {@link #ViewGroup_Layout} for
 * attributes that are processed by the view's parent.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #View_theme android:theme}</code></td><td>The overall theme to use for an activity.</td></tr>
 * <tr><td><code>{@link #View_scrollbarSize android:scrollbarSize}</code></td><td>Sets the width of vertical scrollbars and height of horizontal scrollbars.</td></tr>
 * <tr><td><code>{@link #View_scrollbarThumbHorizontal android:scrollbarThumbHorizontal}</code></td><td>Defines the horizontal scrollbar thumb drawable.</td></tr>
 * <tr><td><code>{@link #View_scrollbarThumbVertical android:scrollbarThumbVertical}</code></td><td>Defines the vertical scrollbar thumb drawable.</td></tr>
 * <tr><td><code>{@link #View_scrollbarTrackHorizontal android:scrollbarTrackHorizontal}</code></td><td>Defines the horizontal scrollbar track drawable.</td></tr>
 * <tr><td><code>{@link #View_scrollbarTrackVertical android:scrollbarTrackVertical}</code></td><td>Defines the vertical scrollbar track drawable.</td></tr>
 * <tr><td><code>{@link #View_scrollbarAlwaysDrawHorizontalTrack android:scrollbarAlwaysDrawHorizontalTrack}</code></td><td>Defines whether the horizontal scrollbar track should always be drawn.</td></tr>
 * <tr><td><code>{@link #View_scrollbarAlwaysDrawVerticalTrack android:scrollbarAlwaysDrawVerticalTrack}</code></td><td>Defines whether the vertical scrollbar track should always be drawn.</td></tr>
 * <tr><td><code>{@link #View_scrollbarStyle android:scrollbarStyle}</code></td><td>Controls the scrollbar style and position.</td></tr>
 * <tr><td><code>{@link #View_id android:id}</code></td><td>Supply an identifier name for this view, to later retrieve it
 * with {@link android.view.View#findViewById View.findViewById()} or
 * {@link android.app.Activity#findViewById Activity.findViewById()}.</td></tr>
 * <tr><td><code>{@link #View_tag android:tag}</code></td><td>Supply a tag for this view containing a String, to be retrieved
 * later with {@link android.view.View#getTag View.getTag()} or
 * searched for with {@link android.view.View#findViewWithTag
 * View.findViewWithTag()}.</td></tr>
 * <tr><td><code>{@link #View_scrollX android:scrollX}</code></td><td>The initial horizontal scroll offset, in pixels.</td></tr>
 * <tr><td><code>{@link #View_scrollY android:scrollY}</code></td><td>The initial vertical scroll offset, in pixels.</td></tr>
 * <tr><td><code>{@link #View_background android:background}</code></td><td>A drawable to use as the background.</td></tr>
 * <tr><td><code>{@link #View_padding android:padding}</code></td><td>Sets the padding, in pixels, of all four edges.</td></tr>
 * <tr><td><code>{@link #View_paddingLeft android:paddingLeft}</code></td><td>Sets the padding, in pixels, of the left edge; see {@link android.R.attr#padding}.</td></tr>
 * <tr><td><code>{@link #View_paddingTop android:paddingTop}</code></td><td>Sets the padding, in pixels, of the top edge; see {@link android.R.attr#padding}.</td></tr>
 * <tr><td><code>{@link #View_paddingRight android:paddingRight}</code></td><td>Sets the padding, in pixels, of the right edge; see {@link android.R.attr#padding}.</td></tr>
 * <tr><td><code>{@link #View_paddingBottom android:paddingBottom}</code></td><td>Sets the padding, in pixels, of the bottom edge; see {@link android.R.attr#padding}.</td></tr>
 * <tr><td><code>{@link #View_focusable android:focusable}</code></td><td>Controls whether a view can take focus.</td></tr>
 * <tr><td><code>{@link #View_focusableInTouchMode android:focusableInTouchMode}</code></td><td>Boolean that controls whether a view can take focus while in touch mode.</td></tr>
 * <tr><td><code>{@link #View_visibility android:visibility}</code></td><td>Controls the initial visibility of the view.</td></tr>
 * <tr><td><code>{@link #View_fitsSystemWindows android:fitsSystemWindows}</code></td><td>Boolean internal attribute to adjust view layout based on
 * system windows such as the status bar.</td></tr>
 * <tr><td><code>{@link #View_scrollbars android:scrollbars}</code></td><td>Defines which scrollbars should be displayed on scrolling or not.</td></tr>
 * <tr><td><code>{@link #View_fadingEdge android:fadingEdge}</code></td><td>This attribute is ignored in API level 14
 * ({@link android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH}) and higher.</td></tr>
 * <tr><td><code>{@link #View_fadingEdgeLength android:fadingEdgeLength}</code></td><td>Defines the length of the fading edges.</td></tr>
 * <tr><td><code>{@link #View_nextFocusLeft android:nextFocusLeft}</code></td><td>Defines the next view to give focus to when the next focus is
 * {@link android.view.View#FOCUS_LEFT}.</td></tr>
 * <tr><td><code>{@link #View_nextFocusRight android:nextFocusRight}</code></td><td>Defines the next view to give focus to when the next focus is
 * {@link android.view.View#FOCUS_RIGHT}
 * If the reference refers to a view that does not exist or is part
 * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
 * will result when the reference is accessed.</td></tr>
 * <tr><td><code>{@link #View_nextFocusUp android:nextFocusUp}</code></td><td>Defines the next view to give focus to when the next focus is
 * {@link android.view.View#FOCUS_UP}
 * If the reference refers to a view that does not exist or is part
 * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
 * will result when the reference is accessed.</td></tr>
 * <tr><td><code>{@link #View_nextFocusDown android:nextFocusDown}</code></td><td>Defines the next view to give focus to when the next focus is
 * {@link android.view.View#FOCUS_DOWN}
 * If the reference refers to a view that does not exist or is part
 * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
 * will result when the reference is accessed.</td></tr>
 * <tr><td><code>{@link #View_clickable android:clickable}</code></td><td>Defines whether this view reacts to click events.</td></tr>
 * <tr><td><code>{@link #View_longClickable android:longClickable}</code></td><td>Defines whether this view reacts to long click events.</td></tr>
 * <tr><td><code>{@link #View_saveEnabled android:saveEnabled}</code></td><td>If false, no state will be saved for this view when it is being
 * frozen.</td></tr>
 * <tr><td><code>{@link #View_drawingCacheQuality android:drawingCacheQuality}</code></td><td>Defines the quality of translucent drawing caches.</td></tr>
 * <tr><td><code>{@link #View_duplicateParentState android:duplicateParentState}</code></td><td>When this attribute is set to true, the view gets its drawable state
 * (focused, pressed, etc.) from its direct parent rather than from itself.</td></tr>
 * <tr><td><code>{@link #View_foreground android:foreground}</code></td><td>Defines the drawable to draw over the content.</td></tr>
 * <tr><td><code>{@link #View_minWidth android:minWidth}</code></td><td></td></tr>
 * <tr><td><code>{@link #View_minHeight android:minHeight}</code></td><td></td></tr>
 * <tr><td><code>{@link #View_foregroundGravity android:foregroundGravity}</code></td><td>Defines the gravity to apply to the foreground drawable.</td></tr>
 * <tr><td><code>{@link #View_soundEffectsEnabled android:soundEffectsEnabled}</code></td><td>Boolean that controls whether a view should have sound effects
 * enabled for events such as clicking and touching.</td></tr>
 * <tr><td><code>{@link #View_keepScreenOn android:keepScreenOn}</code></td><td>Controls whether the view's window should keep the screen on
 * while visible.</td></tr>
 * <tr><td><code>{@link #View_isScrollContainer android:isScrollContainer}</code></td><td>Set this if the view will serve as a scrolling container, meaning
 * that it can be resized to shrink its overall window so that there
 * will be space for an input method.</td></tr>
 * <tr><td><code>{@link #View_hapticFeedbackEnabled android:hapticFeedbackEnabled}</code></td><td>Boolean that controls whether a view should have haptic feedback
 * enabled for events such as long presses.</td></tr>
 * <tr><td><code>{@link #View_onClick android:onClick}</code></td><td>Name of the method in this View's context to invoke when the view is
 * clicked.</td></tr>
 * <tr><td><code>{@link #View_contentDescription android:contentDescription}</code></td><td>The content description associated with the item.</td></tr>
 * <tr><td><code>{@link #View_scrollbarFadeDuration android:scrollbarFadeDuration}</code></td><td>Defines the delay in milliseconds that a scrollbar takes to fade out.</td></tr>
 * <tr><td><code>{@link #View_scrollbarDefaultDelayBeforeFade android:scrollbarDefaultDelayBeforeFade}</code></td><td>Defines the delay in milliseconds that a scrollbar waits before fade out.</td></tr>
 * <tr><td><code>{@link #View_fadeScrollbars android:fadeScrollbars}</code></td><td>Defines whether to fade out scrollbars when they are not in use.</td></tr>
 * <tr><td><code>{@link #View_overScrollMode android:overScrollMode}</code></td><td>Defines over-scrolling behavior.</td></tr>
 * <tr><td><code>{@link #View_filterTouchesWhenObscured android:filterTouchesWhenObscured}</code></td><td>Specifies whether to filter touches when the view's window is obscured by
 * another visible window.</td></tr>
 * <tr><td><code>{@link #View_alpha android:alpha}</code></td><td>alpha property of the view, as a value between 0 (completely transparent) and 1
 * (completely opaque).</td></tr>
 * <tr><td><code>{@link #View_transformPivotX android:transformPivotX}</code></td><td>x location of the pivot point around which the view will rotate and scale.</td></tr>
 * <tr><td><code>{@link #View_transformPivotY android:transformPivotY}</code></td><td>y location of the pivot point around which the view will rotate and scale.</td></tr>
 * <tr><td><code>{@link #View_translationX android:translationX}</code></td><td>translation in x of the view.</td></tr>
 * <tr><td><code>{@link #View_translationY android:translationY}</code></td><td>translation in y of the view.</td></tr>
 * <tr><td><code>{@link #View_scaleX android:scaleX}</code></td><td>scale of the view in the x direction.</td></tr>
 * <tr><td><code>{@link #View_scaleY android:scaleY}</code></td><td>scale of the view in the y direction.</td></tr>
 * <tr><td><code>{@link #View_rotation android:rotation}</code></td><td>rotation of the view, in degrees.</td></tr>
 * <tr><td><code>{@link #View_rotationX android:rotationX}</code></td><td>rotation of the view around the x axis, in degrees.</td></tr>
 * <tr><td><code>{@link #View_rotationY android:rotationY}</code></td><td>rotation of the view around the y axis, in degrees.</td></tr>
 * <tr><td><code>{@link #View_verticalScrollbarPosition android:verticalScrollbarPosition}</code></td><td>Determines which side the vertical scroll bar should be placed on.</td></tr>
 * <tr><td><code>{@link #View_nextFocusForward android:nextFocusForward}</code></td><td>Defines the next view to give focus to when the next focus is
 * {@link android.view.View#FOCUS_FORWARD}
 * If the reference refers to a view that does not exist or is part
 * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
 * will result when the reference is accessed.</td></tr>
 * <tr><td><code>{@link #View_layerType android:layerType}</code></td><td>Specifies the type of layer backing this view.</td></tr>
 * <tr><td><code>{@link #View_requiresFadingEdge android:requiresFadingEdge}</code></td><td>Defines which edges should be faded on scrolling.</td></tr>
 * <tr><td><code>{@link #View_importantForAccessibility android:importantForAccessibility}</code></td><td>Describes whether or not this view is important for accessibility.</td></tr>
 * <tr><td><code>{@link #View_textDirection android:textDirection}</code></td><td>Defines the direction of the text.</td></tr>
 * <tr><td><code>{@link #View_textAlignment android:textAlignment}</code></td><td>Defines the alignment of the text.</td></tr>
 * <tr><td><code>{@link #View_layoutDirection android:layoutDirection}</code></td><td>Defines the direction of layout drawing.</td></tr>
 * <tr><td><code>{@link #View_paddingStart android:paddingStart}</code></td><td>Sets the padding, in pixels, of the start edge; see {@link android.R.attr#padding}.</td></tr>
 * <tr><td><code>{@link #View_paddingEnd android:paddingEnd}</code></td><td>Sets the padding, in pixels, of the end edge; see {@link android.R.attr#padding}.</td></tr>
 * <tr><td><code>{@link #View_labelFor android:labelFor}</code></td><td>Specifies the id of a view for which this view serves as a label for
 * accessibility purposes.</td></tr>
 * <tr><td><code>{@link #View_accessibilityLiveRegion android:accessibilityLiveRegion}</code></td><td>Indicates to accessibility services whether the user should be notified when
 * this view changes.</td></tr>
 * <tr><td><code>{@link #View_translationZ android:translationZ}</code></td><td>translation in z of the view.</td></tr>
 * <tr><td><code>{@link #View_transitionName android:transitionName}</code></td><td>Names a View such that it can be identified for Transitions.</td></tr>
 * <tr><td><code>{@link #View_nestedScrollingEnabled android:nestedScrollingEnabled}</code></td><td>Specifies that this view should permit nested scrolling within a compatible
 * ancestor view.</td></tr>
 * <tr><td><code>{@link #View_elevation android:elevation}</code></td><td>base z depth of the view.</td></tr>
 * <tr><td><code>{@link #View_stateListAnimator android:stateListAnimator}</code></td><td>Sets the state-based animator for the View.</td></tr>
 * <tr><td><code>{@link #View_backgroundTint android:backgroundTint}</code></td><td>Tint to apply to the background.</td></tr>
 * <tr><td><code>{@link #View_backgroundTintMode android:backgroundTintMode}</code></td><td>Blending mode used to apply the background tint.</td></tr>
 * <tr><td><code>{@link #View_foregroundTint android:foregroundTint}</code></td><td>Tint to apply to the foreground.</td></tr>
 * <tr><td><code>{@link #View_foregroundTintMode android:foregroundTintMode}</code></td><td>Blending mode used to apply the foreground tint.</td></tr>
 * <tr><td><code>{@link #View_outlineProvider android:outlineProvider}</code></td><td>ViewOutlineProvider used to determine the View's Outline.</td></tr>
 * <tr><td><code>{@link #View_accessibilityTraversalBefore android:accessibilityTraversalBefore}</code></td><td>Sets the id of a view before which this one is visited in accessibility traversal.</td></tr>
 * <tr><td><code>{@link #View_accessibilityTraversalAfter android:accessibilityTraversalAfter}</code></td><td>Sets the id of a view after which this one is visited in accessibility traversal.</td></tr>
 * <tr><td><code>{@link #View_scrollIndicators android:scrollIndicators}</code></td><td>Defines which scroll indicators should be displayed when the view
 * can be scrolled.</td></tr>
 * <tr><td><code>{@link #View_contextClickable android:contextClickable}</code></td><td>Defines whether this view reacts to context click events.</td></tr>
 * <tr><td><code>{@link #View_pointerIcon android:pointerIcon}</code></td><td></td></tr>
 * <tr><td><code>{@link #View_forceHasOverlappingRendering android:forceHasOverlappingRendering}</code></td><td>Whether this view has elements that may overlap when drawn.</td></tr>
 * <tr><td><code>{@link #View_tooltipText android:tooltipText}</code></td><td>The tooltip text associated with the item.</td></tr>
 * <tr><td><code>{@link #View_paddingHorizontal android:paddingHorizontal}</code></td><td>Sets the padding, in pixels, of the left and right edges; see
 * {@link android.R.attr#padding}.</td></tr>
 * <tr><td><code>{@link #View_paddingVertical android:paddingVertical}</code></td><td>Sets the padding, in pixels, of the top and bottom edges; see
 * {@link android.R.attr#padding}.</td></tr>
 * <tr><td><code>{@link #View_keyboardNavigationCluster android:keyboardNavigationCluster}</code></td><td>Whether this view is a root of a keyboard navigation cluster.</td></tr>
 * <tr><td><code>{@link #View_nextClusterForward android:nextClusterForward}</code></td><td>Defines the next keyboard navigation cluster.</td></tr>
 * <tr><td><code>{@link #View_focusedByDefault android:focusedByDefault}</code></td><td>Whether this view is a default-focus view.</td></tr>
 * <tr><td><code>{@link #View_autofillHints android:autofillHints}</code></td><td>Describes the content of a view so that a autofill service can fill in the appropriate
 * data.</td></tr>
 * <tr><td><code>{@link #View_importantForAutofill android:importantForAutofill}</code></td><td>Hints the Android System whether the view node associated with this View should be
 * included in a view structure used for autofill purposes.</td></tr>
 * <tr><td><code>{@link #View_defaultFocusHighlightEnabled android:defaultFocusHighlightEnabled}</code></td><td>Whether this View should use a default focus highlight when it gets focused but
 * doesn't have {@link android.R.attr#state_focused} defined in its background.</td></tr>
 * <tr><td><code>{@link #View_screenReaderFocusable android:screenReaderFocusable}</code></td><td>Whether this view should be treated as a focusable unit by screen reader accessibility
 * tools.</td></tr>
 * <tr><td><code>{@link #View_accessibilityPaneTitle android:accessibilityPaneTitle}</code></td><td>The title this view should present to accessibility as a pane title.</td></tr>
 * <tr><td><code>{@link #View_accessibilityHeading android:accessibilityHeading}</code></td><td>Whether or not this view is a heading for accessibility purposes.</td></tr>
 * <tr><td><code>{@link #View_outlineSpotShadowColor android:outlineSpotShadowColor}</code></td><td>Sets the color of the spot shadow that is drawn when the view has a positive Z or
 * elevation value.</td></tr>
 * <tr><td><code>{@link #View_outlineAmbientShadowColor android:outlineAmbientShadowColor}</code></td><td>Sets the color of the ambient shadow that is drawn when the view has a positive Z
 * or elevation value.</td></tr>
 * <tr><td><code>{@link #View_forceDarkAllowed android:forceDarkAllowed}</code></td><td><p>Whether or not the force dark feature is allowed to be applied to this View.</td></tr>
 * </table>
 * @see #View_theme
 * @see #View_scrollbarSize
 * @see #View_scrollbarThumbHorizontal
 * @see #View_scrollbarThumbVertical
 * @see #View_scrollbarTrackHorizontal
 * @see #View_scrollbarTrackVertical
 * @see #View_scrollbarAlwaysDrawHorizontalTrack
 * @see #View_scrollbarAlwaysDrawVerticalTrack
 * @see #View_scrollbarStyle
 * @see #View_id
 * @see #View_tag
 * @see #View_scrollX
 * @see #View_scrollY
 * @see #View_background
 * @see #View_padding
 * @see #View_paddingLeft
 * @see #View_paddingTop
 * @see #View_paddingRight
 * @see #View_paddingBottom
 * @see #View_focusable
 * @see #View_focusableInTouchMode
 * @see #View_visibility
 * @see #View_fitsSystemWindows
 * @see #View_scrollbars
 * @see #View_fadingEdge
 * @see #View_fadingEdgeLength
 * @see #View_nextFocusLeft
 * @see #View_nextFocusRight
 * @see #View_nextFocusUp
 * @see #View_nextFocusDown
 * @see #View_clickable
 * @see #View_longClickable
 * @see #View_saveEnabled
 * @see #View_drawingCacheQuality
 * @see #View_duplicateParentState
 * @see #View_foreground
 * @see #View_minWidth
 * @see #View_minHeight
 * @see #View_foregroundGravity
 * @see #View_soundEffectsEnabled
 * @see #View_keepScreenOn
 * @see #View_isScrollContainer
 * @see #View_hapticFeedbackEnabled
 * @see #View_onClick
 * @see #View_contentDescription
 * @see #View_scrollbarFadeDuration
 * @see #View_scrollbarDefaultDelayBeforeFade
 * @see #View_fadeScrollbars
 * @see #View_overScrollMode
 * @see #View_filterTouchesWhenObscured
 * @see #View_alpha
 * @see #View_transformPivotX
 * @see #View_transformPivotY
 * @see #View_translationX
 * @see #View_translationY
 * @see #View_scaleX
 * @see #View_scaleY
 * @see #View_rotation
 * @see #View_rotationX
 * @see #View_rotationY
 * @see #View_verticalScrollbarPosition
 * @see #View_nextFocusForward
 * @see #View_layerType
 * @see #View_requiresFadingEdge
 * @see #View_importantForAccessibility
 * @see #View_textDirection
 * @see #View_textAlignment
 * @see #View_layoutDirection
 * @see #View_paddingStart
 * @see #View_paddingEnd
 * @see #View_labelFor
 * @see #View_accessibilityLiveRegion
 * @see #View_translationZ
 * @see #View_transitionName
 * @see #View_nestedScrollingEnabled
 * @see #View_elevation
 * @see #View_stateListAnimator
 * @see #View_backgroundTint
 * @see #View_backgroundTintMode
 * @see #View_foregroundTint
 * @see #View_foregroundTintMode
 * @see #View_outlineProvider
 * @see #View_accessibilityTraversalBefore
 * @see #View_accessibilityTraversalAfter
 * @see #View_scrollIndicators
 * @see #View_contextClickable
 * @see #View_pointerIcon
 * @see #View_forceHasOverlappingRendering
 * @see #View_tooltipText
 * @see #View_paddingHorizontal
 * @see #View_paddingVertical
 * @see #View_keyboardNavigationCluster
 * @see #View_nextClusterForward
 * @see #View_focusedByDefault
 * @see #View_autofillHints
 * @see #View_importantForAutofill
 * @see #View_defaultFocusHighlightEnabled
 * @see #View_screenReaderFocusable
 * @see #View_accessibilityPaneTitle
 * @see #View_accessibilityHeading
 * @see #View_outlineSpotShadowColor
 * @see #View_outlineAmbientShadowColor
 * @see #View_forceDarkAllowed
 */

public static final int[] View;
static { View = new int[0]; }

/**
 * Attributes that can be used with a ViewAnimator.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #ViewAnimator_inAnimation android:inAnimation}</code></td><td>Identifier for the animation to use when a view is shown.</td></tr>
 * <tr><td><code>{@link #ViewAnimator_outAnimation android:outAnimation}</code></td><td>Identifier for the animation to use when a view is hidden.</td></tr>
 * <tr><td><code>{@link #ViewAnimator_animateFirstView android:animateFirstView}</code></td><td>Defines whether to animate the current View when the ViewAnimation
 * is first displayed.</td></tr>
 * </table>
 * @see #ViewAnimator_inAnimation
 * @see #ViewAnimator_outAnimation
 * @see #ViewAnimator_animateFirstView
 */

public static final int[] ViewAnimator;
static { ViewAnimator = new int[0]; }

/**
 * <p>
 * @attr description
 * Defines whether to animate the current View when the ViewAnimation
 * is first displayed.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:animateFirstView
 */

public static final int ViewAnimator_animateFirstView = 2; // 0x2

/**
 * <p>
 * @attr description
 * Identifier for the animation to use when a view is shown.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:inAnimation
 */

public static final int ViewAnimator_inAnimation = 0; // 0x0

/**
 * <p>
 * @attr description
 * Identifier for the animation to use when a view is hidden.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:outAnimation
 */

public static final int ViewAnimator_outAnimation = 1; // 0x1

/**
 * Attributes that can be used with a ViewDrawableStates.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #ViewDrawableStates_state_focused android:state_focused}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view has input focus.</td></tr>
 * <tr><td><code>{@link #ViewDrawableStates_state_window_focused android:state_window_focused}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view's window has input focus.</td></tr>
 * <tr><td><code>{@link #ViewDrawableStates_state_enabled android:state_enabled}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view is enabled.</td></tr>
 * <tr><td><code>{@link #ViewDrawableStates_state_selected android:state_selected}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view (or one of its parents) is currently selected.</td></tr>
 * <tr><td><code>{@link #ViewDrawableStates_state_pressed android:state_pressed}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when the user is pressing down in a view.</td></tr>
 * <tr><td><code>{@link #ViewDrawableStates_state_activated android:state_activated}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view or its parent has been "activated" meaning the user has currently
 * marked it as being of interest.</td></tr>
 * <tr><td><code>{@link #ViewDrawableStates_state_accelerated android:state_accelerated}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * indicating that the Drawable is in a view that is hardware accelerated.</td></tr>
 * <tr><td><code>{@link #ViewDrawableStates_state_hovered android:state_hovered}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a pointer is hovering over the view.</td></tr>
 * <tr><td><code>{@link #ViewDrawableStates_state_drag_can_accept android:state_drag_can_accept}</code></td><td>State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
 * indicating that the Drawable is in a view that is capable of accepting a drop of
 * the content currently being manipulated in a drag-and-drop operation.</td></tr>
 * <tr><td><code>{@link #ViewDrawableStates_state_drag_hovered android:state_drag_hovered}</code></td><td>State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
 * indicating that a drag operation (for which the Drawable's view is a valid recipient)
 * is currently positioned over the Drawable.</td></tr>
 * </table>
 * @see #ViewDrawableStates_state_focused
 * @see #ViewDrawableStates_state_window_focused
 * @see #ViewDrawableStates_state_enabled
 * @see #ViewDrawableStates_state_selected
 * @see #ViewDrawableStates_state_pressed
 * @see #ViewDrawableStates_state_activated
 * @see #ViewDrawableStates_state_accelerated
 * @see #ViewDrawableStates_state_hovered
 * @see #ViewDrawableStates_state_drag_can_accept
 * @see #ViewDrawableStates_state_drag_hovered
 */

public static final int[] ViewDrawableStates;
static { ViewDrawableStates = new int[0]; }

/**
 * <p>
 * @attr description
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * indicating that the Drawable is in a view that is hardware accelerated.
 * This means that the device can at least render a full-screen scaled
 * bitmap with one layer of text and bitmaps composited on top of it
 * at 60fps.  When this is set, the colorBackgroundCacheHint will be
 * ignored even if it specifies a solid color, since that optimization
 * is not needed.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_accelerated
 */

public static final int ViewDrawableStates_state_accelerated = 6; // 0x6

/**
 * <p>
 * @attr description
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view or its parent has been "activated" meaning the user has currently
 * marked it as being of interest.  This is an alternative representation of
 * state_checked for when the state should be propagated down the view hierarchy.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_activated
 */

public static final int ViewDrawableStates_state_activated = 5; // 0x5

/**
 * <p>
 * @attr description
 * State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
 * indicating that the Drawable is in a view that is capable of accepting a drop of
 * the content currently being manipulated in a drag-and-drop operation.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_drag_can_accept
 */

public static final int ViewDrawableStates_state_drag_can_accept = 8; // 0x8

/**
 * <p>
 * @attr description
 * State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
 * indicating that a drag operation (for which the Drawable's view is a valid recipient)
 * is currently positioned over the Drawable.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_drag_hovered
 */

public static final int ViewDrawableStates_state_drag_hovered = 9; // 0x9

/**
 * <p>
 * @attr description
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view is enabled.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_enabled
 */

public static final int ViewDrawableStates_state_enabled = 2; // 0x2

/**
 * <p>
 * @attr description
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view has input focus.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_focused
 */

public static final int ViewDrawableStates_state_focused = 0; // 0x0

/**
 * <p>
 * @attr description
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a pointer is hovering over the view.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_hovered
 */

public static final int ViewDrawableStates_state_hovered = 7; // 0x7

/**
 * <p>
 * @attr description
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when the user is pressing down in a view.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_pressed
 */

public static final int ViewDrawableStates_state_pressed = 4; // 0x4

/**
 * <p>
 * @attr description
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view (or one of its parents) is currently selected.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_selected
 */

public static final int ViewDrawableStates_state_selected = 3; // 0x3

/**
 * <p>
 * @attr description
 * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
 * set when a view's window has input focus.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:state_window_focused
 */

public static final int ViewDrawableStates_state_window_focused = 1; // 0x1

/**
 * Attributes that can be used with a ViewFlipper.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #ViewFlipper_flipInterval android:flipInterval}</code></td><td></td></tr>
 * <tr><td><code>{@link #ViewFlipper_autoStart android:autoStart}</code></td><td>When true, automatically start animating.</td></tr>
 * </table>
 * @see #ViewFlipper_flipInterval
 * @see #ViewFlipper_autoStart
 */

public static final int[] ViewFlipper;
static { ViewFlipper = new int[0]; }

/**
 * <p>
 * @attr description
 * When true, automatically start animating.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:autoStart
 */

public static final int ViewFlipper_autoStart = 1; // 0x1

/**
 * <p>This symbol is the offset where the {@link android.R.attr#flipInterval}
 * attribute's value can be found in the {@link #ViewFlipper} array.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:flipInterval
 */

public static final int ViewFlipper_flipInterval = 0; // 0x0

/**
 * Attributes that can be used with a {@link android.view.ViewGroup} or any
 * of its subclasses.  Also see {@link #ViewGroup_Layout} for
 * attributes that this class processes in its children.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #ViewGroup_clipChildren android:clipChildren}</code></td><td>Defines whether a child is limited to draw inside of its bounds or not.</td></tr>
 * <tr><td><code>{@link #ViewGroup_clipToPadding android:clipToPadding}</code></td><td>Defines whether the ViewGroup will clip its children and resize (but not clip) any
 * EdgeEffect to its padding, if padding is not zero.</td></tr>
 * <tr><td><code>{@link #ViewGroup_layoutAnimation android:layoutAnimation}</code></td><td>Defines the layout animation to use the first time the ViewGroup is laid out.</td></tr>
 * <tr><td><code>{@link #ViewGroup_animationCache android:animationCache}</code></td><td>Defines whether layout animations should create a drawing cache for their
 * children.</td></tr>
 * <tr><td><code>{@link #ViewGroup_persistentDrawingCache android:persistentDrawingCache}</code></td><td>Defines the persistence of the drawing cache.</td></tr>
 * <tr><td><code>{@link #ViewGroup_alwaysDrawnWithCache android:alwaysDrawnWithCache}</code></td><td>Defines whether the ViewGroup should always draw its children using their
 * drawing cache or not.</td></tr>
 * <tr><td><code>{@link #ViewGroup_addStatesFromChildren android:addStatesFromChildren}</code></td><td>Sets whether this ViewGroup's drawable states also include
 * its children's drawable states.</td></tr>
 * <tr><td><code>{@link #ViewGroup_descendantFocusability android:descendantFocusability}</code></td><td>Defines the relationship between the ViewGroup and its descendants
 * when looking for a View to take focus.</td></tr>
 * <tr><td><code>{@link #ViewGroup_splitMotionEvents android:splitMotionEvents}</code></td><td>Sets whether this ViewGroup should split MotionEvents
 * to separate child views during touch event dispatch.</td></tr>
 * <tr><td><code>{@link #ViewGroup_animateLayoutChanges android:animateLayoutChanges}</code></td><td>Defines whether changes in layout (caused by adding and removing items) should
 * cause a LayoutTransition to run.</td></tr>
 * <tr><td><code>{@link #ViewGroup_layoutMode android:layoutMode}</code></td><td>Defines the layout mode of this ViewGroup.</td></tr>
 * <tr><td><code>{@link #ViewGroup_transitionGroup android:transitionGroup}</code></td><td>Sets whether or not this ViewGroup should be treated as a single entity
 * when doing an Activity transition.</td></tr>
 * <tr><td><code>{@link #ViewGroup_touchscreenBlocksFocus android:touchscreenBlocksFocus}</code></td><td>Set to true if this ViewGroup blocks focus in the presence of a touchscreen.</td></tr>
 * </table>
 * @see #ViewGroup_clipChildren
 * @see #ViewGroup_clipToPadding
 * @see #ViewGroup_layoutAnimation
 * @see #ViewGroup_animationCache
 * @see #ViewGroup_persistentDrawingCache
 * @see #ViewGroup_alwaysDrawnWithCache
 * @see #ViewGroup_addStatesFromChildren
 * @see #ViewGroup_descendantFocusability
 * @see #ViewGroup_splitMotionEvents
 * @see #ViewGroup_animateLayoutChanges
 * @see #ViewGroup_layoutMode
 * @see #ViewGroup_transitionGroup
 * @see #ViewGroup_touchscreenBlocksFocus
 */

public static final int[] ViewGroup;
static { ViewGroup = new int[0]; }

/**
 * This is the basic set of layout attributes that are common to all
 * layout managers.  These attributes are specified with the rest of
 * a view's normal attributes (such as {@link android.R.attr#background},
 * but will be parsed by the view's parent and ignored by the child.
 * <p>The values defined here correspond to the base layout attribute
 * class {@link android.view.ViewGroup.LayoutParams}.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #ViewGroup_Layout_layout_width android:layout_width}</code></td><td>Specifies the basic width of the view.</td></tr>
 * <tr><td><code>{@link #ViewGroup_Layout_layout_height android:layout_height}</code></td><td>Specifies the basic height of the view.</td></tr>
 * </table>
 * @see #ViewGroup_Layout_layout_width
 * @see #ViewGroup_Layout_layout_height
 */

public static final int[] ViewGroup_Layout;
static { ViewGroup_Layout = new int[0]; }

/**
 * <p>
 * @attr description
 * Specifies the basic height of the view.  This is a required attribute
 * for any view inside of a containing layout manager.  Its value may
 * be a dimension (such as "12dip") for a constant height or one of
 * the special constants.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>fill_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
 * This constant is deprecated starting from API Level 8 and
 * is replaced by {@code match_parent}.</td></tr>
 * <tr><td>match_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
 * Introduced in API Level 8.</td></tr>
 * <tr><td>wrap_content</td><td>fffffffe</td><td>The view should be only big enough to enclose its content (plus padding).</td></tr>
 * </table>
 *
 * @attr name android:layout_height
 */

public static final int ViewGroup_Layout_layout_height = 1; // 0x1

/**
 * <p>
 * @attr description
 * Specifies the basic width of the view.  This is a required attribute
 * for any view inside of a containing layout manager.  Its value may
 * be a dimension (such as "12dip") for a constant width or one of
 * the special constants.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>fill_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
 * This constant is deprecated starting from API Level 8 and
 * is replaced by {@code match_parent}.</td></tr>
 * <tr><td>match_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
 * Introduced in API Level 8.</td></tr>
 * <tr><td>wrap_content</td><td>fffffffe</td><td>The view should be only big enough to enclose its content (plus padding).</td></tr>
 * </table>
 *
 * @attr name android:layout_width
 */

public static final int ViewGroup_Layout_layout_width = 0; // 0x0

/**
 * This is the basic set of layout attributes for layout managers that
 * wish to place margins around their child views.
 * These attributes are specified with the rest of
 * a view's normal attributes (such as {@link android.R.attr#background},
 * but will be parsed by the view's parent and ignored by the child.
 * <p>The values defined here correspond to the base layout attribute
 * class {@link android.view.ViewGroup.MarginLayoutParams}.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #ViewGroup_MarginLayout_layout_width android:layout_width}</code></td><td>Specifies the basic width of the view.</td></tr>
 * <tr><td><code>{@link #ViewGroup_MarginLayout_layout_height android:layout_height}</code></td><td>Specifies the basic height of the view.</td></tr>
 * <tr><td><code>{@link #ViewGroup_MarginLayout_layout_margin android:layout_margin}</code></td><td>Specifies extra space on the left, top, right and bottom
 * sides of this view.</td></tr>
 * <tr><td><code>{@link #ViewGroup_MarginLayout_layout_marginLeft android:layout_marginLeft}</code></td><td>Specifies extra space on the left side of this view.</td></tr>
 * <tr><td><code>{@link #ViewGroup_MarginLayout_layout_marginTop android:layout_marginTop}</code></td><td>Specifies extra space on the top side of this view.</td></tr>
 * <tr><td><code>{@link #ViewGroup_MarginLayout_layout_marginRight android:layout_marginRight}</code></td><td>Specifies extra space on the right side of this view.</td></tr>
 * <tr><td><code>{@link #ViewGroup_MarginLayout_layout_marginBottom android:layout_marginBottom}</code></td><td>Specifies extra space on the bottom side of this view.</td></tr>
 * <tr><td><code>{@link #ViewGroup_MarginLayout_layout_marginStart android:layout_marginStart}</code></td><td>Specifies extra space on the start side of this view.</td></tr>
 * <tr><td><code>{@link #ViewGroup_MarginLayout_layout_marginEnd android:layout_marginEnd}</code></td><td>Specifies extra space on the end side of this view.</td></tr>
 * <tr><td><code>{@link #ViewGroup_MarginLayout_layout_marginHorizontal android:layout_marginHorizontal}</code></td><td>Specifies extra space on the left and right sides of this view.</td></tr>
 * <tr><td><code>{@link #ViewGroup_MarginLayout_layout_marginVertical android:layout_marginVertical}</code></td><td>Specifies extra space on the top and bottom sides of this view.</td></tr>
 * </table>
 * @see #ViewGroup_MarginLayout_layout_width
 * @see #ViewGroup_MarginLayout_layout_height
 * @see #ViewGroup_MarginLayout_layout_margin
 * @see #ViewGroup_MarginLayout_layout_marginLeft
 * @see #ViewGroup_MarginLayout_layout_marginTop
 * @see #ViewGroup_MarginLayout_layout_marginRight
 * @see #ViewGroup_MarginLayout_layout_marginBottom
 * @see #ViewGroup_MarginLayout_layout_marginStart
 * @see #ViewGroup_MarginLayout_layout_marginEnd
 * @see #ViewGroup_MarginLayout_layout_marginHorizontal
 * @see #ViewGroup_MarginLayout_layout_marginVertical
 */

public static final int[] ViewGroup_MarginLayout;
static { ViewGroup_MarginLayout = new int[0]; }

/**
 * <p>
 * @attr description
 * Specifies the basic height of the view.  This is a required attribute
 * for any view inside of a containing layout manager.  Its value may
 * be a dimension (such as "12dip") for a constant height or one of
 * the special constants.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>fill_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
 * This constant is deprecated starting from API Level 8 and
 * is replaced by {@code match_parent}.</td></tr>
 * <tr><td>match_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
 * Introduced in API Level 8.</td></tr>
 * <tr><td>wrap_content</td><td>fffffffe</td><td>The view should be only big enough to enclose its content (plus padding).</td></tr>
 * </table>
 *
 * @attr name android:layout_height
 */

public static final int ViewGroup_MarginLayout_layout_height = 1; // 0x1

/**
 * <p>
 * @attr description
 * Specifies extra space on the left, top, right and bottom
 * sides of this view.  If both layout_margin and any of layout_marginLeft,
 * layout_marginRight, layout_marginStart, layout_marginEnd,
 * layout_marginTop, and layout_marginBottom are
 * also specified, the layout_margin value will take precedence over the
 * edge-specific values. This space is outside this view's bounds.
 * Margin values should be positive.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:layout_margin
 */

public static final int ViewGroup_MarginLayout_layout_margin = 2; // 0x2

/**
 * <p>
 * @attr description
 * Specifies extra space on the bottom side of this view.
 * This space is outside this view's bounds.
 * Margin values should be positive.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:layout_marginBottom
 */

public static final int ViewGroup_MarginLayout_layout_marginBottom = 6; // 0x6

/**
 * <p>
 * @attr description
 * Specifies extra space on the end side of this view.
 * This space is outside this view's bounds.
 * Margin values should be positive.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:layout_marginEnd
 */

public static final int ViewGroup_MarginLayout_layout_marginEnd = 8; // 0x8

/**
 * <p>
 * @attr description
 * Specifies extra space on the left and right sides of this view.
 * Specifying layout_marginHorizontal is equivalent to specifying
 * layout_marginLeft and layout_marginRight.
 * If both layout_marginHorizontal and either/both of layout_marginLeft
 * and layout_marginRight are also specified, the layout_marginHorizontal
 * value will take precedence over the
 * edge-specific values. Also, layout_margin will always take precedence over
 * any of these values, including layout_marginHorizontal.
 * This space is outside this view's bounds.
 * Margin values should be positive.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:layout_marginHorizontal
 */

public static final int ViewGroup_MarginLayout_layout_marginHorizontal = 9; // 0x9

/**
 * <p>
 * @attr description
 * Specifies extra space on the left side of this view.
 * This space is outside this view's bounds.
 * Margin values should be positive.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:layout_marginLeft
 */

public static final int ViewGroup_MarginLayout_layout_marginLeft = 3; // 0x3

/**
 * <p>
 * @attr description
 * Specifies extra space on the right side of this view.
 * This space is outside this view's bounds.
 * Margin values should be positive.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:layout_marginRight
 */

public static final int ViewGroup_MarginLayout_layout_marginRight = 5; // 0x5

/**
 * <p>
 * @attr description
 * Specifies extra space on the start side of this view.
 * This space is outside this view's bounds.
 * Margin values should be positive.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:layout_marginStart
 */

public static final int ViewGroup_MarginLayout_layout_marginStart = 7; // 0x7

/**
 * <p>
 * @attr description
 * Specifies extra space on the top side of this view.
 * This space is outside this view's bounds.
 * Margin values should be positive.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:layout_marginTop
 */

public static final int ViewGroup_MarginLayout_layout_marginTop = 4; // 0x4

/**
 * <p>
 * @attr description
 * Specifies extra space on the top and bottom sides of this view.
 * Specifying layout_marginVertical is equivalent to specifying
 * layout_marginTop and layout_marginBottom with that same value.
 * If both layout_marginVertical and either/both of layout_marginTop and
 * layout_marginBottom are also specified, the layout_marginVertical value
 * will take precedence over the edge-specific values.
 * Also, layout_margin will always take precedence over
 * any of these values, including layout_marginVertical.
 * This space is outside this view's bounds.
 * Margin values should be positive.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:layout_marginVertical
 */

public static final int ViewGroup_MarginLayout_layout_marginVertical = 10; // 0xa

/**
 * <p>
 * @attr description
 * Specifies the basic width of the view.  This is a required attribute
 * for any view inside of a containing layout manager.  Its value may
 * be a dimension (such as "12dip") for a constant width or one of
 * the special constants.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>fill_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
 * This constant is deprecated starting from API Level 8 and
 * is replaced by {@code match_parent}.</td></tr>
 * <tr><td>match_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
 * Introduced in API Level 8.</td></tr>
 * <tr><td>wrap_content</td><td>fffffffe</td><td>The view should be only big enough to enclose its content (plus padding).</td></tr>
 * </table>
 *
 * @attr name android:layout_width
 */

public static final int ViewGroup_MarginLayout_layout_width = 0; // 0x0

/**
 * <p>
 * @attr description
 * Sets whether this ViewGroup's drawable states also include
 * its children's drawable states.  This is used, for example, to
 * make a group appear to be focused when its child EditText or button
 * is focused.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:addStatesFromChildren
 */

public static final int ViewGroup_addStatesFromChildren = 6; // 0x6

/**
 * <p>
 * @attr description
 * Defines whether the ViewGroup should always draw its children using their
 * drawing cache or not. The default value is true.
 * Deprecated: The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:alwaysDrawnWithCache
 */

public static final int ViewGroup_alwaysDrawnWithCache = 5; // 0x5

/**
 * <p>
 * @attr description
 * Defines whether changes in layout (caused by adding and removing items) should
 * cause a LayoutTransition to run. When this flag is set to true, a default
 * LayoutTransition object will be set on the ViewGroup container and default
 * animations will run when these layout changes occur.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:animateLayoutChanges
 */

public static final int ViewGroup_animateLayoutChanges = 9; // 0x9

/**
 * <p>
 * @attr description
 * Defines whether layout animations should create a drawing cache for their
 * children. Enabling the animation cache consumes more memory and requires
 * a longer initialization but provides better performance. The animation
 * cache is enabled by default.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:animationCache
 */

public static final int ViewGroup_animationCache = 3; // 0x3

/**
 * <p>
 * @attr description
 * Defines whether a child is limited to draw inside of its bounds or not.
 * This is useful with animations that scale the size of the children to more
 * than 100% for instance. In such a case, this property should be set to false
 * to allow the children to draw outside of their bounds. The default value of
 * this property is true.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:clipChildren
 */

public static final int ViewGroup_clipChildren = 0; // 0x0

/**
 * <p>
 * @attr description
 * Defines whether the ViewGroup will clip its children and resize (but not clip) any
 * EdgeEffect to its padding, if padding is not zero. This property is set to true by
 * default.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:clipToPadding
 */

public static final int ViewGroup_clipToPadding = 1; // 0x1

/**
 * <p>
 * @attr description
 * Defines the relationship between the ViewGroup and its descendants
 * when looking for a View to take focus.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>afterDescendants</td><td>1</td><td>The ViewGroup will get focus only if none of its descendants want it.</td></tr>
 * <tr><td>beforeDescendants</td><td>0</td><td>The ViewGroup will get focus before any of its descendants.</td></tr>
 * <tr><td>blocksDescendants</td><td>2</td><td>The ViewGroup will block its descendants from receiving focus.</td></tr>
 * </table>
 *
 * @attr name android:descendantFocusability
 */

public static final int ViewGroup_descendantFocusability = 7; // 0x7

/**
 * <p>
 * @attr description
 * Defines the layout animation to use the first time the ViewGroup is laid out.
 * Layout animations can also be started manually after the first layout.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:layoutAnimation
 */

public static final int ViewGroup_layoutAnimation = 2; // 0x2

/**
 * <p>
 * @attr description
 * Defines the layout mode of this ViewGroup.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>clipBounds</td><td>0</td><td>Use the children's clip bounds when laying out this container.</td></tr>
 * <tr><td>opticalBounds</td><td>1</td><td>Use the children's optical bounds when laying out this container.</td></tr>
 * </table>
 *
 * @attr name android:layoutMode
 */

public static final int ViewGroup_layoutMode = 10; // 0xa

/**
 * <p>
 * @attr description
 * Defines the persistence of the drawing cache. The drawing cache might be
 * enabled by a ViewGroup for all its children in specific situations (for
 * instance during a scrolling.) This property lets you persist the cache
 * in memory after its initial usage. Persisting the cache consumes more
 * memory but may prevent frequent garbage collection if the cache is created
 * over and over again. By default the persistence is set to scrolling.
 * Deprecated: The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>all</td><td>3</td><td>The drawing cache is always persisted.</td></tr>
 * <tr><td>animation</td><td>1</td><td>The drawing cache is persisted after a layout animation.</td></tr>
 * <tr><td>none</td><td>0</td><td>The drawing cache is not persisted after use.</td></tr>
 * <tr><td>scrolling</td><td>2</td><td>The drawing cache is persisted after a scroll.</td></tr>
 * </table>
 *
 * @attr name android:persistentDrawingCache
 */

public static final int ViewGroup_persistentDrawingCache = 4; // 0x4

/**
 * <p>
 * @attr description
 * Sets whether this ViewGroup should split MotionEvents
 * to separate child views during touch event dispatch.
 * If false (default), touch events will be dispatched to
 * the child view where the first pointer went down until
 * the last pointer goes up.
 * If true, touch events may be dispatched to multiple children.
 * MotionEvents for each pointer will be dispatched to the child
 * view where the initial ACTION_DOWN event happened.
 * See {@link android.view.ViewGroup#setMotionEventSplittingEnabled(boolean)}
 * for more information.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:splitMotionEvents
 */

public static final int ViewGroup_splitMotionEvents = 8; // 0x8

/**
 * <p>
 * @attr description
 * Set to true if this ViewGroup blocks focus in the presence of a touchscreen.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:touchscreenBlocksFocus
 */

public static final int ViewGroup_touchscreenBlocksFocus = 12; // 0xc

/**
 * <p>
 * @attr description
 * Sets whether or not this ViewGroup should be treated as a single entity
 * when doing an Activity transition. Typically, the elements inside a
 * ViewGroup are each transitioned from the scene individually. The default
 * for a ViewGroup is false unless it has a background. See
 * {@link android.app.ActivityOptions#makeSceneTransitionAnimation(android.app.Activity,
 * android.view.View, String)} for more information. Corresponds to
 * {@link android.view.ViewGroup#setTransitionGroup(boolean)}.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:transitionGroup
 */

public static final int ViewGroup_transitionGroup = 11; // 0xb

/**
 * A {@link android.view.ViewStub} lets you lazily include other XML layouts
 * inside your application at runtime.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #ViewStub_id android:id}</code></td><td>Supply an identifier name for this view, to later retrieve it
 * with {@link android.view.View#findViewById View.findViewById()} or
 * {@link android.app.Activity#findViewById Activity.findViewById()}.</td></tr>
 * <tr><td><code>{@link #ViewStub_layout android:layout}</code></td><td>Supply an identifier for the layout resource to inflate when the ViewStub
 * becomes visible or when forced to do so.</td></tr>
 * <tr><td><code>{@link #ViewStub_inflatedId android:inflatedId}</code></td><td>Overrides the id of the inflated View with this value.</td></tr>
 * </table>
 * @see #ViewStub_id
 * @see #ViewStub_layout
 * @see #ViewStub_inflatedId
 */

public static final int[] ViewStub;
static { ViewStub = new int[0]; }

/**
 * <p>
 * @attr description
 * Supply an identifier name for this view.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:id
 */

public static final int ViewStub_id = 0; // 0x0

/**
 * <p>
 * @attr description
 * Overrides the id of the inflated View with this value.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:inflatedId
 */

public static final int ViewStub_inflatedId = 2; // 0x2

/**
 * <p>
 * @attr description
 * Supply an identifier for the layout resource to inflate when the ViewStub
 * becomes visible or when forced to do so. The layout resource must be a
 * valid reference to a layout.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:layout
 */

public static final int ViewStub_layout = 1; // 0x1

public static final int[] ViewSwitcher;
static { ViewSwitcher = new int[0]; }

/**
 * Attributes that can be assigned to a tag for a particular View.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #ViewTag_value android:value}</code></td><td>Concrete value to assign to this piece of named meta-data.</td></tr>
 * <tr><td><code>{@link #ViewTag_id android:id}</code></td><td>Supply an identifier name for this view, to later retrieve it
 * with {@link android.view.View#findViewById View.findViewById()} or
 * {@link android.app.Activity#findViewById Activity.findViewById()}.</td></tr>
 * </table>
 * @see #ViewTag_value
 * @see #ViewTag_id
 */

public static final int[] ViewTag;
static { ViewTag = new int[0]; }

/**
 * <p>
 * @attr description
 * Specifies the key identifying a tag. This must be a resource reference.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:id
 */

public static final int ViewTag_id = 1; // 0x1

/**
 * <p>
 * @attr description
 * Specifies the value with which to tag the view.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:value
 */

public static final int ViewTag_value = 0; // 0x0

/**
 * <p>
 * @attr description
 * Whether or not this view is a heading for accessibility purposes.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:accessibilityHeading
 */

public static final int View_accessibilityHeading = 99; // 0x63

/**
 * <p>
 * @attr description
 * Indicates to accessibility services whether the user should be notified when
 * this view changes.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>assertive</td><td>2</td><td>Accessibility services should interrupt ongoing speech to immediately
 * announce changes to this view.</td></tr>
 * <tr><td>none</td><td>0</td><td>Accessibility services should not announce changes to this view.</td></tr>
 * <tr><td>polite</td><td>1</td><td>Accessibility services should announce changes to this view.</td></tr>
 * </table>
 *
 * @attr name android:accessibilityLiveRegion
 */

public static final int View_accessibilityLiveRegion = 71; // 0x47

/**
 * <p>
 * @attr description
 * The title this view should present to accessibility as a pane title.
 * See {@link android.view.View#setAccessibilityPaneTitle(CharSequence)}
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:accessibilityPaneTitle
 */

public static final int View_accessibilityPaneTitle = 98; // 0x62

/**
 * <p>
 * @attr description
 * Sets the id of a view after which this one is visited in accessibility traversal.
 * A screen-reader must visit the content of the other view before the content of
 * this one.
 * {@see android.view.View#setAccessibilityTraversalAfter(int)}
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:accessibilityTraversalAfter
 */

public static final int View_accessibilityTraversalAfter = 83; // 0x53

/**
 * <p>
 * @attr description
 * Sets the id of a view before which this one is visited in accessibility traversal.
 * A screen-reader must visit the content of this view before the content of the one
 * it precedes.
 * {@see android.view.View#setAccessibilityTraversalBefore(int)}
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:accessibilityTraversalBefore
 */

public static final int View_accessibilityTraversalBefore = 82; // 0x52

/**
 * <p>
 * @attr description
 * alpha property of the view, as a value between 0 (completely transparent) and 1
 * (completely opaque).
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:alpha
 */

public static final int View_alpha = 50; // 0x32

/**
 * <p>
 * @attr description
 * Describes the content of a view so that a autofill service can fill in the appropriate
 * data. Multiple hints can be combined in a comma separated list or an array of strings
 * to mean e.g. emailAddress or postalAddress.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:autofillHints
 */

public static final int View_autofillHints = 94; // 0x5e

/**
 * <p>
 * @attr description
 * A drawable to use as the background.  This can be either a reference
 * to a full drawable resource (such as a PNG image, 9-patch,
 * XML state list description, etc), or a solid color such as "#ff000000"
 * (black).
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:background
 */

public static final int View_background = 13; // 0xd

/**
 * <p>
 * @attr description
 * Tint to apply to the background.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:backgroundTint
 */

public static final int View_backgroundTint = 77; // 0x4d

/**
 * <p>
 * @attr description
 * Blending mode used to apply the background tint.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 *
 * @attr name android:backgroundTintMode
 */

public static final int View_backgroundTintMode = 78; // 0x4e

/**
 * <p>
 * @attr description
 * Defines whether this view reacts to click events.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:clickable
 */

public static final int View_clickable = 30; // 0x1e

/**
 * <p>
 * @attr description
 * Defines text that briefly describes content of the view. This property is used
 * primarily for accessibility. Since some views do not have textual
 * representation this attribute can be used for providing such.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:contentDescription
 */

public static final int View_contentDescription = 44; // 0x2c

/**
 * <p>
 * @attr description
 * Defines whether this view reacts to context click events.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:contextClickable
 */

public static final int View_contextClickable = 85; // 0x55

/**
 * <p>
 * @attr description
 * Whether this View should use a default focus highlight when it gets focused but
 * doesn't have {@link android.R.attr#state_focused} defined in its background.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:defaultFocusHighlightEnabled
 */

public static final int View_defaultFocusHighlightEnabled = 96; // 0x60

/**
 * <p>
 * @attr description
 * Defines the quality of translucent drawing caches. This property is used
 * only when the drawing cache is enabled and translucent. The default value is auto.
 * Deprecated: The view drawing cache was largely made obsolete with the introduction of
 * hardware-accelerated rendering in API 11.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>auto</td><td>0</td><td>Lets the framework decide what quality level should be used
 * for the drawing cache.
 * Deprecated: The view drawing cache was largely made obsolete with the introduction
 * of hardware-accelerated rendering in API 11.</td></tr>
 * <tr><td>high</td><td>2</td><td>High quality. When set to high quality, the drawing cache uses a higher
 * color depth but uses more memory.
 * Deprecated: The view drawing cache was largely made obsolete with the introduction
 * of hardware-accelerated rendering in API 11.</td></tr>
 * <tr><td>low</td><td>1</td><td>Low quality. When set to low quality, the drawing cache uses a lower color
 * depth, thus losing precision in rendering gradients, but uses less memory.
 * Deprecated: The view drawing cache was largely made obsolete with the introduction
 * of hardware-accelerated rendering in API 11.</td></tr>
 * </table>
 *
 * @attr name android:drawingCacheQuality
 */

public static final int View_drawingCacheQuality = 33; // 0x21

/**
 * <p>
 * @attr description
 * When this attribute is set to true, the view gets its drawable state
 * (focused, pressed, etc.) from its direct parent rather than from itself.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:duplicateParentState
 */

public static final int View_duplicateParentState = 34; // 0x22

/**
 * <p>
 * @attr description
 * base z depth of the view.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:elevation
 */

public static final int View_elevation = 75; // 0x4b

/**
 * <p>
 * @attr description
 * Defines whether to fade out scrollbars when they are not in use.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:fadeScrollbars
 */

public static final int View_fadeScrollbars = 47; // 0x2f

/**
 * <p>
 * @attr description
 * This attribute is ignored in API level 14
 * ({@link android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH}) and higher.
 * Using fading edges may introduce noticeable performance
 * degradations and should be used only when required by the application's
 * visual design. To request fading edges with API level 14 and above,
 * use the <code>android:requiresFadingEdge</code> attribute instead.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>horizontal</td><td>1000</td><td>Fades horizontal edges only.</td></tr>
 * <tr><td>none</td><td>0</td><td>No edge is faded.</td></tr>
 * <tr><td>vertical</td><td>2000</td><td>Fades vertical edges only.</td></tr>
 * </table>
 *
 * @attr name android:fadingEdge
 */

public static final int View_fadingEdge = 24; // 0x18

/**
 * <p>
 * @attr description
 * Defines the length of the fading edges.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:fadingEdgeLength
 */

public static final int View_fadingEdgeLength = 25; // 0x19

/**
 * <p>
 * @attr description
 * Specifies whether to filter touches when the view's window is obscured by
 * another visible window.  When set to true, the view will not receive touches
 * whenever a toast, dialog or other window appears above the view's window.
 * Refer to the {@link android.view.View} security documentation for more details.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:filterTouchesWhenObscured
 */

public static final int View_filterTouchesWhenObscured = 49; // 0x31

/**
 * <p>
 * @attr description
 * Boolean internal attribute to adjust view layout based on
 * system windows such as the status bar.
 * If true, adjusts the padding of this view to leave space for the system windows.
 * Will only take effect if this view is in a non-embedded activity.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:fitsSystemWindows
 */

public static final int View_fitsSystemWindows = 22; // 0x16

/**
 * <p>
 * @attr description
 * Controls whether a view can take focus.  By default, this is "auto" which lets the
 * framework determine whether a user can move focus to a view.  By setting this attribute
 * to true the view is allowed to take focus. By setting it to "false" the view will not
 * take focus. This value does not impact the behavior of
 * directly calling {@link android.view.View#requestFocus}, which will
 * always request focus regardless of this view.  It only impacts where
 * focus navigation will try to move focus.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>auto</td><td>10</td><td></td></tr>
 * </table>
 *
 * @attr name android:focusable
 */

public static final int View_focusable = 19; // 0x13

/**
 * <p>
 * @attr description
 * Boolean that controls whether a view can take focus while in touch mode.
 * If this is true for a view, that view can gain focus when clicked on, and can keep
 * focus if another view is clicked on that doesn't have this attribute set to true.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:focusableInTouchMode
 */

public static final int View_focusableInTouchMode = 20; // 0x14

/**
 * <p>
 * @attr description
 * Whether this view is a default-focus view.
 * Only one view per keyboard navigation cluster can have this attribute set to true.
 * See {@link android.view.View#setFocusedByDefault(boolean)}.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:focusedByDefault
 */

public static final int View_focusedByDefault = 93; // 0x5d

/**
 * <p>
 * @attr description
 * <p>Whether or not the force dark feature is allowed to be applied to this View.
 * <p>Setting this to false will disable the auto-dark feature on this View draws
 * including any descendants.
 * <p>Setting this to true will allow this view to be automatically made dark, however
 * a value of 'true' will not override any 'false' value in its parent chain nor will
 * it prevent any 'false' in any of its children.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:forceDarkAllowed
 */

public static final int View_forceDarkAllowed = 102; // 0x66

/**
 * <p>
 * @attr description
 * Whether this view has elements that may overlap when drawn. See
 * {@link android.view.View#forceHasOverlappingRendering(boolean)}.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:forceHasOverlappingRendering
 */

public static final int View_forceHasOverlappingRendering = 87; // 0x57

/**
 * <p>
 * @attr description
 * Defines the drawable to draw over the content. This can be used as an overlay.
 * The foreground drawable participates in the padding of the content if the gravity
 * is set to fill.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:foreground
 */

public static final int View_foreground = 35; // 0x23

/**
 * <p>
 * @attr description
 * Defines the gravity to apply to the foreground drawable. The gravity defaults
 * to fill.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
 * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
 * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
 * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
 * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the horizontal gravity: a left gravity will clip the right
 * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
 * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
 * the child clipped to its container's bounds.
 * The clip will be based on the vertical gravity: a top gravity will clip the bottom
 * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
 * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
 * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
 * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
 * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
 * </table>
 *
 * @attr name android:foregroundGravity
 */

public static final int View_foregroundGravity = 38; // 0x26

/**
 * <p>
 * @attr description
 * Tint to apply to the foreground.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:foregroundTint
 */

public static final int View_foregroundTint = 79; // 0x4f

/**
 * <p>
 * @attr description
 * Blending mode used to apply the foreground tint.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
 * result to valid color values. Saturate(S + D)</td></tr>
 * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
 * the tint. [Sa * Da, Sc * Dc]</td></tr>
 * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
 * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
 * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
 * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
 * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
 * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
 * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
 * </table>
 *
 * @attr name android:foregroundTintMode
 */

public static final int View_foregroundTintMode = 80; // 0x50

/**
 * <p>
 * @attr description
 * Boolean that controls whether a view should have haptic feedback
 * enabled for events such as long presses.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:hapticFeedbackEnabled
 */

public static final int View_hapticFeedbackEnabled = 42; // 0x2a

/**
 * <p>
 * @attr description
 * Supply an identifier name for this view, to later retrieve it
 * with {@link android.view.View#findViewById View.findViewById()} or
 * {@link android.app.Activity#findViewById Activity.findViewById()}.
 * This must be a
 * resource reference; typically you set this using the
 * <code>@+</code> syntax to create a new ID resources.
 * For example: <code>android:id="@+id/my_id"</code> which
 * allows you to later retrieve the view
 * with <code>findViewById(R.id.my_id)</code>.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:id
 */

public static final int View_id = 9; // 0x9

/**
 * <p>
 * @attr description
 * Describes whether or not this view is important for accessibility.
 * If it is important, the view fires accessibility events and is
 * reported to accessibility services that query the screen. Note:
 * While not recommended, an accessibility service may decide to
 * ignore this attribute and operate on all views in the view tree.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>auto</td><td>0</td><td>The system determines whether the view is important for accessibility - default
 * (recommended).</td></tr>
 * <tr><td>no</td><td>2</td><td>The view is not important for accessibility.</td></tr>
 * <tr><td>noHideDescendants</td><td>4</td><td>The view is not important for accessibility, nor are any of its descendant
 * views.</td></tr>
 * <tr><td>yes</td><td>1</td><td>The view is important for accessibility.</td></tr>
 * </table>
 *
 * @attr name android:importantForAccessibility
 */

public static final int View_importantForAccessibility = 64; // 0x40

/**
 * <p>
 * @attr description
 * Hints the Android System whether the view node associated with this View should be
 * included in a view structure used for autofill purposes.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>auto</td><td>0</td><td>Let the Android System use its heuristics to determine if the view is important for autofill.</td></tr>
 * <tr><td>no</td><td>2</td><td>Hint the Android System that this view is *not* important for autofill,
 * but its children (if any) will be traversed..</td></tr>
 * <tr><td>noExcludeDescendants</td><td>8</td><td>Hint the Android System that this view is *not* important for autofill,
 * and its children (if any) will not be traversed.</td></tr>
 * <tr><td>yes</td><td>1</td><td>Hint the Android System that this view is important for autofill,
 * and its children (if any) will be traversed..</td></tr>
 * <tr><td>yesExcludeDescendants</td><td>4</td><td>Hint the Android System that this view is important for autofill,
 * but its children (if any) will not be traversed.</td></tr>
 * </table>
 *
 * @attr name android:importantForAutofill
 */

public static final int View_importantForAutofill = 95; // 0x5f

/**
 * <p>
 * @attr description
 * Set this if the view will serve as a scrolling container, meaning
 * that it can be resized to shrink its overall window so that there
 * will be space for an input method.  If not set, the default
 * value will be true if "scrollbars" has the vertical scrollbar
 * set, else it will be false.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:isScrollContainer
 */

public static final int View_isScrollContainer = 41; // 0x29

/**
 * <p>
 * @attr description
 * Controls whether the view's window should keep the screen on
 * while visible.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:keepScreenOn
 */

public static final int View_keepScreenOn = 40; // 0x28

/**
 * <p>
 * @attr description
 * Whether this view is a root of a keyboard navigation cluster.
 * See {@link android.view.View#setKeyboardNavigationCluster(boolean)}.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:keyboardNavigationCluster
 */

public static final int View_keyboardNavigationCluster = 91; // 0x5b

/**
 * <p>
 * @attr description
 * Specifies the id of a view for which this view serves as a label for
 * accessibility purposes. For example, a TextView before an EditText in
 * the UI usually specifies what infomation is contained in the EditText.
 * Hence, the TextView is a label for the EditText.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:labelFor
 */

public static final int View_labelFor = 70; // 0x46

/**
 * <p>
 * @attr description
 * Specifies the type of layer backing this view. The default value is none.
 * Refer to {@link android.view.View#setLayerType(int, android.graphics.Paint)}
 * for more information.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>hardware</td><td>2</td><td>Use a hardware layer. Refer to
 * {@link android.view.View#setLayerType(int, android.graphics.Paint)} for
 * more information.</td></tr>
 * <tr><td>none</td><td>0</td><td>Don't use a layer.</td></tr>
 * <tr><td>software</td><td>1</td><td>Use a software layer. Refer to
 * {@link android.view.View#setLayerType(int, android.graphics.Paint)} for
 * more information.</td></tr>
 * </table>
 *
 * @attr name android:layerType
 */

public static final int View_layerType = 62; // 0x3e

/**
 * <p>
 * @attr description
 * Defines the direction of layout drawing. This typically is associated with writing
 * direction of the language script used. The possible values are "ltr" for Left-to-Right,
 * "rtl" for Right-to-Left, "locale", and "inherit" from parent view. If there is nothing
 * to inherit, "locale" is used. "locale" falls back to "en-US". "ltr" is the direction
 * used in "en-US". The default for this attribute is "inherit".
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>inherit</td><td>2</td><td>Inherit from parent.</td></tr>
 * <tr><td>locale</td><td>3</td><td>Locale.</td></tr>
 * <tr><td>ltr</td><td>0</td><td>Left-to-Right.</td></tr>
 * <tr><td>rtl</td><td>1</td><td>Right-to-Left.</td></tr>
 * </table>
 *
 * @attr name android:layoutDirection
 */

public static final int View_layoutDirection = 67; // 0x43

/**
 * <p>
 * @attr description
 * Defines whether this view reacts to long click events.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:longClickable
 */

public static final int View_longClickable = 31; // 0x1f

/**
 * <p>
 * @attr description
 * Defines the minimum height of the view. It is not guaranteed
 * the view will be able to achieve this minimum height (for example,
 * if its parent layout constrains it with less available height).
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:minHeight
 */

public static final int View_minHeight = 37; // 0x25

/**
 * <p>
 * @attr description
 * Defines the minimum width of the view. It is not guaranteed
 * the view will be able to achieve this minimum width (for example,
 * if its parent layout constrains it with less available width).
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:minWidth
 */

public static final int View_minWidth = 36; // 0x24

/**
 * <p>
 * @attr description
 * Specifies that this view should permit nested scrolling within a compatible
 * ancestor view.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:nestedScrollingEnabled
 */

public static final int View_nestedScrollingEnabled = 74; // 0x4a

/**
 * <p>
 * @attr description
 * Defines the next keyboard navigation cluster.
 * If the reference refers to a view that does not exist or is part
 * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
 * will result when the reference is accessed.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:nextClusterForward
 */

public static final int View_nextClusterForward = 92; // 0x5c

/**
 * <p>
 * @attr description
 * Defines the next view to give focus to when the next focus is
 * {@link android.view.View#FOCUS_DOWN}
 * If the reference refers to a view that does not exist or is part
 * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
 * will result when the reference is accessed.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:nextFocusDown
 */

public static final int View_nextFocusDown = 29; // 0x1d

/**
 * <p>
 * @attr description
 * Defines the next view to give focus to when the next focus is
 * {@link android.view.View#FOCUS_FORWARD}
 * If the reference refers to a view that does not exist or is part
 * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
 * will result when the reference is accessed.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:nextFocusForward
 */

public static final int View_nextFocusForward = 61; // 0x3d

/**
 * <p>
 * @attr description
 * Defines the next view to give focus to when the next focus is
 * {@link android.view.View#FOCUS_LEFT}.
 * If the reference refers to a view that does not exist or is part
 * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
 * will result when the reference is accessed.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:nextFocusLeft
 */

public static final int View_nextFocusLeft = 26; // 0x1a

/**
 * <p>
 * @attr description
 * Defines the next view to give focus to when the next focus is
 * {@link android.view.View#FOCUS_RIGHT}
 * If the reference refers to a view that does not exist or is part
 * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
 * will result when the reference is accessed.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:nextFocusRight
 */

public static final int View_nextFocusRight = 27; // 0x1b

/**
 * <p>
 * @attr description
 * Defines the next view to give focus to when the next focus is
 * {@link android.view.View#FOCUS_UP}
 * If the reference refers to a view that does not exist or is part
 * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
 * will result when the reference is accessed.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:nextFocusUp
 */

public static final int View_nextFocusUp = 28; // 0x1c

/**
 * <p>
 * @attr description
 * Name of the method in this View's context to invoke when the view is
 * clicked. This name must correspond to a public method that takes
 * exactly one parameter of type View. For instance, if you specify
 * <code>android:onClick="sayHello"</code>, you must declare a
 * <code>public void sayHello(View v)</code> method of your context
 * (typically, your Activity).
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:onClick
 */

public static final int View_onClick = 43; // 0x2b

/**
 * <p>
 * @attr description
 * Sets the color of the ambient shadow that is drawn when the view has a positive Z
 * or elevation value.
 * <p>
 * By default the shadow color is black. Generally, this color will be opaque so the
 * intensity of the shadow is consistent between different views with different colors.
 * <p>
 * The opacity of the final ambient shadow is a function of the shadow caster height,
 * the alpha channel of the outlineAmbientShadowColor (typically opaque), and the
 * {@link android.R.attr#ambientShadowAlpha} theme attribute.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:outlineAmbientShadowColor
 */

public static final int View_outlineAmbientShadowColor = 101; // 0x65

/**
 * <p>
 * @attr description
 * ViewOutlineProvider used to determine the View's Outline.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>background</td><td>0</td><td>Default, background drawable-driven outline.</td></tr>
 * <tr><td>bounds</td><td>2</td><td>Generates an opaque outline for the bounds of the view.</td></tr>
 * <tr><td>none</td><td>1</td><td>No outline provider.</td></tr>
 * <tr><td>paddedBounds</td><td>3</td><td>Generates an opaque outline for the padded bounds of the view.</td></tr>
 * </table>
 *
 * @attr name android:outlineProvider
 */

public static final int View_outlineProvider = 81; // 0x51

/**
 * <p>
 * @attr description
 * Sets the color of the spot shadow that is drawn when the view has a positive Z or
 * elevation value.
 * <p>
 * By default the shadow color is black. Generally, this color will be opaque so the
 * intensity of the shadow is consistent between different views with different colors.
 * <p>
 * The opacity of the final spot shadow is a function of the shadow caster height, the
 * alpha channel of the outlineSpotShadowColor (typically opaque), and the
 * {@link android.R.attr#spotShadowAlpha} theme attribute.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:outlineSpotShadowColor
 */

public static final int View_outlineSpotShadowColor = 100; // 0x64

/**
 * <p>
 * @attr description
 * Defines over-scrolling behavior. This property is used only if the
 * View is scrollable. Over-scrolling is the ability for the user to
 * receive feedback when attempting to scroll beyond meaningful content.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>always</td><td>0</td><td>Always show over-scroll effects, even if the content fits entirely
 * within the available space.</td></tr>
 * <tr><td>ifContentScrolls</td><td>1</td><td>Only show over-scroll effects if the content is large
 * enough to meaningfully scroll.</td></tr>
 * <tr><td>never</td><td>2</td><td>Never show over-scroll effects.</td></tr>
 * </table>
 *
 * @attr name android:overScrollMode
 */

public static final int View_overScrollMode = 48; // 0x30

/**
 * <p>
 * @attr description
 * Sets the padding, in pixels, of all four edges. Padding is defined as
 * space between the edges of the view and the view's content. This value will take
 * precedence over any of the edge-specific values (paddingLeft, paddingTop,
 * paddingRight, paddingBottom, paddingHorizontal and paddingVertical), but will
 * not override paddingStart or paddingEnd, if set. A view's size
 * will include its padding. If a {@link android.R.attr#background}
 * is provided, the padding will initially be set to that (0 if the
 * drawable does not have padding). Explicitly setting a padding value
 * will override the corresponding padding found in the background.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:padding
 */

public static final int View_padding = 14; // 0xe

/**
 * <p>
 * @attr description
 * Sets the padding, in pixels, of the bottom edge; see {@link android.R.attr#padding}.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:paddingBottom
 */

public static final int View_paddingBottom = 18; // 0x12

/**
 * <p>
 * @attr description
 * Sets the padding, in pixels, of the end edge; see {@link android.R.attr#padding}.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:paddingEnd
 */

public static final int View_paddingEnd = 69; // 0x45

/**
 * <p>
 * @attr description
 * Sets the padding, in pixels, of the left and right edges; see
 * {@link android.R.attr#padding}. This value will take precedence over
 * paddingLeft and paddingRight, but not paddingStart or paddingEnd (if set).
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:paddingHorizontal
 */

public static final int View_paddingHorizontal = 89; // 0x59

/**
 * <p>
 * @attr description
 * Sets the padding, in pixels, of the left edge; see {@link android.R.attr#padding}.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:paddingLeft
 */

public static final int View_paddingLeft = 15; // 0xf

/**
 * <p>
 * @attr description
 * Sets the padding, in pixels, of the right edge; see {@link android.R.attr#padding}.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:paddingRight
 */

public static final int View_paddingRight = 17; // 0x11

/**
 * <p>
 * @attr description
 * Sets the padding, in pixels, of the start edge; see {@link android.R.attr#padding}.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:paddingStart
 */

public static final int View_paddingStart = 68; // 0x44

/**
 * <p>
 * @attr description
 * Sets the padding, in pixels, of the top edge; see {@link android.R.attr#padding}.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:paddingTop
 */

public static final int View_paddingTop = 16; // 0x10

/**
 * <p>
 * @attr description
 * Sets the padding, in pixels, of the top and bottom edges; see
 * {@link android.R.attr#padding}. This value will take precedence over
 * paddingTop and paddingBottom, if set.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:paddingVertical
 */

public static final int View_paddingVertical = 90; // 0x5a

/**
 * <p>This symbol is the offset where the {@link android.R.attr#pointerIcon}
 * attribute's value can be found in the {@link #View} array.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>alias</td><td>3f2</td><td>Pointer icon of 'alias', indicating an alias of/shortcut to something is to be
 * created.</td></tr>
 * <tr><td>all_scroll</td><td>3f5</td><td>Pointer icon of four-way arrows, indicating scrolling all direction.</td></tr>
 * <tr><td>arrow</td><td>3e8</td><td>The default icon of arrow pointer.</td></tr>
 * <tr><td>cell</td><td>3ee</td><td>Pointer icon for cell and grid.</td></tr>
 * <tr><td>context_menu</td><td>3e9</td><td>Pointer icon indicating context-menu will appear.</td></tr>
 * <tr><td>copy</td><td>3f3</td><td>Pointer icon of 'copy', used for drag/drop.</td></tr>
 * <tr><td>crosshair</td><td>3ef</td><td>Pointer icon of crosshair, indicating to spot a location.</td></tr>
 * <tr><td>grab</td><td>3fc</td><td>Pointer icon of a hand sign to grab something.</td></tr>
 * <tr><td>grabbing</td><td>3fd</td><td>Pointer icon of a hand sign while grabbing something.</td></tr>
 * <tr><td>hand</td><td>3ea</td><td>Pointer icon of a hand with the index finger.</td></tr>
 * <tr><td>help</td><td>3eb</td><td>Pointer icon indicating help.</td></tr>
 * <tr><td>horizontal_double_arrow</td><td>3f6</td><td>Pointer icon of horizontal double arrow, indicating horizontal resize.</td></tr>
 * <tr><td>no_drop</td><td>3f4</td><td>Pointer icon of 'no-drop', indicating the drop will not be accepted at the
 * current location.</td></tr>
 * <tr><td>none</td><td>0</td><td>Null icon, pointer becomes invisible.</td></tr>
 * <tr><td>text</td><td>3f0</td><td>Pointer icon of I-beam, usually for text.</td></tr>
 * <tr><td>top_left_diagonal_double_arrow</td><td>3f9</td><td>Pointer icon of diagonal double arrow, starting from top-left to bottom-right.
 * Indicating freeform resize.</td></tr>
 * <tr><td>top_right_diagonal_double_arrow</td><td>3f8</td><td>Pointer icon of diagonal double arrow, starting from top-right to bottom-left.
 * Indicating freeform resize.</td></tr>
 * <tr><td>vertical_double_arrow</td><td>3f7</td><td>Pointer icon of vertical double arrow, indicating vertical resize.</td></tr>
 * <tr><td>vertical_text</td><td>3f1</td><td>Pointer icon of I-beam with 90-degree rotated, for vertical text.</td></tr>
 * <tr><td>wait</td><td>3ec</td><td>Pointer icon indicating something is going on and waiting.</td></tr>
 * <tr><td>zoom_in</td><td>3fa</td><td>Pointer icon indicating zoom-in.</td></tr>
 * <tr><td>zoom_out</td><td>3fb</td><td>Pointer icon indicating zoom-out.</td></tr>
 * </table>
 *
 * @attr name android:pointerIcon
 */

public static final int View_pointerIcon = 86; // 0x56

/**
 * <p>
 * @attr description
 * Defines which edges should be faded on scrolling.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>horizontal</td><td>1000</td><td>Fades horizontal edges only.</td></tr>
 * <tr><td>none</td><td>0</td><td>No edge is faded.</td></tr>
 * <tr><td>vertical</td><td>2000</td><td>Fades vertical edges only.</td></tr>
 * </table>
 *
 * @attr name android:requiresFadingEdge
 */

public static final int View_requiresFadingEdge = 63; // 0x3f

/**
 * <p>
 * @attr description
 * rotation of the view, in degrees.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:rotation
 */

public static final int View_rotation = 57; // 0x39

/**
 * <p>
 * @attr description
 * rotation of the view around the x axis, in degrees.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:rotationX
 */

public static final int View_rotationX = 58; // 0x3a

/**
 * <p>
 * @attr description
 * rotation of the view around the y axis, in degrees.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:rotationY
 */

public static final int View_rotationY = 59; // 0x3b

/**
 * <p>
 * @attr description
 * If false, no state will be saved for this view when it is being
 * frozen. The default is true, allowing the view to be saved
 * (however it also must have an ID assigned to it for its
 * state to be saved).  Setting this to false only disables the
 * state for this view, not for its children which may still
 * be saved.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:saveEnabled
 */

public static final int View_saveEnabled = 32; // 0x20

/**
 * <p>
 * @attr description
 * scale of the view in the x direction.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:scaleX
 */

public static final int View_scaleX = 55; // 0x37

/**
 * <p>
 * @attr description
 * scale of the view in the y direction.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:scaleY
 */

public static final int View_scaleY = 56; // 0x38

/**
 * <p>
 * @attr description
 * Whether this view should be treated as a focusable unit by screen reader accessibility
 * tools. See {@link android.view.View#setScreenReaderFocusable(boolean)}. The default
 * value, {@code false}, leaves the screen reader to consider other signals, such as
 * focusability or the presence of text, to decide what it focus.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:screenReaderFocusable
 */

public static final int View_screenReaderFocusable = 97; // 0x61

/**
 * <p>
 * @attr description
 * Defines which scroll indicators should be displayed when the view
 * can be scrolled. Multiple values may be combined using logical OR,
 * for example "top|bottom".
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>bottom</td><td>2</td><td>Displays bottom scroll indicator when vew can be scrolled down.</td></tr>
 * <tr><td>end</td><td>20</td><td>Displays right scroll indicator when vew can be scrolled in the
 * end direction.</td></tr>
 * <tr><td>left</td><td>4</td><td>Displays left scroll indicator when vew can be scrolled left.</td></tr>
 * <tr><td>none</td><td>0</td><td>No scroll indicators are displayed.</td></tr>
 * <tr><td>right</td><td>8</td><td>Displays right scroll indicator when vew can be scrolled right.</td></tr>
 * <tr><td>start</td><td>10</td><td>Displays right scroll indicator when vew can be scrolled in the
 * start direction.</td></tr>
 * <tr><td>top</td><td>1</td><td>Displays top scroll indicator when view can be scrolled up.</td></tr>
 * </table>
 *
 * @attr name android:scrollIndicators
 */

public static final int View_scrollIndicators = 84; // 0x54

/**
 * <p>
 * @attr description
 * The initial horizontal scroll offset, in pixels.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:scrollX
 */

public static final int View_scrollX = 11; // 0xb

/**
 * <p>
 * @attr description
 * The initial vertical scroll offset, in pixels.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:scrollY
 */

public static final int View_scrollY = 12; // 0xc

/**
 * <p>
 * @attr description
 * Defines whether the horizontal scrollbar track should always be drawn.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:scrollbarAlwaysDrawHorizontalTrack
 */

public static final int View_scrollbarAlwaysDrawHorizontalTrack = 6; // 0x6

/**
 * <p>
 * @attr description
 * Defines whether the vertical scrollbar track should always be drawn.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:scrollbarAlwaysDrawVerticalTrack
 */

public static final int View_scrollbarAlwaysDrawVerticalTrack = 7; // 0x7

/**
 * <p>
 * @attr description
 * Defines the delay in milliseconds that a scrollbar waits before fade out.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:scrollbarDefaultDelayBeforeFade
 */

public static final int View_scrollbarDefaultDelayBeforeFade = 46; // 0x2e

/**
 * <p>
 * @attr description
 * Defines the delay in milliseconds that a scrollbar takes to fade out.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:scrollbarFadeDuration
 */

public static final int View_scrollbarFadeDuration = 45; // 0x2d

/**
 * <p>
 * @attr description
 * Sets the width of vertical scrollbars and height of horizontal scrollbars.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:scrollbarSize
 */

public static final int View_scrollbarSize = 1; // 0x1

/**
 * <p>
 * @attr description
 * Controls the scrollbar style and position. The scrollbars can be overlaid or
 * inset. When inset, they add to the padding of the view. And the
 * scrollbars can be drawn inside the padding area or on the edge of
 * the view. For example, if a view has a background drawable and you
 * want to draw the scrollbars inside the padding specified by the
 * drawable, you can use insideOverlay or insideInset. If you want them
 * to appear at the edge of the view, ignoring the padding, then you can
 * use outsideOverlay or outsideInset.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>insideInset</td><td>1000000</td><td>Inside the padding and inset.</td></tr>
 * <tr><td>insideOverlay</td><td>0</td><td>Inside the padding and overlaid.</td></tr>
 * <tr><td>outsideInset</td><td>3000000</td><td>Edge of the view and inset.</td></tr>
 * <tr><td>outsideOverlay</td><td>2000000</td><td>Edge of the view and overlaid.</td></tr>
 * </table>
 *
 * @attr name android:scrollbarStyle
 */

public static final int View_scrollbarStyle = 8; // 0x8

/**
 * <p>
 * @attr description
 * Defines the horizontal scrollbar thumb drawable.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:scrollbarThumbHorizontal
 */

public static final int View_scrollbarThumbHorizontal = 2; // 0x2

/**
 * <p>
 * @attr description
 * Defines the vertical scrollbar thumb drawable.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:scrollbarThumbVertical
 */

public static final int View_scrollbarThumbVertical = 3; // 0x3

/**
 * <p>
 * @attr description
 * Defines the horizontal scrollbar track drawable.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:scrollbarTrackHorizontal
 */

public static final int View_scrollbarTrackHorizontal = 4; // 0x4

/**
 * <p>
 * @attr description
 * Defines the vertical scrollbar track drawable.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:scrollbarTrackVertical
 */

public static final int View_scrollbarTrackVertical = 5; // 0x5

/**
 * <p>
 * @attr description
 * Defines which scrollbars should be displayed on scrolling or not.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>horizontal</td><td>100</td><td>Displays horizontal scrollbar only.</td></tr>
 * <tr><td>none</td><td>0</td><td>No scrollbar is displayed.</td></tr>
 * <tr><td>vertical</td><td>200</td><td>Displays vertical scrollbar only.</td></tr>
 * </table>
 *
 * @attr name android:scrollbars
 */

public static final int View_scrollbars = 23; // 0x17

/**
 * <p>
 * @attr description
 * Boolean that controls whether a view should have sound effects
 * enabled for events such as clicking and touching.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:soundEffectsEnabled
 */

public static final int View_soundEffectsEnabled = 39; // 0x27

/**
 * <p>
 * @attr description
 * Sets the state-based animator for the View.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:stateListAnimator
 */

public static final int View_stateListAnimator = 76; // 0x4c

/**
 * <p>
 * @attr description
 * Supply a tag for this view containing a String, to be retrieved
 * later with {@link android.view.View#getTag View.getTag()} or
 * searched for with {@link android.view.View#findViewWithTag
 * View.findViewWithTag()}.  It is generally preferable to use
 * IDs (through the android:id attribute) instead of tags because
 * they are faster and allow for compile-time type checking.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:tag
 */

public static final int View_tag = 10; // 0xa

/**
 * <p>
 * @attr description
 * Defines the alignment of the text.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>center</td><td>4</td><td>Center the paragraph, for example: ALIGN_CENTER.</td></tr>
 * <tr><td>gravity</td><td>1</td><td>Default for the root view. The gravity determines the alignment, ALIGN_NORMAL,
 * ALIGN_CENTER, or ALIGN_OPPOSITE, which are relative to each paragraph’s
 * text direction.</td></tr>
 * <tr><td>inherit</td><td>0</td><td>Default.</td></tr>
 * <tr><td>textEnd</td><td>3</td><td>Align to the end of the paragraph, for example: ALIGN_OPPOSITE.</td></tr>
 * <tr><td>textStart</td><td>2</td><td>Align to the start of the paragraph, for example: ALIGN_NORMAL.</td></tr>
 * <tr><td>viewEnd</td><td>6</td><td>Align to the end of the view, which is ALIGN_RIGHT if the view’s resolved
 * layoutDirection is LTR, and ALIGN_LEFT otherwise.</td></tr>
 * <tr><td>viewStart</td><td>5</td><td>Align to the start of the view, which is ALIGN_LEFT if the view’s resolved
 * layoutDirection is LTR, and ALIGN_RIGHT otherwise.</td></tr>
 * </table>
 *
 * @attr name android:textAlignment
 */

public static final int View_textAlignment = 66; // 0x42

/**
 * <p>
 * @attr description
 * Defines the direction of the text.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>anyRtl</td><td>2</td><td>The paragraph direction is RTL if it contains any strong RTL character, otherwise
 * it is LTR if it contains any strong LTR characters.  If there are neither, the
 * paragraph direction is the view’s resolved layout direction.</td></tr>
 * <tr><td>firstStrong</td><td>1</td><td>Default for the root view. The first strong directional character determines the
 * paragraph direction.  If there is no strong directional character, the paragraph
 * direction is the view’s resolved layout direction.</td></tr>
 * <tr><td>firstStrongLtr</td><td>6</td><td>The first strong directional character determines the paragraph direction. If
 * there is no strong directional character, the paragraph direction is LTR.</td></tr>
 * <tr><td>firstStrongRtl</td><td>7</td><td>The first strong directional character determines the paragraph direction. If
 * there is no strong directional character, the paragraph direction is RTL.</td></tr>
 * <tr><td>inherit</td><td>0</td><td>Default.</td></tr>
 * <tr><td>locale</td><td>5</td><td>The paragraph direction is coming from the system Locale.</td></tr>
 * <tr><td>ltr</td><td>3</td><td>The paragraph direction is left to right.</td></tr>
 * <tr><td>rtl</td><td>4</td><td>The paragraph direction is right to left.</td></tr>
 * </table>
 *
 * @attr name android:textDirection
 */

public static final int View_textDirection = 65; // 0x41

/**
 * <p>
 * @attr description
 * Specifies a theme override for a view. When a theme override is set, the
 * view will be inflated using a {@link android.content.Context} themed with
 * the specified resource. During XML inflation, any child views under the
 * view with a theme override will inherit the themed context.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:theme
 */

public static final int View_theme = 0; // 0x0

/**
 * <p>
 * @attr description
 * Defines text displayed in a small popup window on hover or long press.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:tooltipText
 */

public static final int View_tooltipText = 88; // 0x58

/**
 * <p>
 * @attr description
 * x location of the pivot point around which the view will rotate and scale.
 * This xml attribute sets the pivotX property of the View.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:transformPivotX
 */

public static final int View_transformPivotX = 51; // 0x33

/**
 * <p>
 * @attr description
 * y location of the pivot point around which the view will rotate and scale.
 * This xml attribute sets the pivotY property of the View.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:transformPivotY
 */

public static final int View_transformPivotY = 52; // 0x34

/**
 * <p>
 * @attr description
 * Names a View such that it can be identified for Transitions. Names should be
 * unique in the View hierarchy.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:transitionName
 */

public static final int View_transitionName = 73; // 0x49

/**
 * <p>
 * @attr description
 * translation in x of the view. This value is added post-layout to the left
 * property of the view, which is set by its layout.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:translationX
 */

public static final int View_translationX = 53; // 0x35

/**
 * <p>
 * @attr description
 * translation in y of the view. This value is added post-layout to the top
 * property of the view, which is set by its layout.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:translationY
 */

public static final int View_translationY = 54; // 0x36

/**
 * <p>
 * @attr description
 * translation in z of the view. This value is added to its elevation.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:translationZ
 */

public static final int View_translationZ = 72; // 0x48

/**
 * <p>
 * @attr description
 * Determines which side the vertical scroll bar should be placed on.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>defaultPosition</td><td>0</td><td>Place the scroll bar wherever the system default determines.</td></tr>
 * <tr><td>left</td><td>1</td><td>Place the scroll bar on the left.</td></tr>
 * <tr><td>right</td><td>2</td><td>Place the scroll bar on the right.</td></tr>
 * </table>
 *
 * @attr name android:verticalScrollbarPosition
 */

public static final int View_verticalScrollbarPosition = 60; // 0x3c

/**
 * <p>
 * @attr description
 * Controls the initial visibility of the view.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>gone</td><td>2</td><td>Completely hidden, as if the view had not been added.</td></tr>
 * <tr><td>invisible</td><td>1</td><td>Not displayed, but taken into account during layout (space is left for it).</td></tr>
 * <tr><td>visible</td><td>0</td><td>Visible on screen; the default value.</td></tr>
 * </table>
 *
 * @attr name android:visibility
 */

public static final int View_visibility = 21; // 0x15

/**
 * Use with {@link android.transition.Visibility} transitions, such as
 * <code>slide</code>, <code>explode</code>, and <code>fade</code> to mark which
 * views are supported.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #VisibilityTransition_transitionVisibilityMode android:transitionVisibilityMode}</code></td><td>Changes whether the transition supports appearing and/or disappearing Views.</td></tr>
 * </table>
 * @see #VisibilityTransition_transitionVisibilityMode
 */

public static final int[] VisibilityTransition;
static { VisibilityTransition = new int[0]; }

/**
 * <p>
 * @attr description
 * Changes whether the transition supports appearing and/or disappearing Views.
 * Corresponds to {@link android.transition.Visibility#setMode(int)}.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>mode_in</td><td>1</td><td>Only appearing Views will be supported.</td></tr>
 * <tr><td>mode_out</td><td>2</td><td>Only disappearing Views will be supported.</td></tr>
 * </table>
 *
 * @attr name android:transitionVisibilityMode
 */

public static final int VisibilityTransition_transitionVisibilityMode = 0; // 0x0

/**
 * Use <code>voice-interaction-service</code> as the root tag of the XML resource that
 * describes a {@link android.service.voice.VoiceInteractionService}, which is referenced from
 * its {@link android.service.voice.VoiceInteractionService#SERVICE_META_DATA} meta-data entry.
 * Described here are the attributes that can be included in that tag.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #VoiceInteractionService_settingsActivity android:settingsActivity}</code></td><td>Component name of an activity that allows the user to modify
 * the settings for this service.</td></tr>
 * <tr><td><code>{@link #VoiceInteractionService_sessionService android:sessionService}</code></td><td>The service that hosts active voice interaction sessions.</td></tr>
 * <tr><td><code>{@link #VoiceInteractionService_recognitionService android:recognitionService}</code></td><td>The service that provides voice recognition.</td></tr>
 * <tr><td><code>{@link #VoiceInteractionService_supportsAssist android:supportsAssist}</code></td><td>Flag indicating whether this voice interaction service is capable of handling the
 * assist action.</td></tr>
 * <tr><td><code>{@link #VoiceInteractionService_supportsLaunchVoiceAssistFromKeyguard android:supportsLaunchVoiceAssistFromKeyguard}</code></td><td>Flag indicating whether this voice interaction service is capable of being launched
 * from the keyguard.</td></tr>
 * <tr><td><code>{@link #VoiceInteractionService_supportsLocalInteraction android:supportsLocalInteraction}</code></td><td>Flag indicating whether this voice interaction service can handle local voice
 * interaction requests from an Activity.</td></tr>
 * </table>
 * @see #VoiceInteractionService_settingsActivity
 * @see #VoiceInteractionService_sessionService
 * @see #VoiceInteractionService_recognitionService
 * @see #VoiceInteractionService_supportsAssist
 * @see #VoiceInteractionService_supportsLaunchVoiceAssistFromKeyguard
 * @see #VoiceInteractionService_supportsLocalInteraction
 */

public static final int[] VoiceInteractionService;
static { VoiceInteractionService = new int[0]; }

/**
 * <p>
 * @attr description
 * The service that provides voice recognition.  This is required.  When the user
 * selects this voice interaction service, they will also be implicitly selecting
 * the component here for their recognition service.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:recognitionService
 */

public static final int VoiceInteractionService_recognitionService = 2; // 0x2

/**
 * <p>
 * @attr description
 * The service that hosts active voice interaction sessions.  This is required.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:sessionService
 */

public static final int VoiceInteractionService_sessionService = 1; // 0x1

/**
 * <p>
 * @attr description
 * Component name of an activity that allows the user to modify
 * the settings for this service.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:settingsActivity
 */

public static final int VoiceInteractionService_settingsActivity = 0; // 0x0

/**
 * <p>
 * @attr description
 * Flag indicating whether this voice interaction service is capable of handling the
 * assist action.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:supportsAssist
 */

public static final int VoiceInteractionService_supportsAssist = 3; // 0x3

/**
 * <p>
 * @attr description
 * Flag indicating whether this voice interaction service is capable of being launched
 * from the keyguard.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:supportsLaunchVoiceAssistFromKeyguard
 */

public static final int VoiceInteractionService_supportsLaunchVoiceAssistFromKeyguard = 4; // 0x4

/**
 * <p>
 * @attr description
 * Flag indicating whether this voice interaction service can handle local voice
 * interaction requests from an Activity. This flag is new in
 * {@link android.os.Build.VERSION_CODES#N} and not used in previous versions.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:supportsLocalInteraction
 */

public static final int VoiceInteractionService_supportsLocalInteraction = 5; // 0x5

public static final int[] VoiceInteractionSession;
static { VoiceInteractionSession = new int[0]; }

/**
 * Base attributes available to VolumePreference.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #VolumePreference_streamType android:streamType}</code></td><td>Different audio stream types.</td></tr>
 * </table>
 * @see #VolumePreference_streamType
 */

public static final int[] VolumePreference;
static { VolumePreference = new int[0]; }

/**
 * <p>
 * @attr description
 * Different audio stream types.
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>alarm</td><td>4</td><td></td></tr>
 * <tr><td>music</td><td>3</td><td></td></tr>
 * <tr><td>ring</td><td>2</td><td></td></tr>
 * <tr><td>system</td><td>1</td><td></td></tr>
 * <tr><td>voice</td><td>0</td><td></td></tr>
 * </table>
 *
 * @attr name android:streamType
 */

public static final int VolumePreference_streamType = 0; // 0x0

/**
 * Use <code>wallpaper</code> as the root tag of the XML resource that
 * describes an
 * {@link android.service.wallpaper.WallpaperService}, which is
 * referenced from its
 * {@link android.service.wallpaper.WallpaperService#SERVICE_META_DATA}
 * meta-data entry.  Described here are the attributes that can be
 * included in that tag.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #Wallpaper_description android:description}</code></td><td>Descriptive text for the associated data.</td></tr>
 * <tr><td><code>{@link #Wallpaper_settingsActivity android:settingsActivity}</code></td><td>Component name of an activity that allows the user to modify
 * the settings for this service.</td></tr>
 * <tr><td><code>{@link #Wallpaper_thumbnail android:thumbnail}</code></td><td>Reference to the wallpaper's thumbnail bitmap.</td></tr>
 * <tr><td><code>{@link #Wallpaper_author android:author}</code></td><td>Name of the author and/or source/collection of this component, for example,
 * Art Collection, Picasso.</td></tr>
 * <tr><td><code>{@link #Wallpaper_contextUri android:contextUri}</code></td><td>Uri that specifies a link for further context of this wallpaper, for example,
 * http://www.picasso.org.</td></tr>
 * <tr><td><code>{@link #Wallpaper_contextDescription android:contextDescription}</code></td><td>Title of the uri that specifies a link for further context of this wallpaper,
 * for example, Explore collection.</td></tr>
 * <tr><td><code>{@link #Wallpaper_showMetadataInPreview android:showMetadataInPreview}</code></td><td>Whether to show any metadata when previewing the wallpaper.</td></tr>
 * <tr><td><code>{@link #Wallpaper_settingsSliceUri android:settingsSliceUri}</code></td><td>Uri that specifies a settings Slice for this wallpaper.</td></tr>
 * <tr><td><code>{@link #Wallpaper_supportsMultipleDisplays android:supportsMultipleDisplays}</code></td><td>Indicates that this wallpaper service can support multiple engines to render on each
 * surface independently.</td></tr>
 * </table>
 * @see #Wallpaper_description
 * @see #Wallpaper_settingsActivity
 * @see #Wallpaper_thumbnail
 * @see #Wallpaper_author
 * @see #Wallpaper_contextUri
 * @see #Wallpaper_contextDescription
 * @see #Wallpaper_showMetadataInPreview
 * @see #Wallpaper_settingsSliceUri
 * @see #Wallpaper_supportsMultipleDisplays
 */

public static final int[] Wallpaper;
static { Wallpaper = new int[0]; }

/**
 * Use <code>wallpaper-preview</code> as the root tag of the XML resource that
 * describes a wallpaper preview.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #WallpaperPreviewInfo_staticWallpaperPreview android:staticWallpaperPreview}</code></td><td>A resource id of a static drawable.</td></tr>
 * </table>
 * @see #WallpaperPreviewInfo_staticWallpaperPreview
 */

public static final int[] WallpaperPreviewInfo;
static { WallpaperPreviewInfo = new int[0]; }

/**
 * <p>
 * @attr description
 * A resource id of a static drawable.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:staticWallpaperPreview
 */

public static final int WallpaperPreviewInfo_staticWallpaperPreview = 0; // 0x0

/**
 * <p>
 * @attr description
 * Name of the author and/or source/collection of this component, for example,
 * Art Collection, Picasso.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:author
 */

public static final int Wallpaper_author = 3; // 0x3

/**
 * <p>
 * @attr description
 * Title of the uri that specifies a link for further context of this wallpaper,
 * for example, Explore collection.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:contextDescription
 */

public static final int Wallpaper_contextDescription = 5; // 0x5

/**
 * <p>
 * @attr description
 * Uri that specifies a link for further context of this wallpaper, for example,
 * http://www.picasso.org.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:contextUri
 */

public static final int Wallpaper_contextUri = 4; // 0x4

/**
 * <p>
 * @attr description
 * Short description of the component's purpose or behavior.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:description
 */

public static final int Wallpaper_description = 0; // 0x0

/**
 * <p>
 * @attr description
 * Component name of an activity that allows the user to modify
 * the settings for this service.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:settingsActivity
 */

public static final int Wallpaper_settingsActivity = 1; // 0x1

/**
 * <p>
 * @attr description
 * Uri that specifies a settings Slice for this wallpaper.
 *
 * <p>May be a string value, using '\\;' to escape characters such as
 * '\\n' or '\\uxxxx' for a unicode character;
 *
 * @attr name android:settingsSliceUri
 */

public static final int Wallpaper_settingsSliceUri = 8; // 0x8

/**
 * <p>
 * @attr description
 * Whether to show any metadata when previewing the wallpaper. If this value is
 * set to true, any component that shows a preview of this live wallpaper should also show
 * accompanying information like the title, the description, the author and the context
 * description of this wallpaper so the user gets to know further information about this
 * wallpaper.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:showMetadataInPreview
 */

public static final int Wallpaper_showMetadataInPreview = 6; // 0x6

/**
 * <p>
 * @attr description
 * Indicates that this wallpaper service can support multiple engines to render on each
 * surface independently. An example use case is a multi-display set-up where the
 * wallpaper service can render surfaces to each of the connected displays. Corresponds to
 * {@link android.app.WallpaperInfo#supportsMultipleDisplays()}
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:supportsMultipleDisplays
 */

public static final int Wallpaper_supportsMultipleDisplays = 9; // 0x9

/**
 * <p>
 * @attr description
 * Reference to the wallpaper's thumbnail bitmap.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:thumbnail
 */

public static final int Wallpaper_thumbnail = 2; // 0x2

/**
 * The set of attributes that describe a Windows's theme.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #Window_backgroundDimAmount android:backgroundDimAmount}</code></td><td>Default background dim amount when a menu, dialog, or something similar pops up.</td></tr>
 * <tr><td><code>{@link #Window_windowBackground android:windowBackground}</code></td><td>Drawable to use as the overall window background.</td></tr>
 * <tr><td><code>{@link #Window_windowFrame android:windowFrame}</code></td><td>Drawable to use as a frame around the window.</td></tr>
 * <tr><td><code>{@link #Window_windowNoTitle android:windowNoTitle}</code></td><td>Flag indicating whether there should be no title on this window.</td></tr>
 * <tr><td><code>{@link #Window_windowIsFloating android:windowIsFloating}</code></td><td>Flag indicating whether this is a floating window.</td></tr>
 * <tr><td><code>{@link #Window_windowIsTranslucent android:windowIsTranslucent}</code></td><td>Flag indicating whether this is a translucent window.</td></tr>
 * <tr><td><code>{@link #Window_windowContentOverlay android:windowContentOverlay}</code></td><td>This Drawable is overlaid over the foreground of the Window's content area, usually
 * to place a shadow below the title.</td></tr>
 * <tr><td><code>{@link #Window_textColor android:textColor}</code></td><td>Color of text (usually same as colorForeground).</td></tr>
 * <tr><td><code>{@link #Window_windowAnimationStyle android:windowAnimationStyle}</code></td><td>Reference to a style resource holding
 * the set of window animations to use, which can be
 * any of the attributes defined by
 * {@link android.R.styleable#WindowAnimation}.</td></tr>
 * <tr><td><code>{@link #Window_windowFullscreen android:windowFullscreen}</code></td><td>Flag indicating whether this window should fill the entire screen.</td></tr>
 * <tr><td><code>{@link #Window_windowNoDisplay android:windowNoDisplay}</code></td><td>Flag indicating that this window should not be displayed at all.</td></tr>
 * <tr><td><code>{@link #Window_backgroundDimEnabled android:backgroundDimEnabled}</code></td><td>Control whether dimming behind the window is enabled.</td></tr>
 * <tr><td><code>{@link #Window_windowDisablePreview android:windowDisablePreview}</code></td><td>Flag allowing you to disable the splash screen for a window.</td></tr>
 * <tr><td><code>{@link #Window_windowSoftInputMode android:windowSoftInputMode}</code></td><td>Defines the default soft input state that this window would
 * like when it is displayed.</td></tr>
 * <tr><td><code>{@link #Window_windowShowWallpaper android:windowShowWallpaper}</code></td><td>Flag indicating that this window's background should be the
 * user's current wallpaper.</td></tr>
 * <tr><td><code>{@link #Window_windowActionBar android:windowActionBar}</code></td><td>Flag indicating whether this window should have an Action Bar
 * in place of the usual title bar.</td></tr>
 * <tr><td><code>{@link #Window_windowActionModeOverlay android:windowActionModeOverlay}</code></td><td>Flag indicating whether action modes should overlay window content
 * when there is not reserved space for their UI (such as an Action Bar).</td></tr>
 * <tr><td><code>{@link #Window_windowActionBarOverlay android:windowActionBarOverlay}</code></td><td>Flag indicating whether this window's Action Bar should overlay
 * application content.</td></tr>
 * <tr><td><code>{@link #Window_windowEnableSplitTouch android:windowEnableSplitTouch}</code></td><td>Flag indicating that this window should allow touches to be split
 * across other windows that also support split touch.</td></tr>
 * <tr><td><code>{@link #Window_windowMinWidthMajor android:windowMinWidthMajor}</code></td><td>The minimum width the window is allowed to be, along the major
 * axis of the screen.</td></tr>
 * <tr><td><code>{@link #Window_windowMinWidthMinor android:windowMinWidthMinor}</code></td><td>The minimum width the window is allowed to be, along the minor
 * axis of the screen.</td></tr>
 * <tr><td><code>{@link #Window_windowCloseOnTouchOutside android:windowCloseOnTouchOutside}</code></td><td>Control whether a container should automatically close itself if
 * the user touches outside of it.</td></tr>
 * <tr><td><code>{@link #Window_windowOverscan android:windowOverscan}</code></td><td>Flag indicating whether this window should extend into overscan region.</td></tr>
 * <tr><td><code>{@link #Window_windowTranslucentStatus android:windowTranslucentStatus}</code></td><td>Flag indicating whether this window requests a translucent status bar.</td></tr>
 * <tr><td><code>{@link #Window_windowTranslucentNavigation android:windowTranslucentNavigation}</code></td><td>Flag indicating whether this window requests a translucent navigation bar.</td></tr>
 * <tr><td><code>{@link #Window_windowSwipeToDismiss android:windowSwipeToDismiss}</code></td><td>Flag to indicate that a window can be swiped away to be dismissed.</td></tr>
 * <tr><td><code>{@link #Window_windowContentTransitions android:windowContentTransitions}</code></td><td>Flag indicating whether this window requests that content changes be performed
 * as scene changes with transitions.</td></tr>
 * <tr><td><code>{@link #Window_windowContentTransitionManager android:windowContentTransitionManager}</code></td><td>Reference to a TransitionManager XML resource defining the desired
 * transitions between different window content.</td></tr>
 * <tr><td><code>{@link #Window_windowEnterTransition android:windowEnterTransition}</code></td><td>Reference to a Transition XML resource defining the desired Transition
 * used to move Views into the initial Window's content Scene.</td></tr>
 * <tr><td><code>{@link #Window_windowExitTransition android:windowExitTransition}</code></td><td>Reference to a Transition XML resource defining the desired Transition
 * used to move Views out of the Window's content Scene when launching a new Activity.</td></tr>
 * <tr><td><code>{@link #Window_windowSharedElementEnterTransition android:windowSharedElementEnterTransition}</code></td><td>Reference to a Transition XML resource defining the desired Transition
 * used to move shared elements transferred into the Window's initial content Scene.</td></tr>
 * <tr><td><code>{@link #Window_windowSharedElementExitTransition android:windowSharedElementExitTransition}</code></td><td>Reference to a Transition XML resource defining the desired Transition
 * used when starting a new Activity to move shared elements prior to transferring
 * to the called Activity.</td></tr>
 * <tr><td><code>{@link #Window_windowAllowReturnTransitionOverlap android:windowAllowReturnTransitionOverlap}</code></td><td>Flag indicating whether this Window's transition should overlap with
 * the exiting transition of the called Activity when the called Activity
 * finishes.</td></tr>
 * <tr><td><code>{@link #Window_windowAllowEnterTransitionOverlap android:windowAllowEnterTransitionOverlap}</code></td><td>Flag indicating whether this Window's transition should overlap with
 * the exiting transition of the calling Activity.</td></tr>
 * <tr><td><code>{@link #Window_windowDrawsSystemBarBackgrounds android:windowDrawsSystemBarBackgrounds}</code></td><td>Flag indicating whether this Window is responsible for drawing the background for the
 * system bars.</td></tr>
 * <tr><td><code>{@link #Window_statusBarColor android:statusBarColor}</code></td><td>The color for the status bar.</td></tr>
 * <tr><td><code>{@link #Window_navigationBarColor android:navigationBarColor}</code></td><td>The color for the navigation bar.</td></tr>
 * <tr><td><code>{@link #Window_windowTransitionBackgroundFadeDuration android:windowTransitionBackgroundFadeDuration}</code></td><td>The duration, in milliseconds, of the window background fade duration
 * when transitioning into or away from an Activity when called with an
 * Activity Transition.</td></tr>
 * <tr><td><code>{@link #Window_windowElevation android:windowElevation}</code></td><td>Elevation to use for the window.</td></tr>
 * <tr><td><code>{@link #Window_windowClipToOutline android:windowClipToOutline}</code></td><td>Whether to clip window content to the outline of the window background.</td></tr>
 * <tr><td><code>{@link #Window_windowReturnTransition android:windowReturnTransition}</code></td><td>Reference to a Transition XML resource defining the desired Transition
 * used to move Views out of the scene when the Window is
 * preparing to close.</td></tr>
 * <tr><td><code>{@link #Window_windowReenterTransition android:windowReenterTransition}</code></td><td>Reference to a Transition XML resource defining the desired Transition
 * used to move Views in to the scene when returning from a previously-started Activity.</td></tr>
 * <tr><td><code>{@link #Window_windowSharedElementReturnTransition android:windowSharedElementReturnTransition}</code></td><td>Reference to a Transition XML resource defining the desired Transition
 * used to move shared elements transferred back to a calling Activity.</td></tr>
 * <tr><td><code>{@link #Window_windowSharedElementReenterTransition android:windowSharedElementReenterTransition}</code></td><td>Reference to a Transition XML resource defining the desired Transition
 * used for shared elements transferred back to a calling Activity.</td></tr>
 * <tr><td><code>{@link #Window_windowSharedElementsUseOverlay android:windowSharedElementsUseOverlay}</code></td><td>Indicates whether or not shared elements should use an overlay
 * during transitions.</td></tr>
 * <tr><td><code>{@link #Window_windowActivityTransitions android:windowActivityTransitions}</code></td><td>Flag indicating whether this window allows Activity Transitions.</td></tr>
 * <tr><td><code>{@link #Window_windowLightStatusBar android:windowLightStatusBar}</code></td><td>If set, the status bar will be drawn such that it is compatible with a light
 * status bar background.</td></tr>
 * <tr><td><code>{@link #Window_windowBackgroundFallback android:windowBackgroundFallback}</code></td><td>Drawable to draw selectively within the inset areas when the windowBackground
 * has been set to null.</td></tr>
 * <tr><td><code>{@link #Window_windowSplashscreenContent android:windowSplashscreenContent}</code></td><td>Reference to a drawable to be used as the splash screen content of the window.</td></tr>
 * <tr><td><code>{@link #Window_windowLightNavigationBar android:windowLightNavigationBar}</code></td><td>If set, the navigation bar will be drawn such that it is compatible with a light
 * navigation bar background.</td></tr>
 * <tr><td><code>{@link #Window_navigationBarDividerColor android:navigationBarDividerColor}</code></td><td>Shows a thin line of the specified color between the navigation bar and the app
 * content.</td></tr>
 * <tr><td><code>{@link #Window_windowLayoutInDisplayCutoutMode android:windowLayoutInDisplayCutoutMode}</code></td><td>Controls how the window is laid out if there is a {@code DisplayCutout}.</td></tr>
 * <tr><td><code>{@link #Window_enforceStatusBarContrast android:enforceStatusBarContrast}</code></td><td>Sets whether the system should ensure that the status bar has enough
 * contrast when a fully transparent background is requested.</td></tr>
 * <tr><td><code>{@link #Window_enforceNavigationBarContrast android:enforceNavigationBarContrast}</code></td><td>Sets whether the system should ensure that the navigation bar has enough
 * contrast when a fully transparent background is requested.</td></tr>
 * </table>
 * @see #Window_backgroundDimAmount
 * @see #Window_windowBackground
 * @see #Window_windowFrame
 * @see #Window_windowNoTitle
 * @see #Window_windowIsFloating
 * @see #Window_windowIsTranslucent
 * @see #Window_windowContentOverlay
 * @see #Window_textColor
 * @see #Window_windowAnimationStyle
 * @see #Window_windowFullscreen
 * @see #Window_windowNoDisplay
 * @see #Window_backgroundDimEnabled
 * @see #Window_windowDisablePreview
 * @see #Window_windowSoftInputMode
 * @see #Window_windowShowWallpaper
 * @see #Window_windowActionBar
 * @see #Window_windowActionModeOverlay
 * @see #Window_windowActionBarOverlay
 * @see #Window_windowEnableSplitTouch
 * @see #Window_windowMinWidthMajor
 * @see #Window_windowMinWidthMinor
 * @see #Window_windowCloseOnTouchOutside
 * @see #Window_windowOverscan
 * @see #Window_windowTranslucentStatus
 * @see #Window_windowTranslucentNavigation
 * @see #Window_windowSwipeToDismiss
 * @see #Window_windowContentTransitions
 * @see #Window_windowContentTransitionManager
 * @see #Window_windowEnterTransition
 * @see #Window_windowExitTransition
 * @see #Window_windowSharedElementEnterTransition
 * @see #Window_windowSharedElementExitTransition
 * @see #Window_windowAllowReturnTransitionOverlap
 * @see #Window_windowAllowEnterTransitionOverlap
 * @see #Window_windowDrawsSystemBarBackgrounds
 * @see #Window_statusBarColor
 * @see #Window_navigationBarColor
 * @see #Window_windowTransitionBackgroundFadeDuration
 * @see #Window_windowElevation
 * @see #Window_windowClipToOutline
 * @see #Window_windowReturnTransition
 * @see #Window_windowReenterTransition
 * @see #Window_windowSharedElementReturnTransition
 * @see #Window_windowSharedElementReenterTransition
 * @see #Window_windowSharedElementsUseOverlay
 * @see #Window_windowActivityTransitions
 * @see #Window_windowLightStatusBar
 * @see #Window_windowBackgroundFallback
 * @see #Window_windowSplashscreenContent
 * @see #Window_windowLightNavigationBar
 * @see #Window_navigationBarDividerColor
 * @see #Window_windowLayoutInDisplayCutoutMode
 * @see #Window_enforceStatusBarContrast
 * @see #Window_enforceNavigationBarContrast
 */

public static final int[] Window;
static { Window = new int[0]; }

/**
 * Window animation class attributes.
 * <p>Includes the following attributes:</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Attribute</th><th>Description</th></tr>
 * <tr><td><code>{@link #WindowAnimation_windowEnterAnimation android:windowEnterAnimation}</code></td><td>The animation used when a window is being added.</td></tr>
 * <tr><td><code>{@link #WindowAnimation_windowExitAnimation android:windowExitAnimation}</code></td><td>The animation used when a window is being removed.</td></tr>
 * <tr><td><code>{@link #WindowAnimation_windowShowAnimation android:windowShowAnimation}</code></td><td>The animation used when a window is going from INVISIBLE to VISIBLE.</td></tr>
 * <tr><td><code>{@link #WindowAnimation_windowHideAnimation android:windowHideAnimation}</code></td><td>The animation used when a window is going from VISIBLE to INVISIBLE.</td></tr>
 * <tr><td><code>{@link #WindowAnimation_activityOpenEnterAnimation android:activityOpenEnterAnimation}</code></td><td>When opening a new activity, this is the animation that is
 * run on the next activity (which is entering the screen).</td></tr>
 * <tr><td><code>{@link #WindowAnimation_activityOpenExitAnimation android:activityOpenExitAnimation}</code></td><td>When opening a new activity, this is the animation that is
 * run on the previous activity (which is exiting the screen).</td></tr>
 * <tr><td><code>{@link #WindowAnimation_activityCloseEnterAnimation android:activityCloseEnterAnimation}</code></td><td>When closing the current activity, this is the animation that is
 * run on the next activity (which is entering the screen).</td></tr>
 * <tr><td><code>{@link #WindowAnimation_activityCloseExitAnimation android:activityCloseExitAnimation}</code></td><td>When closing the current activity, this is the animation that is
 * run on the current activity (which is exiting the screen).</td></tr>
 * <tr><td><code>{@link #WindowAnimation_taskOpenEnterAnimation android:taskOpenEnterAnimation}</code></td><td>When opening an activity in a new task, this is the animation that is
 * run on the activity of the new task (which is entering the screen).</td></tr>
 * <tr><td><code>{@link #WindowAnimation_taskOpenExitAnimation android:taskOpenExitAnimation}</code></td><td>When opening an activity in a new task, this is the animation that is
 * run on the activity of the old task (which is exiting the screen).</td></tr>
 * <tr><td><code>{@link #WindowAnimation_taskCloseEnterAnimation android:taskCloseEnterAnimation}</code></td><td>When closing the last activity of a task, this is the animation that is
 * run on the activity of the next task (which is entering the screen).</td></tr>
 * <tr><td><code>{@link #WindowAnimation_taskCloseExitAnimation android:taskCloseExitAnimation}</code></td><td>When opening an activity in a new task, this is the animation that is
 * run on the activity of the old task (which is exiting the screen).</td></tr>
 * <tr><td><code>{@link #WindowAnimation_taskToFrontEnterAnimation android:taskToFrontEnterAnimation}</code></td><td>When bringing an existing task to the foreground, this is the
 * animation that is run on the top activity of the task being brought
 * to the foreground (which is entering the screen).</td></tr>
 * <tr><td><code>{@link #WindowAnimation_taskToFrontExitAnimation android:taskToFrontExitAnimation}</code></td><td>When bringing an existing task to the foreground, this is the
 * animation that is run on the current foreground activity
 * (which is exiting the screen).</td></tr>
 * <tr><td><code>{@link #WindowAnimation_taskToBackEnterAnimation android:taskToBackEnterAnimation}</code></td><td>When sending the current task to the background, this is the
 * animation that is run on the top activity of the task behind
 * it (which is entering the screen).</td></tr>
 * <tr><td><code>{@link #WindowAnimation_taskToBackExitAnimation android:taskToBackExitAnimation}</code></td><td>When sending the current task to the background, this is the
 * animation that is run on the top activity of the current task
 * (which is exiting the screen).</td></tr>
 * <tr><td><code>{@link #WindowAnimation_wallpaperOpenEnterAnimation android:wallpaperOpenEnterAnimation}</code></td><td>When opening a new activity that shows the wallpaper, while
 * currently not showing the wallpaper, this is the animation that
 * is run on the new wallpaper activity (which is entering the screen).</td></tr>
 * <tr><td><code>{@link #WindowAnimation_wallpaperOpenExitAnimation android:wallpaperOpenExitAnimation}</code></td><td>When opening a new activity that shows the wallpaper, while
 * currently not showing the wallpaper, this is the animation that
 * is run on the current activity (which is exiting the screen).</td></tr>
 * <tr><td><code>{@link #WindowAnimation_wallpaperCloseEnterAnimation android:wallpaperCloseEnterAnimation}</code></td><td>When opening a new activity that hides the wallpaper, while
 * currently showing the wallpaper, this is the animation that
 * is run on the new activity (which is entering the screen).</td></tr>
 * <tr><td><code>{@link #WindowAnimation_wallpaperCloseExitAnimation android:wallpaperCloseExitAnimation}</code></td><td>When opening a new activity that hides the wallpaper, while
 * currently showing the wallpaper, this is the animation that
 * is run on the old wallpaper activity (which is exiting the screen).</td></tr>
 * <tr><td><code>{@link #WindowAnimation_wallpaperIntraOpenEnterAnimation android:wallpaperIntraOpenEnterAnimation}</code></td><td>When opening a new activity that is on top of the wallpaper
 * when the current activity is also on top of the wallpaper,
 * this is the animation that is run on the new activity
 * (which is entering the screen).</td></tr>
 * <tr><td><code>{@link #WindowAnimation_wallpaperIntraOpenExitAnimation android:wallpaperIntraOpenExitAnimation}</code></td><td>When opening a new activity that is on top of the wallpaper
 * when the current activity is also on top of the wallpaper,
 * this is the animation that is run on the current activity
 * (which is exiting the screen).</td></tr>
 * <tr><td><code>{@link #WindowAnimation_wallpaperIntraCloseEnterAnimation android:wallpaperIntraCloseEnterAnimation}</code></td><td>When closing a foreround activity that is on top of the wallpaper
 * when the previous activity is also on top of the wallpaper,
 * this is the animation that is run on the previous activity
 * (which is entering the screen).</td></tr>
 * <tr><td><code>{@link #WindowAnimation_wallpaperIntraCloseExitAnimation android:wallpaperIntraCloseExitAnimation}</code></td><td>When closing a foreround activity that is on top of the wallpaper
 * when the previous activity is also on top of the wallpaper,
 * this is the animation that is run on the current activity
 * (which is exiting the screen).</td></tr>
 * <tr><td><code>{@link #WindowAnimation_launchTaskBehindTargetAnimation android:launchTaskBehindTargetAnimation}</code></td><td>When opening an activity in a new task using Intent/FLAG_ACTIVITY_LAUNCH_BEHIND,
 * this is the animation that is run on the activity of the new task (which is
 * entering the screen and then leaving).</td></tr>
 * <tr><td><code>{@link #WindowAnimation_launchTaskBehindSourceAnimation android:launchTaskBehindSourceAnimation}</code></td><td>When opening an activity in a new task using Intent.FLAG_ACTIVITY_LAUNCH_BEHIND,
 * this is the animation that is run on the activity of the old task (which is
 * already on the screen and then stays on).</td></tr>
 * </table>
 * @see #WindowAnimation_windowEnterAnimation
 * @see #WindowAnimation_windowExitAnimation
 * @see #WindowAnimation_windowShowAnimation
 * @see #WindowAnimation_windowHideAnimation
 * @see #WindowAnimation_activityOpenEnterAnimation
 * @see #WindowAnimation_activityOpenExitAnimation
 * @see #WindowAnimation_activityCloseEnterAnimation
 * @see #WindowAnimation_activityCloseExitAnimation
 * @see #WindowAnimation_taskOpenEnterAnimation
 * @see #WindowAnimation_taskOpenExitAnimation
 * @see #WindowAnimation_taskCloseEnterAnimation
 * @see #WindowAnimation_taskCloseExitAnimation
 * @see #WindowAnimation_taskToFrontEnterAnimation
 * @see #WindowAnimation_taskToFrontExitAnimation
 * @see #WindowAnimation_taskToBackEnterAnimation
 * @see #WindowAnimation_taskToBackExitAnimation
 * @see #WindowAnimation_wallpaperOpenEnterAnimation
 * @see #WindowAnimation_wallpaperOpenExitAnimation
 * @see #WindowAnimation_wallpaperCloseEnterAnimation
 * @see #WindowAnimation_wallpaperCloseExitAnimation
 * @see #WindowAnimation_wallpaperIntraOpenEnterAnimation
 * @see #WindowAnimation_wallpaperIntraOpenExitAnimation
 * @see #WindowAnimation_wallpaperIntraCloseEnterAnimation
 * @see #WindowAnimation_wallpaperIntraCloseExitAnimation
 * @see #WindowAnimation_launchTaskBehindTargetAnimation
 * @see #WindowAnimation_launchTaskBehindSourceAnimation
 */

public static final int[] WindowAnimation;
static { WindowAnimation = new int[0]; }

/**
 * <p>
 * @attr description
 * When closing the current activity, this is the animation that is
 * run on the next activity (which is entering the screen).
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:activityCloseEnterAnimation
 */

public static final int WindowAnimation_activityCloseEnterAnimation = 6; // 0x6

/**
 * <p>
 * @attr description
 * When closing the current activity, this is the animation that is
 * run on the current activity (which is exiting the screen).
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:activityCloseExitAnimation
 */

public static final int WindowAnimation_activityCloseExitAnimation = 7; // 0x7

/**
 * <p>
 * @attr description
 * When opening a new activity, this is the animation that is
 * run on the next activity (which is entering the screen).
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:activityOpenEnterAnimation
 */

public static final int WindowAnimation_activityOpenEnterAnimation = 4; // 0x4

/**
 * <p>
 * @attr description
 * When opening a new activity, this is the animation that is
 * run on the previous activity (which is exiting the screen).
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:activityOpenExitAnimation
 */

public static final int WindowAnimation_activityOpenExitAnimation = 5; // 0x5

/**
 * <p>
 * @attr description
 * When opening an activity in a new task using Intent.FLAG_ACTIVITY_LAUNCH_BEHIND,
 * this is the animation that is run on the activity of the old task (which is
 * already on the screen and then stays on).
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:launchTaskBehindSourceAnimation
 */

public static final int WindowAnimation_launchTaskBehindSourceAnimation = 25; // 0x19

/**
 * <p>
 * @attr description
 * When opening an activity in a new task using Intent/FLAG_ACTIVITY_LAUNCH_BEHIND,
 * this is the animation that is run on the activity of the new task (which is
 * entering the screen and then leaving).
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:launchTaskBehindTargetAnimation
 */

public static final int WindowAnimation_launchTaskBehindTargetAnimation = 24; // 0x18

/**
 * <p>
 * @attr description
 * When closing the last activity of a task, this is the animation that is
 * run on the activity of the next task (which is entering the screen).
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:taskCloseEnterAnimation
 */

public static final int WindowAnimation_taskCloseEnterAnimation = 10; // 0xa

/**
 * <p>
 * @attr description
 * When opening an activity in a new task, this is the animation that is
 * run on the activity of the old task (which is exiting the screen).
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:taskCloseExitAnimation
 */

public static final int WindowAnimation_taskCloseExitAnimation = 11; // 0xb

/**
 * <p>
 * @attr description
 * When opening an activity in a new task, this is the animation that is
 * run on the activity of the new task (which is entering the screen).
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:taskOpenEnterAnimation
 */

public static final int WindowAnimation_taskOpenEnterAnimation = 8; // 0x8

/**
 * <p>
 * @attr description
 * When opening an activity in a new task, this is the animation that is
 * run on the activity of the old task (which is exiting the screen).
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:taskOpenExitAnimation
 */

public static final int WindowAnimation_taskOpenExitAnimation = 9; // 0x9

/**
 * <p>
 * @attr description
 * When sending the current task to the background, this is the
 * animation that is run on the top activity of the task behind
 * it (which is entering the screen).
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:taskToBackEnterAnimation
 */

public static final int WindowAnimation_taskToBackEnterAnimation = 14; // 0xe

/**
 * <p>
 * @attr description
 * When sending the current task to the background, this is the
 * animation that is run on the top activity of the current task
 * (which is exiting the screen).
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:taskToBackExitAnimation
 */

public static final int WindowAnimation_taskToBackExitAnimation = 15; // 0xf

/**
 * <p>
 * @attr description
 * When bringing an existing task to the foreground, this is the
 * animation that is run on the top activity of the task being brought
 * to the foreground (which is entering the screen).
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:taskToFrontEnterAnimation
 */

public static final int WindowAnimation_taskToFrontEnterAnimation = 12; // 0xc

/**
 * <p>
 * @attr description
 * When bringing an existing task to the foreground, this is the
 * animation that is run on the current foreground activity
 * (which is exiting the screen).
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:taskToFrontExitAnimation
 */

public static final int WindowAnimation_taskToFrontExitAnimation = 13; // 0xd

/**
 * <p>
 * @attr description
 * When opening a new activity that hides the wallpaper, while
 * currently showing the wallpaper, this is the animation that
 * is run on the new activity (which is entering the screen).
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:wallpaperCloseEnterAnimation
 */

public static final int WindowAnimation_wallpaperCloseEnterAnimation = 18; // 0x12

/**
 * <p>
 * @attr description
 * When opening a new activity that hides the wallpaper, while
 * currently showing the wallpaper, this is the animation that
 * is run on the old wallpaper activity (which is exiting the screen).
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:wallpaperCloseExitAnimation
 */

public static final int WindowAnimation_wallpaperCloseExitAnimation = 19; // 0x13

/**
 * <p>
 * @attr description
 * When closing a foreround activity that is on top of the wallpaper
 * when the previous activity is also on top of the wallpaper,
 * this is the animation that is run on the previous activity
 * (which is entering the screen).  The wallpaper remains
 * static behind the animation.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:wallpaperIntraCloseEnterAnimation
 */

public static final int WindowAnimation_wallpaperIntraCloseEnterAnimation = 22; // 0x16

/**
 * <p>
 * @attr description
 * When closing a foreround activity that is on top of the wallpaper
 * when the previous activity is also on top of the wallpaper,
 * this is the animation that is run on the current activity
 * (which is exiting the screen).  The wallpaper remains
 * static behind the animation.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:wallpaperIntraCloseExitAnimation
 */

public static final int WindowAnimation_wallpaperIntraCloseExitAnimation = 23; // 0x17

/**
 * <p>
 * @attr description
 * When opening a new activity that is on top of the wallpaper
 * when the current activity is also on top of the wallpaper,
 * this is the animation that is run on the new activity
 * (which is entering the screen).  The wallpaper remains
 * static behind the animation.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:wallpaperIntraOpenEnterAnimation
 */

public static final int WindowAnimation_wallpaperIntraOpenEnterAnimation = 20; // 0x14

/**
 * <p>
 * @attr description
 * When opening a new activity that is on top of the wallpaper
 * when the current activity is also on top of the wallpaper,
 * this is the animation that is run on the current activity
 * (which is exiting the screen).  The wallpaper remains
 * static behind the animation.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:wallpaperIntraOpenExitAnimation
 */

public static final int WindowAnimation_wallpaperIntraOpenExitAnimation = 21; // 0x15

/**
 * <p>
 * @attr description
 * When opening a new activity that shows the wallpaper, while
 * currently not showing the wallpaper, this is the animation that
 * is run on the new wallpaper activity (which is entering the screen).
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:wallpaperOpenEnterAnimation
 */

public static final int WindowAnimation_wallpaperOpenEnterAnimation = 16; // 0x10

/**
 * <p>
 * @attr description
 * When opening a new activity that shows the wallpaper, while
 * currently not showing the wallpaper, this is the animation that
 * is run on the current activity (which is exiting the screen).
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:wallpaperOpenExitAnimation
 */

public static final int WindowAnimation_wallpaperOpenExitAnimation = 17; // 0x11

/**
 * <p>
 * @attr description
 * The animation used when a window is being added.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:windowEnterAnimation
 */

public static final int WindowAnimation_windowEnterAnimation = 0; // 0x0

/**
 * <p>
 * @attr description
 * The animation used when a window is being removed.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:windowExitAnimation
 */

public static final int WindowAnimation_windowExitAnimation = 1; // 0x1

/**
 * <p>
 * @attr description
 * The animation used when a window is going from VISIBLE to INVISIBLE.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:windowHideAnimation
 */

public static final int WindowAnimation_windowHideAnimation = 3; // 0x3

/**
 * <p>
 * @attr description
 * The animation used when a window is going from INVISIBLE to VISIBLE.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:windowShowAnimation
 */

public static final int WindowAnimation_windowShowAnimation = 2; // 0x2

/**
 * <p>
 * @attr description
 * Default background dim amount when a menu, dialog, or something similar pops up.
 *
 * <p>May be a floating point value, such as "<code>1.2</code>".
 *
 * @attr name android:backgroundDimAmount
 */

public static final int Window_backgroundDimAmount = 0; // 0x0

/**
 * <p>
 * @attr description
 * Control whether dimming behind the window is enabled.  The default
 * theme does not set this value, meaning it is based on whether the
 * window is floating.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:backgroundDimEnabled
 */

public static final int Window_backgroundDimEnabled = 11; // 0xb

/**
 * <p>
 * @attr description
 * Sets whether the system should ensure that the navigation bar has enough
 * contrast when a fully transparent background is requested.
 * <p>If set to this value, the system will determine whether a scrim is necessary
 * to ensure that the navigation bar has enough contrast with the contents of
 * this app, and set an appropriate effective bar background color accordingly.
 * <p>When the navigation bar color has a non-zero alpha value, the value of this
 * attribute has no effect.
 * <p>If the app does not target at least {@link android.os.Build.VERSION_CODES#Q Q},
 * this attribute is ignored.
 * @see android.view.Window#setNavigationBarContrastEnforced
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:enforceNavigationBarContrast
 */

public static final int Window_enforceNavigationBarContrast = 53; // 0x35

/**
 * <p>
 * @attr description
 * Sets whether the system should ensure that the status bar has enough
 * contrast when a fully transparent background is requested.
 * <p>If set to this value, the system will determine whether a scrim is necessary
 * to ensure that the status bar has enough contrast with the contents of
 * this app, and set an appropriate effective bar background color accordingly.
 * <p>When the status bar color has a non-zero alpha value, the value of this
 * attribute has no effect.
 * <p>If the app does not target at least {@link android.os.Build.VERSION_CODES#Q Q},
 * this attribute is ignored.
 * @see android.view.Window#setStatusBarContrastEnforced
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:enforceStatusBarContrast
 */

public static final int Window_enforceStatusBarContrast = 52; // 0x34

/**
 * <p>
 * @attr description
 * The color for the navigation bar. If the color is not opaque, consider setting
 * {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_STABLE} and
 * {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION}.
 * For this to take effect, the window must be drawing the system bar backgrounds with
 * {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the navigation bar must not
 * have been requested to be translucent with
 * {@link android.R.attr#windowTranslucentNavigation}.
 * Corresponds to {@link android.view.Window#setNavigationBarColor(int)}.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:navigationBarColor
 */

public static final int Window_navigationBarColor = 36; // 0x24

/**
 * <p>
 * @attr description
 * Shows a thin line of the specified color between the navigation bar and the app
 * content.
 * <p>For this to take effect, the window must be drawing the system bar backgrounds with
 * {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the navigation bar must not
 * have been requested to be translucent with
 * {@link android.R.attr#windowTranslucentNavigation}.
 * Corresponds to {@link android.view.Window#setNavigationBarDividerColor(int)}.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:navigationBarDividerColor
 */

public static final int Window_navigationBarDividerColor = 50; // 0x32

/**
 * <p>
 * @attr description
 * The color for the status bar. If the color is not opaque, consider setting
 * {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_STABLE} and
 * {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN}.
 * For this to take effect, the window must be drawing the system bar backgrounds with
 * {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the status bar must not
 * have been requested to be translucent with
 * {@link android.R.attr#windowTranslucentStatus}.
 * Corresponds to {@link android.view.Window#setStatusBarColor(int)}.
 *
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:statusBarColor
 */

public static final int Window_statusBarColor = 35; // 0x23

/**
 * <p>
 * @attr description
 * Color of text (usually same as colorForeground).
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:textColor
 */

public static final int Window_textColor = 7; // 0x7

/**
 * <p>
 * @attr description
 * Flag indicating whether this window should have an Action Bar
 * in place of the usual title bar.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowActionBar
 */

public static final int Window_windowActionBar = 15; // 0xf

/**
 * <p>
 * @attr description
 * Flag indicating whether this window's Action Bar should overlay
 * application content. Does nothing if the window would not
 * have an Action Bar.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowActionBarOverlay
 */

public static final int Window_windowActionBarOverlay = 17; // 0x11

/**
 * <p>
 * @attr description
 * Flag indicating whether action modes should overlay window content
 * when there is not reserved space for their UI (such as an Action Bar).
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowActionModeOverlay
 */

public static final int Window_windowActionModeOverlay = 16; // 0x10

/**
 * <p>
 * @attr description
 * Flag indicating whether this window allows Activity Transitions.
 * Corresponds to {@link android.view.Window#FEATURE_ACTIVITY_TRANSITIONS}.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowActivityTransitions
 */

public static final int Window_windowActivityTransitions = 45; // 0x2d

/**
 * <p>
 * @attr description
 * Flag indicating whether this Window's transition should overlap with
 * the exiting transition of the calling Activity. Corresponds to
 * {@link android.view.Window#setAllowEnterTransitionOverlap(boolean)}.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowAllowEnterTransitionOverlap
 */

public static final int Window_windowAllowEnterTransitionOverlap = 33; // 0x21

/**
 * <p>
 * @attr description
 * Flag indicating whether this Window's transition should overlap with
 * the exiting transition of the called Activity when the called Activity
 * finishes. Corresponds to
 * {@link android.view.Window#setAllowReturnTransitionOverlap(boolean)}.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowAllowReturnTransitionOverlap
 */

public static final int Window_windowAllowReturnTransitionOverlap = 32; // 0x20

/**
 * <p>
 * @attr description
 * Reference to a style resource holding
 * the set of window animations to use, which can be
 * any of the attributes defined by
 * {@link android.R.styleable#WindowAnimation}.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:windowAnimationStyle
 */

public static final int Window_windowAnimationStyle = 8; // 0x8

/**
 * <p>
 * @attr description
 * Drawable to use as the overall window background.  As of
 * {@link android.os.Build.VERSION_CODES#HONEYCOMB}, this may
 * be a selector that uses state_accelerated to pick a non-solid
 * color when running on devices that can draw such a bitmap
 * with complex compositing on top at 60fps.
 * <p>There are a few special considerations to use when setting this
 * drawable:
 * <ul>
 * <li> This information will be used to infer the pixel format
 * for your window's surface.  If the drawable has any
 * non-opaque pixels, your window will be translucent
 * (32 bpp).
 * <li> If you want to draw the entire background
 * yourself, you should set this drawable to some solid
 * color that closely matches that background (so the
 * system's preview of your window will match), and
 * then in code manually set your window's background to
 * null so it will not be drawn.
 * </ul>
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:windowBackground
 */

public static final int Window_windowBackground = 1; // 0x1

/**
 * <p>
 * @attr description
 * Drawable to draw selectively within the inset areas when the windowBackground
 * has been set to null. This protects against seeing visual garbage in the
 * surface when the app has not drawn any content into this area. One example is
 * when the user is resizing a window of an activity in multi-window mode.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
 * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
 * "<code>#<i>aarrggbb</i></code>".
 *
 * @attr name android:windowBackgroundFallback
 */

public static final int Window_windowBackgroundFallback = 47; // 0x2f

/**
 * <p>
 * @attr description
 * Whether to clip window content to the outline of the window background.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowClipToOutline
 */

public static final int Window_windowClipToOutline = 39; // 0x27

/**
 * <p>
 * @attr description
 * Control whether a container should automatically close itself if
 * the user touches outside of it.  This only applies to activities
 * and dialogs.
 * <p>Note: this attribute will only be respected for applications
 * that are targeting {@link android.os.Build.VERSION_CODES#HONEYCOMB}
 * or later.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowCloseOnTouchOutside
 */

public static final int Window_windowCloseOnTouchOutside = 21; // 0x15

/**
 * <p>
 * @attr description
 * This Drawable is overlaid over the foreground of the Window's content area, usually
 * to place a shadow below the title.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:windowContentOverlay
 */

public static final int Window_windowContentOverlay = 6; // 0x6

/**
 * <p>
 * @attr description
 * Reference to a TransitionManager XML resource defining the desired
 * transitions between different window content.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:windowContentTransitionManager
 */

public static final int Window_windowContentTransitionManager = 27; // 0x1b

/**
 * <p>
 * @attr description
 * Flag indicating whether this window requests that content changes be performed
 * as scene changes with transitions. Corresponds to
 * {@link android.view.Window#FEATURE_CONTENT_TRANSITIONS}.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowContentTransitions
 */

public static final int Window_windowContentTransitions = 26; // 0x1a

/**
 * <p>
 * @attr description
 * Flag allowing you to disable the splash screen for a window. The default value is
 * false; if set to true, the system can never use the window's theme to show a splash
 * screen before your actual instance is shown to the user.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowDisablePreview
 */

public static final int Window_windowDisablePreview = 12; // 0xc

/**
 * <p>
 * @attr description
 * Flag indicating whether this Window is responsible for drawing the background for the
 * system bars. If true and the window is not floating, the system bars are drawn with a
 * transparent background and the corresponding areas in this window are filled with the
 * colors specified in {@link android.R.attr#statusBarColor} and
 * {@link android.R.attr#navigationBarColor}. Corresponds to
 * {@link android.view.WindowManager.LayoutParams#FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS}.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowDrawsSystemBarBackgrounds
 */

public static final int Window_windowDrawsSystemBarBackgrounds = 34; // 0x22

/**
 * <p>
 * @attr description
 * Elevation to use for the window.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 *
 * @attr name android:windowElevation
 */

public static final int Window_windowElevation = 38; // 0x26

/**
 * <p>
 * @attr description
 * Flag indicating that this window should allow touches to be split
 * across other windows that also support split touch.
 * The default value is true for applications with a targetSdkVersion
 * of Honeycomb or newer; false otherwise.
 * When this flag is false, the first pointer that goes down determines
 * the window to which all subsequent touches go until all pointers go up.
 * When this flag is true, each pointer (not necessarily the first) that
 * goes down determines the window to which all subsequent touches of that
 * pointer will go until that pointers go up thereby enabling touches
 * with multiple pointers to be split across multiple windows.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowEnableSplitTouch
 */

public static final int Window_windowEnableSplitTouch = 18; // 0x12

/**
 * <p>
 * @attr description
 * Reference to a Transition XML resource defining the desired Transition
 * used to move Views into the initial Window's content Scene. Corresponds to
 * {@link android.view.Window#setEnterTransition(android.transition.Transition)}.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:windowEnterTransition
 */

public static final int Window_windowEnterTransition = 28; // 0x1c

/**
 * <p>
 * @attr description
 * Reference to a Transition XML resource defining the desired Transition
 * used to move Views out of the Window's content Scene when launching a new Activity.
 * Corresponds to
 * {@link android.view.Window#setExitTransition(android.transition.Transition)}.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:windowExitTransition
 */

public static final int Window_windowExitTransition = 29; // 0x1d

/**
 * <p>
 * @attr description
 * Drawable to use as a frame around the window.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:windowFrame
 */

public static final int Window_windowFrame = 2; // 0x2

/**
 * <p>
 * @attr description
 * Flag indicating whether this window should fill the entire screen.  Corresponds
 * to {@link android.view.WindowManager.LayoutParams#FLAG_FULLSCREEN}.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowFullscreen
 */

public static final int Window_windowFullscreen = 9; // 0x9

/**
 * <p>
 * @attr description
 * Flag indicating whether this is a floating window.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowIsFloating
 */

public static final int Window_windowIsFloating = 4; // 0x4

/**
 * <p>
 * @attr description
 * Flag indicating whether this is a translucent window. If this attribute is unset (but
 * not if set to false), the window might still be considered translucent, if
 * windowSwipeToDismiss is set to true.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowIsTranslucent
 */

public static final int Window_windowIsTranslucent = 5; // 0x5

/**
 * <p>
 * @attr description
 * Controls how the window is laid out if there is a {@code DisplayCutout}.
 * <p>
 * Defaults to {@code default}.
 * <p>
 * See also
 * {@link android.view.WindowManager.LayoutParams#layoutInDisplayCutoutMode
 * WindowManager.LayoutParams.layoutInDisplayCutoutMode},
 * {@link android.view.WindowManager.LayoutParams#LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT},
 * {@link android.view.WindowManager.LayoutParams#LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES},
 * {@link android.view.WindowManager.LayoutParams#LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER},
 * and {@link android.view.DisplayCutout DisplayCutout}
 *
 * <p>Must be one of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>default</td><td>0</td><td><p>
 * The window is allowed to extend into the <code>DisplayCutout</code> area, only if
 * the <code>DisplayCutout</code> is fully contained within a system bar. Otherwise, the
 * window is laid out such that it does not overlap with the <code>DisplayCutout</code>
 * area.
 * <p>
 * Corresponds to <code>LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT</code>.</td></tr>
 * <tr><td>never</td><td>2</td><td><p>
 * The window is never allowed to overlap with the <code>DisplayCutout</code> area.
 * <p>
 * This should be used with windows that transiently set
 * <code>SYSTEM_UI_FLAG_FULLSCREEN</code> to avoid a relayout of the window when the
 * flag is set or cleared.
 * <p>
 * Corresponds to <code>LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER</code>.</td></tr>
 * <tr><td>shortEdges</td><td>1</td><td><p>
 * The window is always allowed to extend into the <code>DisplayCutout</code> areas on the
 * short edges of the screen even if fullscreen or in landscape.
 * The window will never extend into a <code>DisplayCutout</code> area on the long edges of
 * the screen.
 * <p>
 * The window must make sure that no important content overlaps with the
 * <code>DisplayCutout</code>.
 * <p>
 * Corresponds to <code>LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES</code>.</td></tr>
 * </table>
 *
 * @attr name android:windowLayoutInDisplayCutoutMode
 */

public static final int Window_windowLayoutInDisplayCutoutMode = 51; // 0x33

/**
 * <p>
 * @attr description
 * If set, the navigation bar will be drawn such that it is compatible with a light
 * navigation bar background.
 * <p>For this to take effect, the window must be drawing the system bar backgrounds with
 * {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the navigation bar must not
 * have been requested to be translucent with
 * {@link android.R.attr#windowTranslucentNavigation}.
 * Corresponds to setting {@link android.view.View#SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR} on
 * the decor view.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowLightNavigationBar
 */

public static final int Window_windowLightNavigationBar = 49; // 0x31

/**
 * <p>
 * @attr description
 * If set, the status bar will be drawn such that it is compatible with a light
 * status bar background.
 * <p>For this to take effect, the window must be drawing the system bar backgrounds with
 * {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the status bar must not
 * have been requested to be translucent with
 * {@link android.R.attr#windowTranslucentStatus}.
 * Corresponds to setting {@link android.view.View#SYSTEM_UI_FLAG_LIGHT_STATUS_BAR} on
 * the decor view.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowLightStatusBar
 */

public static final int Window_windowLightStatusBar = 46; // 0x2e

/**
 * <p>
 * @attr description
 * The minimum width the window is allowed to be, along the major
 * axis of the screen.  That is, when in landscape.  Can be either
 * an absolute dimension or a fraction of the screen size in that
 * dimension.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:windowMinWidthMajor
 */

public static final int Window_windowMinWidthMajor = 19; // 0x13

/**
 * <p>
 * @attr description
 * The minimum width the window is allowed to be, along the minor
 * axis of the screen.  That is, when in portrait.  Can be either
 * an absolute dimension or a fraction of the screen size in that
 * dimension.
 *
 * <p>May be a dimension value, which is a floating point number appended with a
 * unit such as "<code>14.5sp</code>".
 * Available units are: px (pixels), dp (density-independent pixels),
 * sp (scaled pixels based on preferred font size), in (inches), and
 * mm (millimeters).
 * <p>May be a fractional value, which is a floating point number appended with
 * either % or %p, such as "<code>14.5%</code>".
 * The % suffix always means a percentage of the base size;
 * the optional %p suffix provides a size relative to some parent container.
 *
 * @attr name android:windowMinWidthMinor
 */

public static final int Window_windowMinWidthMinor = 20; // 0x14

/**
 * <p>
 * @attr description
 * Flag indicating that this window should not be displayed at all.
 * The default value is false; if set to true, and this window is
 * the main window of an Activity, then it will never actually
 * be added to the window manager.  This means that your activity
 * must immediately quit without waiting for user interaction,
 * because there will be no such interaction coming.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowNoDisplay
 */

public static final int Window_windowNoDisplay = 10; // 0xa

/**
 * <p>
 * @attr description
 * Flag indicating whether there should be no title on this window.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowNoTitle
 */

public static final int Window_windowNoTitle = 3; // 0x3

/**
 * <p>
 * @attr description
 * Flag indicating whether this window should extend into overscan region.  Corresponds
 * to {@link android.view.WindowManager.LayoutParams#FLAG_LAYOUT_IN_OVERSCAN}.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowOverscan
 */

public static final int Window_windowOverscan = 22; // 0x16

/**
 * <p>
 * @attr description
 * Reference to a Transition XML resource defining the desired Transition
 * used to move Views in to the scene when returning from a previously-started Activity.
 * Corresponds to
 * {@link android.view.Window#setReenterTransition(android.transition.Transition)}.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:windowReenterTransition
 */

public static final int Window_windowReenterTransition = 41; // 0x29

/**
 * <p>
 * @attr description
 * Reference to a Transition XML resource defining the desired Transition
 * used to move Views out of the scene when the Window is
 * preparing to close. Corresponds to
 * {@link android.view.Window#setReturnTransition(android.transition.Transition)}.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:windowReturnTransition
 */

public static final int Window_windowReturnTransition = 40; // 0x28

/**
 * <p>
 * @attr description
 * Reference to a Transition XML resource defining the desired Transition
 * used to move shared elements transferred into the Window's initial content Scene.
 * Corresponds to {@link android.view.Window#setSharedElementEnterTransition(
 * android.transition.Transition)}.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:windowSharedElementEnterTransition
 */

public static final int Window_windowSharedElementEnterTransition = 30; // 0x1e

/**
 * <p>
 * @attr description
 * Reference to a Transition XML resource defining the desired Transition
 * used when starting a new Activity to move shared elements prior to transferring
 * to the called Activity.
 * Corresponds to {@link android.view.Window#setSharedElementExitTransition(
 * android.transition.Transition)}.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:windowSharedElementExitTransition
 */

public static final int Window_windowSharedElementExitTransition = 31; // 0x1f

/**
 * <p>
 * @attr description
 * Reference to a Transition XML resource defining the desired Transition
 * used for shared elements transferred back to a calling Activity.
 * Corresponds to {@link android.view.Window#setSharedElementReenterTransition(
 * android.transition.Transition)}.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:windowSharedElementReenterTransition
 */

public static final int Window_windowSharedElementReenterTransition = 43; // 0x2b

/**
 * <p>
 * @attr description
 * Reference to a Transition XML resource defining the desired Transition
 * used to move shared elements transferred back to a calling Activity.
 * Corresponds to {@link android.view.Window#setSharedElementReturnTransition(
 * android.transition.Transition)}.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:windowSharedElementReturnTransition
 */

public static final int Window_windowSharedElementReturnTransition = 42; // 0x2a

/**
 * <p>
 * @attr description
 * Indicates whether or not shared elements should use an overlay
 * during transitions. The default value is true.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowSharedElementsUseOverlay
 */

public static final int Window_windowSharedElementsUseOverlay = 44; // 0x2c

/**
 * <p>
 * @attr description
 * Flag indicating that this window's background should be the
 * user's current wallpaper.  Corresponds
 * to {@link android.view.WindowManager.LayoutParams#FLAG_SHOW_WALLPAPER}.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowShowWallpaper
 */

public static final int Window_windowShowWallpaper = 14; // 0xe

/**
 * <p>
 * @attr description
 * Defines the default soft input state that this window would
 * like when it is displayed.  Corresponds
 * to {@link android.view.WindowManager.LayoutParams#softInputMode}.
 *
 * <p>Must be one or more (separated by '|') of the following constant values.</p>
 * <table>
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <colgroup align="left" />
 * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
 * <tr><td>adjustNothing</td><td>30</td><td>Don't resize <em>or</em> pan the window to make room for the
 * soft input area; the window is never adjusted for it.</td></tr>
 * <tr><td>adjustPan</td><td>20</td><td>Don't resize the window to make room for the soft input area;
 * instead pan the contents of the window as focus moves inside
 * of it so that the user can see what they are typing.  This is
 * generally less desireable than panning because the user may
 * need to close the input area to get at and interact with
 * parts of the window.</td></tr>
 * <tr><td>adjustResize</td><td>10</td><td>Always resize the window: the content area of the window is
 * reduced to make room for the soft input area.</td></tr>
 * <tr><td>adjustUnspecified</td><td>0</td><td>The window resize/pan adjustment has not been specified,
 * the system will automatically select between resize and pan
 * modes, depending
 * on whether the content of the window has any layout views
 * that can scroll their contents.  If there is such a view,
 * then the window will be resized, with the assumption being
 * that the resizeable area can be reduced to make room for
 * the input UI.</td></tr>
 * <tr><td>stateAlwaysHidden</td><td>3</td><td>Always make the soft input area hidden when this window
 * has input focus.</td></tr>
 * <tr><td>stateAlwaysVisible</td><td>5</td><td>Always make the soft input area visible when this window
 * has input focus.</td></tr>
 * <tr><td>stateHidden</td><td>2</td><td>Make the soft input area hidden when normally appropriate
 * (when the user is navigating forward to your window).</td></tr>
 * <tr><td>stateUnchanged</td><td>1</td><td>Leave the soft input window as-is, in whatever state it
 * last was.</td></tr>
 * <tr><td>stateUnspecified</td><td>0</td><td>Not specified, use what the system thinks is best.  This
 * is the default.</td></tr>
 * <tr><td>stateVisible</td><td>4</td><td>Make the soft input area visible when normally appropriate
 * (when the user is navigating forward to your window).</td></tr>
 * </table>
 *
 * @attr name android:windowSoftInputMode
 */

public static final int Window_windowSoftInputMode = 13; // 0xd

/**
 * <p>
 * @attr description
 * Reference to a drawable to be used as the splash screen content of the window. This
 * drawable will be placed on top of the {@link android.R.attr#windowBackground} with its
 * bounds inset by the system bars. If the drawable should not be inset by the system
 * bars, use a fullscreen theme.
 * <p>
 * Note that even if no splashscreen content is set on the theme, the system may still
 * show a splash screen using the other attributes on the theme, like the
 * {@link android.R.attr#windowBackground}.
 *
 * <p>May be a reference to another resource, in the form
 * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
 * attribute in the form
 * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
 *
 * @attr name android:windowSplashscreenContent
 */

public static final int Window_windowSplashscreenContent = 48; // 0x30

/**
 * <p>
 * @attr description
 * Flag to indicate that a window can be swiped away to be dismissed.
 * Corresponds to {@link android.view.Window#FEATURE_SWIPE_TO_DISMISS}. It will also
 * dynamically change translucency of the window, if the windowIsTranslucent is not set.
 * If windowIsTranslucent is set (to either true or false) it will obey that setting.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowSwipeToDismiss
 */

public static final int Window_windowSwipeToDismiss = 25; // 0x19

/**
 * <p>
 * @attr description
 * The duration, in milliseconds, of the window background fade duration
 * when transitioning into or away from an Activity when called with an
 * Activity Transition. Corresponds to
 * {@link android.view.Window#setTransitionBackgroundFadeDuration(long)}.
 *
 * <p>May be an integer value, such as "<code>100</code>".
 *
 * @attr name android:windowTransitionBackgroundFadeDuration
 */

public static final int Window_windowTransitionBackgroundFadeDuration = 37; // 0x25

/**
 * <p>
 * @attr description
 * Flag indicating whether this window requests a translucent navigation bar.  Corresponds
 * to {@link android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_NAVIGATION}.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowTranslucentNavigation
 */

public static final int Window_windowTranslucentNavigation = 24; // 0x18

/**
 * <p>
 * @attr description
 * Flag indicating whether this window requests a translucent status bar.  Corresponds
 * to {@link android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_STATUS}.
 *
 * <p>May be a boolean value, such as "<code>true</code>" or
 * "<code>false</code>".
 *
 * @attr name android:windowTranslucentStatus
 */

public static final int Window_windowTranslucentStatus = 23; // 0x17
}

/** @apiSince 21 */

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class transition {

public transition() { throw new RuntimeException("Stub!"); }

/**
 * A transition that moves views in or out of the scene to or from the edges when
 * a view visibility changes.
 * @apiSince 21
 */

public static final int explode = 17760259; // 0x10f0003

/**
 * A transition that fades views in and out.
 * @apiSince 21
 */

public static final int fade = 17760258; // 0x10f0002

/**
 * A transition that moves and resizes a view
 * @apiSince 21
 */

public static final int move = 17760257; // 0x10f0001

/**
 * Used for Activity Transitions, this transition indicates that no Transition
 * should be used.
 * @apiSince 21
 */

public static final int no_transition = 17760256; // 0x10f0000

/**
 * A transition that moves views in or out of the scene to or from the bottom edge when
 * a view visibility changes.
 * @apiSince 21
 */

public static final int slide_bottom = 17760260; // 0x10f0004

/**
 * A transition that moves views in or out of the scene to or from the left edge when
 * a view visibility changes.
 * @apiSince 21
 */

public static final int slide_left = 17760263; // 0x10f0007

/**
 * A transition that moves views in or out of the scene to or from the right edge when
 * a view visibility changes.
 * @apiSince 21
 */

public static final int slide_right = 17760262; // 0x10f0006

/**
 * A transition that moves views in or out of the scene to or from the top edge when
 * a view visibility changes.
 * @apiSince 21
 */

public static final int slide_top = 17760261; // 0x10f0005
}

/** @apiSince 1 */

@SuppressWarnings({"unchecked", "deprecation", "all"})
public static final class xml {

public xml() { throw new RuntimeException("Stub!"); }
}

}

