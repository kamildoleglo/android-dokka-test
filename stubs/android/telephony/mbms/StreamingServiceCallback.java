/*
 * Copyright (C) 2016 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package android.telephony.mbms;


/**
 * A callback class for use when the application is actively streaming content. The middleware
 * will provide updates on the status of the stream via this callback.
 * @apiSince 28
 */

@SuppressWarnings({"unchecked", "deprecation", "all"})
public class StreamingServiceCallback {

public StreamingServiceCallback() { throw new RuntimeException("Stub!"); }

/**
 * Called by the middleware when it has detected an error condition in this stream. The
 * possible error codes are listed in {@link android.telephony.mbms.MbmsErrors MbmsErrors}.
 * @param errorCode The error code.
 * Value is {@link android.telephony.mbms.MbmsErrors#ERROR_NO_UNIQUE_MIDDLEWARE}, {@link android.telephony.mbms.MbmsErrors#ERROR_MIDDLEWARE_LOST}, {@link android.telephony.mbms.MbmsErrors#ERROR_MIDDLEWARE_NOT_BOUND}, {@link android.telephony.mbms.MbmsErrors.GeneralErrors#ERROR_MIDDLEWARE_NOT_YET_READY}, {@link android.telephony.mbms.MbmsErrors.GeneralErrors#ERROR_OUT_OF_MEMORY}, {@link android.telephony.mbms.MbmsErrors.GeneralErrors#ERROR_MIDDLEWARE_TEMPORARILY_UNAVAILABLE}, {@link android.telephony.mbms.MbmsErrors.GeneralErrors#ERROR_IN_E911}, {@link android.telephony.mbms.MbmsErrors.GeneralErrors#ERROR_NOT_CONNECTED_TO_HOME_CARRIER_LTE}, {@link android.telephony.mbms.MbmsErrors.GeneralErrors#ERROR_UNABLE_TO_READ_SIM}, {@link android.telephony.mbms.MbmsErrors.GeneralErrors#ERROR_CARRIER_CHANGE_NOT_ALLOWED}, {@link android.telephony.mbms.MbmsErrors.StreamingErrors#ERROR_CONCURRENT_SERVICE_LIMIT_REACHED}, {@link android.telephony.mbms.MbmsErrors.StreamingErrors#ERROR_UNABLE_TO_START_SERVICE}, or {@link android.telephony.mbms.MbmsErrors.StreamingErrors#ERROR_DUPLICATE_START_STREAM}
 * @param message A human-readable message generated by the middleware for debugging purposes.
 
 * This value may be {@code null}.
 * @apiSince 28
 */

public void onError(int errorCode, @androidx.annotation.Nullable java.lang.String message) { throw new RuntimeException("Stub!"); }

/**
 * Called to indicate this stream has changed state.
 *
 * See {@link android.telephony.mbms.StreamingService#STATE_STOPPED StreamingService#STATE_STOPPED}, {@link android.telephony.mbms.StreamingService#STATE_STARTED StreamingService#STATE_STARTED}
 * and {@link android.telephony.mbms.StreamingService#STATE_STALLED StreamingService#STATE_STALLED}.
 
 * @param state Value is {@link android.telephony.mbms.StreamingService#STATE_STOPPED}, {@link android.telephony.mbms.StreamingService#STATE_STARTED}, or {@link android.telephony.mbms.StreamingService#STATE_STALLED}
 
 * @param reason Value is {@link android.telephony.mbms.StreamingService#REASON_BY_USER_REQUEST}, {@link android.telephony.mbms.StreamingService#REASON_END_OF_SESSION}, {@link android.telephony.mbms.StreamingService#REASON_FREQUENCY_CONFLICT}, {@link android.telephony.mbms.StreamingService#REASON_OUT_OF_MEMORY}, {@link android.telephony.mbms.StreamingService#REASON_NOT_CONNECTED_TO_HOMECARRIER_LTE}, {@link android.telephony.mbms.StreamingService#REASON_LEFT_MBMS_BROADCAST_AREA}, or {@link android.telephony.mbms.StreamingService#REASON_NONE}
 * @apiSince 28
 */

public void onStreamStateUpdated(int state, int reason) { throw new RuntimeException("Stub!"); }

/**
 * Called to indicate the mpd of a the stream has changed.
 *
 * Depending on the Dash Client it may need to be either reset
 * (less drastic, but original spec didn't allow mpd to change so not
 * always supported) or restarted.
 *
 * This may be called when a looping stream hits the end or
 * when parameters have changed to account for time drift.
 * @apiSince 28
 */

public void onMediaDescriptionUpdated() { throw new RuntimeException("Stub!"); }

/**
 * Broadcast Signal Strength updated.
 *
 * This signal strength is the BROADCAST signal strength which,
 * depending on technology in play and it's deployment, may be
 * stronger or weaker than the traditional UNICAST signal
 * strength.  It a simple int from 0-4 for valid levels or
 * {@link #SIGNAL_STRENGTH_UNAVAILABLE} if broadcast is not available
 * for this service due to timing, geography or popularity.
 * @apiSince 28
 */

public void onBroadcastSignalStrengthUpdated(int signalStrength) { throw new RuntimeException("Stub!"); }

/**
 * Notify of bcast/unicast method being used.
 *
 * This is intended to be informational.  Indicates
 * whether we're able to use cell broadcast or have
 * had to fallback to unicast for this stream.
 *
 * This must be called once at the beginning of the stream
 * around the same time as we change to STATE_STARTED, but
 * strict ordering is not specified.  It must be called
 * again if we change modes, but if that doesn't happen
 * the callback won't be used again.
 *
 * See {@link android.telephony.mbms.StreamingService#BROADCAST_METHOD StreamingService#BROADCAST_METHOD} and
 * {@link android.telephony.mbms.StreamingService#UNICAST_METHOD StreamingService#UNICAST_METHOD}
 * @apiSince 28
 */

public void onStreamMethodUpdated(int methodType) { throw new RuntimeException("Stub!"); }

/**
 * Indicates broadcast signal strength is not available for this service.
 *
 * This may be due to the service no longer being available due to geography
 * or timing (end of service) or because lack of demand has caused the service
 * to be delivered via unicast.
 * @apiSince 28
 */

public static final int SIGNAL_STRENGTH_UNAVAILABLE = -1; // 0xffffffff
}

