/*
 * Copyright (C) 2015 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package android.view;

import android.os.Bundle;
import android.view.autofill.AutofillId;
import android.view.autofill.AutofillValue;

/**
 * <p><code>ViewStructure</code> is a container for storing additional
 * per-view data generated by {@link android.view.View#onProvideStructure View#onProvideStructure} and {@link android.view.View#onProvideAutofillStructure View#onProvideAutofillStructure}.
 *
 * <p>To learn more about using Autofill in your app, read the
 * <a href="/guide/topics/text/autofill">Autofill Framework</a> guides.
 *
 * @apiSince 23
 */

@SuppressWarnings({"unchecked", "deprecation", "all"})
public abstract class ViewStructure {

public ViewStructure() { throw new RuntimeException("Stub!"); }

/**
 * Set the identifier for this view.
 *
 * @param id The view's identifier, as per {@link android.view.View#getId View#getId}.
 * @param packageName The package name of the view's identifier, or null if there is none.
 * @param typeName The type name of the view's identifier, or null if there is none.
 * @param entryName The entry name of the view's identifier, or null if there is none.
 * @apiSince 23
 */

public abstract void setId(int id, java.lang.String packageName, java.lang.String typeName, java.lang.String entryName);

/**
 * Set the basic dimensions of this view.
 *
 * @param left The view's left position, in pixels relative to its parent's left edge.
 * @param top The view's top position, in pixels relative to its parent's top edge.
 * @param scrollX How much the view's x coordinate space has been scrolled, in pixels.
 * @param scrollY How much the view's y coordinate space has been scrolled, in pixels.
 * @param width The view's visible width, in pixels.  This is the width visible on screen,
 * not the total data width of a scrollable view.
 * @param height The view's visible height, in pixels.  This is the height visible on
 * screen, not the total data height of a scrollable view.
 * @apiSince 23
 */

public abstract void setDimens(int left, int top, int scrollX, int scrollY, int width, int height);

/**
 * Set the transformation matrix associated with this view, as per
 * {@link android.view.View#getMatrix View#getMatrix}, or null if there is none.
 * @apiSince 23
 */

public abstract void setTransformation(android.graphics.Matrix matrix);

/**
 * Set the visual elevation (shadow) of the view, as per
 * {@link android.view.View#getZ View#getZ}.  Note this is <em>not</em> related
 * to the physical Z-ordering of this view relative to its other siblings (that is how
 * they overlap when drawing), it is only the visual representation for shadowing.
 * @apiSince 23
 */

public abstract void setElevation(float elevation);

/**
 * Set an alpha transformation that is applied to this view, as per
 * {@link android.view.View#getAlpha View#getAlpha}.  Value ranges from 0
 * (completely transparent) to 1 (completely opaque); the default is 1, which means
 * no transformation.
 * @apiSince 23
 */

public abstract void setAlpha(float alpha);

/**
 * Set the visibility state of this view, as per
 * {@link android.view.View#getVisibility View#getVisibility}.
 * @apiSince 23
 */

public abstract void setVisibility(int visibility);

/**
 * Set the enabled state of this view, as per {@link android.view.View#isEnabled View#isEnabled}.
 * @apiSince 23
 */

public abstract void setEnabled(boolean state);

/**
 * Set the clickable state of this view, as per {@link android.view.View#isClickable View#isClickable}.
 * @apiSince 23
 */

public abstract void setClickable(boolean state);

/**
 * Set the long clickable state of this view, as per
 * {@link android.view.View#isLongClickable View#isLongClickable}.
 * @apiSince 23
 */

public abstract void setLongClickable(boolean state);

/**
 * Set the context clickable state of this view, as per
 * {@link android.view.View#isContextClickable View#isContextClickable}.
 * @apiSince 23
 */

public abstract void setContextClickable(boolean state);

/**
 * Set the focusable state of this view, as per {@link android.view.View#isFocusable View#isFocusable}.
 * @apiSince 23
 */

public abstract void setFocusable(boolean state);

/**
 * Set the focused state of this view, as per {@link android.view.View#isFocused View#isFocused}.
 * @apiSince 23
 */

public abstract void setFocused(boolean state);

/**
 * Set the accessibility focused state of this view, as per
 * {@link android.view.View#isAccessibilityFocused View#isAccessibilityFocused}.
 * @apiSince 23
 */

public abstract void setAccessibilityFocused(boolean state);

/**
 * Set the checkable state of this view, such as whether it implements the
 * {@link android.widget.Checkable} interface.
 * @apiSince 23
 */

public abstract void setCheckable(boolean state);

/**
 * Set the checked state of this view, such as
 * {@link android.widget.Checkable#isChecked Checkable.isChecked()}.
 * @apiSince 23
 */

public abstract void setChecked(boolean state);

/**
 * Set the selected state of this view, as per {@link android.view.View#isSelected View#isSelected}.
 * @apiSince 23
 */

public abstract void setSelected(boolean state);

/**
 * Set the activated state of this view, as per {@link android.view.View#isActivated View#isActivated}.
 * @apiSince 23
 */

public abstract void setActivated(boolean state);

/**
 * Set the opaque state of this view, as per {@link android.view.View#isOpaque View#isOpaque}.
 * @apiSince 26
 */

public abstract void setOpaque(boolean opaque);

/**
 * Set the class name of the view, as per
 * {@link android.view.View#getAccessibilityClassName View#getAccessibilityClassName}.
 * @apiSince 23
 */

public abstract void setClassName(java.lang.String className);

/**
 * Set the content description of the view, as per
 * {@link android.view.View#getContentDescription View#getContentDescription}.
 * @apiSince 23
 */

public abstract void setContentDescription(java.lang.CharSequence contentDescription);

/**
 * Set the text that is associated with this view.  There is no selection
 * associated with the text.  The text may have style spans to supply additional
 * display and semantic information.
 * @apiSince 23
 */

public abstract void setText(java.lang.CharSequence text);

/**
 * Like {@link #setText(java.lang.CharSequence)} but with an active selection
 * extending from <var>selectionStart</var> through <var>selectionEnd</var>.
 * @apiSince 23
 */

public abstract void setText(java.lang.CharSequence text, int selectionStart, int selectionEnd);

/**
 * Explicitly set default global style information for text that was previously set with
 * {@link #setText}.
 *
 * @param size The size, in pixels, of the text.
 * @param fgColor The foreground color, packed as 0xAARRGGBB.
 * @param bgColor The background color, packed as 0xAARRGGBB.
 * @param style Style flags, as defined by {@link android.app.assist.AssistStructure.ViewNode}.
 * @apiSince 23
 */

public abstract void setTextStyle(float size, int fgColor, int bgColor, int style);

/**
 * Set line information for test that was previously supplied through
 * {@link #setText(java.lang.CharSequence)}.  This provides the line breaking of the text as it
 * is shown on screen.  This function takes ownership of the provided arrays; you should
 * not make further modification to them.
 *
 * @param charOffsets The offset in to {@link #setText} where a line starts.
 * @param baselines The baseline where the line is drawn on screen.
 * @apiSince 23
 */

public abstract void setTextLines(int[] charOffsets, int[] baselines);

/**
 * Sets the identifier used to set the text associated with this view.
 *
 * <p>Should only be set when the node is used for autofill purposes - it will be ignored
 * when used for Assist.
 
 * @param entryName This value must never be {@code null}.
 * @apiSince 28
 */

public void setTextIdEntry(@androidx.annotation.NonNull java.lang.String entryName) { throw new RuntimeException("Stub!"); }

/**
 * Set optional hint text associated with this view; this is for example the text that is
 * shown by an EditText when it is empty to indicate to the user the kind of text to input.
 * @apiSince 23
 */

public abstract void setHint(java.lang.CharSequence hint);

/**
 * Retrieve the last {@link #setText(java.lang.CharSequence)}.
 * @apiSince 23
 */

public abstract java.lang.CharSequence getText();

/**
 * Retrieve the last selection start set by {@link #setText(java.lang.CharSequence,int,int)}.
 * @apiSince 23
 */

public abstract int getTextSelectionStart();

/**
 * Retrieve the last selection end set by {@link #setText(java.lang.CharSequence,int,int)}.
 * @apiSince 23
 */

public abstract int getTextSelectionEnd();

/**
 * Retrieve the last hint set by {@link #setHint}.
 * @apiSince 23
 */

public abstract java.lang.CharSequence getHint();

/**
 * Get extra data associated with this view structure; the returned Bundle is mutable,
 * allowing you to view and modify its contents.  Keys placed in the Bundle should use
 * an appropriate namespace prefix (such as com.google.MY_KEY) to avoid conflicts.
 * @apiSince 23
 */

public abstract android.os.Bundle getExtras();

/**
 * Returns true if {@link #getExtras} has been used to create extra content.
 * @apiSince 23
 */

public abstract boolean hasExtras();

/**
 * Set the number of children of this view, which defines the range of indices you can
 * use with {@link #newChild} and {@link #asyncNewChild}.  Calling this method again
 * resets all of the child state of the view, removing any children that had previously
 * been added.
 * @apiSince 23
 */

public abstract void setChildCount(int num);

/**
 * Add to this view's child count.  This increases the current child count by
 * <var>num</var> children beyond what was last set by {@link #setChildCount}
 * or {@link #addChildCount}.  The index at which the new child starts in the child
 * array is returned.
 *
 * @param num The number of new children to add.
 * @return Returns the index in the child array at which the new children start.
 * @apiSince 23
 */

public abstract int addChildCount(int num);

/**
 * Return the child count as set by {@link #setChildCount}.
 * @apiSince 23
 */

public abstract int getChildCount();

/**
 * Create a new child {@link android.view.ViewStructure ViewStructure} in this view, putting into the list of
 * children at <var>index</var>.
 *
 * <p><b>NOTE: </b>you must pre-allocate space for the child first, by calling either
 * {@link #addChildCount(int)} or {@link #setChildCount(int)}.
 *
 * @return Returns an fresh {@link android.view.ViewStructure ViewStructure} ready to be filled in.
 * @apiSince 23
 */

public abstract android.view.ViewStructure newChild(int index);

/**
 * Like {@link #newChild}, but allows the caller to asynchronously populate the returned
 * child.  It can transfer the returned {@link android.view.ViewStructure ViewStructure} to another thread for it
 * to build its content (and children etc).  Once done, some thread must call
 * {@link #asyncCommit} to tell the containing {@link android.view.ViewStructure ViewStructure} that the async
 * population is done.
 *
 * <p><b>NOTE: </b>you must pre-allocate space for the child first, by calling either
 * {@link #addChildCount(int)} or {@link #setChildCount(int)}.
 *
 * @return Returns an fresh {@link android.view.ViewStructure ViewStructure} ready to be filled in.
 * @apiSince 23
 */

public abstract android.view.ViewStructure asyncNewChild(int index);

/**
 * Gets the {@link android.view.autofill.AutofillId AutofillId} associated with this node.
 
 * @return This value may be {@code null}.
 * @apiSince 26
 */

@androidx.annotation.Nullable
public abstract android.view.autofill.AutofillId getAutofillId();

/**
 * Sets the {@link android.view.autofill.AutofillId AutofillId} associated with this node.
 
 * @param id This value must never be {@code null}.
 * @apiSince 26
 */

public abstract void setAutofillId(@androidx.annotation.NonNull android.view.autofill.AutofillId id);

/**
 * Sets the {@link android.view.autofill.AutofillId AutofillId} for this virtual node.
 *
 * @param parentId id of the parent node.
 * This value must never be {@code null}.
 * @param virtualId an opaque ID to the Android System; it's the same id used on
 *            {@link android.view.View#autofill(android.util.SparseArray) View#autofill(android.util.SparseArray)}.
 * @apiSince 26
 */

public abstract void setAutofillId(@androidx.annotation.NonNull android.view.autofill.AutofillId parentId, int virtualId);

/**
 * Sets the {@link android.view.View#getAutofillType() View#getAutofillType()} that can be used to autofill this node.
 
 * @param type Value is {@link android.view.View#AUTOFILL_TYPE_NONE}, {@link android.view.View#AUTOFILL_TYPE_TEXT}, {@link android.view.View#AUTOFILL_TYPE_TOGGLE}, {@link android.view.View#AUTOFILL_TYPE_LIST}, or {@link android.view.View#AUTOFILL_TYPE_DATE}
 * @apiSince 26
 */

public abstract void setAutofillType(int type);

/**
 * Sets the a hints that helps the autofill service to select the appropriate data to fill the
 * view.
 
 * @param hint This value may be {@code null}.
 * @apiSince 26
 */

public abstract void setAutofillHints(@androidx.annotation.Nullable java.lang.String[] hint);

/**
 * Sets the {@link android.view.autofill.AutofillValue AutofillValue} representing the current value of this node.
 * @apiSince 26
 */

public abstract void setAutofillValue(android.view.autofill.AutofillValue value);

/**
 * Sets the options that can be used to autofill this node.
 *
 * <p>Typically used by nodes whose {@link android.view.View#getAutofillType() View#getAutofillType()} is a list to indicate the
 * meaning of each possible value in the list.
 * @apiSince 26
 */

public abstract void setAutofillOptions(java.lang.CharSequence[] options);

/**
 * Sets the {@link android.view.View#setImportantForAutofill(int) View#setImportantForAutofill(int)} of the
 * view associated with this node.
 
 * @param mode Value is {@link android.view.View#IMPORTANT_FOR_AUTOFILL_AUTO}, {@link android.view.View#IMPORTANT_FOR_AUTOFILL_YES}, {@link android.view.View#IMPORTANT_FOR_AUTOFILL_NO}, {@link android.view.View#IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS}, or {@link android.view.View#IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS}
 * @apiSince 28
 */

public void setImportantForAutofill(int mode) { throw new RuntimeException("Stub!"); }

/**
 * Sets the {@link android.text.InputType} bits of this node.
 *
 * @param inputType inputType bits as defined by {@link android.text.InputType}.
 * @apiSince 26
 */

public abstract void setInputType(int inputType);

/**
 * Sets whether the data on this node is sensitive; if it is, then its content (text, autofill
 * value, etc..) is striped before calls to {@link
 * android.service.autofill.AutofillService#onFillRequest(android.service.autofill.FillRequest,
 * android.os.CancellationSignal, android.service.autofill.FillCallback)}.
 *
 * <p>By default, all nodes are assumed to be sensitive, and only nodes that does not have PII
 * (Personally Identifiable Information - sensitive data such as email addresses, credit card
 * numbers, passwords, etc...) should be marked as non-sensitive; a good rule of thumb is to
 * mark as non-sensitive nodes whose value were statically set from resources.
 *
 * <p>Notice that the content of even sensitive nodes are sent to the service (through the
 * {@link
 * android.service.autofill.AutofillService#onSaveRequest(android.service.autofill.SaveRequest,
 * android.service.autofill.SaveCallback)} call) when the user consented to save
 * thedata, so it is important to set the content of sensitive nodes as well, but mark them as
 * sensitive.
 *
 * <p>Should only be set when the node is used for autofill purposes - it will be ignored
 * when used for Assist.
 * @apiSince 26
 */

public abstract void setDataIsSensitive(boolean sensitive);

/**
 * Sets the minimum width in ems of the text associated with this view, when supported.
 *
 * <p>Should only be set when the node is used for autofill purposes - it will be ignored
 * when used for Assist.
 * @apiSince 28
 */

public void setMinTextEms(int minEms) { throw new RuntimeException("Stub!"); }

/**
 * Sets the maximum width in ems of the text associated with this view, when supported.
 *
 * <p>Should only be set when the node is used for autofill purposes - it will be ignored
 * when used for Assist.
 * @apiSince 28
 */

public void setMaxTextEms(int maxEms) { throw new RuntimeException("Stub!"); }

/**
 * Sets the maximum length of the text associated with this view, when supported.
 *
 * <p>Should only be set when the node is used for autofill purposes - it will be ignored
 * when used for Assist.
 * @apiSince 28
 */

public void setMaxTextLength(int maxLength) { throw new RuntimeException("Stub!"); }

/**
 * Call when done populating a {@link android.view.ViewStructure ViewStructure} returned by
 * {@link #asyncNewChild}.
 * @apiSince 23
 */

public abstract void asyncCommit();

/**
 * Sets the Web domain represented by this node.
 *
 * <p>Typically used when the view is a container for an HTML document.
 *
 * @param domain RFC 2396-compliant URI representing the domain.
 
 * This value may be {@code null}.
 * @apiSince 26
 */

public abstract void setWebDomain(@androidx.annotation.Nullable java.lang.String domain);

/**
 * Sets the the list of locales associated with this node.
 * @apiSince 26
 */

public abstract void setLocaleList(android.os.LocaleList localeList);

/**
 * Creates a new {@link android.view.ViewStructure.HtmlInfo.Builder HtmlInfo.Builder} for the given HTML tag.
 *
 * @param tagName name of the HTML tag.
 * This value must never be {@code null}.
 * @return a new builder.
 * @apiSince 26
 */

public abstract android.view.ViewStructure.HtmlInfo.Builder newHtmlInfoBuilder(@androidx.annotation.NonNull java.lang.String tagName);

/**
 * Sets the HTML properties of this node when it represents an HTML element.
 *
 * <p>Should only be set when the node is used for autofill purposes - it will be ignored
 * when used for assist.
 *
 * @param htmlInfo HTML properties.
 
 * This value must never be {@code null}.
 * @apiSince 26
 */

public abstract void setHtmlInfo(@androidx.annotation.NonNull android.view.ViewStructure.HtmlInfo htmlInfo);
/**
 * Simplified representation of the HTML properties of a node that represents an HTML element.
 * @apiSince 26
 */

@SuppressWarnings({"unchecked", "deprecation", "all"})
public abstract static class HtmlInfo {

public HtmlInfo() { throw new RuntimeException("Stub!"); }

/**
 * Gets the HTML tag.
 
 * @return This value will never be {@code null}.
 * @apiSince 26
 */

@androidx.annotation.NonNull
public abstract java.lang.String getTag();

/**
 * Gets the list of HTML attributes.
 *
 * @return list of key/value pairs; could contain pairs with the same keys.
 
 * This value may be {@code null}.
 * @apiSince 26
 */

@androidx.annotation.Nullable
public abstract java.util.List<android.util.Pair<java.lang.String,java.lang.String>> getAttributes();
/**
 * Builder for {@link android.view.ViewStructure.HtmlInfo HtmlInfo} objects.
 * @apiSince 26
 */

@SuppressWarnings({"unchecked", "deprecation", "all"})
public abstract static class Builder {

public Builder() { throw new RuntimeException("Stub!"); }

/**
 * Adds an HTML attribute.
 *
 * @param name name of the attribute.
 * This value must never be {@code null}.
 * @param value value of the attribute.
 * This value must never be {@code null}.
 * @return same builder, for chaining.
 * @apiSince 26
 */

public abstract android.view.ViewStructure.HtmlInfo.Builder addAttribute(@androidx.annotation.NonNull java.lang.String name, @androidx.annotation.NonNull java.lang.String value);

/**
 * Builds the {@link android.view.ViewStructure.HtmlInfo HtmlInfo} object.
 *
 * @return a new {@link android.view.ViewStructure.HtmlInfo HtmlInfo} instance.
 * @apiSince 26
 */

public abstract android.view.ViewStructure.HtmlInfo build();
}

}

}

